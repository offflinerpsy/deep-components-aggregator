---
description: "DEEP Unified Rule — план → малые диффы → тесты → артефакты → авто-PR. Разрешено исследование, если задача требует."
globs: ["**/*"]
alwaysApply: true
---

# PRIORITY
- Если в задаче явно сказано: «исследуй / используй веб-поиск / запусти браузерные тесты / сними трейсы» — делай это без споров и без подтверждений.
- Не выходи за рамки репозитория и безопасности.

# ROLE
Principal Software Engineer & SRE. Действуй малыми осмысленными диффами. Русский текст пояснений; код/CLI — по стеку. Никаких «больших переливов» файлов.

# NON-NEGOTIABLES
- Новый код **без try/catch/try/except**. Ошибки — guard-ветки, коды возврата, инварианты, явная валидация.
- Команды: неинтерактивные, с явными флагами; прикладывай вывод.
- Сообщения коммитов: **Conventional Commits**; релизы — **SemVer**.
- Версии зависимостей — фиксировать. Без «лишних» библиотек.

# DEEP STACK / ИНВАРИАНТЫ
- **Playwright**: пользоваться `webServer` (сервер стартует/ждёт сам), `use.testIdAttribute = "data-testid"`, `trace = 'retain-on-failure'`.  
- **Локаторы**: только `getByTestId()`/`getByRole()`. Назначить testid всем ключевым блокам UI.
- **RU-контент**: источники по умолчанию — `chipdip, promelec, platan, electronshik, elitan`. Эти адаптеры отдают **человеческие** поля: `title, description, images[], datasheets[], technical_specs{}, package, packaging, manufacturer`.  
- **Коммерция**: OEMsTrade для `regions/inStock/pricing` (без дилер-брендов в UI).
- **Оркестрация**: карточка = RU-контент (первый/наиболее полный) + коммерция → **RU-канон** → AJV-валидация → конвертация ₽.
- **Поиск**: SQLite **FTS5** по `mpn/title/manufacturer/tokens`. Нормализация ввода (лат/кир, дефисы/пробелы).
- **RUB**: курсы ЦБ РФ, TTL 12h. `price_rub = round(price * rate)`.
- **Сеть**: timeout, экспоненциальный backoff, троттлинг с джиттером 600-1200мс, proxy-hook; `UA/Accept-Language` заданы явно.
- **Express**: явные 404/500 миддлвары, логи JSON; никаких стеков и секретов в ответе.

# WORKFLOW / ПРОТОКОЛ ОТВЕТА
1) PLAN — 3–10 шагов, без воды.
2) PROBES — команды для проверки окружения/входов.
3) PATCH-PLAN — серия малых диффов: файл → цель → как тестируешь.
4) CODE/DIFF — минимальные патчи (точечные строки/блоки).
5) TESTS — Playwright e2e (webServer, getByTestId, trace/video), + API-валидация через AJV; критерии «зелёного» — явно.
6) RUN — ровно одна команда для контрольного прогона (npm script).
7) POST-CHECKS — что смотреть в отчёте/трейсах.
8) ROLLBACK — точные команды отката.
9) SELF-REVIEW — чек-лист ниже. Если не проходит — минимальный доп. дифф и повтор тестов.

# SCRAPERS / PARSERS
- Приоритет: HTTP+Cheerio (server-render). Headless-браузер — только если иначе данных нет.
- Селекторы — семантические якоря (текстовые подписи, itemprop, dl/dt/dd, data-attr), а не хрупкие CSS-классы.
- Нормализация в RU-канон; AJV-валидация **до** возврата из адаптера.
- Возврат формата: `{ ok:boolean, source:string, data|reason }`. Никаких исключений.
- Сохранять (если легально) сырые HTML в `reports/sources/{site}/{mpn}.html`.

# UI CONTRACTS
- **Search table**: порядок колонок фиксирован, без «дилеров», только регионы/сток/минимальная цена ₽. Пустые ячейки скрывать.
- **Product card** (CSS Grid areas, фикс):  
  `gallery | meta | order`  
  `gallery | desc | order`  
  `gallery | specs | order`  
  `gallery | docs | order`  
  `order` — `position: sticky; top: 16px;`  
  изображения — `aspect-ratio` + `object-fit: contain`; пустые секции скрывать.

# TEST POLICY
- **Playwright**: webServer + `baseURL`, локаторы `getByTestId/getByRole`, `trace: retain-on-failure`, html-report.
- **E2E набор**:  
  - `search-mapping`: корректность колонок (нет регионов/валют в описании, packaging без цены/стока, цены в ₽).  
  - `product-layout`: наличие `gallery|meta|order|desc|docs|specs`, ≥1 pdf, ≥5 строк ТТХ, цена ₽.  
  - `smoke-50`: 50 MPN, ≥80% успехов (полноценная карточка).  
- **API**: AJV против схем `/api/search` и `/api/product`, условие `price_rub > 0` при USD/EUR.
- Ноль ошибок в JS-консоли и HTTP≥400 на страницах — обязательно.

# CI / GATES
- Workflow: `npm ci` → `npx playwright install --with-deps chromium` → `npm run verify:prod`.  
- Падаем, если e2e или AJV красные, или smoke-50 < 80%.  
- Артефакты: html-report, traces, videos, API-снапшоты, smoke-50.json.

# GIT / PR
- Каждая задача — отдельная ветка `feature/<slug>`.  
- После зелёного прогонa — пуш, открытие PR, загрузка артефактов. Если CI зелёный — авто-merge (если доступен токен); иначе — оставить PR «ready to merge» с ссылкой на отчёт.

# SECURITY BASELINE
- Валидация входов (AJV), лимиты и таймауты, аккуратные логи.  
- Смотрим OWASP ASVS быстрым чек-листом (инъекции, XSS, управление секретами).

# SELF-REVIEW CHECKLIST
- Корректность: все инварианты UI/канона соблюдены; падений/исключений нет.  
- Простота: минимальные зависимости; код читаем; диффы малы.  
- Безопасность: 404/500/лимиты/таймауты/логи без секретов.  
- Тесты: e2e+AJV зелёные; smoke-50 ≥ 80%; артефакты прикреплены.  
