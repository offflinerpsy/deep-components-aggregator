/root/.vscode-server/extensions/github.copilot-chat-0.32.1/telemetry.json:1:{"events":{"GitHub.copilot-chatcookbook.accessed":{"owner":"luabud","comment":"Reports when a cookbook entry is accessed for a diagnostic.","languageid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The current file language."},"diagnosticcode":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The diagnostic code accessed in the cookbook."},"provider":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The tool which is the diagnostic provider."}},"GitHub.copilot-chatsummarizedConversationHistory":{"owner":"roblourens","comment":"Tracks when summarization happens and what the outcome was","summarizationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"An ID to join all attempts of this summarization task."},"outcome":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The success state or failure reason of the summarization."},"detailedoutcome":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"A more detailed error message."},"model":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The model ID used for the summarization."},"requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The request ID from the summarization call."},"chatrequestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The chat request ID that this summarization ran during."},"numrounds":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The number of tool call rounds before this summarization was triggered.","isMeasurement":true},"numroundssincelastsummarization":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The number of tool call rounds since the last summarization.","isMeasurement":true},"turnindex":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The index of the current turn.","isMeasurement":true},"curturnroundindex":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The index of the current round within the current turn","isMeasurement":true},"lastusedtool":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The name of the last tool used before summarization."},"isduringtoolcalling":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether this summarization was triggered during a tool calling loop.","isMeasurement":true},"conversationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Id for the current chat conversation."},"hasworkingnotebook":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the conversation summary includes a working notebook.","isMeasurement":true},"mode":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The mode of the conversation summary."},"summarizationmode":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The mode of the conversation summary."},"duration":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The duration of the summarization attempt in ms.","isMeasurement":true},"prompttokencount":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Number of prompt tokens, server side counted","isMeasurement":true},"promptcachetokencount":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Number of prompt tokens hitting cache as reported by server","isMeasurement":true},"responsetokencount":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Number of generated tokens","isMeasurement":true}},"GitHub.copilot-chatcodemapper.completeCodeBlock":{"owner":"aeschli","comment":"Sent when a codemapper request is received for a complete code block that contains no ...existing code... comments."},"GitHub.copilot-chatcodemapper.request":{"owner":"aeschli","comment":"Metadata about the code mapper request","requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the current request turn."},"requestsource":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The source from where the request was made"},"mapper":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The mapper used: One of 'fast', 'fast-lora', 'full' and 'patch'"},"outcomeannotations":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Annotations about the outcome of the request."}},"GitHub.copilot-chatcodeMapper.trackEditSurvival":{"owner":"aeschli","comment":"Tracks how much percent of the AI edits survived after 5 minutes of accepting","requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the current request turn."},"speculationrequestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the speculation request."},"requestsource":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The source from where the request was made"},"chatrequestmodel":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The model used for the base chat request to generate the edit object."},"mapper":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The code mapper used: One of 'fast', 'fast-lora', 'full' and 'patch'"},"survivalratefourgram":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The rate between 0 and 1 of how much of the AI edit is still present in the document.","isMeasurement":true},"survivalratenorevert":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The rate between 0 and 1 of how much of the ranges the AI touched ended up being reverted.","isMeasurement":true},"didbranchchange":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Indicates if the branch changed in the meantime. If the branch changed (value is 1), this event should probably be ignored.","isMeasurement":true},"timedelayms":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The time delay between the user accepting the edit and measuring the survival rate.","isMeasurement":true}},"GitHub.copilot-chatspeculation.response.success":{"owner":"alexdima","comment":"Report quality details for a successful speculative response.","chatrequestid":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Id of the current turn request"},"chatrequestsource":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Source of the current turn request"},"isnoopedit":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Whether the response text is identical to the speculation."},"speculationrequestid":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Id of the current turn request"},"containselidedcodecomments":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Whether the response text contains elided code comments."},"model":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"The model used for this speculation request"},"prompttokencount":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Number of prompt tokens","isMeasurement":true},"speculationtokencount":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Number of speculation tokens","isMeasurement":true},"responsetokencount":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Number of response tokens","isMeasurement":true},"addedlines":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Number of lines added","isMeasurement":true},"removedlines":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Number of lines removed","isMeasurement":true},"isnotebook":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Whether this is a notebook","isMeasurement":true},"timetofirsttoken":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Time to first token","isMeasurement":true},"timetocomplete":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Time to complete the request","isMeasurement":true}},"GitHub.copilot-chatspeculation.response.error":{"owner":"alexdima","comment":"Report quality issue for when a speculative response failed.","errormessage":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"The name of the error"},"chatrequestid":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Id of the current turn request"},"speculationrequestid":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Id of the speculation request"},"chatrequestsource":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Source of the current turn request"},"model":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"The model used for this speculation request"},"prompttokencount":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Number of prompt tokens","isMeasurement":true},"speculationtokencount":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Number of speculation tokens","isMeasurement":true},"isnotebook":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Whether this is a notebook","isMeasurement":true}},"GitHub.copilot-chatspeculation.response.loop":{"owner":"joyceerhl","comment":"Report when the model appears to have gone into a loop.","hasloop":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Whether the model appears to have gone into a loop."},"speculationrequestid":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Id of the current turn request"},"languageid":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"The language id of the document"},"model":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"The model used for this speculation request"},"documentlength":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Length of original file","isMeasurement":true},"rewrittenlength":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Length of original file","isMeasurement":true}},"GitHub.copilot-chatprompt.invalidreference":{"owner":"jrieken","comment":"Tracks bad prompt references","stack":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Error stack"}},"GitHub.copilot-chattoolInvoke":{"owner":"donjayamanne","comment":"Details about invocation of tools","validateoutcome":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The outcome of the tool input validation. valid, invalid and unknown"},"invokeoutcome":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The outcome of the tool Invokcation. invalidInput, disabledByUser, success, error, cancelled"},"toolname":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The name of the tool being invoked."},"model":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The model that invoked the tool"}},"GitHub.copilot-chatagent.tool.responseLength":{"owner":"connor4312","comment":"Counts the number of tokens generated by tools","toolname":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The name of the tool being invoked."},"tokencount":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Number of tokens used.","isMeasurement":true}},"GitHub.copilot-chateditNotebook.validation":{"owner":"donjayamanne","comment":"Validation failure for a Edit Notebook tool invocation","validationresult":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The result of the tool input validation. valid, invalid and unknown"},"invokeoutcome":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The result of the tool Invocation. invalidInput, disabledByUser, success, error, cancelled"},"edittype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The type of edit that was attempted. insert, delete, edit or unknown"},"unknownprops":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"List of unknown properties in the input"},"missingprops":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"List of missing properties in the input"},"newcodetype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The type of code, whether its string, string[], object, object[] or unknown"},"cellid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the cell, TOP, BOTTOM, cellid, empty or unknown"},"explanation":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The explanation for the edit. provided, empty and unknown"},"inputparsed":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the input was parsed as JSON","isMeasurement":true},"model":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The model that invoked the tool"}},"GitHub.copilot-chatworkspaceContext.perf.prepareWorkspaceChunks":{"owner":"mjbvz","comment":"Understanding the performance of including workspace context","status":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the call succeeded or failed"},"workspacesearchsource":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Caller of the search"},"workspacesearchcorrelationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Correlation id for the search"},"exectime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time in milliseconds that the call took","isMeasurement":true},"resultchunkcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Total number of chunks returned","isMeasurement":true}},"GitHub.copilot-chatworkspaceContext.perf.prepare":{"owner":"mjbvz","comment":"Understanding how effective ADA re-ranking is","status":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the call succeeded or failed"},"exectime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time in milliseconds that the call took","isMeasurement":true}},"GitHub.copilot-chatworkspaceResolver.error":{"owner":"mjbvz","comment":"Tracks errors for resolving workspace information","type":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Error type"},"reason":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Detailed error reason"},"requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the current request turn."}},"GitHub.copilot-chatworkspaceResolver.success":{"owner":"mjbvz","comment":"Tracks errors for resolving workspace information","type":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Success type"},"requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the current request turn."},"totalkeywordcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Total number of keywords returned.","isMeasurement":true}},"GitHub.copilot-chateditToolLearning.transition":{"owner":"connor4312","comment":"Tracks state transitions in the edit tool learning system.","modelid":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Model ID"},"state":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"State the model transitioned to","isMeasurement":true}},"GitHub.copilot-chatcopilot.search.feedback":{"owner":"osortega","comment":"Feedback telemetry for copilot search","kind":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Feedback provided by the user."},"chunkcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Count of copilot search code chunks.","isMeasurement":true},"rankresult":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Result of the copilot search ranking."},"rankresultscount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Count of the results from copilot search ranking.","isMeasurement":true},"combinedresultscount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Count of combined results from copilot search.","isMeasurement":true},"chunksearchduration":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Duration of the chunk search","isMeasurement":true},"llmfilteringduration":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Duration of the LLM filtering","isMeasurement":true},"strategy":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Indicates the strategy used for the search."}},"GitHub.copilot-chatrunNotebookCellInvoked":{"owner":"amunger","comment":"Tracks the usage and result ","requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the current request turn."},"resourcehash":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The hash of the resource of the current request turn. (Notebook Uri)"},"model":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The model used for the request."},"result":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Result of the operation: success, failure, or unknown."},"resultinfo":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Reason for failure if the result is failure."}},"GitHub.copilot-chatpanel.action.filelink":{"owner":"digitarald","comment":"Clicks on file links in the panel response","requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Id of the chat request."}},"GitHub.copilot-chatpanel.action.symbollink":{"owner":"digitarald","comment":"Clicks on symbol links in the panel response","hadmatch":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the symbol was found.","isMeasurement":true},"requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Id of the chat request."}},"GitHub.copilot-chatpanel.action.openSymbolFromReferencesLink":{"owner":"mjbvz","comment":"Clicks on symbol links in the panel response","requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Id of the chat request."},"resolveddestinationtype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How the link was actually resolved."}},"GitHub.copilot-chatgithubRepoTool.prepare.error":{"owner":"mjbvz","comment":"Tracks errors for the GitHub repo tool prepare step","errorid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"General reason why the search failed"},"errordetails":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"More detailed info about the failure"}},"GitHub.copilot-chateditFileResult.diagnostics":{"owner":"roblourens","comment":"Tracks whether new diagnostics were found after editing files","requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the current request turn."},"toolname":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The name of the tool that performed the edit"},"model":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The model that invoked the tool"},"totalnewdiagnostics":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Total number of new diagnostics found across all files","isMeasurement":true},"fileswithnewdiagnostics":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of files that had new diagnostics","isMeasurement":true},"totalfilesedited":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Total number of files that were edited","isMeasurement":true}},"GitHub.copilot-chatgetNotebookCellOutput.toolOutcome":{"owner":"donjayamanne","comment":"Tracks the tool used to get Notebook cell outputs","requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the current request turn."},"isnotebook":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the document is a notebook (this measure is used to identify notebook related telemetry).","isMeasurement":true},"outcome":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Outcome of the edit operation"},"model":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The model used for the request."}},"GitHub.copilot-chatmultiStringReplaceCall":{"owner":"connor4312","comment":"Tracks how much percent of the AI edits survived after 5 minutes of accepting","requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the current request turn."},"model":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The model used for the request."},"successes":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The number of successful edits.","isMeasurement":true},"failures":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The number of failed edits.","isMeasurement":true},"uniqueuris":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The number of unique URIs edited.","isMeasurement":true},"individualedits":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The number of individual text edits made.","isMeasurement":true}},"GitHub.copilot-chatreadFileToolInvoked":{"owner":"roblourens","comment":"The read_file tool was invoked","requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the current request turn."},"interactionid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the current interaction."},"tooloutcome":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the invocation was successful, or a failure reason"},"model":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The model that invoked the tool"},"linesread":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The number of lines that were read","isMeasurement":true},"truncated":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The file length was truncated","isMeasurement":true},"isv2":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the tool is a v2 version"},"isentirefile":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the entire file was read with v2 params"}},"GitHub.copilot-chatapplyPatch.trackEditSurvival":{"owner":"joyceerhl","comment":"Tracks how much percent of the AI edits survived after 5 minutes of accepting","requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the current request turn."},"requestsource":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The source from where the request was made"},"mapper":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The code mapper used strategy"},"survivalratefourgram":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The rate between 0 and 1 of how much of the AI edit is still present in the document.","isMeasurement":true},"survivalratenorevert":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The rate between 0 and 1 of how much of the ranges the AI touched ended up being reverted.","isMeasurement":true},"didbranchchange":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Indicates if the branch changed in the meantime. If the branch changed (value is 1), this event should probably be ignored.","isMeasurement":true},"timedelayms":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The time delay between the user accepting the edit and measuring the survival rate.","isMeasurement":true}},"GitHub.copilot-chatapplyPatchHealRate":{"owner":"connor4312","comment":"Records how correct the healing of a patch was","success":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the input was healed"}},"GitHub.copilot-chatapplyPatchToolInvoked":{"owner":"roblourens","comment":"The apply_patch tool was invoked","requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the current request turn."},"interactionid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the current interaction."},"outcome":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the invocation was successful, or a failure reason"},"model":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The model that invoked the tool"},"healed":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the input was healed"},"isnotebook":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the input was a notebook, 1 = yes, 0 = no, other = Unknown"},"error":{"classification":"CallstackOrException","purpose":"FeatureInsight","comment":"Unexpected error that occurrs during application"}},"GitHub.copilot-chatreplaceStringToolInvoked":{"owner":"roblourens","comment":"The replace_string tool was invoked","requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the current request turn."},"interactionid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the current interaction."},"outcome":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the invocation was successful, or a failure reason"},"model":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The model that invoked the tool"},"isnotebook":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the document is a notebook, 1 = yes, 0 = no, other = unknown.","isMeasurement":true},"didheal":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the document is a notebook, 1 = yes, 0 = no, other = unknown.","isMeasurement":true},"ismulti":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the document is a multi-replace operation, 1 = yes, 0 = no.","isMeasurement":true}},"GitHub.copilot-chatreplaceStringHealingStat":{"owner":"roblourens","comment":"The replace_string tool was invoked","requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the current request turn."},"interactionid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the current interaction."},"model":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The model that invoked the tool"},"outcome":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the invocation was successful, or a failure reason"},"healerror":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Any error that happened during healing"},"applicationerror":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Any error that happened after application"},"success":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the document is a notebook, 1 = yes, 0 = no, other = unknown.","isMeasurement":true}},"GitHub.copilot-chatnewNotebookTool.outcome":{"owner":"donjayamanne","comment":"Tracks the outcome of new notebook tool","requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the current request turn."},"outcome":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The outcome of the tool call."},"isnotebook":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the document is a notebook (this measure is used to identify notebook related telemetry).","isMeasurement":true},"model":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The model used for the request."}},"GitHub.copilot-chateditNotebook.toolUsed":{"owner":"donjayamanne","comment":"Tracks the tool used to edit Notebook documents","requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the current request turn."},"resourcehash":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The hash of the resource of the current request turn. (Notebook Uri)"},"edittool":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Tool used to edit the notebook, one of 'notebookEdit' | 'applyPatch' | 'stringReplace' | 'newNotebookIntent' | 'editCodeIntent' | 'insertEdit' | 'createFile'"},"isnotebook":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the document is a notebook (this measure is used to identify notebook related telemetry).","isMeasurement":true},"model":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The model used for the request."}},"GitHub.copilot-chateditNotebook.toolOutcome":{"owner":"donjayamanne","comment":"Tracks the tool used to edit Notebook documents","requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the current request turn."},"isnotebook":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the document is a notebook (this measure is used to identify notebook related telemetry).","isMeasurement":true},"outcome":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Outcome of the edit operation"},"failuredata":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Additional data about the failure, if any"},"model":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The model used for the request."}},"GitHub.copilot-chateditNotebook.cellEditOps":{"owner":"donjayamanne","comment":"Tracks the tool used to edit Notebook documents","requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the current request turn."},"isnotebook":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the document is a notebook (this measure is used to identify notebook related telemetry).","isMeasurement":true},"insert":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of cell inserts","isMeasurement":true},"delete":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of cell deletes","isMeasurement":true},"edit":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of cell edits","isMeasurement":true},"model":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The model used for the request."}},"GitHub.copilot-chateditNotebook.editCellWithCodeMarker":{"owner":"donjayamanne","comment":"Tracks the presence of code markers in code when editing Notebook cells","requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the current request turn."},"resourcehash":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The hash of the resource of the current request turn. (Notebook Uri)"},"hascodemarker":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Whether there any code markers are present","isMeasurement":true},"isnotebook":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the document is a notebook (this measure is used to identify notebook related telemetry).","isMeasurement":true},"model":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The model used for the request."}},"GitHub.copilot-chatvirtualTools.called":{"owner":"connor4312","comment":"Reports information about the usage of virtual tools.","callname":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Name of the categorized group (MCP or extension)"},"isvirtual":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Whether this called a virtual tool","isMeasurement":true},"turnno":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Number of turns into the loop when this expansion was made","isMeasurement":true},"depth":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Nesting depth of the tool","isMeasurement":true},"preexpanded":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the tool was pre-expanded or expanded on demand","isMeasurement":true},"wasembedding":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the tool was pre-expanded due to an embedding","isMeasurement":true},"totaltools":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Total number of tools available when this tool was called","isMeasurement":true}},"GitHub.copilot-chatlanguagemodelrequest":{"owner":"jrieken","comment":"Data about extensions using the language model","model":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The model that is being used"},"extensionid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The extension identifier for which we make the request"},"extensionversion":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The extension version for which we make the request"},"tokencount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The number of tokens","isMeasurement":true},"tokenlimit":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The number of tokens that can be used","isMeasurement":true}},"GitHub.copilot-chatpanel.action.copy":{"owner":"digitarald","comment":"Counts copied code blocks from a chat panel response","languageid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Language of the currently open document."},"requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Id for this message request."},"codeblockindex":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Index of the code block in the response.","isMeasurement":true},"copytype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the copy was done via the context menu or the toolbar.","isMeasurement":true},"charactercount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of characters copied.","isMeasurement":true},"linecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of lines copied.","isMeasurement":true},"participant":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The name of the chat participant for this message."},"command":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The command used for the chat participant."}},"GitHub.copilot-chatpanel.action.insert":{"owner":"digitarald","comment":"Counts inserts on a chat panel response","languageid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Language of the currently open document."},"requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Id for this message request."},"codeblockindex":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Index of the code block in the response.","isMeasurement":true},"charactercount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of characters copied.","isMeasurement":true},"participant":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The name of the chat participant for this message."},"command":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The command used for the chat participant."},"newfile":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the insert was done in a new file.","isMeasurement":true}},"GitHub.copilot-chatpanel.action.followup":{"owner":"digitarald","comment":"Counts generic actions on a chat panel response","languageid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Language of the currently open document."},"requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Id for the message request that is being followed-up."},"participant":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The name of the chat participant for this message."},"command":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The command used for the chat participant."}},"GitHub.copilot-chatpanel.edit.feedback":{"owner":"joyceerhl","comment":"Counts accept/reject actions for a proposed edit from panel chat","languageid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Language of the currently open document."},"requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Id for the message request that is being followed-up."},"participant":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The name of the chat participant for this message."},"command":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The command used for the chat participant."},"outcome":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The user decision taken for the edited file"},"hasremainingedits":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether there are additional unactioned edits in the file."},"isnotebook":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the document is a notebook.","isMeasurement":true},"isnotebookcell":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the document is a notebook cell.","isMeasurement":true}},"GitHub.copilot-chatpanel.action.vote":{"owner":"digitarald","comment":"Counts votes on a chat panel response","languageid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Language of the currently open document."},"requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Id for this message request."},"direction":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the vote was positive or negative.","isMeasurement":true},"participant":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The name of the chat participant for this message."},"command":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The command used for the chat participant."},"reason":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Preset value for why the user found the response unhelpful."}},"GitHub.copilot-chatinline.action.vote":{"owner":"digitarald","comment":"Metadata about votes on inline code conversations","languageid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The current file language."},"replytype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How response is shown in the interface."},"conversationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the inline assistant conversation."},"requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the current request turn."},"command":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The command which was used in providing the response."},"reason":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Preset value for why the user found the response unhelpful."},"vote":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the user found the response helpful.","isMeasurement":true},"selectionlinecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many lines are in the current selection.","isMeasurement":true},"wholerangelinecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many lines are in the expanded whole range.","isMeasurement":true},"editcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many edits are suggested.","isMeasurement":true},"editlinecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many lines are in all suggested edits.","isMeasurement":true},"problemscount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many problems are in the current code.","isMeasurement":true},"selectionproblemscount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many problems are in the current selected code.","isMeasurement":true},"diagnosticscount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many diagnostic codes are in the current code.","isMeasurement":true},"selectiondiagnosticscount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many diagnostic codes are in the current selected code.","isMeasurement":true},"isnotebook":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the document is a notebook","isMeasurement":true}},"GitHub.copilot-chatinline.done":{"owner":"digitarald","comment":"Metadata about an inline code suggestion being accepted or undone","languageid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The current file language."},"replytype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How response is shown in the interface."},"conversationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the inline assistant conversation."},"requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the current request turn."},"command":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The command which was used in providing the response."},"accepted":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the user accepted the suggested code or discarded it.","isMeasurement":true},"selectionlinecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many lines are in the current selection.","isMeasurement":true},"wholerangelinecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many lines are in the expanded whole range.","isMeasurement":true},"editcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many edits are suggested.","isMeasurement":true},"editlinecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many lines are in all suggested edits.","isMeasurement":true},"problemscount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many problems are in the current code.","isMeasurement":true},"selectionproblemscount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many problems are in the current selected code.","isMeasurement":true},"diagnosticscount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many diagnostic codes are in the current code.","isMeasurement":true},"selectiondiagnosticscount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many diagnostic codes are in the current code.","isMeasurement":true},"isnotebook":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the document is a notebook.","isMeasurement":true}},"GitHub.copilot-chatinline.trackEditSurvival":{"owner":"hediet","comment":"Tracks how much percent of the AI edits surived after 5 minutes of accepting","languageid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The current file language."},"replytype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How response is shown in the interface."},"conversationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the inline assistant conversation."},"requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the current request turn."},"command":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The command which was used in providing the response."},"survivalratefourgram":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The rate between 0 and 1 of how much of the AI edit is still present in the document.","isMeasurement":true},"survivalratenorevert":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The rate between 0 and 1 of how much of the ranges the AI touched ended up being reverted.","isMeasurement":true},"didbranchchange":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Indicates if the branch changed in the meantime. If the branch changed (value is 1), this event should probably be ignored.","isMeasurement":true},"timedelayms":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The time delay between the user accepting the edit and measuring the survival rate.","isMeasurement":true},"selectionlinecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many lines are in the current selection.","isMeasurement":true},"wholerangelinecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many lines are in the expanded whole range.","isMeasurement":true},"editcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many edits are suggested.","isMeasurement":true},"editlinecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many lines are in all suggested edits.","isMeasurement":true},"problemscount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many problems are in the current code.","isMeasurement":true},"selectionproblemscount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many problems are in the current selected code.","isMeasurement":true},"diagnosticscount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many diagnostic codes are in the current code.","isMeasurement":true},"selectiondiagnosticscount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many diagnostic codes are in the current selected code.","isMeasurement":true},"isnotebook":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the document is a notebook","isMeasurement":true}},"GitHub.copilot-chatvirtualTools.expandEmbedding":{"owner":"connor4312","comment":"Expansion of virtual tool groups using embedding-based ranking.","error":{"classification":"CallstackOrException","purpose":"PerformanceAndHealth","comment":"Error message if expansion failed"},"blockingms":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Blocking duration of the expansion operation in milliseconds","isMeasurement":true},"computems":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Duration of the expansion operation in milliseconds","isMeasurement":true},"haderror":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Whether the operation had an error","isMeasurement":true}},"GitHub.copilot-chatvirtualTools.generate":{"owner":"connor4312","comment":"Reports information about the generation of virtual tools.","groupkey":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Key of the categorized group (MCP or extension)"},"toolsbefore":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of tools before categorization","isMeasurement":true},"toolsafter":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of tools after categorization","isMeasurement":true},"retries":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of retries to categorize the tools","isMeasurement":true},"uncategorizedtools":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of tools that could not be categorized","isMeasurement":true},"durationms":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Total duration of the operation in milliseconds","isMeasurement":true}},"GitHub.copilot-chatintent.fixTestFailure.actioned":{"owner":"connor4312","comment":"Reports when we show a ","source":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Where the action was taken"}},"GitHub.copilot-chattriggerSummarizeFailed":{"owner":"roblourens","comment":"Tracks when triggering summarization failed - for example, a summary was created but not applied successfully.","errorkind":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The success state or failure reason of the summarization."},"model":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The model ID used for the summarization."}},"GitHub.copilot-chatreadFileTrajectory":{"owner":"connor4312","comment":"read_file tool invokation trajectory","model":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The model that invoked the tool"},"rounds":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The number of times the file was read sequentially","isMeasurement":true},"avgchunksize":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The number of lines read at a time","isMeasurement":true}},"GitHub.copilot-chattoolCalling.invalidToolMessages":{"owner":"roblourens","comment":"Provides info about invalid tool messages that were rendered in a prompt","filterreasons":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Reasons for filtering the messages."},"filtercount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Count of filtered messages.","isMeasurement":true}},"GitHub.copilot-chatpanel.edit.codeblocks":{"owner":"joyceerhl","comment":"Records information about the proposed edit codeblocks in an editing session","conversationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Id for the current chat conversation."},"outcome":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the request succeeded or failed."},"workingsetcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The number of entries in the working set","isMeasurement":true},"uniquecodeblockuricount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The number of unique code block URIs","isMeasurement":true},"codeblockcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The number of code blocks in the response","isMeasurement":true},"codeblockwithuricount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The number of code blocks that had URIs","isMeasurement":true},"codeblockwithelidedcodecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The number of code blocks that had a ...existing code... comment","isMeasurement":true},"shellcodeblockcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The number of shell code blocks in the response","isMeasurement":true},"shellcodeblockwithuricount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The number of shell code blocks that had URIs","isMeasurement":true},"shellcodeblockwithelidedcodecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The number of shell code blocks that had a ...existing code... comment","isMeasurement":true},"editstepcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The number of edit steps in the session so far","isMeasurement":true},"sessionduration":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The time since the session started","isMeasurement":true},"intentid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The ID of the intent being executed"}},"GitHub.copilot-chateditCodeIntent.promptRender":{"owner":"roblourens","comment":"Understanding the performance of the edit code intent rendering","promptrenderdurationincludingrunningtools":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Duration of the prompt rendering, includes running tools","isMeasurement":true},"isagentmode":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the prompt was for agent mode","isMeasurement":true}},"GitHub.copilot-chatremoteEmbeddingsComputer.computeEmbeddings.error":{"owner":"mjbvz","comment":"Total time for searchFileChunks to complete","source":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Caller"},"correlationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Correlation id"},"embeddingtype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Embedding type"},"totalinputlength":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Total length of the input","isMeasurement":true},"batchinputlength":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Total length of the batch","isMeasurement":true},"statuscode":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Status code of the response","isMeasurement":true}},"GitHub.copilot-chattypescript-context-plugin.completion-context.speculative":{"owner":"dirkb","comment":"Telemetry for copilot inline completion context","requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The request correlation id"},"source":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The source of the request"},"originalrequestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The original request id for which this is a speculative request"},"numberofitems":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of items in the speculative request","isMeasurement":true},"sampletelemetry":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The sampling rate for telemetry. A value of 1 means every request is logged, a value of 5 means every 5th request is logged, etc.","isMeasurement":true}},"GitHub.copilot-chattypescript-context-plugin.completion-context.request":{"owner":"dirkb","comment":"Telemetry for copilot inline completion context","requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The request correlation id"},"opportunityid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The opportunity id"},"source":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The source of the request"},"trigger":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The trigger kind of the request"},"cacherequest":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The cache request that was used to populate the cache"},"nodepath":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The syntax kind path to the AST node the position resolved to."},"cancelled":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the request got cancelled on the client side"},"timedout":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the request timed out on the server side"},"tokenbudgetexhausted":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the token budget was exhausted"},"servertime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time taken on the server side","isMeasurement":true},"contextcomputetime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time taken on the server side to compute the context","isMeasurement":true},"timetaken":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time taken to provide the completion","isMeasurement":true},"total":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Total number of context items","isMeasurement":true},"snippets":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of code snippets","isMeasurement":true},"traits":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of traits","isMeasurement":true},"yielded":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of yielded items","isMeasurement":true},"items":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Detailed information about each context item delivered."},"totalsize":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Total size of all context items","isMeasurement":true},"filesize":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The size of the file","isMeasurement":true},"cacheditems":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of cache items","isMeasurement":true},"referenceditems":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of referenced items","isMeasurement":true},"isspeculative":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the request was speculative"},"beforecachestate":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The cache state before the request was sent"},"aftercachestate":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The cache state after the request was sent"},"fromcache":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the context was fully provided from cache"},"sampletelemetry":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The sampling rate for telemetry. A value of 1 means every request is logged, a value of 5 means every 5th request is logged, etc.","isMeasurement":true}},"GitHub.copilot-chattypescript-context-plugin.completion-context.error":{"owner":"dirkb","comment":"Telemetry for copilot inline completion context errors","requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The request correlation id"},"source":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The source of the request"},"code":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The failure code","isMeasurement":true},"message":{"classification":"CallstackOrException","purpose":"PerformanceAndHealth","comment":"The failure message"}},"GitHub.copilot-chattypescript-context-plugin.completion-context.on-timeout":{"owner":"dirkb","comment":"Telemetry for copilot inline completion context on timeout","requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The request correlation id"},"opportunityid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The opportunity id"},"source":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The source of the request"},"total":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Total number of context items","isMeasurement":true},"snippets":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of code snippets","isMeasurement":true},"traits":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of traits","isMeasurement":true},"yielded":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of yielded items","isMeasurement":true},"items":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Detailed information about each context item delivered."},"totalsize":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Total size of all context items","isMeasurement":true},"cachestate":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The cache state for the onTimeout request"}},"GitHub.copilot-chattypescript-context-plugin.completion-context.failed":{"owner":"dirkb","comment":"Telemetry for copilot inline completion context in failure case","requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The request correlation id"},"opportunityid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The opportunity id"},"source":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The source of the request"},"code:":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The failure code"},"message":{"classification":"CallstackOrException","purpose":"PerformanceAndHealth","comment":"The failure message"},"stack":{"classification":"CallstackOrException","purpose":"PerformanceAndHealth","comment":"The failure stack"}},"GitHub.copilot-chattypescript-context-plugin.completion-context.cancelled":{"owner":"dirkb","comment":"Telemetry for copilot inline completion context in cancellation case","requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The request correlation id"},"opportunityid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The opportunity id"},"source":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The source of the request"},"timetaken":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time taken to provide the completion","isMeasurement":true}},"GitHub.copilot-chattypescript-context-plugin.activation.ok":{"owner":"dirkb","comment":"Telemetry for TypeScript server plugin","session":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the TypeScript server had a session"},"supported":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the TypeScript server version is supported"},"version":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The version of the TypeScript server"}},"GitHub.copilot-chattypescript-context-plugin.activation.failed":{"owner":"dirkb","comment":"Telemetry for TypeScript server plugin","location":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The location of the failure"},"part":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The part that errored"},"message":{"classification":"CallstackOrException","purpose":"PerformanceAndHealth","comment":"The failure message"},"stack":{"classification":"CallstackOrException","purpose":"PerformanceAndHealth","comment":"The failure stack"},"version":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The version"}},"GitHub.copilot-chattypescript-context-plugin.activation.unknown-ping-response":{"owner":"dirkb","comment":"Telemetry for TypeScript server plugin","location":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The location of the failure"},"part":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The part that errored"},"response":{"classification":"CallstackOrException","purpose":"PerformanceAndHealth","comment":"The response literal"}},"GitHub.copilot-chattypescript-context-plugin.integration.failed":{"owner":"dirkb","comment":"Telemetry for Copilot inline chat integration.","requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The request correlation id"},"document":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The document for which the integration failed"},"versionmismatch":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The version mismatch"}},"GitHub.copilot-chattypescript-context-plugin.inline-completion-provider.registered":{"owner":"dirkb","comment":"Telemetry for Copilot inline completions","source":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The source of the request"}},"GitHub.copilot-chattypescript-context-plugin.inline-completion-provider.unregistered":{"owner":"dirkb","comment":"Telemetry for Copilot inline completions","source":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The source of the request"}},"GitHub.copilot-chatmcp.setup.flow":{"owner":"joelverhagen","comment":"Reports the result of the agent-assisted MCP server installation","finalstate":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The final state of the installation (e.g., 'Done', 'Failed')"},"configurationtype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Generic configuration typed produced by the installation"},"packagetype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Package type (e.g., npm)"},"packagename":{"classification":"PublicNonPersonalData","purpose":"FeatureInsight","comment":"Package name used for installation"},"packageversion":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Package version"},"durationms":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Duration of the installation process in milliseconds","isMeasurement":true}},"GitHub.copilot-chatmcp.setup.validatePackage":{"owner":"joelverhagen","comment":"Reports success or failure of agent-assisted MCP server validation step","state":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Validation state of the package"},"packagetype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Package type (e.g., npm)"},"packagename":{"classification":"PublicNonPersonalData","purpose":"FeatureInsight","comment":"Package name used for installation"},"packageversion":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Package version"},"errortype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Generic type of error encountered during validation"},"durationms":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Duration of the validation process in milliseconds","isMeasurement":true}},"GitHub.copilot-chatcodeBlock.action.goTo":{"owner":"mjbvz","comment":"Counts interactions with code blocks in chat responses","languageid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Language of the currently open document."},"command":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The go to command being run."},"codeblockid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Unique hash of the code block."}},"GitHub.copilot-chatcopilot.search.request":{"owner":"osortega","comment":"Copilot search request.","chunkcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Count of copilot search code chunks.","isMeasurement":true},"rankresult":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Result of the copilot search ranking."},"rankresultscount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Count of the results from copilot search ranking.","isMeasurement":true},"combinedresultscount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Count of combined results from copilot search.","isMeasurement":true},"chunksearchduration":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Duration of the chunk search","isMeasurement":true},"llmfilteringduration":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Duration of the LLM filtering","isMeasurement":true},"llmbestrank":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Best rank (lowest index) among LLM-selected chunks in the original retrieval ranking.","isMeasurement":true},"llmworstrank":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Worst rank (highest index) among LLM-selected chunks in the original retrieval ranking.","isMeasurement":true},"llmselectedcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of chunks selected by LLM from the initial retrieval.","isMeasurement":true},"rawllmrankingresultscount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of raw results returned by the LLM.","isMeasurement":true},"parseresult":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Indicates the result of parsing the LLM response."},"strategy":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Indicates the strategy used for the search."}},"GitHub.copilot-chatsemanticSearch.ranking":{"owner":"rebornix","comment":"Semantic search request ranking.","llmbestrank":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Best rank (lowest index) among LLM-selected chunks in the original retrieval ranking.","isMeasurement":true},"llmworstrank":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Worst rank (highest index) among LLM-selected chunks in the original retrieval ranking.","isMeasurement":true},"llmselectedcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of chunks selected by LLM from the initial retrieval.","isMeasurement":true},"rawllmrankingresultscount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of raw results returned by the LLM.","isMeasurement":true}},"GitHub.copilot-chatcopilot.search.keywords":{"owner":"osortega","comment":"Copilot keywords request.","keywordresult":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Result of the copilot keywords request."},"keywordscount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Count of keywords found by copilot search.","isMeasurement":true},"keywordsearchduration":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Duration of the keyword search","isMeasurement":true}},"GitHub.copilot-chatonboardDebug.configGenerated":{"owner":"connor4312","comment":"Reports a generated config for the copilot-debug command","configgenerated":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether a config was generated","isMeasurement":true},"configtype":{"classification":"SystemMetaData","purpose":"FeatureInsight"},"binary":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Binary executed with the command"},"debugtype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Debug type generated"}},"GitHub.copilot-chaturiHandler":{"owner":"lramos15","comment":"Reports when the uri handler is called in the copilot extension","referrer":{"classification":"SystemMetaData","purpose":"BusinessInsight","comment":"The referrer query param for the uri"}},"GitHub.copilot-chatonboardDebug.commandExecuted":{"owner":"connor4312","comment":"Reports usages of the copilot-debug command","binary":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Binary executed with the command"}},"GitHub.copilot-chatgithubCodeSearch.getRemoteIndexState.error":{"owner":"mjbvz","comment":"Information about failed remote index state requests","statuscode":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The response status code","isMeasurement":true}},"GitHub.copilot-chatgithubCodeSearch.triggerIndexing.error":{"owner":"mjbvz","comment":"Information about failed trigger indexing requests","workspacesearchsource":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Caller of the search"},"workspacesearchcorrelationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Correlation id for the search"},"triggerreason":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Reason why the indexing was triggered"},"statuscode":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The response status code","isMeasurement":true}},"GitHub.copilot-chatgithubCodeSearch.getRemoteIndexState.success":{"owner":"mjbvz","comment":"Information about failed remote index state requests","workspacesearchsource":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Caller of the search"},"workspacesearchcorrelationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Correlation id for the search"},"triggerreason":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Reason why the indexing was triggered"}},"GitHub.copilot-chatgithubCodeSearch.searchRepo.error":{"owner":"mjbvz","comment":"Information about failed code searches","workspacesearchsource":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Caller of the search"},"workspacesearchcorrelationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Correlation id for the search"},"statuscode":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The response status code","isMeasurement":true}},"GitHub.copilot-chatgithubCodeSearch.searchRepo.success":{"owner":"mjbvz","comment":"Information about successful code searches","workspacesearchsource":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Caller of the search"},"workspacesearchcorrelationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Correlation id for the search"},"resultcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Total number of returned chunks from the search","isMeasurement":true},"resultoutofsync":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Tracks if the commit we think code search has indexed matches the commit code search returns results from","isMeasurement":true}},"GitHub.copilot-chatadoCodeSearch.getRemoteIndexState":{"owner":"mjbvz","comment":"Information about failed remote index state requests","status":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the call succeeded or failed"},"ok":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Details on successful calls"},"err":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Details on failed calls"},"exectime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time in milliseconds that the call took","isMeasurement":true}},"GitHub.copilot-chatadoCodeSearch.getRemoteIndexState.requestError":{"owner":"mjbvz","comment":"Information about failed remote index state requests","statuscode":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The response status code","isMeasurement":true}},"GitHub.copilot-chatadoCodeSearch.searchRepo.error":{"owner":"mjbvz","comment":"Information about failed code ado searches","workspacesearchsource":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Caller of the search"},"workspacesearchcorrelationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Correlation id for the search"},"statuscode":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The response status code","isMeasurement":true},"exectime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The total time for the search call","isMeasurement":true},"requestexectime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The request execution time","isMeasurement":true}},"GitHub.copilot-chatadoCodeSearch.searchRepo.success":{"owner":"mjbvz","comment":"Information about successful ado code search searches","workspacesearchsource":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Caller of the search"},"workspacesearchcorrelationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Correlation id for the search"},"resultcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Total number of returned chunks from the search after filtering","isMeasurement":true},"rawresultcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Original number of returned chunks from the search before filtering","isMeasurement":true},"resultoutofsync":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Tracks if the commit we think code search has indexed matches the commit code search returns results from","isMeasurement":true},"exectime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The total time for the search call","isMeasurement":true},"requestexectime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The request execution time","isMeasurement":true}},"GitHub.copilot-chatcodeSearchRepoTracker.openGitRepo.error.noCurrentRepo":{"owner":"mjbvz","comment":"Information about errors when trying to resolve a remote"},"GitHub.copilot-chatcodeSearchRepoTracker.openGitRepo.remoteInfo":{"owner":"mjbvz","comment":"Information about the remote","resolvedremotetype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Identifies the primary remote's type ","isMeasurement":true}},"GitHub.copilot-chatcodeSearchRepoTracker.openGitRepo.error.couldNotResolveRemote":{"owner":"mjbvz","comment":"Information about errors when trying to resolve a remote","reporemotefetchurlscount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of remote fetch urls on the git repo","isMeasurement":true}},"GitHub.copilot-chatprovideRenameSuggestions":{"owner":"ulugbekna","comment":"Telemetry for rename suggestions provided","languageid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Language ID of the document."},"cancellationreason":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Specify when exactly during the provider call the cancellation happened. Empty string if the cancellation didn't happen."},"fetchresulttype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Result of a fetch to endpoint"},"replyformat":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Copilot reply format: 'jsonStringArray' | 'multiJsonStringArray' | 'list' | 'unknown'"},"triggerkind":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Rename suggestion trigger kind - 'automatic' | 'manual'"},"promptconstructiontime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time it took to construct the prompt","isMeasurement":true},"timeelapsedbeforedelay":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time elapsed before delay starts","isMeasurement":true},"prompttokencount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Token count of the prompt","isMeasurement":true},"expecteddelaybeforefetch":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Expected delay before fetch dictated by the experiment 'renameSuggestionsDelayBeforeFetch'","isMeasurement":true},"actualdelaybeforefetch":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Actual delay before fetch computed as 'expectedDelay - promptComputationTime'","isMeasurement":true},"successresponsecharcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Character count in model response (for response.type == 'success')","isMeasurement":true},"responseunusedcharcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Character count in model response that was unused, e.g., rename explanations, response format overhead","isMeasurement":true},"fetchtime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time it took to fetch from endpoint","isMeasurement":true},"symbolnamescount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of suggested names","isMeasurement":true}},"GitHub.copilot-chatsurvey.show":{"owner":"digitarald","comment":"Measures survey notification result","source":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The last used feature before the survey."},"language":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The last used editor language before the survey."},"activedays":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The number of days the user has used the extension.","isMeasurement":true},"firstactive":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The number of days since the user first used the extension.","isMeasurement":true},"surveytype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The type of survey being prompted."}},"GitHub.copilot-chatsurvey.action":{"owner":"digitarald","comment":"Measures survey notification result","source":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The source of the survey prompt."},"language":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The last used editor language before the survey."},"selection":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The user's selection."},"surveytype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The type of survey being prompted."}},"GitHub.copilot-chatnotebook.editGeneration":{"owner":"donjayamanne","comment":"Metadata about the code mapper request","requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the current request turn."},"requestsource":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The source from where the request was made"},"model":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Model selection for the response"},"inputformat":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Input format for the notebook source (xml, json, text)"},"isemptynotebook":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Whether the notebook is empty","isMeasurement":true},"isnotebookoruri":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Whether we're given a notebook or just a uri (1 = Notebook, 0 = Uri)","isMeasurement":true},"isjupyternotebookuri":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Whether we're given a Jupyter notebook or just a uri (1 = Jupyter Notebook, 0 = Other)","isMeasurement":true},"iseditemitted":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Whether a Notebook edit was emitted (insert or delete cell) (1 = Yes, 0 = No)","isMeasurement":true},"iscelltexteditemitted":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Whether an edit was emitted for a cell (1 = Yes, 0 = No)","isMeasurement":true},"sourcelength":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Number of lines in the source code from which we're to generate edits","isMeasurement":true}},"GitHub.copilot-chattokenizer.stats":{"owner":"jrieken","comment":"Perf stats about tokenizers","callcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How often tokenize was called","isMeasurement":true},"encodeduration":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Average time encode took","isMeasurement":true},"textlength":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Average length of text that got encoded","isMeasurement":true}},"GitHub.copilot-chattoken":{"owner":"digitarald","comment":"Copilot token received from the service.","chatenabled":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Indicates if the token enabled chat.","isMeasurement":true},"snippyenabled":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the block setting for public suggestions is enabled.","isMeasurement":true},"telemetryenabled":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the subscription has telemetry enabled.","isMeasurement":true},"mcpenabled":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the token has MCP features enabled.","isMeasurement":true},"previewenabled":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the token has editor preview features enabled.","isMeasurement":true},"reviewenabled":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the token has Copilot code review features enabled.","isMeasurement":true}},"GitHub.copilot-chatquery-expfeature":{"abexp.queriedfeature":{"classification":"SystemMetaData","purpose":"FeatureInsight"}},"GitHub.copilot-chatcall-tas-error":{"errortype":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth"}},"GitHub.copilot-chatprojectLabels":{"owner":"digitarald","comment":"Reports quality of labels detected in a workspace","labels":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Unique workspace label count."},"count":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Unique workspace labels in context.","isMeasurement":true}},"GitHub.copilot-chatnesStatusOnActivation":{"owner":"ulugbekna","comment":"To identify if NES was enabled by the user when extension is activated","iscompletionsenabled":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether ghost-text completions was effectively enabled","isMeasurement":true},"iscompletionsuserconfigured":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether ghost-text completions was configured by the user","isMeasurement":true},"isnesenabled":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether NES was effectively enabled (e.g., by nes-by-default exp)","isMeasurement":true},"isnesuserconfigured":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the Inline Edits feature is configured by the user","isMeasurement":true}},"GitHub.copilot-chatvscode.contentChangeForUnknownDocument":{"owner":"hediet","comment":"Telemetry for verifying VSCode content change API consistency"},"GitHub.copilot-chatvscode.contentChangeInconsistencyDetected":{"owner":"hediet","comment":"Telemetry for verifying VSCode content change API consistency","languageid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Language of the currently open document."},"sourceofchange":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Source of the change."},"reason":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Reason for change (1 = undo, 2 = redo).","isMeasurement":true},"previouslinefeed":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Line feed of the previously open document.","isMeasurement":true},"currentlinefeed":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Line feed of the currently open document.","isMeasurement":true},"scheme":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Scheme of the currently open document."}},"GitHub.copilot-chatprovideInlineEdit":{"owner":"ulugbekna","comment":"Telemetry for inline edit (NES) provided","opportunityid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Unique identifier for an opportunity to show an NES."},"headerrequestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Unique identifier of the network request which is also included in the fetch request header."},"providerid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"NES provider identifier (StatelessNextEditProvider)"},"modelname":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Name of the model used to provide the NES"},"activedocumentlanguageid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"LanguageId of the active document"},"acceptance":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"User acceptance of the edit"},"disposalreason":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Reason for disposal of NES"},"supersededbyopportunityid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"UUID of the opportunity that superseded this edit"},"endpoint":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Endpoint for the request"},"nonexteditreasonkind":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Reason kind for no next edit"},"nonexteditreasonmessage":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Reason message for no next edit"},"fetchresult":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Fetch result"},"fetcherror":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Fetch error message"},"pickednes":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the request had picked NES"},"nexteditprovidererror":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Error message from next edit provider"},"diagnostictype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Type of diagnostics"},"diagnosticdroppedreasons":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Reasons for dropping diagnostics NES suggestions"},"requestn":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Request number","isMeasurement":true},"hadstatelessnexteditprovidercall":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the request had a stateless next edit provider call","isMeasurement":true},"statelessnexteditproviderduration":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Duration of stateless next edit provider","isMeasurement":true},"nexteditproviderduration":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Duration of next edit provider","isMeasurement":true},"isfromcache":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the edit was provided from cache","isMeasurement":true},"subsequenteditorder":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Order of the subsequent edit","isMeasurement":true},"activedocumentoriginallinecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of lines in the active document before shortening","isMeasurement":true},"activedocumentnlinesinprompt":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of lines in the active document included in prompt","isMeasurement":true},"waspreviouslyrejected":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the edit was previously rejected","isMeasurement":true},"isshown":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the edit was shown","isMeasurement":true},"isnotebook":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the document is a notebook","isMeasurement":true},"isnesforanotherdoc":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the NES if for another document","isMeasurement":true},"ismultilineedit":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the NES is for a multiline edit","isMeasurement":true},"iseoldifferent":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the NES edit and original text have different end of lines","isMeasurement":true},"isnexteditorvisible":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the next editor is visible","isMeasurement":true},"isnexteditorrangevisible":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the next editor range is visible","isMeasurement":true},"notebookcellmarkerindex":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Index of the notebook cell marker in the edit","isMeasurement":true},"isactivedocument":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the document is the active document","isMeasurement":true},"hasnotebookcellmarker":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the edit has a notebook cell marker","isMeasurement":true},"notebookcellmarkercount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Count of notebook cell markers in the edit","isMeasurement":true},"notebookid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Id of notebook"},"notebookcelllines":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Line counts of notebook cells"},"notebooktype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Type of notebook, if any"},"logprobthreshold":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Log probability threshold for the edit","isMeasurement":true},"documentscount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of documents","isMeasurement":true},"editscount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of edits","isMeasurement":true},"activedocumenteditscount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of edits in the active document","isMeasurement":true},"promptlinecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of lines in the prompt","isMeasurement":true},"promptcharcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of characters in the prompt","isMeasurement":true},"hadlowlogprobsuggestion":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the suggestion had low log probability","isMeasurement":true},"neditssuggested":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of edits suggested","isMeasurement":true},"hasnextedit":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether next edit provider returned an edit (if an edit was previously rejected, this field is false)","isMeasurement":true},"nexteditlogprob":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Log probability of the next edit","isMeasurement":true},"linedistancetomostrecentedit":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Line distance to most recent edit","isMeasurement":true},"iscursoratendofline":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the cursor is at the end of the line","isMeasurement":true},"debouncetime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Debounce time","isMeasurement":true},"artificialdelay":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Artificial delay (aka backoff) on the response based on previous user acceptance/rejection in milliseconds","isMeasurement":true},"fetchstartedafterms":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time from inline edit provider invocation to fetch init","isMeasurement":true},"ttft":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time to first token","isMeasurement":true},"fetchtime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time from fetch init to end of stream","isMeasurement":true},"prompttokens":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of tokens in the prompt","isMeasurement":true},"responsetokens":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of tokens in the response","isMeasurement":true},"cachedtokens":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of cached tokens in the response","isMeasurement":true},"acceptedpredictiontokens":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of tokens in the prediction that appeared in the completion","isMeasurement":true},"rejectedpredictiontokens":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of tokens in the prediction that appeared in the completion","isMeasurement":true},"haddiagnosticsnes":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the request had diagnostics NES","isMeasurement":true},"hadllmnes":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the request had LLM NES","isMeasurement":true},"configisdiagnosticsnesenabled":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether diagnostics NES is enabled","isMeasurement":true},"isnaturallanguagedominated":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the context is dominated by natural language","isMeasurement":true},"diagnostichasexistingsamefileimport":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the diagnostic has an existing same file import","isMeasurement":true},"diagnosticislocalimport":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the diagnostic is a local import","isMeasurement":true},"diagnosticalternativeimportscount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of alternative imports for the diagnostic","isMeasurement":true},"diagnosticdistancetounknowndiagnostic":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Distance to the unknown diagnostic","isMeasurement":true},"diagnosticdistancetoalternativediagnostic":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Distance to the alternative diagnostic","isMeasurement":true},"diagnostichasalternativediagnosticforsamerange":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether there is an alternative diagnostic for the same range","isMeasurement":true}},"GitHub.copilot-chatreportInlineEditSurvivalRate":{"owner":"hediet","comment":"Reports the survival rate for an inline edit.","opportunityid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Unique identifier for an opportunity to show an NES."},"survivalratefourgram":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The rate between 0 and 1 of how much of the AI edit is still present in the document.","isMeasurement":true},"survivalratenorevert":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The rate between 0 and 1 of how much of the ranges the AI touched ended up being reverted.","isMeasurement":true},"didbranchchange":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Indicates if the branch changed in the meantime. If the branch changed (value is 1), this event should probably be ignored.","isMeasurement":true},"timedelayms":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The time delay between the user accepting the edit and measuring the survival rate.","isMeasurement":true},"arc":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The accepted and restrained character count.","isMeasurement":true}},"GitHub.copilot-chatworkspaceChunkEmbeddingsIndex.computeChunksAndEmbeddings.error":{"owner":"mjbvz","comment":"Tracks errors from the chunks service","source":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Caller of computeChunksAndEmbeddings"},"responsestatus":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Status code","isMeasurement":true}},"GitHub.copilot-chatworkspaceChunkEmbeddingsIndex.perf.triggerIndexingOfWorkspace":{"owner":"mjbvz","comment":"Total time for triggerIndexingOfWorkspace to complete","status":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the call succeeded or failed"},"trigger":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"What triggered the call"},"exectime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time in milliseconds that the call took","isMeasurement":true}},"GitHub.copilot-chatworkspaceChunkEmbeddingsIndex.perf.searchWorkspace":{"owner":"mjbvz","comment":"Total time for searchWorkspace to complete","status":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the call succeeded or failed"},"workspacesearchsource":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Caller of the search"},"workspacesearchcorrelationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Correlation id for the search"},"exectime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time in milliseconds that the call took","isMeasurement":true}},"GitHub.copilot-chatworkspaceChunkEmbeddingsIndex.perf.searchSubsetOfFiles":{"owner":"mjbvz","comment":"Total time for searchSubsetOfFiles to complete","status":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the call succeeded or failed"},"workspacesearchsource":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Caller of the search"},"workspacesearchcorrelationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Correlation id for the search"},"exectime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time in milliseconds that the call took","isMeasurement":true}},"GitHub.copilot-chatworkspaceChunkEmbeddingsIndex.toSemanticChunks.noSemanticChunkFound":{"owner":"mjbvz","comment":"Tracks errors related to mapping to semantic chunks","extname":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The file's extension"},"semanticchunkcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of semantic chunks returned","isMeasurement":true}},"GitHub.copilot-chatworkspaceChunkEmbeddingsIndex.perf.getAllWorkspaceEmbeddings":{"owner":"mjbvz","comment":"Total time for getAllWorkspaceEmbeddings to complete","status":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the call succeeded or failed"},"workspacesearchsource":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Caller of the search"},"workspacesearchcorrelationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Correlation id for the search"},"exectime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time in milliseconds that the call took","isMeasurement":true},"totalfilecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Total number of files we have in the workspace","isMeasurement":true},"recomputedfilecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Total number of files that were not in the cache","isMeasurement":true},"recomputedtotalcontentlength":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Total length of text for recomputed files","isMeasurement":true}},"GitHub.copilot-chatworkspaceChunkEmbeddingsIndex.perf.getEmbeddingsForFiles":{"owner":"mjbvz","comment":"Total time for getEmbeddingsForFiles to complete","status":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the call succeeded or failed"},"workspacesearchsource":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Caller of the search"},"workspacesearchcorrelationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Correlation id for the search"},"exectime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time in milliseconds that the call took","isMeasurement":true},"totalfilecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Total number of files we are searching","isMeasurement":true},"recomputedfilecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Total number of files that were not in the cache","isMeasurement":true},"recomputedtotalcontentlength":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Total length of text for recomputed files","isMeasurement":true}},"GitHub.copilot-chatworkspaceChunkIndex.initialize":{"owner":"mjbvz","comment":"Information about successful code searches","totalfilecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Total number of files we can index","isMeasurement":true}},"GitHub.copilot-chatgit.generateCommitMessageSurvival":{"owner":"lszomoru","comment":"Tracks how much of the generated git commit message has survived","attemptcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many times the user has retried.","isMeasurement":true},"survivalratefourgram":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The rate between 0 and 1 of how much of the suggested git commit message was used when the code change was committed.","isMeasurement":true}},"GitHub.copilot-chatdevcontainer.generateConfig":{"owner":"chrmarti","comment":"Metadata about the Dev Container Config generation","model":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The model that is used in the endpoint."},"requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the current request turn."},"responsetype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The result type of the response."},"templateid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The chosen template id."},"featureids":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The chosen feature ids."},"originalfilenamecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The number of filenames.","isMeasurement":true},"originalfilenamelength":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The length of the filenames.","isMeasurement":true},"processedfilenamecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The number of filenames after processing.","isMeasurement":true},"processedfilenamelength":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The length of the filenames after processing.","isMeasurement":true},"timetorequest":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"How long it took to start the request.","isMeasurement":true},"timetocomplete":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"How long it took to complete the request.","isMeasurement":true}},"GitHub.copilot-chatresponse.cancelled":{"owner":"digitarald","comment":"Report canceled service responses for quality.","model":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Model selection for the response"},"apitype":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"API type for the response- chat completions or responses"},"source":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Source for why the request was made"},"requestid":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Id of the request"},"totaltokenmax":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Maximum total token window","isMeasurement":true},"prompttokencount":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Number of prompt tokens","isMeasurement":true},"tokencountmax":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Maximum generated tokens","isMeasurement":true},"timetofirsttoken":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Time to first token","isMeasurement":true},"timetofirsttokenemitted":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Time to first token emitted (visible text)","isMeasurement":true},"timetocancelled":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Time to first token","isMeasurement":true},"isvisionrequest":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Whether the request was for a vision model","isMeasurement":true},"isbyok":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the request was for a BYOK model","isMeasurement":true},"retryaftererrorcategory":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the response failed and this is a retry attempt, this contains the error category."},"retryafterfiltercategory":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the response was filtered and this is a retry attempt, this contains the original filtered content category."}},"GitHub.copilot-chatresponse.error":{"owner":"digitarald","comment":"Report quality issue for when a service response failed.","type":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Type of issue"},"reason":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Reason of issue"},"model":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Model selection for the response"},"apitype":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"API type for the response- chat completions or responses"},"source":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Source for why the request was made"},"requestid":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Id of the request"},"reasoningeffort":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Reasoning effort level"},"reasoningsummary":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Reasoning summary level"},"totaltokenmax":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Maximum total token window","isMeasurement":true},"prompttokencount":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Number of prompt tokens","isMeasurement":true},"tokencountmax":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Maximum generated tokens","isMeasurement":true},"timetofirsttoken":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Time to first token","isMeasurement":true},"timetofirsttokenemitted":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Time to first token emitted (visible text)","isMeasurement":true},"isvisionrequest":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Whether the request was for a vision model","isMeasurement":true},"isbyok":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the request was for a BYOK model","isMeasurement":true},"retryaftererrorcategory":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the response failed and this is a retry attempt, this contains the error category."},"retryafterfiltercategory":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the response was filtered and this is a retry attempt, this contains the original filtered content category."}},"GitHub.copilot-chatresponse.success":{"owner":"digitarald","comment":"Report quality details for a successful service response.","reason":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Reason for why a response finished"},"filterreason":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Reason for why a response was filtered"},"source":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Source of the initial request"},"initiatortype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the request was initiated by a user or an agent"},"model":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Model selection for the response"},"apitype":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"API type for the response- chat completions or responses"},"requestid":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Id of the current turn request"},"reasoningeffort":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Reasoning effort level"},"reasoningsummary":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Reasoning summary level"},"totaltokenmax":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Maximum total token window","isMeasurement":true},"clientprompttokencount":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Number of prompt tokens, locally counted","isMeasurement":true},"prompttokencount":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Number of prompt tokens, server side counted","isMeasurement":true},"promptcachetokencount":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Number of prompt tokens hitting cache as reported by server","isMeasurement":true},"tokencountmax":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Maximum generated tokens","isMeasurement":true},"tokencount":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Number of generated tokens","isMeasurement":true},"reasoningtokens":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Number of reasoning tokens","isMeasurement":true},"acceptedpredictiontokens":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of tokens in the prediction that appeared in the completion","isMeasurement":true},"rejectedpredictiontokens":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of tokens in the prediction that appeared in the completion","isMeasurement":true},"completiontokens":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of tokens in the output","isMeasurement":true},"timetofirsttoken":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Time to first token","isMeasurement":true},"timetofirsttokenemitted":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Time to first token emitted (visible text)","isMeasurement":true},"timetocomplete":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Time to complete the request","isMeasurement":true},"isvisionrequest":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Whether the request was for a vision model","isMeasurement":true},"isbyok":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the request was for a BYOK model","isMeasurement":true},"retryaftererrorcategory":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the response failed and this is a retry attempt, this contains the error category."},"retryafterfiltercategory":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the response was filtered and this is a retry attempt, this contains the original filtered content category."}},"GitHub.copilot-chatconversation.repetition.detected":{"owner":"lramos15","comment":"Calculates the number of repetitions in a response. Useful for loop detection","finishreason":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Reason for why a response finished. Helps identify cancellation vs length limits"},"requestid":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Id for this message request."},"lengthofline":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Length of the repeating line, in characters.","isMeasurement":true},"numberofrepetitions":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Number of times the line repeats.","isMeasurement":true},"totallines":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Number of total lines in the response.","isMeasurement":true}},"GitHub.copilot-chatvirtualTools.parallelCall":{"owner":"connor4312","comment":"Reports information about the generation of virtual tools.","toolcallname":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Name of the original tool call"},"toolgroupname":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Name of the containing tool group"},"toolgroupstate":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If/how the tool call was expanded"}},"GitHub.copilot-chatfeedback.generateDiagnostics":{"owner":"chrmarti","comment":"Metadata about the code feedback generation","model":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The model that is used in the endpoint."},"requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the current request turn."},"source":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Which backend generated the comment."},"messageid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the current request."},"responsetype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The result type of the response."},"documenttype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"What kind of document (e.g., text or notebook)."},"languageid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The current file language."},"inputtype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"What type of input (e.g., selection or change)."},"commenttypes":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"What kind of comment (e.g., correctness or performance)."},"promptcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The number of prompts run.","isMeasurement":true},"numberofdiagnostics":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The number of diagnostics.","isMeasurement":true},"inputdocumentcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many documents were part of the input.","isMeasurement":true},"inputlinecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many (selected or changed) lines were part of the input.","isMeasurement":true},"timetorequest":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"How long it took to start the request.","isMeasurement":true},"timetocomplete":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"How long it took to complete the request.","isMeasurement":true}},"GitHub.copilot-chatreview.comment.vote":{"owner":"chrmarti","comment":"Metadata about votes on review comments","source":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Which backend generated the comment."},"requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the current request turn."},"documenttype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"What kind of document (e.g., text or notebook)."},"languageid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The current file language."},"inputtype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"What type of input (e.g., selection or change)."},"commenttype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"What kind of comment (e.g., correctness or performance)."},"useraction":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"What action the user triggered (e.g., helpful, unhelpful, apply or discard)."},"commentindex":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Original index of the comment in the generated comments.","isMeasurement":true},"actioncount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of previously logged actions on the comment.","isMeasurement":true},"inputdocumentcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many documents were part of the input.","isMeasurement":true},"inputlinecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many (selected or changed) lines were part of the input.","isMeasurement":true},"promptcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The number of prompts run.","isMeasurement":true},"totalcomments":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Total number of comments.","isMeasurement":true},"comments":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many comments are affected by the action.","isMeasurement":true},"commentlength":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many characters long the review comment is.","isMeasurement":true}},"GitHub.copilot-chatreview.comment.action":{"owner":"chrmarti","comment":"Metadata about actions on review comments","source":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Which backend generated the comment."},"requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the current request turn."},"documenttype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"What kind of document (e.g., text or notebook)."},"languageid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The current file language."},"inputtype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"What type of input (e.g., selection or change)."},"commenttype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"What kind of comment (e.g., correctness or performance)."},"useraction":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"What action the user triggered (e.g., helpful, unhelpful, apply or discard)."},"commentindex":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Original index of the comment in the generated comments.","isMeasurement":true},"actioncount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of previously logged actions on the comment.","isMeasurement":true},"inputdocumentcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many documents were part of the input.","isMeasurement":true},"inputlinecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many (selected or changed) lines were part of the input.","isMeasurement":true},"promptcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The number of prompts run.","isMeasurement":true},"totalcomments":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Total number of comments.","isMeasurement":true},"comments":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many comments are affected by the action.","isMeasurement":true},"commentlength":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many characters long the review comment is.","isMeasurement":true}},"GitHub.copilot-chatreview.discardCommentRangeSurvival":{"owner":"chrmarti","comment":"Tracks how much percent of the commented range surived after 5 minutes of discarding","survivalratefourgram":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The rate between 0 and 1 of how much of the AI edit is still present in the document.","isMeasurement":true},"survivalratenorevert":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The rate between 0 and 1 of how much of the ranges the AI touched ended up being reverted.","isMeasurement":true},"didbranchchange":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Indicates if the branch changed in the meantime. If the branch changed (value is 1), this event should probably be ignored.","isMeasurement":true},"timedelayms":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The time delay between the user accepting the edit and measuring the survival rate.","isMeasurement":true},"source":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Which backend generated the comment."},"requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the current request turn."},"documenttype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"What kind of document (e.g., text or notebook)."},"languageid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The current file language."},"inputtype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"What type of input (e.g., selection or change)."},"commenttype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"What kind of comment (e.g., correctness or performance)."},"useraction":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"What action the user triggered (e.g., helpful, unhelpful, apply or discard)."},"commentindex":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Original index of the comment in the generated comments.","isMeasurement":true},"actioncount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of previously logged actions on the comment.","isMeasurement":true},"inputdocumentcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many documents were part of the input.","isMeasurement":true},"inputlinecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many (selected or changed) lines were part of the input.","isMeasurement":true},"promptcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The number of prompts run.","isMeasurement":true},"totalcomments":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Total number of comments.","isMeasurement":true},"comments":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many comments are affected by the action.","isMeasurement":true},"commentlength":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many characters long the review comment is.","isMeasurement":true}},"GitHub.copilot-chatgit.generateCommitMessage":{"owner":"lszomoru","comment":"Metadata about the git commit message generation","model":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The model that is used in the endpoint."},"requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the current request turn."},"responsetype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The result type of the response."},"attemptcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many times the user has retried.","isMeasurement":true},"difffilecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The number of files in the commit.","isMeasurement":true},"difflength":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The length of the diffs in the commit.","isMeasurement":true},"timetorequest":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"How long it took to start the request.","isMeasurement":true},"timetocomplete":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"How long it took to complete the request.","isMeasurement":true}},"GitHub.copilot-chatgit.generateCommitMessageIncorrectResponseFormat":{"owner":"lszomoru","comment":"Metadata about the git commit message generation when the response is not in the expected format","requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the current request turn."},"responseformat":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The type of the response format."}},"GitHub.copilot-chatapplyPatch.inResponse":{"owner":"digitarald","comment":"Metadata about an inline response from the model","model":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The model that is used in the endpoint."}},"GitHub.copilot-chattoolCallDetails":{"owner":"roblourens","comment":"Records information about tool calls during a request.","intentid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Id for the invoked intent."},"conversationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Id for the current chat conversation."},"outcome":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the request succeeded or failed."},"numrequests":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The total number of requests made","isMeasurement":true},"turnindex":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The conversation turn index","isMeasurement":true},"toolcounts":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The number of times each tool was used"},"sessionduration":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The time since the session started","isMeasurement":true},"turnduration":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The time since the turn started","isMeasurement":true},"prompttokencount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many tokens were in the last generated prompt.","isMeasurement":true},"messagecharlen":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many characters were in the user message.","isMeasurement":true},"availabletoolcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How number of tools that were available.","isMeasurement":true},"responsetype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the final response was successful or how it failed."},"invalidtoolcallcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The number of tool call rounds that had an invalid tool call."},"model":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The model used for the request."}},"GitHub.copilot-chatpanel.request":{"owner":"digitarald","comment":"Metadata about one message turn in a chat conversation.","command":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The command which was used in providing the response."},"contexttypes":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The context parts which were used in providing the response."},"prompttypes":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The prompt types and their length which were used in providing the response."},"conversationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Id for the current chat conversation."},"requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Id for this message request."},"responseid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Id for this message response."},"responsetype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the response was successful or how it failed."},"languageid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The language of the active editor."},"codeblocks":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Code block languages in the response."},"model":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The model that is used in the endpoint."},"apitype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The API type used in the endpoint- responses or chatCompletions"},"turn":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many turns have been made in the conversation.","isMeasurement":true},"round":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The current round index of the turn.","isMeasurement":true},"textblocks":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"For text-only responses (no code), how many paragraphs were in the response.","isMeasurement":true},"links":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Symbol and file links in the response.","isMeasurement":true},"maybeofftopic":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the response sounds like it got rejected due to the request being off-topic.","isMeasurement":true},"messagetokencount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many characters were in the user message.","isMeasurement":true},"prompttokencount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many characters were in the generated prompt.","isMeasurement":true},"userpromptcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many user messages were in the generated prompt.","isMeasurement":true},"responsetokencount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many characters were in the response.","isMeasurement":true},"timetorequest":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"How long it took to start the final request.","isMeasurement":true},"timetofirsttoken":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"How long it took to get the first token.","isMeasurement":true},"timetocomplete":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"How long it took to complete the request.","isMeasurement":true},"codegeninstructionscount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many code generation instructions are in the request.","isMeasurement":true},"codegeninstructionslength":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whats the length of the code generation instructions that were added to request.","isMeasurement":true},"codegeninstructionsfilteredcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many code generation instructions were filtered.","isMeasurement":true},"codegeninstructionfilecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many code generation instruction files were read.","isMeasurement":true},"codegeninstructionsettingscount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many code generation instructions originated from settings.","isMeasurement":true},"toolcounts":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The number of times each tool was used"},"numtoolcalls":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The total number of tool calls","isMeasurement":true},"availabletoolcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How number of tools that were available.","isMeasurement":true},"temporalctxfilecount":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"How many temporal document-parts where included","isMeasurement":true},"temporalctxtotalcharcount":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"How many characters all temporal document-parts where included","isMeasurement":true},"summarizationenabled":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"Whether summarization is enabled (the default) or disabled (via user setting)","isMeasurement":true}},"GitHub.copilot-chatinline.request":{"owner":"digitarald","comment":"Metadata about an inline response from the model","command":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The command which was used in providing the response."},"contexttypes":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The context parts which were used in providing the response."},"prompttypes":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The prompt types and their length which were used in providing the response."},"conversationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The id of the conversation."},"requestid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Id for this message request."},"languageid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The language of the current document."},"responsetype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The result type of the response."},"replytype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How response is shown in the interface."},"model":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The model that is used in the endpoint."},"apitype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The API type used in the endpoint- responses or chatCompletions"},"diagnosticsprovider":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The diagnostics provider."},"diagnosticcodes":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The diagnostics codes in the file."},"selectiondiagnosticcodes":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The selected diagnostics codes."},"firstturn":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether this is the first turn in the conversation.","isMeasurement":true},"isnotebook":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether this is a notebook document.","isMeasurement":true},"messagetokencount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many tokens are in the rest of the query, without the command.","isMeasurement":true},"prompttokencount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many tokens are in the overall prompt.","isMeasurement":true},"responsetokencount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many tokens were in the response.","isMeasurement":true},"implicitcommand":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the command was implictly detected or provided by the user.","isMeasurement":true},"attemptcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many times the user has retried.","isMeasurement":true},"selectionlinecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many lines are in the current selection.","isMeasurement":true},"wholerangelinecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many lines are in the expanded whole range.","isMeasurement":true},"editcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many edits are suggested.","isMeasurement":true},"editlinecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many lines are in all suggested edits.","isMeasurement":true},"markdowncharcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many characters were emitted as markdown to vscode in the response stream.","isMeasurement":true},"problemscount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many problems are in the current document.","isMeasurement":true},"selectionproblemscount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many problems are in the current selected code.","isMeasurement":true},"diagnosticscount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many diagnostic codes are in the current .","isMeasurement":true},"selectiondiagnosticscount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many diagnostic codes are in the code at the selection.","isMeasurement":true},"outcomeannotations":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Annotations about the outcome of the request."},"timetorequest":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"How long it took to start the final request.","isMeasurement":true},"timetofirsttoken":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"How long it took to get the first token.","isMeasurement":true},"timetocomplete":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"How long it took to complete the request.","isMeasurement":true},"temporalctxfilecount":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"How many temporal document-parts where included","isMeasurement":true},"temporalctxtotalcharcount":{"classification":"SystemMetaData","purpose":"PerformanceAndHealth","comment":"How many characters all temporal document-parts where included","isMeasurement":true},"codegeninstructionscount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many code generation instructions are in the request.","isMeasurement":true},"codegeninstructionslength":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The length of the code generation instructions that were added to request.","isMeasurement":true},"codegeninstructionsfilteredcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many code generation instructions were filtered.","isMeasurement":true},"codegeninstructionfilecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many code generation instruction files were read.","isMeasurement":true},"codegeninstructionsettingscount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How many code generation instructions originated from settings.","isMeasurement":true}},"GitHub.copilot-chatgetNodeToDocument":{"owner":"ulugbekna","comment":"Info on success and properties of detecting AST node to document","languageid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The language ID of the document"},"typeofnodetodocument":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Type of the AST node offered to be documented (type defined by tree-sitter grammar for that language)"},"nodetodocumentstart":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Start offset of the AST node offered to be documented (type defined by tree-sitter grammar for that language)"},"nodetodocumentend":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"End offset of the AST node offered to be documented (type defined by tree-sitter grammar for that language)"},"selectionoffsetrangestart":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The start offset range of the selection in the document"},"selectionoffsetrangeend":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The end offset range of the selection in the document"},"wholerangeoffsetrangestart":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The start offset range of the inline-chat wholeRange"},"wholerangeoffsetrangeend":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The end offset range of the inline-chat wholeRange"},"timespentms":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time (in milliseconds) spent on finding the AST node to document (approximate as it's an async call)","isMeasurement":true}},"GitHub.copilot-chatcustommodel.found":{"owner":"karthiknadig","comment":"Reports that an experimental model was in the list of models.","model":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Model in found list."}},"GitHub.copilot-chatintentDetection":{"owner":"ulugbekna","comment":"Intent detection telemetry.","chatlocation":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Which chat (panel or inline) intent detection is used for."},"preferredintent":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Which intent was initially provided as preferred."},"detectedintent":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Intent that was detected by Copilot"},"languageid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Language ID of the document for which intent detection happened."},"isrerunwithoutintentdetection":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the user disliked the detected intent and tried to rerun without it."}},"GitHub.copilot-chatfullWorkspaceChunkSearch.perf.searchFileChunks":{"owner":"mjbvz","comment":"Total time for searchFileChunks to complete","status":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the call succeeded or failed"},"workspacesearchsource":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Caller of the search"},"workspacesearchcorrelationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Correlation id for the search"},"failurereason":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"why did we fail"},"exectime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time in milliseconds that the call took","isMeasurement":true}},"GitHub.copilot-chattfIdfChunkSearch.perf.searchFileChunks":{"owner":"mjbvz","comment":"Total time for searchFileChunks to complete","status":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the call succeeded or failed"},"workspacesearchsource":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Caller of the search"},"workspacesearchcorrelationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Correlation id for the search"},"exectime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time in milliseconds that the call took","isMeasurement":true}},"GitHub.copilot-chattfIdfChunkSearch.perf.searchSubsetOfFiles":{"owner":"mjbvz","comment":"Total time for searchSubsetOfFiles to complete","status":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the call succeeded or failed"},"workspacesearchsource":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Caller of the search"},"workspacesearchcorrelationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Correlation id for the search"},"exectime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time in milliseconds that the call took","isMeasurement":true},"files":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of files being searched","isMeasurement":true}},"GitHub.copilot-chattfIdfChunkSearch.perf.tfidfSearch":{"owner":"mjbvz","comment":"Total time for searchFileChunks to complete","status":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the call succeeded or failed"},"workspacesearchsource":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Caller of the search"},"workspacesearchcorrelationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Correlation id for the search"},"exectime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time in milliseconds that the call took","isMeasurement":true},"filecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Total number of files in the index","isMeasurement":true},"updatedfilecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Total number of files updated for this search","isMeasurement":true},"updatetime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time in milliseconds that updating of the index took","isMeasurement":true},"searchtime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time in milliseconds that searching the index took","isMeasurement":true}},"GitHub.copilot-chattfidfChunkSearch.perf.initializeTfidf":{"owner":"mjbvz","comment":"Understanding how long it took to initialize the tfidf index","status":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the call succeeded or failed"},"exectime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time in milliseconds that the call took","isMeasurement":true},"initworkspaceindextime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time in milliseconds that initializing the workspace index took","isMeasurement":true},"readinitdocstime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time in milliseconds that reading the initial documents took","isMeasurement":true},"filecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of files that we can index","isMeasurement":true},"newfilecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of new files","isMeasurement":true},"outofsyncfilecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of files that are out of sync","isMeasurement":true},"deletedfilecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of files that have been deleted","isMeasurement":true}},"GitHub.copilot-chatembeddingsChunkSearch.perf.searchFileChunks":{"owner":"mjbvz","comment":"Total time for searchFileChunks to complete","status":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the call succeeded or failed"},"workspacesearchsource":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Caller of the search"},"workspacesearchcorrelationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Correlation id for the search"},"exectime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time in milliseconds that the call took","isMeasurement":true}},"GitHub.copilot-chatembeddingsChunkSearch.perf.searchSubsetOfFiles":{"owner":"mjbvz","comment":"Total time for searchSubsetOfFiles to complete","status":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the call succeeded or failed"},"workspacesearchsource":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Caller of the search"},"workspacesearchcorrelationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Correlation id for the search"},"exectime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time in milliseconds that the call took","isMeasurement":true}},"GitHub.copilot-chattfIdfWithSemanticChunkSearch.perf.searchFileChunks":{"owner":"mjbvz","comment":"Total time for searchFileChunks to complete","status":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the call succeeded or failed"},"workspacesearchsource":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Caller of the search"},"workspacesearchcorrelationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Correlation id for the search"},"exectime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time in milliseconds that the call took","isMeasurement":true}},"GitHub.copilot-chattfIdfWithSemanticChunkSearch.perf.toSemanticChunks":{"owner":"mjbvz","comment":"Time for the toSemantic part of searchFileChunks to complete","status":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the call succeeded or failed"},"workspacesearchsource":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Caller of the search"},"workspacesearchcorrelationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Correlation id for the search"},"exectime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time in milliseconds that the call took","isMeasurement":true}},"GitHub.copilot-chatworkspaceChunkSearch.created":{"owner":"mjbvz","comment":"Metadata about workspace chunk search","embeddingtype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Type of embeddings used"}},"GitHub.copilot-chatworkspaceChunkSearchStrategy":{"owner":"mjbvz","comment":"Understanding which workspace chunk search strategy is used","strategy":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The chosen strategy"},"errordiagmessage":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The reason why the search failed"},"embeddingtype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The type of embeddings used"},"workspacesearchsource":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Caller of the search"},"workspacesearchcorrelationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Correlation id for the search"},"exectime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Total time in ms for workspace chunk search","isMeasurement":true},"workspaceindexfilecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Total number of files in our workspace index","isMeasurement":true},"wasfirstsearchinworkspace":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Tracks if this was the first time we triggered a workspace search","isMeasurement":true}},"GitHub.copilot-chatworkspaceChunkSearch.perf.searchFileChunks":{"owner":"mjbvz","comment":"Total time for searchFileChunks to complete","status":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the call succeeded or failed"},"embeddingtype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Type of embeddings used"},"workspacesearchsource":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Caller of the search"},"workspacesearchcorrelationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Correlation id for the search"},"exectime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time in milliseconds that the call took","isMeasurement":true}},"GitHub.copilot-chatworkspaceChunkSearch.perf.adaRerank":{"owner":"mjbvz","comment":"Understanding how effective ADA re-ranking is","status":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the call succeeded or failed"},"embeddingtype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Type of embeddings used"},"workspacesearchsource":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Caller of the search"},"workspacesearchcorrelationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Correlation id for the search"},"exectime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time in milliseconds that the call took","isMeasurement":true}},"GitHub.copilot-chatcodeSearchChunkSearch.isAvailable":{"owner":"mjbvz","comment":"Metadata about the code search availability check","workspacesearchsource":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Caller of the search"},"workspacesearchcorrelationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Correlation id for the search"},"unavailablereason":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Correlation id for the search"},"repostatues":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Detailed info about the statues of the repos in the workspace"},"exectime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How long the check too to complete","isMeasurement":true},"indexedrepocount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of indexed repositories","isMeasurement":true},"notyetindexedrepocount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of repositories that have not yet been indexed","isMeasurement":true},"indexedrepolocation.workspace":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of repositories that map exactly to a workspace folder","isMeasurement":true},"indexedrepolocation.parent":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of repositories that map to a parent folder","isMeasurement":true},"indexedrepolocation.sub":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of repositories that map to a sub-folder","isMeasurement":true},"indexedrepolocation.unknown":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of repositories that map to an unknown folder","isMeasurement":true}},"GitHub.copilot-chatcodeSearchChunkSearch.search.success":{"owner":"mjbvz","comment":"Information about successful code searches","workspacesearchsource":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Caller of the search"},"workspacesearchcorrelationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Correlation id for the search"},"diffsearchstrategy":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Search strategy for the diff"},"chunkcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Total number of returned chunks just from code search","isMeasurement":true},"locallychangedfilecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Total number of files that are different than the code search index","isMeasurement":true},"codesearchoutofsync":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Tracks if the local commit we think code search has indexed matches what code search actually has indexed","isMeasurement":true},"embeddingsrecomputedfilecount":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of files that needed to have their embeddings recomputed. Only logged when embeddings search is used","isMeasurement":true}},"GitHub.copilot-chatcodeSearchChunkSearch.perf.searchFileChunks":{"owner":"mjbvz","comment":"Total time for searchFileChunks to complete","status":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the call succeeded or failed"},"workspacesearchsource":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Caller of the search"},"workspacesearchcorrelationid":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Correlation id for the search"},"exectime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time in milliseconds that the call took","isMeasurement":true}},"GitHub.copilot-chatcodeSearchChunkSearch.perf.doCodeSearchWithRetry":{"owner":"mjbvz","comment":"Total time for doCodeSearch to complete","status":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the call succeeded or failed"},"exectime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time in milliseconds that the call took","isMeasurement":true}},"GitHub.copilot-chatcodeSearchChunkSearch.perf.tryToInstantIndexRepo":{"owner":"mjbvz","comment":"Total time for instant indexing to complete","status":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"If the call succeeded or failed"},"startrepostatus":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Initial status of the repo"},"endrepostatus":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Final status of the repo"},"exectime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Time in milliseconds that the call took","isMeasurement":true}},"GitHub.copilot-chatcodeSearchChunkSearch.triggerRemoteIndexing":{"owner":"mjbvz","comment":"Triggers of remote indexing","triggerreason":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How the call was triggered"},"error":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"How the trigger call failed"}},"GitHub.copilot-chatgithubAvailableEmbeddingTypes.getAvailableTypes.error":{"owner":"mjbvz","comment":"Information about failed githubAvailableEmbeddingTypes calls","statuscode":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The response status code","isMeasurement":true}},"GitHub.copilot-chatgithubAvailableEmbeddingTypes.getAvailableTypes.success":{"owner":"mjbvz","comment":"Information about successful githubAvailableEmbeddingTypes calls","primaryembeddingtypes":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"List of primary embedding types"},"deprecatedembeddingtypes":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"List of deprecated embedding types"}},"GitHub.copilot-chatgithubAvailableEmbeddingTypes.getPreferredType.error":{"owner":"mjbvz","comment":"Information about failed githubAvailableEmbeddingTypes calls","error":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The reason why the request failed"}},"GitHub.copilot-chatdebugSessionStart":{"owner":"connor4312","type":{"classification":"SystemMetaData","purpose":"FeatureInsight"},"breakpointcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","isMeasurement":true},"exceptionbreakpoints":{"classification":"SystemMetaData","purpose":"FeatureInsight"},"watchexpressionscount":{"classification":"SystemMetaData","purpose":"FeatureInsight","isMeasurement":true},"extensionname":{"classification":"PublicNonPersonalData","purpose":"FeatureInsight"},"isbuiltin":{"classification":"SystemMetaData","purpose":"FeatureInsight","isMeasurement":true},"launchjsonexists":{"classification":"SystemMetaData","purpose":"FeatureInsight","isMeasurement":true}},"GitHub.copilot-chatdebugSessionStop":{"owner":"connor4312","type":{"classification":"SystemMetaData","purpose":"FeatureInsight"},"success":{"classification":"SystemMetaData","purpose":"FeatureInsight","isMeasurement":true},"sessionlengthinseconds":{"classification":"SystemMetaData","purpose":"FeatureInsight","isMeasurement":true},"breakpointcount":{"classification":"SystemMetaData","purpose":"FeatureInsight","isMeasurement":true},"watchexpressionscount":{"classification":"SystemMetaData","purpose":"FeatureInsight","isMeasurement":true}},"GitHub.copilot-chatworkbenchActionExecuted":{},"GitHub.copilot-chatcommandCenter.chatInstall":{"owner":"bpasero","comment":"Provides insight into chat installation.","installresult":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the extension was installed successfully, cancelled or failed to install."},"installduration":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The duration it took to install the extension.","isMeasurement":true},"signuperrorcode":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The error code in case of an error signing up.","isMeasurement":true}},"GitHub.copilot-chatnotebook/editorOpened":{"owner":"rebornix","comment":"Identify the notebook editor view type","scheme":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"File system provider scheme for the resource"},"ext":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"File extension for the resource"},"viewtype":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"View type of the notebook editor"},"isrepl":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Whether the notebook editor is within a REPL editor","isMeasurement":true}},"GitHub.copilot-chatinteractiveEditor/session":{"owner":"jrieken","comment":"Data about an interaction editor session","extension":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"The extension providing the data"},"rounds":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Number of request that were made"},"undos":{"classification":"SystemMetaData","purpose":"FeatureInsight","isMeasurement":true,"comment":"Requests that have been undone"},"edits":{"classification":"SystemMetaData","purpose":"FeatureInsight","isMeasurement":true,"comment":"Did edits happen while the session was active"},"terminaledits":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"Did edits terminal the session","isMeasurement":true},"starttime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"When the session started"},"endtime":{"classification":"SystemMetaData","purpose":"FeatureInsight","comment":"When the session ended"}}},"commonProperties":{"common.tid":{"classification":"EndUserPseudonymizedInformation","purpose":"BusinessInsight"},"common.sku":{"classification":"SystemMetaData","purpose":"FeatureInsight"},"common.internal":{"classification":"SystemMetaData","purpose":"FeatureInsight","isMeasurement":true}}}
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.nls.cs.json:1:{"copilot.agent.description":"Úprava souborů v pracovním prostoru v režimu agenta","copilot.codebase.tool.description":"Najděte relevantní bloky dat souborů, symboly a další informace v kódové bázi.","copilot.description":"Zeptat se nebo upravit v kontextu","copilot.edits.description":"Upravit soubory v pracovním prostoru","copilot.listCodeUsages.tool.description":"Umožňuje najít odkazy, definice a další použití symbolu.","copilot.terminal.description":"Zeptat se na příkazy","copilot.terminal.explain.description":"Vysvětlit něco v terminálu","copilot.terminal.explain.sampleRequest":"Vysvětlit poslední příkaz","copilot.terminal.sampleRequest":"Jak si zobrazím všechny soubory v adresáři včetně podadresářů?","copilot.terminalPanel.description":"Zeptat se, jak něco provést na terminálu","copilot.testFailure.tool.description":"Obsahuje informace o posledním selhání testu jednotek.","copilot.toolSet.editing.description":"Upravit soubory v pracovním prostoru","copilot.toolSet.new.description":"Vygenerujte nový pracovní prostor s konfiguracemi specifickými pro VS Code, abyste mohli kompilovat, ladit a spouštět nové projekty.","copilot.toolSet.runCommand.description":"Spouštět příkazy v terminálu","copilot.toolSet.runNotebook.description":"Spustit buňky poznámkového bloku","copilot.toolSet.runTasks.description":"Spouštění úloh v pracovním prostoru","copilot.toolSet.search.description":"Hledání a čtení souborů ve vašem pracovním prostoru","copilot.tools.applyPatch.description":"Upravit textové soubory v pracovním prostoru","copilot.tools.applyPatch.name":"Použít opravu","copilot.tools.changes.description":"Získat rozdíly změněných souborů","copilot.tools.createDirectory.description":"Vytvoření nových adresářů v pracovním prostoru","copilot.tools.createDirectory.name":"Vytvořit adresář","copilot.tools.createFile.description":"Vytvořit nové soubory","copilot.tools.createFile.name":"Vytvořit soubor","copilot.tools.editNotebook.name":"Upravit poznámkový blok","copilot.tools.errors.description":"Zkontrolovat chyby u konkrétního souboru","copilot.tools.fetchWebPage.description":"Umožňuje načíst hlavní obsah z webové stránky. Měli byste zahrnout URL adresu stránky, kterou chcete načíst.","copilot.tools.fetchWebPage.name":"Načíst webovou stránku","copilot.tools.findFiles.name":"Najít soubory","copilot.tools.findTestFiles.description":"Pro soubor zdrojového kódu najděte soubor, který obsahuje testy. Pro testovací soubor najděte soubor, který obsahuje kód v rámci testu.","copilot.tools.findTestFiles.name":"Najít testovací soubory","copilot.tools.findTextInFiles.name":"Najít text v souborech","copilot.tools.getChangedFiles.name":"Změny Git","copilot.tools.getDocInfo.description":"Pro symbol, jako je třída nebo funkce, najděte informace o tom, jak je dokumentovat.","copilot.tools.getDocInfo.name":"Informace o dokumentu","copilot.tools.getErrors.name":"Získat problémy","copilot.tools.getNotebookCellOutput.description":"Přečíst výstup dříve provedené buňky","copilot.tools.getNotebookCellOutput.name":"Získat výstup buňky poznámkového bloku","copilot.tools.getTaskOutput.name":"Získat výstup úlohy","copilot.tools.getVSCodeAPI.name":"Získat odkazy na rozhraní API VS Code","copilot.tools.insertEdit.name":"Upravit soubor","copilot.tools.listCodeUsages.name":"Vyhledat využití","copilot.tools.listDirectory.name":"Zobrazit výpis adresáře","copilot.tools.multiReplaceString.name":"Řetězec více nahrazení v souborech","copilot.tools.newJupyterNotebook.description":"Vytvořit nový Jupyter Notebook","copilot.tools.openSimpleBrowser.description":"Zobrazit náhled místně hostovaného webu v jednoduchém prohlížeči","copilot.tools.openSimpleBrowser.name":"Otevřít jednoduchý prohlížeč","copilot.tools.readFile.name":"Přečte soubor","copilot.tools.readProjectStructure.name":"Struktura projektu","copilot.tools.replaceString.name":"Nahradit řetězec v souboru","copilot.tools.runNotebookCell.description":"Aktivovat provádění buňky v souboru poznámkového bloku","copilot.tools.runNotebookCell.name":"Spustit buňku poznámkového bloku","copilot.tools.searchCodebase.name":"Kódová báze","copilot.tools.searchWorkspaceSymbols.name":"Symboly pracovního prostoru","copilot.tools.testFailure.name":"Selhání testu","copilot.tools.think.name":"Přemýšlení","copilot.tools.updateUserPreferences.name":"Aktualizovat uživatelské předvolby","copilot.vscode.api.description":"Zeptat se na vývoj rozšíření VS Code","copilot.vscode.api.sampleRequest":"Jak přidám text na stavový řádek?","copilot.vscode.description":"Zeptat se na VS Code","copilot.vscode.sampleRequest":"Jakým příkazem je možné otevřít integrovaný terminál?","copilot.vscode.search.description":"Generovat parametry dotazu pro vyhledávání v pracovním prostoru","copilot.vscode.search.sampleRequest":"Hledejte foo ve všech souborech v adresáři src","copilot.vscode.setupTests.description":"Nastavení testů v projektu (experimentální)","copilot.vscode.setupTests.sampleRequest":"přidat do projektu testy playwright","copilot.vscode.startDebugging.description":"Generovat konfiguraci spuštění a spustit ladění ve VS Code (experimentální)","copilot.vscode.startDebugging.sampleRequest":"Připojit se k aplikaci uzlu na portu 9229","copilot.vscode.tool.description":"Pomocí VS Code odkazů na rozhraní API můžete zodpovědět otázky týkající se vývoje rozšíření VS Code.","copilot.workspace.description":"Zeptejte se na svůj pracovní prostor","copilot.workspace.doc.description":"Přidat dokumentační komentář k tomuto symbolu","copilot.workspace.edit.description":"Upravit soubory v pracovním prostoru","copilot.workspace.edit.inline.description":"Umožňuje upravit vybraný kód v aktivním editoru.","copilot.workspace.explain.description":"Vysvětlit fungování kódu v aktivním editoru","copilot.workspace.fix.description":"Navrhnout opravu problémů ve vybraném kódu","copilot.workspace.fix.sampleRequest":"V tomto kódu je chyba. Přepište kód tak, aby byl zobrazen s opravenou chybou.","copilot.workspace.generate.description":"Vygenerovat nový kód","copilot.workspace.new.description":"Vygenerovat kód pro nový soubor nebo projekt v pracovním prostoru","copilot.workspace.new.sampleRequest":"Vytvořte server rozhraní RESTful API pomocí typescriptu","copilot.workspace.newNotebook.description":"Vytvořit nový Jupyter Notebook","copilot.workspace.newNotebook.sampleRequest":"Jak vytvořím poznámkový blok pro načtení dat ze souboru csv?","copilot.workspace.review.description":"Umožňuje zkontrolovat vybraný kód v aktivním editoru.","copilot.workspace.sampleRequest":"Jak sestavím tento projekt?","copilot.workspace.semanticSearch.description":"Najít relevantní kód pro váš dotaz","copilot.workspace.semanticSearch.sampleRequest":"Kde je kód panelu nástrojů?","copilot.workspace.tests.description":"Generovat testy jednotek pro vybraný kód","copilot.workspaceSymbols.tool.description":"Hledat symboly pracovního prostoru pomocí jazykových služeb","github.copilot.badge.signUp":"Registrace pro GitHub Copilot","github.copilot.badge.star":"Star Copilot na GitHubu","github.copilot.badge.twitter":"Sledování GitHubu na Twitteru","github.copilot.badge.youtube":"Podívejte se na GitHub na Youtube","github.copilot.chat.attachFile":"Přidat soubor do chatu","github.copilot.chat.attachSelection":"Přidat výběr do chatu","github.copilot.chat.completionContext.typescript.mode":"Režim provádění zprostředkovatele kontextu TypeScript Copilot.","github.copilot.chat.copilotDebugCommand.enabled":"Určuje, jestli je v terminálu povolený příkaz copilot-debug.","github.copilot.chat.editor.temporalContext.enabled":"Při posílání vložené žádosti o chat, jestli se mají do žádostí Copilot zahrnout naposledy zobrazené a upravené soubory","github.copilot.chat.edits.suggestRelatedFilesForTests":"Určuje, jestli se mají navrhovat zdrojové soubory z testovacích souborů pro pracovní sadu Úprav v Copilotu.","github.copilot.chat.edits.temporalContext.enabled":"Při provádění úprav se vyžaduje, jestli se do žádostí Copilot mají zahrnout naposledy zobrazené a upravené soubory.","github.copilot.chat.languageContext.fix.typescript.enabled":"Povolí zprostředkovatele kontextu jazyka TypeScript pro příkazy /fix.","github.copilot.chat.languageContext.inline.typescript.enabled":"Povolí zprostředkovatele kontextu jazyka TypeScript pro vložené chaty (generování i úpravy).","github.copilot.chat.languageContext.typescript.cacheTimeout":"Časový limit naplnění mezipaměti pro zprostředkovatele kontextu jazyka TypeScript v milisekundách. Výchozí hodnota je 500 milisekund.","github.copilot.chat.languageContext.typescript.enabled":"Povolí zprostředkovatele kontextu jazyka TypeScript pro vložené dokončování.","github.copilot.chat.languageContext.typescript.includeDocumentation":"Určuje, jestli se mají do vygenerovaných fragmentů kódu zahrnout komentáře k dokumentaci.","github.copilot.chat.languageContext.typescript.items":"Určuje, jaký druh položek je zahrnutý ve zprostředkovateli kontextu jazyka TypeScript.","github.copilot.command.applyReviewSuggestion":"Použít","github.copilot.command.applyReviewSuggestionAndNext":"Použít a přejít na další","github.copilot.command.applySuggestionWithCopilot":"Použít návrh","github.copilot.command.buildLocalWorkspaceIndex":"Vytvořit index místního pracovního prostoru","github.copilot.command.buildRemoteWorkspaceIndex":"Vytvořit index vzdáleného pracovního prostoru","github.copilot.command.collectDiagnostics":"Diagnostika chatu","github.copilot.command.collectWorkspaceIndexDiagnostics":"Shromáždit diagnostiku indexu pracovního prostoru","github.copilot.command.continueReviewInChat":"Zobrazit na panelu chatu","github.copilot.command.continueReviewInInlineChat":"Zahodit a zkopírovat do vloženého chatu","github.copilot.command.disableEditTracing":"Zakázat trasování úprav chatu","github.copilot.command.discardAllReviewSuggestion":"Zahodit vše","github.copilot.command.discardReviewSuggestion":"Zahodit","github.copilot.command.discardReviewSuggestionAndNext":"Zahodit a přejít na další","github.copilot.command.enableEditTracing":"Povolit trasování úprav chatu","github.copilot.command.explainTerminalLastCommand":"Vysvětlit poslední příkaz terminálu","github.copilot.command.explainThis":"Vysvětlit","github.copilot.command.fixTestFailure":"Opravit selhání testu","github.copilot.command.fixThis":"Opravit","github.copilot.command.generateConfiguration":"Generovat konfiguraci ladění","github.copilot.command.generateDocs":"Generovat dokumenty","github.copilot.command.generateSTest":"Vygenerovat STest z poslední žádosti o chat","github.copilot.command.generateTests":"Generovat testy","github.copilot.command.generateThis":"Generovat toto","github.copilot.command.gotoNextReviewSuggestion":"Další návrh","github.copilot.command.gotoPreviousReviewSuggestion":"Předchozí návrh","github.copilot.command.helpfulReviewSuggestion":"Užitečné","github.copilot.command.inlineEdit.clearCache":"Vymazat mezipaměť dalších úprav","github.copilot.command.inlineEdit.reportNotebookNESIssue":"Nahlásit problém s další úpravou poznámkového bloku","github.copilot.command.logWorkbenchState":"Stav pracovní plochy protokolu","github.copilot.command.openUserPreferences":"Otevřít uživatelské předvolby","github.copilot.command.openWalkthrough":"Otevřít podrobný návod","github.copilot.command.refreshClaudeCodeSessions":"Aktualizovat relace kódu v Claude","github.copilot.command.rerunWithCopilotDebug":"Ladit poslední příkaz terminálu","github.copilot.command.resetVirtualToolGroups":"Obnovit virtuální skupiny nástrojů","github.copilot.command.reviewAndComment":"Zkontrolovat","github.copilot.command.reviewChanges":"Revize kódu – nepotvrzené změny","github.copilot.command.reviewFileChange":"Zkontrolovat změny","github.copilot.command.reviewStagedChanges":"Revize kódu – připravené změny","github.copilot.command.reviewUnstagedChanges":"Revize kódu – nepřipravené změny","github.copilot.command.sendChatFeedback":"Poslat názor na chat","github.copilot.command.showChatLogView":"Otevřít zobrazení ladění chatu","github.copilot.command.showContextInspectorView":"Zkontrolovat kontext jazyka","github.copilot.command.showNotebookLog":"Zobrazit poznámkový blok protokolu chatu","github.copilot.command.showOutputChannel":"Zobrazit výstupní kanál","github.copilot.command.unhelpfulReviewSuggestion":"Neužitečné","github.copilot.config.agent.currentEditorContext.enabled":"Pokud je tato možnost povolena, Copilot zahrne název aktuálního aktivního editoru do kontextu pro režim agenta.","github.copilot.config.agent.thinkingTool":"Povolí nástroj pro uvažování, který umožňuje Copilotu důkladně popřemýšlet o vašem požadavku před vygenerováním odpovědi v režimu agenta.","github.copilot.config.alternateGptPrompt.enabled":"Povolí experimentální alternativní výzvu pro modely GPT místo výchozí výzvy.","github.copilot.config.autoFix":"Umožňuje automaticky opravit diagnostiku pro upravené soubory.","github.copilot.config.byok.ollamaEndpoint":"Koncový bod, který se má použít pro Ollama při přístupu pomocí služby BYOK (Bring Your Own Key). Výchozí hodnota je localhost.","github.copilot.config.claudeSonnet45AlternatePrompt":"Určuje experimentální alternativní výzvu, která se má použít pro aplikaci Claude Sonnet 4.5.","github.copilot.config.codeGeneration.instruction.file":"Cesta k souboru, která bude přidána do žádostí Copilotu generujících kód. Volitelně můžete zadat jazyk pro instrukci.","github.copilot.config.codeGeneration.instruction.text":"Textová instrukce, která bude přidána do žádostí Copilotu generujících kód. Volitelně můžete zadat jazyk pro instrukci.","github.copilot.config.codeGeneration.instructions":"Sada instrukcí, která bude přidána do žádostí Copilotu generujících kód.\nPokyny můžou pocházet z následujících zdrojů: \n– soubor v pracovním prostoru: { \"file\": \"fileName\" }\n– text v přirozeném jazyce: { \"text\": \"Use underscore for field names.\" }\n\nPoznámka: Instrukce musí být krátké a přesné. Nekvalitní instrukce můžou zhoršit kvalitu a výkonnost Copilotu.","github.copilot.config.codeGeneration.instructions.deprecated":"Místo toho použijte soubory instrukcí. Další informace viz https://aka.ms/vscode-ghcp-custom-instructions.","github.copilot.config.codeGeneration.useInstructionFiles":"Určuje, jestli se do požadavků na Copilot přidají instrukce kódu z .github/copilot-instructions.md.\n\nPoznámka: Instrukce musí být krátké a přesné. Nekvalitní instrukce můžou zhoršit kvalitu a výkonnost Copilotu. [Přečtěte si další informace](https://aka.ms/github-copilot-custom-instructions) o přizpůsobení Copilotu.","github.copilot.config.codesearch.enabled":"Určuje, jestli má být povoleno agentní vyhledávání kódu při použití možnosti #codebase.","github.copilot.config.commitMessageGeneration.instruction.file":"Cesta k souboru s instrukcemi, které budou přidány do žádostí Copilotu generujících zprávy potvrzení.","github.copilot.config.commitMessageGeneration.instruction.text":"Textové instrukce, které budou přidány do žádostí Copilotu generujících zprávy potvrzení.","github.copilot.config.commitMessageGeneration.instructions":"Sada instrukcí, která bude přidána do žádostí Copilotu generujících zprávy potvrzení.\nInstrukce můžou pocházet z následujících zdrojů: \n– soubor v pracovním prostoru: `{ \"file\": \"fileName\" }`\n– text v přirozeném jazyce: `{ \"text\": \"Use conventional commit message format.\" }`\n\nPoznámka: Instrukce musí být krátké a přesné. Nekvalitní instrukce můžou zhoršit kvalitu a výkonnost Copilotu.","github.copilot.config.completionsFetcher":"Nastaví nástroj pro načítání používaný pro vložená doplňování.","github.copilot.config.customInstructionsInSystemMessage":"Pokud je tato možnost povolena, vlastní pokyny a pokyny k režimu se místo zprávy uživatele připojí k systémové zprávě.","github.copilot.config.debugTerminalCommandPatterns":"Seznam příkazů, pro které se má v terminálu ladění zobrazit akce rychlé opravy Příkaz ladění.","github.copilot.config.debugTerminalCommands":"Určuje, zda se v terminálu ladění a příkazu copilot-debug zobrazí nápovědy pro rychlé opravy.","github.copilot.config.edits.enabled":"Určuje, jestli se má povolit funkce Úpravy v Copilotu.","github.copilot.config.edits.suggestRelatedFilesFromGitHistory":"Určuje, jestli se mají navrhovat související soubory z historie Gitu pro pracovní sadu Úpravy v Copilotu.","github.copilot.config.editsNewNotebook.enabled":"Určuje, jestli se má v Copilot Edits povolit nástroj pro nové poznámkové bloky.","github.copilot.config.enableCodeActions":"Určuje, jestli se mají příkazy Copilotu v odpovídajících případech zobrazovat jako akce kódu.","github.copilot.config.enableUserPreferences":"Povolí zapamatování uživatelských předvoleb v režimu agenta.","github.copilot.config.executePrompt.enabled":"Nástroj executePrompt umožňuje agentovi provádět úkoly v samostatném izolovaném kontextu.","github.copilot.config.experimental.testGeneration.instruction.file":"Cesta k souboru, která bude přidána do žádostí Copilotu generujících testy. Volitelně můžete zadat jazyk pro instrukci.","github.copilot.config.experimental.testGeneration.instruction.text":"Textová instrukce, která bude přidána do žádostí Copilotu generujících testy. Volitelně můžete zadat jazyk pro instrukci.","github.copilot.config.generateTests.codeLens":"Zobrazí oddíl kódu Generovat testy pro symboly, které nejsou pokryty aktuálními informacemi o rozsahu testování.","github.copilot.config.gpt5AlternatePrompt":"Určuje experimentální alternativní výzvu, která se má použít pro modely GPT-5.","github.copilot.config.gpt5CodexAlternatePrompt":"Určuje experimentální alternativní výzvu, která se má použít pro model GPT-5-Codex.","github.copilot.config.grokCodeAlternatePrompt":"Určuje experimentální alternativní výzvu, která se má použít pro modely Grok Code.","github.copilot.config.imageUpload.enabled":"Povolí použití adres URL pro nahrávání obrázků v žádostech o chat místo nezpracovaných řetězců base64.","github.copilot.config.localeOverride":"Zadejte národní prostředí, ve kterém má funkce Copilot odpovědět, např. en nebo fr. Ve výchozím nastavení bude funkce Copilot odpovídat pomocí nakonfigurovaného jazyka zobrazení národního prostředí editoru VS Code.","github.copilot.config.nesFetcher":"Nastaví nástroj pro načítání používaný pro návrhy dalších úprav.","github.copilot.config.newWorkspace.useContext7":"Určuje, jestli se mají použít nástroje [Context7](command:github.copilot.mcp.viewContext7) pro generování projektu pro vytvoření nového pracovního prostoru.","github.copilot.config.newWorkspaceCreation.enabled":"Určuje, jestli se má povolit vytváření nových agentních pracovních prostorů.","github.copilot.config.notebook.enhancedNextEditSuggestions":"Určuje, jestli se má použít vylepšený přístup k vygenerování návrhů dalších úprav v buňkách poznámkového bloku.","github.copilot.config.notebook.followCellExecution":"Určuje, jestli se aktuálně prováděná buňka při provádění z Copilotu objeví v zobrazení.","github.copilot.config.notebook.inlineEditAgent.enabled":"Umožňuje povolit chování podobné agentovi z widgetu vloženého chatu poznámkového bloku.","github.copilot.config.pullRequestDescriptionGeneration.instruction.file":"Cesta k souboru s instrukcemi, které se přidají do žádostí Copilotu generujících názvy a popisy žádostí o přijetí změn","github.copilot.config.pullRequestDescriptionGeneration.instruction.text":"Textové pokyny, které se přidají do žádostí Copilotu, které generují názvy a popisy žádostí o získání dat","github.copilot.config.pullRequestDescriptionGeneration.instructions":"Sada instrukcí, které se přidají do žádostí Copilotu generujících názvy a popisy žádostí o přijetí změn.\nInstrukce můžou pocházet z následujících zdrojů: \n– soubor v pracovním prostoru: `{ \"file\": \"fileName\" }`\n– text v přirozeném jazyce: `{ \"text\": \"Always include a list of key changes.\" }`\n\nPoznámka: Instrukce musí být krátké a přesné. Nekvalitní instrukce můžou zhoršit kvalitu a výkonnost Copilotu.","github.copilot.config.renameSuggestions.triggerAutomatically":"Určuje, jestli má Copilot generovat návrhy na přejmenování.","github.copilot.config.responsesApiReasoningEffort":"Nastaví úsilí při uvažování, které se používá pro rozhraní API pro odpovědi. Vyžaduje #github.copilot.chat.useResponsesApi#.","github.copilot.config.responsesApiReasoningSummary":"Nastaví souhrnný styl uvažování, který se používá pro rozhraní API pro odpovědi. Vyžaduje #github.copilot.chat.useResponsesApi#.","github.copilot.config.reviewAgent.enabled":"Povoluje agenta revize kódu.","github.copilot.config.reviewSelection.enabled":"Povolí revizi kódu u aktuálního výběru.","github.copilot.config.reviewSelection.instruction.file":"Cesta k souboru, která se přidá do požadavků Copilotu, které poskytují revizi kódu pro aktuální výběr. Volitelně můžete zadat jazyk pro instrukci.","github.copilot.config.reviewSelection.instruction.text":"Textová instrukce, která se přidá do požadavků Copilotu, které poskytují revizi kódu pro aktuální výběr. Volitelně můžete zadat jazyk pro instrukci.","github.copilot.config.reviewSelection.instructions":"Sada instrukcí, která se přidá do požadavků Copilotu, které poskytují revizi kódu pro aktuální výběr.\nInstrukce můžou pocházet z následujících zdrojů: \n– soubor v pracovním prostoru: `{ \"file\": \"fileName\" }`\n– text v přirozeném jazyce: `{ \"text\": \"Use underscore for field names.\" }`\n\nPoznámka: Instrukce musí být krátké a přesné. Nekvalitní instrukce mohou snížit účinnost Copilotu.","github.copilot.config.scopeSelection":"Určuje, jestli se má uživateli zobrazit výzva k výběru konkrétního oboru symbolů, pokud uživatel používá /explain a aktivní editor nemá žádný výběr.","github.copilot.config.setupTests.enabled":"Povolí záměr /setupTests a zobrazí výzvu při generování /tests.","github.copilot.config.startDebugging.enabled":"Povolí záměr /startDebugging v chatu na panelu. Vygeneruje nebo najde konfiguraci spuštění, která odpovídá dotazu (pokud existuje), struktuře projektu apod.","github.copilot.config.summarizeAgentConversationHistory.enabled":"Určuje, jestli se má po vyplnění okna kontextu automaticky shrnout historie konverzací agenta.","github.copilot.config.terminalChatLocation":"Určuje, kde se mají otevírat dotazy chatu z terminálu.","github.copilot.config.terminalChatLocation.chatView":"Otevře zobrazení chatu.","github.copilot.config.terminalChatLocation.quickChat":"Otevře rychlý chat.","github.copilot.config.terminalChatLocation.terminal":"Otevřít vložený chat terminálu","github.copilot.config.testGeneration.instructions":"Sada instrukcí, která bude přidána do žádostí Copilotu generujících testy.\nPokyny můžou pocházet z následujících zdrojů: \n– soubor v pracovním prostoru: { \"file\": \"fileName\" }\n– text v přirozeném jazyce: { \"text\": \"Use underscore for field names.\" }\n\nPoznámka: Instrukce musí být krátké a přesné. Nekvalitní instrukce můžou zhoršit kvalitu a výkonnost Copilotu.","github.copilot.config.testGeneration.instructions.deprecated":"Místo toho použijte soubory instrukcí. Další informace viz https://aka.ms/vscode-ghcp-custom-instructions.","github.copilot.config.useProjectTemplates":"Při použití „/new“ použít relevantní projekty GitHubu jako počáteční projekty","github.copilot.config.useResponsesApi":"Pokud je to podporováno, použijte rozhraní API pro odpovědi místo rozhraní API pro dokončování v chatu. Povolí odůvodnění a shrnutí odůvodnění.\n\n**Poznámka**: Toto je experimentální funkce, která ještě není aktivovaná pro všechny uživatele.","github.copilot.config.virtualTools.threshold":"Toto nastavení definuje počet nástrojů, nad kterým by se měly používat virtuální nástroje. Virtuální nástroje seskupují podobné sady nástrojů a umožňují modelu je aktivovat na vyžádání. Určité skupiny nástrojů budou optimisticky předem aktivovány. Tuto funkci aktivně vyvíjíme a po dosažení prahové hodnoty zaznamenáte degradované volání nástrojů.\n\nVirtuální nástroje můžete zakázat nastavením na 0.","github.copilot.devcontainer.generateDevContainerConfig":"Vygenerovat konfiguraci vývojového kontejneru","github.copilot.git.generateCommitMessage":"Vygenerovat zprávu potvrzení","github.copilot.git.resolveMergeConflicts":"Řešení konfliktů s AI","github.copilot.icon":"Ikona GitHub Copilot","github.copilot.nextEditSuggestions.allowWhitespaceOnlyChanges":"Určuje, jestli se mají změny, které se týkají pouze prázdných znaků, navrhovat pomocí návrhů dalších úprav.","github.copilot.nextEditSuggestions.enabled":"Určuje, jestli se má povolit funkce návrhů dalších úprav (NES).\n\nFunkce NES může navrhnout další úpravy na základě vašich posledních změn. [Další informace](https://aka.ms/vscode-nes) o návrzích dalších úprav","github.copilot.nextEditSuggestions.fixes":"Určuje, jestli se mají nabízet opravy pro diagnostiku prostřednictvím funkce návrhů dalších úprav (NES).","github.copilot.resetAutomaticCommandExecutionPrompt":"Resetovat příkazový řádek automatického spuštění","github.copilot.submenu.copilot.label":"Copilot","github.copilot.submenu.reviewComment.applyAndNext.label":"Použít a přejít na další","github.copilot.submenu.reviewComment.discard.label":"Zahodit","github.copilot.submenu.reviewComment.discardAndNext.label":"Zahodit a přejít na další","github.copilot.tools.createAndRunTask.description":"Vytvořit a spustit úlohu v pracovním prostoru","github.copilot.tools.createAndRunTask.name":"Vytvořit a spustit úlohu","github.copilot.tools.createAndRunTask.userDescription":"Vytvořit a spustit úlohu v pracovním prostoru","github.copilot.tools.createNewWorkspace.name":"Vytvořit nový pracovní prostor","github.copilot.tools.createNewWorkspace.userDescription":"Umožňuje vygenerovat nový pracovní prostor ve VS Code.","github.copilot.tools.getProjectSetupInfo.name":"Získat informace o nastavení Project","github.copilot.tools.githubRepo.name":"Hledat v úložišti GitHubu","github.copilot.tools.githubRepo.userDescription":"Vyhledá v úložišti GitHubu relevantní fragmenty zdrojového kódu. Úložiště můžete zadat pomocí možnosti owner/repo.","github.copilot.tools.openEmptyFolder.name":"Otevřít prázdnou složku jako pracovní prostor VS Code","github.copilot.tools.searchResults.description":"Výsledky ze zobrazení vyhledávání","github.copilot.tools.searchResults.name":"Hledání – zobrazit výsledky","github.copilot.viewsWelcome.chatDisabled":"Chat s GitHub Copilotem je pro váš účet momentálně zakázaný správcem organizace. Požádejte správce organizace o povolení chatu.\n\n[Další informace](https://docs.github.com/en/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-github-copilot-features-in-your-organization/managing-policies-for-copilot-in-your-organization)","github.copilot.viewsWelcome.contactSupport":"Vypadá to na problém s vaším účtem. Obraťte se prosím na podporu GitHubu.\n\n[Kontaktovat podporu](https://support.github.com/?editor=vscode)","github.copilot.viewsWelcome.debug":"Ladění pomocí [terminálového příkazu](command:github.copilot.chat.startCopilotDebugCommand) nebo v [interaktivním chatu](command:workbench.action.chat.open?%7B%22query%22%3A%22%40vscode%20%2FstartDebugging%20%22%2C%22isPartialQuery%22%3Atrue%7D)","github.copilot.viewsWelcome.enterprise":"Pokud chcete povolit Copilot, obraťte se na správce organizace GitHubu.","github.copilot.viewsWelcome.individual.expired":"Platnost vašeho předplatného pro Copilot vypršela.\n\n[Zkontrolovat nastavení Copilotu](https://github.com/settings/copilot?editor=vscode)","github.copilot.viewsWelcome.offline":"V tuto chvíli jste offline. Pokud chcete používat GitHub Copilot, připojte se k internetu.\n\n[Retry Connection](command:github.copilot.refreshToken)","github.copilot.viewsWelcome.signIn":"Pokud chcete povolit funkce, které používají technologii GitHub Copilot, přihlaste se.\n\n[Přihlásit se](command:workbench.action.chat.triggerSetupForceSignIn)","github.copilot.viewsWelcome.switchToReleaseChannel":"Předběžná verze rozšíření GitHub Copilot Chat se v současné době ve stabilní verzi VS Code nepodporuje. Přepněte prosím na vydanou verzi pro GitHub Copilot Chat nebo vyzkoušejte VS Code Insiders.\n\n[Přepnout na vydanou verzi a znovu načíst](command:runCommands?%7B%22commands%22%3A%5B%7B%22command%22%3A%22workbench.extensions.action.switchToRelease%22%2C%22args%22%3A%5B%22GitHub.copilot-chat%22%5D%7D%2C%22workbench.action.reloadWindow%22%5D%7D)\n\n[Přepnout na VS Code Insiders](https://aka.ms/vscode-insiders)","github.copilot.walkthrough.description":"Váš pomocný AI programátor píše kód rychleji a chytřeji.","github.copilot.walkthrough.edits.description":"Pomocí **Copilot Edits** můžete vybrat soubory, se kterými chcete pracovat, a popsat změny, které chcete provést. Copilot je použije přímo na vaše soubory.\n[Upravit pomocí Copilotu](příkaz:workbench.action.chat.open?%7B%22mode%22%3A%22edit%22%7D)","github.copilot.walkthrough.edits.media.altText":"Video ukazuje uživatele, který přetahuje soubory do vstupního pole Copilot Edits nacházejícího se na sekundárním bočním panelu. Copilot pak aktualizuje soubor podle požadavku uživatele.","github.copilot.walkthrough.edits.title":"Provádějte změny v přirozeném jazyce","github.copilot.walkthrough.firstSuggest.description":"Při psaní v editoru vám Copilot navrhuje kód, který vám pomůže dokončit to, co jste začali.","github.copilot.walkthrough.firstSuggest.media.altText":"Video ukazuje různá dokončení Copilota, kde Copilot navrhuje kód, který uživateli pomůže dokončit kód.","github.copilot.walkthrough.firstSuggest.title":"Dokončování kódu navrhovaná umělou inteliznací","github.copilot.walkthrough.inlineChatMac.description":"Někdy je jednodušší popsat kód, který chcete zapsat, přímo v souboru.\nUmístěte kurzor nebo proveďte výběr a pomocí **Cmd+I** otevřete **Inline Chat**.","github.copilot.walkthrough.inlineChatMac.media.altText":"Video ukazuje uživatele, který vyvolává widget vloženého chatu a žádá Copilot, aby v souboru provedl změnu pomocí přirozeného jazyka. Copilot pak provede požadovanou změnu.","github.copilot.walkthrough.inlineChatMac.title":"Používání přirozeného jazyka v souborech","github.copilot.walkthrough.inlineChatNotMac.description":"Někdy je jednodušší popsat kód, který chcete zapsat, přímo v souboru.\nUmístěte kurzor nebo proveďte výběr a pomocí **Ctrl+I** otevřete **Inline Chat**.","github.copilot.walkthrough.inlineChatNotMac.media.altText":"Zobrazení vloženého chatu v editoru. Video ukazuje uživatele, který vyvolává widget vloženého chatu a žádá Copilot, aby v souboru provedl změnu pomocí přirozeného jazyka. Copilot pak provede požadovanou změnu.","github.copilot.walkthrough.inlineChatNotMac.title":"Používání přirozeného jazyka v souborech","github.copilot.walkthrough.panelChat.description":"Položte Copilotu otázky týkající se programování nebo získejte pomoc s kódem pomocí **@workspace**.\n Zadejte **@** a zobrazí se vám všichni dostupní účastníci chatu, se kterými můžete chatovat přímo, každý s vlastními odbornými znalostmi.\n[Chat s Copilotem](command:workbench.action.chat.open?%7B%22mode%22%3A%22ask%22%7D)","github.copilot.walkthrough.panelChat.media.altText":"Uživatel vyvolá @workspace na panelu chatu v sekundárním bočním panelu, aby porozuměl kódové bázi. Copilot načte relevantní informace a poskytne odpověď s odkazy na soubory.","github.copilot.walkthrough.panelChat.title":"Chatujte o svém kódu","github.copilot.walkthrough.setup.noAction.description":"Pomocí Copilotu můžete generovat kód napříč více soubory, opravovat chyby, klást otázky týkající se kódu a provádět řadu dalších činností pomocí přirozeného jazyka.\n Nově nabízíme [Copilot zdarma](https://github.com/features/copilot/plans) s vaším účtem GitHub.","github.copilot.walkthrough.setup.signIn.description":"Pomocí Copilotu můžete generovat kód napříč více soubory, opravovat chyby, klást otázky týkající se kódu a provádět řadu dalších činností pomocí přirozeného jazyka.\n Nově nabízíme [Copilot zdarma](https://github.com/features/copilot/plans) s vaším účtem GitHub.\n\n[Používat Copilot zdarma](command:workbench.action.chat.triggerSetupForceSignIn)","github.copilot.walkthrough.setup.signIn.title":"Přihlaste se a začněte používat Copilot zdarma","github.copilot.walkthrough.setup.signUp.description":"Pomocí Copilotu můžete generovat kód napříč více soubory, opravovat chyby, klást otázky týkající se kódu a provádět řadu dalších činností pomocí přirozeného jazyka.\n Nově nabízíme [Copilot zdarma](https://github.com/features/copilot/plans) s vaším účtem GitHub.\n\n[Používat Copilot zdarma](command:workbench.action.chat.triggerSetupForceSignIn)","github.copilot.walkthrough.setup.signUp.title":"Začínáme s Copilotem zdarma","github.copilot.walkthrough.signIn.description":"Pokud chcete začít pracovat s Copilotem, přihlaste se pomocí účtu GitHubu.\nUjistěte se, že používáte správný účet GitHubu. Můžete se také přihlásit později pomocí nabídky účtu.\n\n[Přihlásit se](command:github.copilot.signIn)","github.copilot.walkthrough.signIn.media.altText":"Přihlaste se ke GitHubu prostřednictvím tohoto podrobného návodu nebo nabídky účtu VS Code","github.copilot.walkthrough.signIn.title":"Přihlásit se přes GitHub","github.copilot.walkthrough.sparkle.description":"Copilot vylepšuje vaše programování pomocí inteligentních akcí s umělou inteligencí v celém rozhraní VS Code.\nVyhledejte ikony $(sparkle), například v zobrazení [Source Control](command:workbench.view.scm), kde Copilot generuje zprávy potvrzení a popisy žádostí o přijetí změn na základě změn kódu.\n\n[Objevte tipy a triky](https://code.visualstudio.com/docs/copilot/copilot-vscode-features)","github.copilot.walkthrough.sparkle.media.altText":"Video ukazuje kliknutí na ikonu jiskry ve vstupním poli správy zdrojového kódu, což aktivuje GitHub Copilot, který automaticky vygeneruje zprávu potvrzení.","github.copilot.walkthrough.sparkle.title":"Podívejte se na inteligentní akce","github.copilot.walkthrough.title":"GitHub Copilot"}
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.nls.fr.json:1:{"copilot.agent.description":"Modifier les fichiers de votre espace de travail en mode Agent","copilot.codebase.tool.description":"Recherchez des blocs de fichiers, des symboles et d’autres informations pertinents dans votre codebase","copilot.description":"Demandez ou modifiez dans le contexte","copilot.edits.description":"Modifier les fichiers de votre espace de travail","copilot.listCodeUsages.tool.description":"Rechercher des références, des définitions et d’autres utilisations d’un symbole","copilot.terminal.description":"Demandez des informations sur les commandes","copilot.terminal.explain.description":"Expliquer quelque chose dans le terminal","copilot.terminal.explain.sampleRequest":"Expliquer la dernière commande","copilot.terminal.sampleRequest":"Comment faire afficher tous les fichiers d’un répertoire, y compris les sous-répertoires ?","copilot.terminalPanel.description":"Demander comment faire quelque chose dans le terminal","copilot.testFailure.tool.description":"Permet d’inclure des informations sur le dernier échec du test unitaire","copilot.toolSet.editing.description":"Modifier les fichiers de votre espace de travail","copilot.toolSet.new.description":"Structurez un nouvel espace de travail à l’aide de configurations spécifiques à VS Code pour compiler, déboguer et exécuter de nouveaux projets.","copilot.toolSet.runCommand.description":"Exécutez des commandes dans le terminal","copilot.toolSet.runNotebook.description":"Exécutez des cellules de notebook","copilot.toolSet.runTasks.description":"Exécutez des tâches dans votre espace de travail","copilot.toolSet.search.description":"Recherchez et lisez des fichiers dans votre espace de travail","copilot.tools.applyPatch.description":"Modifier les fichiers texte dans l’espace de travail","copilot.tools.applyPatch.name":"Appliquer un patch","copilot.tools.changes.description":"Obtenir les différences des fichiers modifiés","copilot.tools.createDirectory.description":"Créer des répertoires dans votre espace de travail","copilot.tools.createDirectory.name":"Créer un répertoire","copilot.tools.createFile.description":"Créer des fichiers","copilot.tools.createFile.name":"Créer un fichier","copilot.tools.editNotebook.name":"Modifier un notebook","copilot.tools.errors.description":"Vérifier les erreurs d’un fichier particulier","copilot.tools.fetchWebPage.description":"Récupérer le contenu principal à partir d’une page web. Vous devez inclure l'URL de la page que vous souhaitez récupérer.","copilot.tools.fetchWebPage.name":"Récupérer une page web","copilot.tools.findFiles.name":"Rechercher dans des fichiers","copilot.tools.findTestFiles.description":"Pour un fichier de code source, recherchez le fichier contenant les tests. Pour un fichier de test, recherchez le fichier contenant le code testé","copilot.tools.findTestFiles.name":"Rechercher des fichiers de test","copilot.tools.findTextInFiles.name":"Rechercher du texte dans les fichiers","copilot.tools.getChangedFiles.name":"Modifications Git","copilot.tools.getDocInfo.description":"Pour un symbole, tel qu’une classe ou une fonction, rechercher les informations sur la façon de le documenter","copilot.tools.getDocInfo.name":"Informations sur le document","copilot.tools.getErrors.name":"Obtenir les problèmes","copilot.tools.getNotebookCellOutput.description":"Lire la sortie d’une cellule précédemment exécutée","copilot.tools.getNotebookCellOutput.name":"Obtenir la sortie de la cellule du Bloc-notes","copilot.tools.getTaskOutput.name":"Obtenir le résultat de la tâche","copilot.tools.getVSCodeAPI.name":"Obtenir les références d’API de VS Code","copilot.tools.insertEdit.name":"Modifier le fichier","copilot.tools.listCodeUsages.name":"Rechercher les utilisations","copilot.tools.listDirectory.name":"Répertorier le répertoire","copilot.tools.multiReplaceString.name":"Multi-remplacement de chaîne dans des fichiers","copilot.tools.newJupyterNotebook.description":"Créer un Jupyter Notebook","copilot.tools.openSimpleBrowser.description":"Afficher un aperçu de site web hébergé localement dans le navigateur simple","copilot.tools.openSimpleBrowser.name":"Ouvrir un navigateur simple","copilot.tools.readFile.name":"Lire un fichier","copilot.tools.readProjectStructure.name":"Structure du projet","copilot.tools.replaceString.name":"Remplacer une chaîne dans un fichier","copilot.tools.runNotebookCell.description":"Déclencher l’exécution d’une cellule dans un fichier de notebook","copilot.tools.runNotebookCell.name":"Exécuter une cellule de notebook","copilot.tools.searchCodebase.name":"Codebase","copilot.tools.searchWorkspaceSymbols.name":"Symboles de l’espace de travail","copilot.tools.testFailure.name":"Nous n’avons pas pu effectuer le test","copilot.tools.think.name":"Think (Réfléchir)","copilot.tools.updateUserPreferences.name":"Mettre à jour les préférences utilisateur","copilot.vscode.api.description":"Poser des questions sur le développement d’extensions VS Code","copilot.vscode.api.sampleRequest":"Comment faire ajouter du texte à la barre de statut ?","copilot.vscode.description":"Poser des questions sur VS Code","copilot.vscode.sampleRequest":"Quelle est la commande permettant d’ouvrir le terminal intégré ?","copilot.vscode.search.description":"Générer des paramètres de requête pour la recherche d’espace de travail","copilot.vscode.search.sampleRequest":"Rechercher « foo » dans tous les fichiers sous mon répertoire « src »","copilot.vscode.setupTests.description":"Configurer des tests dans votre projet (expérimental)","copilot.vscode.setupTests.sampleRequest":"ajouter des tests playwright à mon projet","copilot.vscode.startDebugging.description":"Générer la configuration de lancement et démarrer le débogage dans VS Code (expérimental)","copilot.vscode.startDebugging.sampleRequest":"Attacher à l’application de nœud sur le port 9229","copilot.vscode.tool.description":"Utilisez les références d’API VS Code pour répondre à des questions sur le développement d’extensions VS Code.","copilot.workspace.description":"Posez des questions sur votre espace de travail","copilot.workspace.doc.description":"Ajouter un commentaire de documentation pour ce symbole","copilot.workspace.edit.description":"Modifier les fichiers de votre espace de travail","copilot.workspace.edit.inline.description":"Modifier le code sélectionné dans votre éditeur actif","copilot.workspace.explain.description":"Expliquer le fonctionnement du code dans votre éditeur actif","copilot.workspace.fix.description":"Proposer un correctif pour les problèmes dans le code sélectionné","copilot.workspace.fix.sampleRequest":"Ce code présente un problème. Réécrivez le code pour l’afficher avec le bogue corrigé.","copilot.workspace.generate.description":"Générer un nouveau code","copilot.workspace.new.description":"Code de structure pour un nouveau fichier ou projet dans un espace de travail","copilot.workspace.new.sampleRequest":"Créer un serveur d’API RESTful à l’aide de typescript","copilot.workspace.newNotebook.description":"Créer un Jupyter Notebook","copilot.workspace.newNotebook.sampleRequest":"Comment faire créer un notebook pour charger des données à partir d’un fichier CSV ?","copilot.workspace.review.description":"Vérifier le code sélectionné dans votre éditeur actif","copilot.workspace.sampleRequest":"Comment faire générer ce projet ?","copilot.workspace.semanticSearch.description":"Rechercher du code pertinent pour votre requête","copilot.workspace.semanticSearch.sampleRequest":"Où se trouve le code de barre d’outils ?","copilot.workspace.tests.description":"Générer des tests unitaires pour le code sélectionné","copilot.workspaceSymbols.tool.description":"Recherchez des symboles d’espace de travail à l’aide des services de langage.","github.copilot.badge.signUp":"S’inscrire à GitHub Copilot","github.copilot.badge.star":"Étoile Copilot sur GitHub","github.copilot.badge.twitter":"Suivre GitHub sur Twitter","github.copilot.badge.youtube":"Découvrir GitHub sur YouTube","github.copilot.chat.attachFile":"Ajouter un fichier à la conversation","github.copilot.chat.attachSelection":"Ajouter la sélection à la conversation","github.copilot.chat.completionContext.typescript.mode":"Mode d’exécution du fournisseur de contexte TypeScript Copilot.","github.copilot.chat.copilotDebugCommand.enabled":"Indique si la commande « copilot-debug » est activée dans le terminal.","github.copilot.chat.editor.temporalContext.enabled":"Lors de l’exécution d’une demande de conversation en ligne, indiquez si les fichiers récemment consultés et modifiés doivent être inclus dans les demandes Copilot.","github.copilot.chat.edits.suggestRelatedFilesForTests":"Indique s'il faut suggérer des fichiers sources à partir des fichiers de test pour l'ensemble de travail de Copilot Edits.","github.copilot.chat.edits.temporalContext.enabled":"Lors de la réalisation d’une demande de modification, indiquez si les fichiers consultés et modifiés récemment doivent être inclus dans les demandes Copilot.","github.copilot.chat.languageContext.fix.typescript.enabled":"Active le fournisseur de contexte de langage TypeScript pour les commandes /fix","github.copilot.chat.languageContext.inline.typescript.enabled":"Active le fournisseur de contexte de langage TypeScript pour les discussions en ligne (générer et modifier)","github.copilot.chat.languageContext.typescript.cacheTimeout":"Délai d’expiration du remplissage du cache pour le fournisseur de contexte de langage TypeScript en millisecondes. La valeur par défaut est de 500 millisecondes.","github.copilot.chat.languageContext.typescript.enabled":"Active le fournisseur de contexte de langage TypeScript pour les complétions en ligne","github.copilot.chat.languageContext.typescript.includeDocumentation":"Contrôle l’inclusion des commentaires de documentation dans les extraits de code générés.","github.copilot.chat.languageContext.typescript.items":"Contrôle le type d’éléments inclus dans le fournisseur de contexte du langage TypeScript.","github.copilot.command.applyReviewSuggestion":"Appliquer","github.copilot.command.applyReviewSuggestionAndNext":"Appliquer et passer à la suivante","github.copilot.command.applySuggestionWithCopilot":"Appliquer la suggestion","github.copilot.command.buildLocalWorkspaceIndex":"Générer un index d’espace de travail local","github.copilot.command.buildRemoteWorkspaceIndex":"Générer un index d’espace de travail distant","github.copilot.command.collectDiagnostics":"Diagnostic de conversation","github.copilot.command.collectWorkspaceIndexDiagnostics":"Collecter des diagnostics d’index de l’espace de travail","github.copilot.command.continueReviewInChat":"Afficher dans le panneau de conversation","github.copilot.command.continueReviewInInlineChat":"Abandonner et copier dans la conversation en ligne","github.copilot.command.disableEditTracing":"Désactive le suivi des modifications de conversations","github.copilot.command.discardAllReviewSuggestion":"Ignorer tout","github.copilot.command.discardReviewSuggestion":"Ignorer","github.copilot.command.discardReviewSuggestionAndNext":"Abandonner et passer à la suivante","github.copilot.command.enableEditTracing":"Active le suivi des modifications de conversations","github.copilot.command.explainTerminalLastCommand":"Expliquer la dernière commande terminal","github.copilot.command.explainThis":"Expliquer","github.copilot.command.fixTestFailure":"Corriger l’échec du test","github.copilot.command.fixThis":"Correctif","github.copilot.command.generateConfiguration":"Générer la configuration de débogage","github.copilot.command.generateDocs":"Générer les documents","github.copilot.command.generateSTest":"Générer STest à partir de la dernière demande de conversation","github.copilot.command.generateTests":"Générer des tests","github.copilot.command.generateThis":"Générer cela","github.copilot.command.gotoNextReviewSuggestion":"Suggestion suivante","github.copilot.command.gotoPreviousReviewSuggestion":"Suggestion précédente","github.copilot.command.helpfulReviewSuggestion":"Utile","github.copilot.command.inlineEdit.clearCache":"Vider le cache d'édition suivant","github.copilot.command.inlineEdit.reportNotebookNESIssue":"Signaler le problème de modification suivant du carnet de notes","github.copilot.command.logWorkbenchState":"Journaliser l’état de Workbench","github.copilot.command.openUserPreferences":"Ouvrir les préférences utilisateur","github.copilot.command.openWalkthrough":"Ouvrir la procédure pas à pas","github.copilot.command.refreshClaudeCodeSessions":"Actualiser les sessions de code Claude","github.copilot.command.rerunWithCopilotDebug":"Déboguer la dernière commande terminal","github.copilot.command.resetVirtualToolGroups":"Réinitialiser les groupes d’outils virtuels","github.copilot.command.reviewAndComment":"Vérifier","github.copilot.command.reviewChanges":"Revue – Modifications non validées","github.copilot.command.reviewFileChange":"Examiner les modifications","github.copilot.command.reviewStagedChanges":"Revue – Modifications indexées","github.copilot.command.reviewUnstagedChanges":"Revue – Modifications non indexées","github.copilot.command.sendChatFeedback":"Envoyer des commentaires sur la conversation","github.copilot.command.showChatLogView":"Afficher la vue Débogage de conversation","github.copilot.command.showContextInspectorView":"Inspecter le contexte linguistique","github.copilot.command.showNotebookLog":"Afficher le notebook du journal des conversations","github.copilot.command.showOutputChannel":"Afficher le canal de sortie","github.copilot.command.unhelpfulReviewSuggestion":"Peu utile","github.copilot.config.agent.currentEditorContext.enabled":"Lorsqu’il est activé, Copilot inclut le nom de l’éditeur actif actuel dans le contexte du mode assistant.","github.copilot.config.agent.thinkingTool":"Permet d’activer l’outil de réflexion qui autorise Copilot à analyser en profondeur votre demande avant de générer une réponse en mode Agent.","github.copilot.config.alternateGptPrompt.enabled":"Active une invite alternative expérimentale pour les modèles GPT au lieu de l’invite par défaut.","github.copilot.config.autoFix":"Corriger automatiquement les diagnostics pour les fichiers modifiés.","github.copilot.config.byok.ollamaEndpoint":"Point de terminaison à utiliser pour Ollama lorsque vous y accédez avec votre propre clé. Valeur par défaut de localhost.","github.copilot.config.claudeSonnet45AlternatePrompt":"Spécifie une requête alternative expérimentale à utiliser pour Claude Sonnet 4.5.","github.copilot.config.codeGeneration.instruction.file":"Chemin d’accès à un fichier qui sera ajouté aux demandes Copilot qui génèrent du code. Vous pouvez éventuellement spécifier une langue pour l’instruction.","github.copilot.config.codeGeneration.instruction.text":"Une instruction de texte qui sera ajouté aux demandes Copilot qui génèrent du code. Vous pouvez éventuellement spécifier une langue pour l’instruction.","github.copilot.config.codeGeneration.instructions":"Un ensemble d’instructions qui sera ajouté aux demandes Copilot qui génèrent du code.\nLes instructions peuvent provenir : \n- d’un fichier dans l’espace de travail : `{ \"file\": \"fileName\" }`\n- d’un texte en langage naturel : `{ \"text\": \"Use underscore for field names.\" }`\n\nRemarque : vos instructions doivent être brèves et précises. Des instructions médiocres peuvent dégrader la qualité et les performances de Copilot.","github.copilot.config.codeGeneration.instructions.deprecated":"Utilisez des fichiers d'instructions à la place. Pour plus d'informations, consultez https://aka.ms/vscode-ghcp-custom-instructions.","github.copilot.config.codeGeneration.useInstructionFiles":"Contrôle si les instructions de code de `.github/copilot-instructions.md` sont ajoutées aux requêtes Copilot.\n\nRemarque : vos instructions doivent toujours être brèves et précises. De mauvaises instructions peuvent altérer la qualité et les performances de Copilot. [Découvrez plus d’informations](https://aka.ms/github-copilot-custom-instructions) sur la personnalisation de Copilot.","github.copilot.config.codesearch.enabled":"Permet d’activer ou non la recherche de codes agentiques lors de l’utilisation de `#codebase`.","github.copilot.config.commitMessageGeneration.instruction.file":"Un chemin vers le fichier d’instructions qui sera ajouté aux demandes Copilot qui génèrent des messages de validation.","github.copilot.config.commitMessageGeneration.instruction.text":"Un ensemble d’instructions qui sera ajouté aux demandes Copilot qui génèrent des messages de validation.","github.copilot.config.commitMessageGeneration.instructions":"Un ensemble d’instructions qui sera ajouté aux demandes Copilot qui génèrent des messages de validation.\nLes instructions peuvent provenir des sources suivantes. \n– Un fichier dans l’espace de travail : `{ \"file\": \"fileName\" }`\n– Un texte en langage naturel : `{ \"text\": \"Use conventional commit message format.\" }`\n\nRemarque : vos instructions doivent être brèves et précises. Des instructions médiocres peuvent nuire à la qualité et aux performances de Copilot.","github.copilot.config.completionsFetcher":"Définit le récupérateur utilisé pour les complétions inline.","github.copilot.config.customInstructionsInSystemMessage":"Une fois cette option activée, les instructions personnalisées et les instructions de mode seront ajoutées au message système au lieu d’un message de l’utilisateur.","github.copilot.config.debugTerminalCommandPatterns":"Liste de commandes pour lesquelles l’action de correctif rapide « Commande de débogage » doit être affichée dans le terminal de débogage.","github.copilot.config.debugTerminalCommands":"Indique s’il faut effectuer un correctif rapide des indicateurs dans le terminal de débogage et de la commande `copilot-debug`.","github.copilot.config.edits.enabled":"Permet d’activer ou non la fonctionnalité Modification Copilot.","github.copilot.config.edits.suggestRelatedFilesFromGitHistory":"Indique s’il faut suggérer des fichiers associés à partir de l’historique git pour la plage de travail Copilot Edits.","github.copilot.config.editsNewNotebook.enabled":"Indiquez si le nouvel outil de notebook doit être activé dans Copilot Edits.","github.copilot.config.enableCodeActions":"Contrôle si les commandes Copilot sont affichées sous forme d’actions de code lorsqu’il est disponible","github.copilot.config.enableUserPreferences":"Activez la mémorisation des préférences utilisateur en mode agent.","github.copilot.config.executePrompt.enabled":"L'outil executePrompt permet à l'agent d'exécuter des tâches dans un contexte distinct et isolé.","github.copilot.config.experimental.testGeneration.instruction.file":"Chemin d’accès à un fichier qui sera ajouté aux demandes Copilot qui génèrent des tests. Vous pouvez éventuellement spécifier une langue pour l’instruction.","github.copilot.config.experimental.testGeneration.instruction.text":"Une instruction de texte qui sera ajoutée aux demandes Copilot qui génèrent des tests. Vous pouvez éventuellement spécifier une langue pour l’instruction.","github.copilot.config.generateTests.codeLens":"Afficher l’objectif de code « Générer des tests » pour les symboles qui ne sont pas couverts par les informations de couverture de test actuelles.","github.copilot.config.gpt5AlternatePrompt":"Spécifie une requête alternative expérimentale à utiliser pour les modèles GPT-5.","github.copilot.config.gpt5CodexAlternatePrompt":"Spécifie une requête alternative expérimentale à utiliser pour le modèle GPT-5-Codex.","github.copilot.config.grokCodeAlternatePrompt":"Permet de spécifier une requête alternative expérimentale à utiliser pour les modèles Grok Code.","github.copilot.config.imageUpload.enabled":"Permet l'utilisation d'URL de téléchargement d'images dans les requêtes de conversation au lieu de chaînes base64 brutes.","github.copilot.config.localeOverride":"Spécifiez un paramètre régional dans lequel Copilot doit répondre, par ex. `en` ou `fr`. Par défaut, Copilot répondra en utilisant les paramètres régionaux de langue d'affichage configurés par VS Code.","github.copilot.config.nesFetcher":"Définit le récupérateur utilisé pour les suggestions de modification suivantes.","github.copilot.config.newWorkspace.useContext7":"Indique s’il faut utiliser les outils [Context7](command:github.copilot.mcp.viewContext7) pour créer un projet de structure pour la création d’un nouvel espace de travail.","github.copilot.config.newWorkspaceCreation.enabled":"Indique s’il faut activer la création d’un espace de travail agentique.","github.copilot.config.notebook.enhancedNextEditSuggestions":"Permet de contrôler s’il faut utiliser une approche améliorée pour générer les suggestions de modification suivantes dans des cellules du bloc-notes.","github.copilot.config.notebook.followCellExecution":"Contrôle si la cellule en cours d’exécution est révélée dans la fenêtre d’affichage lors de l’exécution à partir de Copilot.","github.copilot.config.notebook.inlineEditAgent.enabled":"Activez le comportement semblable à celui d'un agent à partir du widget de conversation instantanée intégré du notebook.","github.copilot.config.pullRequestDescriptionGeneration.instruction.file":"Un chemin d’accès à un fichier contenant des instructions qui seront ajoutées aux requêtes Copilot qui génèrent des titres et des descriptions de demandes de tirage.","github.copilot.config.pullRequestDescriptionGeneration.instruction.text":"Instructions textuelles qui seront ajoutées aux demandes Copilot qui génèrent des titres et des descriptions de demandes de tirage(s).","github.copilot.config.pullRequestDescriptionGeneration.instructions":"Un ensemble d’instructions qui seront ajoutées aux requêtes Copilot qui génèrent des titres et des descriptions de demandes de tirage.\nLes instructions peuvent provenir des sources suivantes : \n– Un fichier dans l’espace de travail : `{ \"file\": \"fileName\" }`\n– Du texte en langage naturel : `{ \"text\": \"Always include a list of key changes.\" }`\n\nRemarque : Les instructions doivent être courtes et précises. De mauvaises instructions peuvent altérer la qualité et les performances de Copilot.","github.copilot.config.renameSuggestions.triggerAutomatically":"Contrôle si Copilot génère des suggestions pour le changement de nom","github.copilot.config.responsesApiReasoningEffort":"Définit l’effort de raisonnement utilisé pour l’API Responses. Requires `#github.copilot.chat.useResponsesApi#`.","github.copilot.config.responsesApiReasoningSummary":"Définit le style de résumé de raisonnement utilisé pour l’API Responses. Requires `#github.copilot.chat.useResponsesApi#`.","github.copilot.config.reviewAgent.enabled":"Active l’agent de revue.","github.copilot.config.reviewSelection.enabled":"Active la révision du code sur la sélection actuelle.","github.copilot.config.reviewSelection.instruction.file":"Un chemin vers un fichier qui sera ajouté aux demandes Copilot qui fournissent une révision de code pour la sélection actuelle. En option, vous pouvez spécifier une langue pour l'instruction.","github.copilot.config.reviewSelection.instruction.text":"Une instruction textuelle qui sera ajoutée aux demandes Copilot qui fournissent une révision du code pour la sélection actuelle. En option, vous pouvez spécifier une langue pour l'instruction.","github.copilot.config.reviewSelection.instructions":"Un ensemble d'instructions qui seront ajoutées aux demandes Copilot qui fournissent une révision du code pour la sélection actuelle.\nLes instructions peuvent provenir de : \n- un fichier dans l'espace de travail : `{ \"file\": \"fileName\" }`\n- texte en langage naturel : `{ \"text\": \"Use underscore for field names.\" }`\n\nRemarque : gardez vos instructions courtes et précises. De mauvaises instructions peuvent dégrader l’efficacité du Copilot.","github.copilot.config.scopeSelection":"Demande ou non à l’utilisateur(-trice) de sélectionner une portée de symbole spécifique si l’utilisateur(-trice) utilise `/explain` et que l’éditeur(-trice) actif(-ve) n’a pas de sélection.","github.copilot.config.setupTests.enabled":"Active l’intention « /setupTests » et l’invite lors de la génération de « /tests ».","github.copilot.config.startDebugging.enabled":"Active l’intention « /startDebugging » dans la conversation du panneau. Génère ou trouve une configuration de lancement correspondant à la requête (le cas échéant), à la structure du projet, etc.","github.copilot.config.summarizeAgentConversationHistory.enabled":"Indique s’il faut résumer automatiquement l’historique des conversations de l’agent une fois la fenêtre de contexte remplie.","github.copilot.config.terminalChatLocation":"Contrôle l’emplacement d’ouverture des requêtes de conversation à partir du terminal.","github.copilot.config.terminalChatLocation.chatView":"Ouvrez l’affichage de la conversation.","github.copilot.config.terminalChatLocation.quickChat":"Ouvrez la conversation rapide.","github.copilot.config.terminalChatLocation.terminal":"Ouvrir la conversation en ligne du terminal","github.copilot.config.testGeneration.instructions":"Un ensemble d’instructions qui sera ajouté aux demandes Copilot qui génèrent des tests.\nLes instructions peuvent provenir : \n- d’un fichier dans l’espace de travail : `{ \"file\": \"fileName\" }`\n- d’un texte en langage naturel : `{ \"text\": \"Use underscore for field names.\" }`\n\nRemarque : vos instructions doivent être brèves et précises. Des instructions médiocres peuvent dégrader la qualité et les performances de Copilot.","github.copilot.config.testGeneration.instructions.deprecated":"Utilisez des fichiers d'instructions à la place. Pour plus d'informations, consultez https://aka.ms/vscode-ghcp-custom-instructions.","github.copilot.config.useProjectTemplates":"Utiliser des projets GitHub pertinents comme projets de démarrage quand vous utilisez ’/new’","github.copilot.config.useResponsesApi":"Utilisez l’API Responses au lieu de l’API Chat Completions lorsque cela est pris en charge. Active le raisonnement et les résumés de raisonnement.\n\n**Remarque** : il s’agit d’une fonctionnalité expérimentale qui n’est pas encore activée pour tous les utilisateurs.","github.copilot.config.virtualTools.threshold":"Ce paramètre définit le nombre d’outils au-delà duquel vous devez utiliser des outils virtuels. Les outils virtuels regroupent des jeux d’outils similaires et permettent au modèle de les activer à la demande. Certains groupes d’outils seront pré-activés de manière optimiste. Nous développons activement cette fonctionnalité. Vous constaterez une dégradation des appels d’outils une fois le seuil atteint.\n\nIl peut être défini sur `0` pour désactiver les outils virtuels.","github.copilot.devcontainer.generateDevContainerConfig":"Générer la configuration du conteneur de développement","github.copilot.git.generateCommitMessage":"Génère un message de validation","github.copilot.git.resolveMergeConflicts":"Résolvez les conflits avec l’IA","github.copilot.icon":"Icône GitHub Copilot","github.copilot.nextEditSuggestions.allowWhitespaceOnlyChanges":"Indique s’il faut autoriser la proposition de modifications réservées aux espaces blancs par les suggestions de modification suivantes (NES).","github.copilot.nextEditSuggestions.enabled":"Indique s’il faut activer les suggestions de modification suivantes (NES).\n\nNES peut proposer un prochain changement basé sur vos modifications récentes. [Découvrez plus d’informations](https://aka.ms/vscode-nes) sur les suggestions de modification suivantes.","github.copilot.nextEditSuggestions.fixes":"Indique s’il faut proposer des correctifs pour les diagnostics via les suggestions de modification suivantes (NES).","github.copilot.resetAutomaticCommandExecutionPrompt":"Réinitialiser la prompt d’exécution de commande automatique","github.copilot.submenu.copilot.label":"Copilot","github.copilot.submenu.reviewComment.applyAndNext.label":"Appliquer et passer à la suivante","github.copilot.submenu.reviewComment.discard.label":"Abandonner","github.copilot.submenu.reviewComment.discardAndNext.label":"Abandonner et passer à la suivante","github.copilot.tools.createAndRunTask.description":"Créer et exécuter une tâche dans l’espace de travail","github.copilot.tools.createAndRunTask.name":"Créer et exécuter une tâche","github.copilot.tools.createAndRunTask.userDescription":"Créer et exécuter une tâche dans l’espace de travail","github.copilot.tools.createNewWorkspace.name":"Créer un espace de travail","github.copilot.tools.createNewWorkspace.userDescription":"Structurer un nouvel espace de travail dans VS Code","github.copilot.tools.getProjectSetupInfo.name":"Obtenir des informations sur la configuration du projet","github.copilot.tools.githubRepo.name":"Rechercher un dépôt GitHub","github.copilot.tools.githubRepo.userDescription":"Permet de rechercher des extraits de code source pertinents dans un dépôt GitHub. Vous pouvez spécifier un dépôt en utilisant `owner/repo`","github.copilot.tools.openEmptyFolder.name":"Ouvrir un dossier vide en tant qu’espace de travail VS Code","github.copilot.tools.searchResults.description":"Les résultats de la vue de recherche","github.copilot.tools.searchResults.name":"Rechercher Afficher les résultats","github.copilot.viewsWelcome.chatDisabled":"La conversation GitHub Copilot est actuellement désactivée pour votre compte par un(e) administrateur(-trice) d’organisation. Contactez un administrateur de l’organisation pour activer la conversation.\n\n[En savoir plus](https://docs.github.com/en/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-github-copilot-features-in-your-organization/managing-policies-for-copilot-in-your-organization)","github.copilot.viewsWelcome.contactSupport":"Il semble qu’il y ait un problème avec votre compte. Contactez le support GitHub.\n\n[Contacter le support](https://support.github.com/?editor=vscode)","github.copilot.viewsWelcome.debug":"Déboguer à l ’aide d ’une [commande terminal](command:github.copilot.chat.startCopilotDebugCommand) ou dans une [conversation interactive](command:workbench.action.chat.open?%7B%22query%22%3A%22%40vscode%20%2FstartDebugging%20%22%2C%22isPartialQuery%22%3Atrue%7D).","github.copilot.viewsWelcome.enterprise":"Contactez l'administrateur de votre organisation GitHub pour activer Copilot.","github.copilot.viewsWelcome.individual.expired":"Votre abonnement Copilot a expiré.\n\n[Vérifier les paramètres de Copilot](https://github.com/settings/copilot?editor=vscode)","github.copilot.viewsWelcome.offline":"Vous êtes actuellement hors connexion. Veuillez vous connecter à Internet pour utiliser GitHub Copilot.\n\n[Nouvelle tentative de connexion](command:github.copilot.refreshToken)","github.copilot.viewsWelcome.signIn":"Connectez-vous pour activer les fonctionnalités optimisées par GitHub Copilot.\n\n[Connectez-vous](command:workbench.action.chat.triggerSetupForceSignIn)","github.copilot.viewsWelcome.switchToReleaseChannel":"La version préliminaire de l’extension GitHub Copilot Chat n’est actuellement pas prise en charge dans la version stable de VS Code. Veuillez passer à la version publiée pour GitHub Copilot Chat ou essayez VS Code Insiders.\n\n[Passer à la version publiée et recharger](command:runCommands?%7B%22commands%22%3A%5B%7B%22command%22%3A%22workbench.extensions.action.switchToRelease%22%2C%22args%22%3A%5B%22GitHub.copilot-chat%22%5D%7D%2C%22workbench.action.reloadWindow%22%5D%7D)\n\n[Passer à VS Code Insiders](https://aka.ms/vscode-insiders)","github.copilot.walkthrough.description":"Votre co-programmeur IA pour écrire du code plus rapidement et plus intelligemment","github.copilot.walkthrough.edits.description":"Utilisez **Modifications Copilot** pour sélectionner les fichiers avec lesquels vous voulez travailler et décrire les modifications à apporter. Copilot les applique directement à vos fichiers.\n[Modifier avec Copilot](command:workbench.action.chat.open ?%7B%22mode%22%3A%22edit%22%7D)","github.copilot.walkthrough.edits.media.altText":"La vidéo montre l’utilisateur faisant glisser et déposant des fichiers dans la zone d’entrée de Copilot Edits située dans la barre latérale secondaire. Copilot met ensuite à jour le fichier selon la demande de l’utilisateur","github.copilot.walkthrough.edits.title":"Apporter des modifications en utilisant le langage naturel","github.copilot.walkthrough.firstSuggest.description":"Lorsque vous tapez dans l’éditeur, Copilot suggère du code pour vous aider à terminer ce que vous avez commencé.","github.copilot.walkthrough.firstSuggest.media.altText":"La vidéo montre différentes suggestions de saisie semi-automatique de Copilot, où Copilot suggère du code pour aider l’utilisateur à compléter son code","github.copilot.walkthrough.firstSuggest.title":"Complétions de code suggérées par l’IA","github.copilot.walkthrough.inlineChatMac.description":"Il est parfois plus facile de décrire le code à écrire directement dans un fichier.\nPlacez votre curseur ou effectuez une sélection et utilisez **« Cmd+I »** pour ouvrir **Conversation inline**.","github.copilot.walkthrough.inlineChatMac.media.altText":"La vidéo montre l’utilisateur appelant le widget de conversation inline et demandant à Copilot d’apporter une modification au fichier à l’aide du langage naturel. Copilot effectue ensuite la modification demandée","github.copilot.walkthrough.inlineChatMac.title":"Utiliser le langage naturel dans vos fichiers","github.copilot.walkthrough.inlineChatNotMac.description":"Il est parfois plus facile de décrire le code à écrire directement dans un fichier.\nPlacez votre curseur ou effectuez une sélection et utilisez **« Ctrl+I »** pour ouvrir **Conversation inline**.","github.copilot.walkthrough.inlineChatNotMac.media.altText":"Affichage de conversation inline dans l’éditeur. La vidéo montre l’utilisateur appelant le widget de conversation inline et demandant à Copilot d’apporter une modification au fichier à l’aide du langage naturel. Copilot effectue ensuite la modification demandée","github.copilot.walkthrough.inlineChatNotMac.title":"Utiliser le langage naturel dans vos fichiers","github.copilot.walkthrough.panelChat.description":"Posez des questions de programmation à Copilot ou obtenez de l'aide avec votre code en utilisant **@workspace**.\n Tapez **@** pour voir tous les participants au chat disponibles avec lesquels vous pouvez discuter directement, chacun avec sa propre expertise.\n[Discuter avec Copilot](commande : workbench.action.chat.open?%7B%22mode%22%3A%22ask%22%7D)","github.copilot.walkthrough.panelChat.media.altText":"L’utilisateur appelle @workspace dans le panneau de clavardage de la barre latérale secondaire pour comprendre la base de code. Copilot récupère les informations pertinentes et fournit une réponse avec des liens vers les fichiers","github.copilot.walkthrough.panelChat.title":"Discuter à propos de votre code","github.copilot.walkthrough.setup.noAction.description":"Vous pouvez utiliser Copilot pour générer du code dans plusieurs fichiers, corriger les erreurs, poser des questions sur votre code et bien plus encore en utilisant le langage naturel.\n Nous proposons désormais [Copilot for free](https://github.com/features/copilot/plans) avec votre compte GitHub.","github.copilot.walkthrough.setup.signIn.description":"Vous pouvez utiliser Copilot pour générer du code dans plusieurs fichiers, corriger des erreurs, poser des questions sur votre code et bien plus encore en utilisant le langage naturel.\n Nous proposons désormais [Copilot gratuitement](https://github.com/features/copilot/plans) avec votre compte GitHub.\n\n[Utilisez Copilot gratuitement](command:workbench.action.chat.triggerSetupForceSignIn)","github.copilot.walkthrough.setup.signIn.title":"Connectez-vous pour utiliser Copilot gratuitement","github.copilot.walkthrough.setup.signUp.description":"Vous pouvez utiliser Copilot pour générer du code dans plusieurs fichiers, corriger des erreurs, poser des questions sur votre code et bien plus encore en utilisant le langage naturel.\n Nous proposons désormais [Copilot gratuitement](https://github.com/features/copilot/plans) avec votre compte GitHub.\n\n[Utilisez Copilot gratuitement](command:workbench.action.chat.triggerSetupForceSignIn)","github.copilot.walkthrough.setup.signUp.title":"Démarrage gratuitement avec Copilot","github.copilot.walkthrough.signIn.description":"Pour commencer à utiliser Copilot, connectez-vous avec votre compte GitHub.\nVérifiez que vous utilisez le compte GitHub correct. Vous pouvez également vous connecter ultérieurement en utilisant le menu du compte.\n\n[Connexion](command:github.copilot.signIn)","github.copilot.walkthrough.signIn.media.altText":"Connectez-vous à GitHub à l’aide de cette procédure pas à pas ou du menu de compte de VS Code","github.copilot.walkthrough.signIn.title":"Se connecter avec GitHub","github.copilot.walkthrough.sparkle.description":"Copilot améliore votre expérience de codage grâce aux actions intelligentes basées sur l’IA dans l’interface VS Code.\nRecherchez les icônes $(sparkle), telles que dans la [Vue de contrôle de code source](command:workbench.view.scm), où Copilot génère des messages de validation et des descriptions de PR en fonction des modifications apportées au code.\n\n[Découvrir Conseils et astuces](https://code.visualstudio.com/docs/copilot/copilot-vscode-features)","github.copilot.walkthrough.sparkle.media.altText":"La vidéo montre l’icône d’étincelle dans la zone d’entrée du contrôle de code source qui est cliquée, déclenchant GitHub Copilot pour générer automatiquement un message de validation","github.copilot.walkthrough.sparkle.title":"Rechercher des actions intelligentes","github.copilot.walkthrough.title":"GitHub Copilot"}
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/.vsixmanifest:4:			<Identity Language="en-US" Id="copilot-chat" Version="0.32.1" Publisher="GitHub" />
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/.vsixmanifest:5:			<DisplayName>GitHub Copilot Chat</DisplayName>
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/.vsixmanifest:24:				<Property Id="Microsoft.VisualStudio.Services.Links.Source" Value="https://github.com/microsoft/vscode-copilot-chat.git" />
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/.vsixmanifest:25:				<Property Id="Microsoft.VisualStudio.Services.Links.Getstarted" Value="https://github.com/microsoft/vscode-copilot-chat.git" />
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/.vsixmanifest:26:				<Property Id="Microsoft.VisualStudio.Services.Links.GitHub" Value="https://github.com/microsoft/vscode-copilot-chat.git" />
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.nls.zh-tw.json:1:{"copilot.agent.description":"在代理程式模式中編輯您的工作區中的檔案","copilot.codebase.tool.description":"尋找程式碼基底中的相關檔案區塊、符號及其他資訊","copilot.description":"在內容中詢問或編輯","copilot.edits.description":"編輯工作區中的檔案","copilot.listCodeUsages.tool.description":"尋找符號的參考資料、定義及其他使用方式","copilot.terminal.description":"詢問命令","copilot.terminal.explain.description":"說明終端的內容","copilot.terminal.explain.sampleRequest":"說明上一個命令","copilot.terminal.sampleRequest":"如何檢視目錄內的所有檔案，包括子目錄?","copilot.terminalPanel.description":"詢問如何在終端機中執行某些動作","copilot.testFailure.tool.description":"包含上次單元測試失敗的資訊","copilot.toolSet.editing.description":"編輯工作區中的檔案","copilot.toolSet.new.description":"使用 VS Code 特定設定來搭建新的工作區，以編譯、偵錯和執行新專案。","copilot.toolSet.runCommand.description":"在終端機中執行命令","copilot.toolSet.runNotebook.description":"執行筆記本儲存格","copilot.toolSet.runTasks.description":"在您的工作區中執行工作","copilot.toolSet.search.description":"搜尋和讀取您工作區中的檔案","copilot.tools.applyPatch.description":"編輯工作區中的文字檔","copilot.tools.applyPatch.name":"套用修補檔","copilot.tools.changes.description":"取得已變更檔案的差異","copilot.tools.createDirectory.description":"在工作區中建立新目錄","copilot.tools.createDirectory.name":"建立目錄","copilot.tools.createFile.description":"建立新檔案","copilot.tools.createFile.name":"建立檔案","copilot.tools.editNotebook.name":"編輯筆記本","copilot.tools.errors.description":"檢查特定檔案的錯誤","copilot.tools.fetchWebPage.description":"從網頁擷取主要內容。您應該包含要擷取的頁面 URL。","copilot.tools.fetchWebPage.name":"擷取網頁","copilot.tools.findFiles.name":"尋找檔案","copilot.tools.findTestFiles.description":"針對原始程式碼檔案，尋找包含測試的檔案。針對測試檔案，尋找包含所測試程式碼的檔案","copilot.tools.findTestFiles.name":"尋找測試檔案","copilot.tools.findTextInFiles.name":"在檔案中尋找文字","copilot.tools.getChangedFiles.name":"Git 變更","copilot.tools.getDocInfo.description":"對於類別或函數等符號，尋找如何記錄的相關資訊","copilot.tools.getDocInfo.name":"文件資訊","copilot.tools.getErrors.name":"取得問題","copilot.tools.getNotebookCellOutput.description":"讀取先前執行的儲存格的輸出","copilot.tools.getNotebookCellOutput.name":"取得筆記本儲存格輸出","copilot.tools.getTaskOutput.name":"取得工作輸出","copilot.tools.getVSCodeAPI.name":"取得 VS Code API 參考","copilot.tools.insertEdit.name":"編輯檔案","copilot.tools.listCodeUsages.name":"尋找使用方式","copilot.tools.listDirectory.name":"清單目錄","copilot.tools.multiReplaceString.name":"檔案中的多重取代字串","copilot.tools.newJupyterNotebook.description":"建立新的 Jupyter Notebook","copilot.tools.openSimpleBrowser.description":"在簡易瀏覽器中預覽本機托管的網站","copilot.tools.openSimpleBrowser.name":"開啟簡易瀏覽器","copilot.tools.readFile.name":"讀取檔案","copilot.tools.readProjectStructure.name":"專案結構","copilot.tools.replaceString.name":"取代檔案中的字串","copilot.tools.runNotebookCell.description":"觸發筆記本檔案中的儲存格執行","copilot.tools.runNotebookCell.name":"執行筆記本儲存格","copilot.tools.searchCodebase.name":"程式碼基底","copilot.tools.searchWorkspaceSymbols.name":"工作區符號","copilot.tools.testFailure.name":"測試失敗","copilot.tools.think.name":"思索","copilot.tools.updateUserPreferences.name":"更新使用者喜好設定","copilot.vscode.api.description":"詢問關於 VS Code 延伸模組開發的問題","copilot.vscode.api.sampleRequest":"如何新增文字到狀態列?","copilot.vscode.description":"詢問有關 VS Code 的問題","copilot.vscode.sampleRequest":"開啟整合式終端的命令是什麼?","copilot.vscode.search.description":"產生工作區搜尋的查詢參數","copilot.vscode.search.sampleRequest":"在我的 'src' 目錄下的所有檔案中搜尋 'foo'","copilot.vscode.setupTests.description":"在專案中設定測試 (實驗性)","copilot.vscode.setupTests.sampleRequest":"將 Playwright 測試新增至我的專案","copilot.vscode.startDebugging.description":"產生啟動設定並在 VS Code 中開始偵錯 (實驗型)","copilot.vscode.startDebugging.sampleRequest":"在連接埠 9229 連線至節點應用程式","copilot.vscode.tool.description":"使用 VS Code API 參考資料以回答有關 VS Code 擴充開發的問題。","copilot.workspace.description":"提出有關您工作區的問題","copilot.workspace.doc.description":"新增此符號的文件註解","copilot.workspace.edit.description":"編輯工作區中的檔案","copilot.workspace.edit.inline.description":"在使用中的編輯器中編輯選取的程式碼","copilot.workspace.explain.description":"說明使用中編輯器中的程式碼如何運作","copilot.workspace.fix.description":"為選取的程式碼中的問題建議修正","copilot.workspace.fix.sampleRequest":"此程式碼有問題。重寫程式碼以顯示已修復錯誤的情況。","copilot.workspace.generate.description":"產生新程式碼","copilot.workspace.new.description":"工作區中新檔案或專案的 Scaffold 程式代碼","copilot.workspace.new.sampleRequest":"使用 TypeScript 建立 RESTful API 伺服器","copilot.workspace.newNotebook.description":"建立新的 Jupyter Notebook","copilot.workspace.newNotebook.sampleRequest":"如何建立筆記本以從 CSV 檔案載入資料?","copilot.workspace.review.description":"在使用中的編輯器中檢閱選取的程式碼","copilot.workspace.sampleRequest":"如何建立此專案?","copilot.workspace.semanticSearch.description":"尋找查詢的相關程式碼","copilot.workspace.semanticSearch.sampleRequest":"工具列程式碼在何處？","copilot.workspace.tests.description":"為選取的程式碼產生單元測試","copilot.workspaceSymbols.tool.description":"使用語言服務搜尋工作區符號。","github.copilot.badge.signUp":"註冊 GitHub Copilot","github.copilot.badge.star":"GitHub 上的出色 Copilot","github.copilot.badge.twitter":"在 Twitter 上關注 GitHub","github.copilot.badge.youtube":"在 Youtube 上查看 GitHub","github.copilot.chat.attachFile":"將檔案新增至聊天","github.copilot.chat.attachSelection":"將選取專案新增至聊天","github.copilot.chat.completionContext.typescript.mode":"TypeScript Copilot 內容提供者的執行模式。","github.copilot.chat.copilotDebugCommand.enabled":"終端機中是否已啟用 `copilot-debug` 命令。","github.copilot.chat.editor.temporalContext.enabled":"進行內嵌聊天要求時，是否要包含最近檢視及編輯過的檔案與 Copilot 要求。","github.copilot.chat.edits.suggestRelatedFilesForTests":"是否要從 Copilot Edits 工作集的測試檔案建議來源檔案。","github.copilot.chat.edits.temporalContext.enabled":"進行編輯要求時，是否要包含最近檢視和編輯過的檔案與 Copilot 要求。","github.copilot.chat.languageContext.fix.typescript.enabled":"啟用 TypeScript 語言內容提供者以進行 /修正命令","github.copilot.chat.languageContext.inline.typescript.enabled":"啟用內嵌聊天的 TypeScript 語言內容提供者 (以進行產生和編輯)","github.copilot.chat.languageContext.typescript.cacheTimeout":"TypeScript 語言內容提供者的快取填充逾時 (以毫秒為單位)。預設值為 500 毫秒。","github.copilot.chat.languageContext.typescript.enabled":"啟用 TypeScript 語言內容提供者以進行內嵌完成","github.copilot.chat.languageContext.typescript.includeDocumentation":"控制是否在產生的程式碼片段中包含文件註解。","github.copilot.chat.languageContext.typescript.items":"控制 TypeScript 語言內容提供者中包含的項目種類。","github.copilot.command.applyReviewSuggestion":"套用","github.copilot.command.applyReviewSuggestionAndNext":"套用並移至下一個","github.copilot.command.applySuggestionWithCopilot":"套用建議","github.copilot.command.buildLocalWorkspaceIndex":"組建本機工作區索引","github.copilot.command.buildRemoteWorkspaceIndex":"組建遠端工作區索引","github.copilot.command.collectDiagnostics":"聊天診斷","github.copilot.command.collectWorkspaceIndexDiagnostics":"收集工作區索引診斷","github.copilot.command.continueReviewInChat":"在聊天面板中檢視","github.copilot.command.continueReviewInInlineChat":"捨棄並複製到內嵌聊天","github.copilot.command.disableEditTracing":"停用聊天編輯追蹤","github.copilot.command.discardAllReviewSuggestion":"全部捨棄","github.copilot.command.discardReviewSuggestion":"捨棄","github.copilot.command.discardReviewSuggestionAndNext":"捨棄並移至下一個","github.copilot.command.enableEditTracing":"啟用聊天編輯追蹤","github.copilot.command.explainTerminalLastCommand":"說明最後一個終端機命令","github.copilot.command.explainThis":"說明","github.copilot.command.fixTestFailure":"修正測試失敗","github.copilot.command.fixThis":"修正","github.copilot.command.generateConfiguration":"產生偵錯設定","github.copilot.command.generateDocs":"產生文件","github.copilot.command.generateSTest":"從上次聊天要求產生 STest","github.copilot.command.generateTests":"產生測試","github.copilot.command.generateThis":"產生此項","github.copilot.command.gotoNextReviewSuggestion":"下一個建議","github.copilot.command.gotoPreviousReviewSuggestion":"上一個建議","github.copilot.command.helpfulReviewSuggestion":"有幫助","github.copilot.command.inlineEdit.clearCache":"清除下一個編輯快取","github.copilot.command.inlineEdit.reportNotebookNESIssue":"報告筆記本下一個編輯問題","github.copilot.command.logWorkbenchState":"記錄 Workbench 狀態","github.copilot.command.openUserPreferences":"開啟用戶喜好設定","github.copilot.command.openWalkthrough":"開啟逐步解說","github.copilot.command.refreshClaudeCodeSessions":"重新整理 Claude 程式碼工作階段","github.copilot.command.rerunWithCopilotDebug":"偵錯最後一個終端機命令","github.copilot.command.resetVirtualToolGroups":"重設虛擬工具群組","github.copilot.command.reviewAndComment":"檢閱","github.copilot.command.reviewChanges":"程式碼檢閱 - 未認可的變更","github.copilot.command.reviewFileChange":"檢閱變更","github.copilot.command.reviewStagedChanges":"程式碼檢閱 - 暫存變更","github.copilot.command.reviewUnstagedChanges":"程式碼檢閱 - 未暫存變更","github.copilot.command.sendChatFeedback":"傳送聊天意見反應","github.copilot.command.showChatLogView":"顯示聊天偵錯檢視","github.copilot.command.showContextInspectorView":"檢查語言內容","github.copilot.command.showNotebookLog":"顯示聊天記錄筆記本","github.copilot.command.showOutputChannel":"顯示輸出通道","github.copilot.command.unhelpfulReviewSuggestion":"沒有幫助","github.copilot.config.agent.currentEditorContext.enabled":"啟用後，Copilot 將在代理程式模式的內容中包含目前活動編輯器的名稱。","github.copilot.config.agent.thinkingTool":"啟用思考工具，讓 Copilot 在代理程式模式中深入思考您的要求，然後再產生回應。","github.copilot.config.alternateGptPrompt.enabled":"啟用 GPT 模型的實驗性替代提示，而非預設提示。","github.copilot.config.autoFix":"自動修正已編輯檔案的診斷。","github.copilot.config.byok.ollamaEndpoint":"透過帶入您自己的金鑰存取時，Ollama 所使用的端點。預設值為 localhost。","github.copilot.config.claudeSonnet45AlternatePrompt":"指定用於 Claude Sonnet 4.5 的實驗性替代提示。","github.copilot.config.codeGeneration.instruction.file":"將新增至產生程式碼的 Copilot 要求的檔案路徑。您可以選擇性地指定指示的語言。","github.copilot.config.codeGeneration.instruction.text":"將新增至產生程式碼的 Copilot 要求的文字指示。您可以選擇性地指定指示的語言。","github.copilot.config.codeGeneration.instructions":"將新增一組指示至 Copilot 要求，以產生程式碼。\n指示可能來自:\n- 工作區中的檔案: `{ \"file\": \"fileName\" }`\n- 自然語言的文字: `{ \"text\": \"Use underscore for field names.\" }`\n\n注意: 請保持指示簡短且精確。不良的指示可能會降低 Copilot 的品質和表現。","github.copilot.config.codeGeneration.instructions.deprecated":"請改用指示檔案。如需詳細資訊，請參閱 https://aka.ms/vscode-ghcp-custom-instructions。","github.copilot.config.codeGeneration.useInstructionFiles":"控制來自 '.github/copilot-instructions.md' 的程式碼指示是否要新增到 Copilot 要求。\n\n注意: 請讓您的指示保持簡短且精確。不良的指示可能會降低 Copilot 的品質和效能。[深入了解](https://aka.ms/github-copilot-custom-instructions) 關於自訂 Copilot 的資訊。","github.copilot.config.codesearch.enabled":"使用 `#codebase` 時是否啟用代理程式碼搜索。","github.copilot.config.commitMessageGeneration.instruction.file":"將會新增至 Copilot 要求以產生認可訊息且包含指示的一個檔案路徑。","github.copilot.config.commitMessageGeneration.instruction.text":"將會新增至 Copilot 要求以產生認可訊息的文字指示。","github.copilot.config.commitMessageGeneration.instructions":"將會新增至 Copilot 要求以產生認可訊息的一組指示。\n指示可能來自:\n- 工作區中的檔案: `{ \"file\": \"fileName\" }`\n- 自然語言文字: `{ \"text\": \"Use conventional commit message format.\" }`\n\n注意: 請讓您的指示保持簡短且精確。不良的指示可能會降低 Copilot 的品質和效能。","github.copilot.config.completionsFetcher":"設定用於內嵌完成的擷取程式。","github.copilot.config.customInstructionsInSystemMessage":"啟用時，自訂指示和模式指示將附加到系統訊息，而非使用者訊息。","github.copilot.config.debugTerminalCommandPatterns":"偵錯終端中應顯示「偵錯命令」快速修正作業的命令清單。","github.copilot.config.debugTerminalCommands":"是否快速修正偵錯終端和 `copilot-debug` 命令中的提示。","github.copilot.config.edits.enabled":"是否要啟用 Copilot 編輯功能。","github.copilot.config.edits.suggestRelatedFilesFromGitHistory":"是否要從 Copilot Edits 工作集的 Git 歷程記錄建議相關檔案。","github.copilot.config.editsNewNotebook.enabled":"是否要在 Copilot Edits 中啟用新的筆記本工具。","github.copilot.config.enableCodeActions":"控制 Copilot 命令在可用時是否顯示為 Code Actions","github.copilot.config.enableUserPreferences":"啟用在代理程式模式中記住用戶喜好設定。","github.copilot.config.executePrompt.enabled":"executePrompt 工具可讓代理程式在個別的隔離內容中執行工作。","github.copilot.config.experimental.testGeneration.instruction.file":"將新增至產生測試的 Copilot 要求的檔案路徑。您可以選擇性地指定指示的語言。","github.copilot.config.experimental.testGeneration.instruction.text":"將新增至產生測試的 Copilot 要求的文字指示。您可以選擇性地指定指示的語言。","github.copilot.config.generateTests.codeLens":"針對目前測試涵蓋範圍資訊未涵蓋的符號顯示 [產生測試] 程式碼功能濾鏡。","github.copilot.config.gpt5AlternatePrompt":"指定用於 GPT-5 模型的實驗性替代提示。","github.copilot.config.gpt5CodexAlternatePrompt":"指定用於 GPT-5-Codex 模型的實驗性替代提示。","github.copilot.config.grokCodeAlternatePrompt":"指定用於 Grok Code 模型的實驗性替代提示。","github.copilot.config.imageUpload.enabled":"啟用在聊天要求中使用影像上傳 URL，而不是原始 base64 字串。","github.copilot.config.localeOverride":"指定 Copilot 應該回應的地區設定，例如 'en' 或 'fr'。根據預設，Copilot 會使用 VS Code 所設定的顯示語言地區設定來回應。","github.copilot.config.nesFetcher":"設定用於下一次編輯建議的擷取程式。","github.copilot.config.newWorkspace.useContext7":"是否使用 [Context7](command:github.copilot.mcp.viewContext7) 工具來為新工作區建立 Scaffold 專案。","github.copilot.config.newWorkspaceCreation.enabled":"是否要啟用新的代理程式工作區建立。","github.copilot.config.notebook.enhancedNextEditSuggestions":"控制是否在筆記本儲存格中使用增強的方法來生成下一個編輯建議。","github.copilot.config.notebook.followCellExecution":"控制從 Copilot 執行時，目前執行的儲存格是否會在檢視區中顯示。","github.copilot.config.notebook.inlineEditAgent.enabled":"從筆記本內嵌聊天小工具啟用類似代理程式的行為。","github.copilot.config.pullRequestDescriptionGeneration.instruction.file":"將會新增至 Copilot 要求以產生提取要求標題和描述且包含指示的一個檔案路徑。","github.copilot.config.pullRequestDescriptionGeneration.instruction.text":"將新增至產生提取要求標題與描述之 Copilot 要求的文字指示。","github.copilot.config.pullRequestDescriptionGeneration.instructions":"一組將會新增至 Copilot 要求的指示，用以產生提取要求的標題與描述。\n指示可能來自:\n- 工作區中的檔案: `{ \"file\": \"fileName\" }`\n- 採用自然語言的文字: `{ \"text\": \"總是包含主要變更清單。\" }`\n\n注意: 請讓您的指示保持簡短且精確。不良的指示可能會降低 Copilot 的品質和效能。","github.copilot.config.renameSuggestions.triggerAutomatically":"控制 Copilot 是否會產生重新命名的建議","github.copilot.config.responsesApiReasoningEffort":"設定用於回應 API 的推理工作。需要 `#github.copilot.chat.useResponsesApi#`。","github.copilot.config.responsesApiReasoningSummary":"設定用於回應 API 的推理摘要樣式。需要 `#github.copilot.chat.useResponsesApi#`。","github.copilot.config.reviewAgent.enabled":"啟用程式碼檢閱代理程式。","github.copilot.config.reviewSelection.enabled":"啟用目前選取項目的程式碼檢閱。","github.copilot.config.reviewSelection.instruction.file":"將新增到 Copilot 要求的檔案路徑，提供目前選取項目的程式碼檢閱。您可以選擇性地指定指示的語言。","github.copilot.config.reviewSelection.instruction.text":"將新增到 Copilot 要求的文字指示，提供目前選取項目的程式碼檢閱。您可以選擇性地指定指示的語言。","github.copilot.config.reviewSelection.instructions":"將新增到 Copilot 要求的一組文字指示，提供目前選取項目的程式碼檢閱。\n指示可能來自:\n- 工作區中的檔案: `{ \"file\": \"fileName\" }`\n- 自然語言文字: `{ \"text\": \"Use underscore for field names.\" }`\n\n注意: 請保持指示簡短且精確。不良的指示可能會降低 Copilot 的有效性。","github.copilot.config.scopeSelection":"如果使用者使用 `/explain` 並且使用中編輯器沒有選取，是否提示使用者選取特定符號範圍。","github.copilot.config.setupTests.enabled":"啟用 `/setupTests` 意圖，並在產生 `/tests' 時提示。","github.copilot.config.startDebugging.enabled":"在面板聊天中啟用 `/startDebugging` 意圖。產生或尋找啟動設定，以符合查詢 (如有)、專案結構等。","github.copilot.config.summarizeAgentConversationHistory.enabled":"是否在內容視窗填入後自動摘要代理程式交談歷程記錄。","github.copilot.config.terminalChatLocation":"控制應該開啟來自終端機的聊天查詢的位置。","github.copilot.config.terminalChatLocation.chatView":"開啟聊天檢視。","github.copilot.config.terminalChatLocation.quickChat":"開啟快速聊天。","github.copilot.config.terminalChatLocation.terminal":"開啟終端機內嵌聊天","github.copilot.config.testGeneration.instructions":"將新增至產生測試的 Copilot 要求的一組指示。\n指示可能來自:\n- 工作區中的檔案: `{ \"file\": \"fileName\" }`\n- 自然語言的文字: `{ \"text\": \"Use underscore for field names.\" }`\n\n注意: 請保持指示簡短且精確。不良的指示可能會降低 Copilot 的品質和表現。","github.copilot.config.testGeneration.instructions.deprecated":"請改用指示檔案。如需詳細資訊，請參閱 https://aka.ms/vscode-ghcp-custom-instructions。","github.copilot.config.useProjectTemplates":"使用 '/new' 時，使用相關的 GitHub 專案作為入門專案","github.copilot.config.useResponsesApi":"受支援時，請使用回應 API 取代聊天完成 API。啟用推理及推理摘要。\n\n**注意**: 這是實驗性功能，尚未提供所有使用者使用。","github.copilot.config.virtualTools.threshold":"此設定定義應使用的虛擬工具的工具數量。虛擬工具會將類似的一組工具分組，並允許模型按需啟用它們。某些工具群組將會樂觀地預先啟用。我們正在積極開發此功能，當達到閾值時，您會遇到降級的工具呼叫。\n\n可設定為 `0` 以停用虛擬工具。","github.copilot.devcontainer.generateDevContainerConfig":"產生開發容器設定","github.copilot.git.generateCommitMessage":"產生認可訊息","github.copilot.git.resolveMergeConflicts":"使用 AI 解決衝突","github.copilot.icon":"GitHub Copilot 圖示","github.copilot.nextEditSuggestions.allowWhitespaceOnlyChanges":"是否允許下一次編輯建議 (NES) 提出僅包含空白的變更。","github.copilot.nextEditSuggestions.enabled":"是否要啟用下一個編輯建議 (NES)。\n\nNES 可以根據您最近的變更建議下一個編輯。[深入了解](https://aka.ms/vscode-nes) 關於下一個編輯建議。","github.copilot.nextEditSuggestions.fixes":"是否要透過下一個編輯建議 (NES) 提供診斷修正。","github.copilot.resetAutomaticCommandExecutionPrompt":"重設自動命令執行提示","github.copilot.submenu.copilot.label":"Copilot","github.copilot.submenu.reviewComment.applyAndNext.label":"套用並移至下一個","github.copilot.submenu.reviewComment.discard.label":"捨棄","github.copilot.submenu.reviewComment.discardAndNext.label":"捨棄並移至下一個","github.copilot.tools.createAndRunTask.description":"在工作區中建立並執行工作","github.copilot.tools.createAndRunTask.name":"建立並執行工作","github.copilot.tools.createAndRunTask.userDescription":"在工作區中建立並執行工作","github.copilot.tools.createNewWorkspace.name":"建立新工作區","github.copilot.tools.createNewWorkspace.userDescription":"在 VS Code 中架起新的工作區","github.copilot.tools.getProjectSetupInfo.name":"取得專案設定資訊","github.copilot.tools.githubRepo.name":"搜尋 GitHub 存放庫","github.copilot.tools.githubRepo.userDescription":"在 GitHub 存放庫中搜尋相關的原始程式碼片段。您可以使用 `owner/repo` 指定存放庫","github.copilot.tools.openEmptyFolder.name":"將空白資料夾開啟為 VS Code 工作區","github.copilot.tools.searchResults.description":"搜尋檢視中的結果","github.copilot.tools.searchResults.name":"搜尋檢視結果","github.copilot.viewsWelcome.chatDisabled":"組織管理員目前已停用您帳戶的 GitHub Copilot 聊天。請連絡組織系統管理員以啟用聊天。\n\n[深入了解](https://docs.github.com/en/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-github-copilot-features-in-your-organization/managing-policies-for-copilot-in-your-organization)","github.copilot.viewsWelcome.contactSupport":"您的帳戶似乎發生問題。請和 GitHub 客戶支援連絡。\n\n[連絡客戶支援](https://support.github.com/?editor=vscode)","github.copilot.viewsWelcome.debug":"使用 [終端機命令](command:github.copilot.chat.startCopilotDebugCommand) 偵錯或在 [互動式聊天](command:workbench.action.chat.open?%7B%22query%22%3A%22%40vscode%20%2FstartDebugging%20%22%2C%22isPartialQuery%22%3Atrue%7D) 中偵錯。","github.copilot.viewsWelcome.enterprise":"請連絡您的 GitHub 組織系統管理員以啟用 Copilot。","github.copilot.viewsWelcome.individual.expired":"您的 Copilot 訂用帳戶已過期。\n\n[檢閱 Copilot 設定](https://github.com/settings/copilot?editor=vscode)","github.copilot.viewsWelcome.offline":"您目前已離線。請連線到網際網路以使用 GitHub Copilot。\n\n[重試連線](command:github.copilot.refreshToken)","github.copilot.viewsWelcome.signIn":"登入以啟用由 GitHub Copilot 提供的功能。\n\n[登入](command:workbench.action.chat.triggerSetupForceSignIn)","github.copilot.viewsWelcome.switchToReleaseChannel":"穩定版本的 VS Code 目前不支援 GitHub Copilot Chat 擴充功能的發行前版本。請切換至 GitHub Copilot Chat 的發行版本，或嘗試使用 VS Code Insiders。\n\n[切換至發行版並重新載入](command:runCommands?%7B%22commands%22%3A%5B%7B%22command%22%3A%22workbench.extensions.action.switchToRelease%22%2C%22args%22%3A%5B%22GitHub.copilot-chat%22%5D%7D%2C%22workbench.action.reloadWindow%22%5D%7D)\n\n[切換至 VS Code Insiders](https://aka.ms/vscode-insiders)","github.copilot.walkthrough.description":"您的 AI 配對程式設計人員可以更快速且更聰明地撰寫程式碼","github.copilot.walkthrough.edits.description":"使用 **Copilot Edits** 選取您要使用的檔案，並描述您要做的變更。Copilot 會直接套用到您的檔案。\n[使用 Copilot 編輯](command:workbench.action.chat.open?%7B%22mode%22%3A%22edit%22%7D)","github.copilot.walkthrough.edits.media.altText":"影片顯示使用者將檔案拖放到位於次要側邊欄的 Copilot Edits 輸入方塊。Copilot 接著會根據使用者的要求更新檔案","github.copilot.walkthrough.edits.title":"使用自然語言進行變更","github.copilot.walkthrough.firstSuggest.description":"當您在編輯器中輸入時，Copilot 會建議程式碼，以協助完成您起頭的內容。","github.copilot.walkthrough.firstSuggest.media.altText":"影片顯示不同的 Copilot 自動補全，其中 Copilot 會建議程式碼，協助使用者完成其程式碼","github.copilot.walkthrough.firstSuggest.title":"AI 建議的程式碼完成","github.copilot.walkthrough.inlineChatMac.description":"有時候，描述您想要直接在檔案中撰寫的程式碼比較容易。\n放置游標或進行選取，然後使用 **``Cmd+I``** 開啟**內嵌聊天**。","github.copilot.walkthrough.inlineChatMac.media.altText":"影片顯示使用者叫用內嵌聊天 Widget，並以自然語言要求 Copilot 修改檔案。然後 Copilot 進行了所要求的修改","github.copilot.walkthrough.inlineChatMac.title":"在您的檔案中使用自然語言","github.copilot.walkthrough.inlineChatNotMac.description":"有時候，描述您想要直接在檔案中撰寫的程式碼比較容易。\n放置游標或進行選取，然後使用 **``Ctrl+I``** 開啟**內嵌聊天**。","github.copilot.walkthrough.inlineChatNotMac.media.altText":"編輯器中的內嵌 Chat 檢視。影片顯示使用者叫用內嵌聊天 Widget，並以自然語言要求 Copilot 修改檔案。然後 Copilot 進行了所要求的修改","github.copilot.walkthrough.inlineChatNotMac.title":"在您的檔案中使用自然語言","github.copilot.walkthrough.panelChat.description":"使用 **@workspace** 詢問 Copilot 程式設計問題，或取得程式碼方面的協助。\n 輸入 **@** 查看可以直接聊天的有空聊天參與者，每個都有自己的專長。\n[與 Copilot 聊天](command:workbench.action.chat.open?%7B%22mode%22%3A%22ask%22%7D)","github.copilot.walkthrough.panelChat.media.altText":"使用者在次要側邊欄的 [聊天] 面板中叫用 @workspace，以了解程式碼基底。Copilot 擷取相關資訊，並提供包含檔案連結的回應","github.copilot.walkthrough.panelChat.title":"聊聊您的程式碼","github.copilot.walkthrough.setup.noAction.description":"您可以使用 Copilot 跨多個檔案產生程式代碼、修正錯誤、詢問程式程式碼相關問題，以及使用自然語言進行其他作業。\n 我們現在提供您的 GitHub 帳戶 [Copilot for free](https://github.com/features/copilot/plans)。","github.copilot.walkthrough.setup.signIn.description":"您可以使用 Copilot 跨多個檔案產生程式碼、修正錯誤、使用自然語言詢問程式碼相關問題等。\n 我們現在為您的 GitHub 帳戶提供 [Copilot 免費版](https://github.com/features/copilot/plans) (英文)。\n\n[使用 Copilot 免費版](command:workbench.action.chat.triggerSetupForceSignIn)","github.copilot.walkthrough.setup.signIn.title":"登入以使用 Copilot 免費版","github.copilot.walkthrough.setup.signUp.description":"您可以使用 Copilot 跨多個檔案產生程式碼、修正錯誤、使用自然語言詢問程式碼相關問題等。\n 我們現在為您的 GitHub 帳戶提供 [Copilot 免費版](https://github.com/features/copilot/plans) (英文)。\n\n[使用 Copilot 免費版](command:workbench.action.chat.triggerSetupForceSignIn)","github.copilot.walkthrough.setup.signUp.title":"免費開始使用 Copilot","github.copilot.walkthrough.signIn.description":"若要開始使用 Copilot，請使用您的 GitHub 帳戶登入。\n請確認您使用正確的 GitHub 帳戶。您也可以稍後使用帳戶功能表來登入。\n\n[登入](command:github.copilot.signIn)","github.copilot.walkthrough.signIn.media.altText":"透過本逐步解說或 VS Code 的帳戶功能表來登入 GitHub","github.copilot.walkthrough.signIn.title":"使用 GitHub 登入","github.copilot.walkthrough.sparkle.description":"Copilot 在整個 VS Code 介面中使用 AI 支援的智慧動作，來增強您的編碼體驗。\n請尋找 $(sparkle) 圖示，例如在[原始檔控制檢視](command：workbench.view.scm)中，Copilot 會根據程式碼變更，產生認可訊息和 PR 描述。\n\n[探索提示和祕訣](https://code.visualstudio.com/docs/copilot/copilot-vscode-features)","github.copilot.walkthrough.sparkle.media.altText":"影片顯示在原始檔控制輸入方塊中點擊閃亮圖示，觸發 GitHub Copilot 自動產生認可訊息","github.copilot.walkthrough.sparkle.title":"請留意智慧動作","github.copilot.walkthrough.title":"GitHub Copilot"}
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.nls.de.json:1:{"copilot.agent.description":"Bearbeiten von Dateien in Ihrem Arbeitsbereich im Agentmodus","copilot.codebase.tool.description":"Suchen Sie relevante Dateiblöcke, Symbole und andere Informationen in Ihrer Codebasis","copilot.description":"Im Kontext fragen oder bearbeiten","copilot.edits.description":"Dateien in Ihrem Arbeitsbereich bearbeiten","copilot.listCodeUsages.tool.description":"Finden Sie Verweise, Definitionen und andere Verwendungen eines Symbols","copilot.terminal.description":"Nach Befehlen fragen","copilot.terminal.explain.description":"Erläutern Sie etwas im Terminal","copilot.terminal.explain.sampleRequest":"Erläutern Sie den letzten Befehl","copilot.terminal.sampleRequest":"Wie zeige ich alle Dateien innerhalb eines Verzeichnisses an, einschließlich Unterverzeichnissen?","copilot.terminalPanel.description":"Fragen Sie, wie Sie etwas im Terminal tun können.","copilot.testFailure.tool.description":"Enthält Informationen über den letzten Fehler beim Komponententest","copilot.toolSet.editing.description":"Dateien in Ihrem Arbeitsbereich bearbeiten","copilot.toolSet.new.description":"Richten Sie ein Gerüst für einen neuen Arbeitsbereich mit spezifischen VS Code-Konfigurationen ein, um neue Projekte zu kompilieren, zu debuggen und auszuführen.","copilot.toolSet.runCommand.description":"Befehle im Terminal ausführen","copilot.toolSet.runNotebook.description":"Notebookzellen ausführen","copilot.toolSet.runTasks.description":"Aufgaben in Ihrem Arbeitsbereich ausführen","copilot.toolSet.search.description":"Dateien in Ihrem Arbeitsbereich suchen und lesen","copilot.tools.applyPatch.description":"Textdateien im Arbeitsbereich bearbeiten","copilot.tools.applyPatch.name":"Patch anwenden","copilot.tools.changes.description":"Unterschiede zu geänderten Dateien abrufen","copilot.tools.createDirectory.description":"Neue Verzeichnisse in Ihrem Arbeitsbereich erstellen","copilot.tools.createDirectory.name":"Verzeichnis erstellen","copilot.tools.createFile.description":"Neue Dateien erstellen","copilot.tools.createFile.name":"Datei erstellen","copilot.tools.editNotebook.name":"Notizbuch bearbeiten","copilot.tools.errors.description":"Fehler für eine bestimmte Datei überprüfen","copilot.tools.fetchWebPage.description":"Rufen Sie den Hauptinhalt von einer Webseite ab. Sie sollten die URL der Seite angeben, die Sie abrufen möchten.","copilot.tools.fetchWebPage.name":"Website abrufen","copilot.tools.findFiles.name":"In Dateien suchen","copilot.tools.findTestFiles.description":"Für eine Quellcodedatei suchen Sie die Datei, die die Tests enthält. Für eine Testdatei suchen Sie die Datei, die den getesteten Code enthält.","copilot.tools.findTestFiles.name":"Testdateien suchen","copilot.tools.findTextInFiles.name":"Suchen von Text in Dateien","copilot.tools.getChangedFiles.name":"Git-Änderungen","copilot.tools.getDocInfo.description":"Für ein Symbol wie eine Klasse oder Funktion finden Sie Informationen zur Dokumentation.","copilot.tools.getDocInfo.name":"Dokumentinformationen","copilot.tools.getErrors.name":"Probleme abrufen","copilot.tools.getNotebookCellOutput.description":"Ausgabe einer zuvor ausgeführten Zelle lesen","copilot.tools.getNotebookCellOutput.name":"Zellenausgabe aus Notizbuch abrufen","copilot.tools.getTaskOutput.name":"Abrufen der Taskausgabe","copilot.tools.getVSCodeAPI.name":"VS Code-API-Referenzen abrufen","copilot.tools.insertEdit.name":"Datei bearbeiten","copilot.tools.listCodeUsages.name":"Verwendungen suchen","copilot.tools.listDirectory.name":"Verzeichnis auflisten","copilot.tools.multiReplaceString.name":"Zeichenfolge in Dateien mehrfach ersetzen","copilot.tools.newJupyterNotebook.description":"Einen neuen Jupyter Notebook erstellen","copilot.tools.openSimpleBrowser.description":"Vorschau einer lokal gehosteten Website im einfachen Browser.","copilot.tools.openSimpleBrowser.name":"Einfachen Browser öffnen","copilot.tools.readFile.name":"Datei lesen","copilot.tools.readProjectStructure.name":"Projektstruktur","copilot.tools.replaceString.name":"Zeichenfolge in Datei ersetzen","copilot.tools.runNotebookCell.description":"Ausführung einer Zelle in einer Notizbuchdatei auslösen","copilot.tools.runNotebookCell.name":"Notebook-Zelle ausführen","copilot.tools.searchCodebase.name":"Codebasis","copilot.tools.searchWorkspaceSymbols.name":"Arbeitsbereichssymbole","copilot.tools.testFailure.name":"Testfehler","copilot.tools.think.name":"Denken","copilot.tools.updateUserPreferences.name":"Benutzereinstellungen aktualisieren","copilot.vscode.api.description":"Fragen zur Entwicklung von VS Code-Erweiterungen","copilot.vscode.api.sampleRequest":"Wie füge ich der Statusleiste Text hinzu?","copilot.vscode.description":"Fragen VS Code stellen","copilot.vscode.sampleRequest":"Wie lautet der Befehl zum Öffnen des integrierten Terminals?","copilot.vscode.search.description":"Abfrageparameter für Arbeitsbereichssuche generieren","copilot.vscode.search.sampleRequest":"In allen Dateien meinem Verzeichnis \"src\" nach \"foo\" suchen","copilot.vscode.setupTests.description":"Tests in Ihrem Projekt einrichten (experimentell)","copilot.vscode.setupTests.sampleRequest":"Playwright-Tests zu meinem Projekt hinzufügen","copilot.vscode.startDebugging.description":"Startkonfiguration generieren und Debuggen in VS Code starten (experimentell)","copilot.vscode.startDebugging.sampleRequest":"An Knoten-App an Port 9229 anfügen","copilot.vscode.tool.description":"Verwenden Sie VS Code API-Referenzen, um Fragen zur Entwicklung von VS Code-Erweiterung zu beantworten.","copilot.workspace.description":"Nach Ihrem Arbeitsbereich fragen","copilot.workspace.doc.description":"Dokumentationskommentar für dieses Symbol hinzufügen","copilot.workspace.edit.description":"Dateien in Ihrem Arbeitsbereich bearbeiten","copilot.workspace.edit.inline.description":"Bearbeiten des ausgewählten Codes in Ihrem aktiven Editor","copilot.workspace.explain.description":"Erläutern Sie, wie der Code in Ihrem aktiven Editor funktioniert.","copilot.workspace.fix.description":"Hiermit wird ein Fix für die Probleme im ausgewählten Code vorgeschlagen.","copilot.workspace.fix.sampleRequest":"In diesem Code liegt ein Problem vor. Schreiben Sie den Code neu, um ihn mit dem behobenen Fehler anzuzeigen.","copilot.workspace.generate.description":"Neuen Code generieren","copilot.workspace.new.description":"Code-Gerüst für eine neue Datei oder ein neues Projekt in einem Arbeitsbereich","copilot.workspace.new.sampleRequest":"RESTful-API-Servers mit TypeScript erstellen","copilot.workspace.newNotebook.description":"Einen neuen Jupyter Notebook erstellen","copilot.workspace.newNotebook.sampleRequest":"Wie erstelle ich ein Notebook, um Daten aus einer CSV-Datei zu laden?","copilot.workspace.review.description":"Ausgewählten Code in Ihrem aktiven Editor überprüfen","copilot.workspace.sampleRequest":"Wie erstelle ich dieses Projekt?","copilot.workspace.semanticSearch.description":"Suchen nach relevantem Code für Ihre Abfrage","copilot.workspace.semanticSearch.sampleRequest":"Wo befindet sich der Symbolleistencode?","copilot.workspace.tests.description":"Hiermit werden Komponententests für den ausgewählten Code generiert.","copilot.workspaceSymbols.tool.description":"Suchen Sie mithilfe von Sprachdiensten nach Arbeitsbereichssymbolen.","github.copilot.badge.signUp":"Für GitHub Copilot registrieren","github.copilot.badge.star":"Copilot auf GitHub mit Stern markieren","github.copilot.badge.twitter":"GitHub auf Twitter folgen","github.copilot.badge.youtube":"GitHub auf YouTube ansehen","github.copilot.chat.attachFile":"Datei zum Chat hinzufügen","github.copilot.chat.attachSelection":"Auswahl zum Chat hinzufügen","github.copilot.chat.completionContext.typescript.mode":"Der Ausführungsmodus des TypeScript Copilot-Kontextanbieters.","github.copilot.chat.copilotDebugCommand.enabled":"Gibt an, ob der Befehl „copilot-debug“ im Terminal aktiviert ist.","github.copilot.chat.editor.temporalContext.enabled":"Bei der Inlinechatanforderung, ob zuletzt angezeigte und bearbeitete Dateien in Copilot-Anforderungen einbezogen werden sollen.","github.copilot.chat.edits.suggestRelatedFilesForTests":"Ob Quelldateien aus den Testdateien für den Arbeitssatz „Copilot Edits“ vorgeschlagen werden sollen.","github.copilot.chat.edits.temporalContext.enabled":"Beim Erstellen einer Bearbeitungsanforderung, ob zuletzt angezeigte und bearbeitete Dateien in Copilot-Anforderungen einbezogen werden sollen.","github.copilot.chat.languageContext.fix.typescript.enabled":"Aktiviert den TypeScript-Sprachkontextanbieter für /Fix-Befehle.","github.copilot.chat.languageContext.inline.typescript.enabled":"Aktiviert den TypeScript-Sprachkontextanbieter für Inlinechats (generieren und bearbeiten)","github.copilot.chat.languageContext.typescript.cacheTimeout":"Das Zeitlimit für die Cachebefüllung des TypeScript-Sprachkontextanbieters in Millisekunden. Der Standardwert beträgt 500 Millisekunden.","github.copilot.chat.languageContext.typescript.enabled":"Aktiviert den TypeScript-Sprachkontextanbieter für Inline-Vervollständigungen.","github.copilot.chat.languageContext.typescript.includeDocumentation":"Steuert, ob Dokumentationskommentare in die generierten Codeausschnitte aufgenommen werden.","github.copilot.chat.languageContext.typescript.items":"Steuert, welche Art von Elementen im TypeScript-Sprachkontextanbieter enthalten sind.","github.copilot.command.applyReviewSuggestion":"Anwenden","github.copilot.command.applyReviewSuggestionAndNext":"Anwenden und zum nächsten Wechseln","github.copilot.command.applySuggestionWithCopilot":"Vorschlag anwenden","github.copilot.command.buildLocalWorkspaceIndex":"Index des lokalen Arbeitsbereichs erstellen","github.copilot.command.buildRemoteWorkspaceIndex":"Index für Remotearbeitsbereich erstellen","github.copilot.command.collectDiagnostics":"Chatdiagnose","github.copilot.command.collectWorkspaceIndexDiagnostics":"Indexdiagnose des Arbeitsbereichs sammeln","github.copilot.command.continueReviewInChat":"Im Chatbereich anzeigen","github.copilot.command.continueReviewInInlineChat":"Verwerfen und Inlinechat kopieren","github.copilot.command.disableEditTracing":"Ablaufverfolgung für die Chatbearbeitung deaktivieren","github.copilot.command.discardAllReviewSuggestion":"Alle verwerfen","github.copilot.command.discardReviewSuggestion":"Verwerfen","github.copilot.command.discardReviewSuggestionAndNext":"Verwerfen und zum nächsten Wechseln","github.copilot.command.enableEditTracing":"Ablaufverfolgung für die Chatbearbeitung aktivieren","github.copilot.command.explainTerminalLastCommand":"Befehl Letztes Terminal erklären","github.copilot.command.explainThis":"Erklären","github.copilot.command.fixTestFailure":"Testfehler beheben","github.copilot.command.fixThis":"Korrigieren","github.copilot.command.generateConfiguration":"Debugkonfiguration generieren","github.copilot.command.generateDocs":"Dokumente generieren","github.copilot.command.generateSTest":"STest aus letzter Chatanforderung generieren","github.copilot.command.generateTests":"Tests generieren","github.copilot.command.generateThis":"Generieren Sie dies","github.copilot.command.gotoNextReviewSuggestion":"Nächster Vorschlag","github.copilot.command.gotoPreviousReviewSuggestion":"Vorheriger Vorschlag","github.copilot.command.helpfulReviewSuggestion":"Hilfreich","github.copilot.command.inlineEdit.clearCache":"Nächsten Bearbeitungscache löschen","github.copilot.command.inlineEdit.reportNotebookNESIssue":"Problem beim nächsten Bearbeiten des Berichts-Notebook melden","github.copilot.command.logWorkbenchState":"Zustand der Protokollarbeitsbank","github.copilot.command.openUserPreferences":"Benutzereinstellungen öffnen","github.copilot.command.openWalkthrough":"Exemplarische Vorgehensweise öffnen","github.copilot.command.refreshClaudeCodeSessions":"Aktualisieren von Claude Code-Sitzungen","github.copilot.command.rerunWithCopilotDebug":"Letzten Terminalbefehl debuggen","github.copilot.command.resetVirtualToolGroups":"Virtuelle Toolgruppen zurücksetzen","github.copilot.command.reviewAndComment":"Überprüfen","github.copilot.command.reviewChanges":"Review – Ausgecheckte Änderungen","github.copilot.command.reviewFileChange":"Änderungen überprüfen","github.copilot.command.reviewStagedChanges":"Review – Gestagete Änderungen","github.copilot.command.reviewUnstagedChanges":"Review – Ungestagete Änderungen","github.copilot.command.sendChatFeedback":"Chatfeedback senden","github.copilot.command.showChatLogView":"Chat-Debugansicht anzeigen","github.copilot.command.showContextInspectorView":"Sprachkontext überprüfen","github.copilot.command.showNotebookLog":"Chatprotokollnotizbuch anzeigen","github.copilot.command.showOutputChannel":"Ausgabekanal anzeigen","github.copilot.command.unhelpfulReviewSuggestion":"Nicht hilfreich","github.copilot.config.agent.currentEditorContext.enabled":"Wenn diese Option aktiviert ist, wird der Name des aktuell aktiven Editors in den Kontext für den Agentmodus von Copilot einbezogen.","github.copilot.config.agent.thinkingTool":"Aktiviert das Thinking-Tool, das es Copilot ermöglicht, im Agentmodus tiefgründig über Ihre Anfrage nachzudenken, bevor eine Antwort generiert wird.","github.copilot.config.alternateGptPrompt.enabled":"Aktiviert einen experimentellen alternativen Prompt für GPT-Modelle anstelle des Standard-Prompts.","github.copilot.config.autoFix":"Diagnose für bearbeitete Dateien automatisch korrigieren.","github.copilot.config.byok.ollamaEndpoint":"Der Endpunkt, der für das Ollama verwendet werden soll, wenn über Bring Your Own Key darauf zugegriffen wird. Der Standardwert ist „localhost“.","github.copilot.config.claudeSonnet45AlternatePrompt":"Gibt eine experimentelle alternative Eingabeaufforderung an, die für Claude Sonnet 4.5-Modelle verwendet werden soll.","github.copilot.config.codeGeneration.instruction.file":"Ein Pfad zu einer Datei, die Copilot-Anforderungen hinzugefügt wird, die Code generieren. Optional können Sie eine Sprache für die Anweisung angeben.","github.copilot.config.codeGeneration.instruction.text":"Eine Textanweisung, die Copilot-Anforderungen hinzugefügt wird, die Code generieren. Optional können Sie eine Sprache für die Anweisung angeben.","github.copilot.config.codeGeneration.instructions":"Eine Sammlung von Anweisungen, die Copilot-Anforderungen hinzugefügt werden, die Code generieren.\nAnweisungen können aus Folgendem stammen: \n– einer Datei im Arbeitsbereich: `{ \"file\": \"fileName\" }`\n– Text in natürliche Sprache: `{ \"text\": \"Use underscore for field names.\" }`\n\nHinweis: Halten Sie Ihre Anweisungen kurz und präzise. Schlechte Anweisungen können die Qualität und die Leistung von Copilot beeinträchtigen.","github.copilot.config.codeGeneration.instructions.deprecated":"Verwenden Sie stattdessen Anweisungsdateien. Weitere Informationen finden Sie unter https://aka.ms/vscode-ghcp-custom-instructions.","github.copilot.config.codeGeneration.useInstructionFiles":"Steuert, ob Copilot-Anforderungen Codeanweisungen von `.github/copilot-instructions.md` hinzugefügt werden.\n\nHinweis: Formulieren Sie Ihre Anweisungen kurz und präzise. Schlechte Anweisungen können die Qualität und die Leistung von Copilot beeinträchtigen. [Erfahren Sie mehr](https://aka.ms/github-copilot-custom-instructions) über die Anpassung von Copilot.","github.copilot.config.codesearch.enabled":"Gibt an, ob die agentische Codesuche bei Verwendung von „#codebase“ aktiviert werden soll.","github.copilot.config.commitMessageGeneration.instruction.file":"Ein Pfad zu einer Datei mit Anweisungen, die Copilot-Anforderungen hinzugefügt werden, die Commitnachrichten generieren.","github.copilot.config.commitMessageGeneration.instruction.text":"Textanweisungen, die Copilot-Anforderungen hinzugefügt werden, die Commitnachrichten generieren.","github.copilot.config.commitMessageGeneration.instructions":"Eine Sammlung von Anweisungen, die Copilot-Anforderungen hinzugefügt werden, die Commitnachrichten generieren.\nAnweisungen können aus Folgendem stammen: \n– einer Datei im Arbeitsbereich: `{ \"file\": \"fileName\" }`\n– Text in natürlicher Sprache: `{ \"text\": \"Use conventional commit message format.\" }`\n\nHinweis: Formulieren Sie Ihre Anweisungen kurz und präzise. Schlechte Anweisungen können die Qualität und die Leistung von Copilot beeinträchtigen.","github.copilot.config.completionsFetcher":"Legt den Fetcher fest, der für die Inlinevervollständigungen verwendet wird.","github.copilot.config.customInstructionsInSystemMessage":"Wenn diese Option aktiviert ist, werden benutzerdefinierte Anweisungen und Modusanweisungen anstelle einer Benutzernachricht an die Systemnachricht angefügt.","github.copilot.config.debugTerminalCommandPatterns":"Eine Liste der Befehle, für die die Schnellkorrekturaktion \"Debugbefehl\" im Debugterminal angezeigt werden soll.","github.copilot.config.debugTerminalCommands":"Gibt an, ob Hinweise im Debugterminal und im Befehl \"copilot-debug\" schnell korrigiert werden sollen.","github.copilot.config.edits.enabled":"Ob das Copilot Edits-Feature aktiviert werden soll.","github.copilot.config.edits.suggestRelatedFilesFromGitHistory":"Ob verwandte Dateien aus dem Git-Verlauf für den Arbeitssatz „Copilot Edits“ vorgeschlagen werden sollen.","github.copilot.config.editsNewNotebook.enabled":"Ob das neue Notizbuchtool in Copilot Edits aktiviert werden soll.","github.copilot.config.enableCodeActions":"Steuert, ob Copilot-Befehle als Codeaktionen angezeigt werden, wenn verfügbar","github.copilot.config.enableUserPreferences":"Aktivieren Sie das Speichern von Benutzereinstellungen im Agentmodus.","github.copilot.config.executePrompt.enabled":"Das executePrompt-Tool ermöglicht der Agenturschaft, Aufgaben in einem separaten, isolierten Kontext auszuführen.","github.copilot.config.experimental.testGeneration.instruction.file":"Ein Pfad zu einer Datei, die Copilot-Anforderungen hinzugefügt wird, die Tests generieren. Optional können Sie eine Sprache für die Anweisung angeben.","github.copilot.config.experimental.testGeneration.instruction.text":"Eine Textanweisung, die Copilot-Anforderungen hinzugefügt wird, die Tests generieren. Optional können Sie eine Sprache für die Anweisung angeben.","github.copilot.config.generateTests.codeLens":"Zeigen Sie das Codeobjektiv „Tests generieren“ für Symbole an, die nicht durch die aktuellen Testabdeckungsinformationen abgedeckt sind.","github.copilot.config.gpt5AlternatePrompt":"Gibt eine experimentelle alternative Eingabeaufforderung an, die für GPT-5-Modelle verwendet werden soll.","github.copilot.config.gpt5CodexAlternatePrompt":"Gibt eine experimentelle alternative Eingabeaufforderung an, die für das GPT-5-Codex-Modell verwendet werden soll.","github.copilot.config.grokCodeAlternatePrompt":"Gibt eine experimentelle alternative Eingabeaufforderung an, die für Grok Code-Modelle verwendet werden soll.","github.copilot.config.imageUpload.enabled":"Ermöglicht die Verwendung von Bildupload-URLs in Chatanforderungen anstelle von unformatierten Base64-Zeichenfolgen.","github.copilot.config.localeOverride":"Geben Sie ein Gebietsschema an, in dem Copilot antworten soll, z. B. \"en\" oder \"fr\". Copilot antwortet standardmäßig mithilfe des konfigurierten Gebietsschemas für die Anzeigesprache von VS Code.","github.copilot.config.nesFetcher":"Legt den Fetcher fest, der für die nächsten Änderungsvorschläge verwendet wird.","github.copilot.config.newWorkspace.useContext7":"Gibt an, ob die [Context7](command:github.copilot.mcp.viewContext7)-Tools verwendet werden sollen, um ein Projekt für die Erstellung neuer Arbeitsbereiche zu erstellen.","github.copilot.config.newWorkspaceCreation.enabled":"Gibt an, ob die Erstellung neuer agentischer Arbeitsbereiche aktiviert werden soll.","github.copilot.config.notebook.enhancedNextEditSuggestions":"Steuert, ob ein erweiterter Ansatz zum Generieren der nächsten Bearbeitungsvorschläge in Notebookzellen verwendet werden soll.","github.copilot.config.notebook.followCellExecution":"Steuert, ob die aktuell ausgeführte Zelle beim Ausführen über Copilot im Viewport angezeigt wird.","github.copilot.config.notebook.inlineEditAgent.enabled":"Aktivieren Sie agentenähnliches Verhalten über das Inline-Chat-Widget des Notebooks.","github.copilot.config.pullRequestDescriptionGeneration.instruction.file":"Ein Pfad zu einer Datei mit Anweisungen, die Copilot-Anforderungen hinzugefügt werden, die Commitnachrichten generieren.","github.copilot.config.pullRequestDescriptionGeneration.instruction.text":"Textanweisungen, die Copilot-Anforderungen, die Titel und Beschreibungen von Pull Requests generieren, hinzugefügt werden.","github.copilot.config.pullRequestDescriptionGeneration.instructions":"Eine Sammlung von Anweisungen, die Copilot-Anforderungen hinzugefügt werden, die Titel und Beschreibungen von Pull Requests generieren.\nAnweisungen können aus Folgendem stammen: \n- einer Datei im Arbeitsbereich: `{ \"file\": \"fileName\" }`\n- Text in natürlicher Sprache: `{ \"text\": \"Always include a list of key changes.\" }`\n\nHinweis: Formulieren Sie Ihre Anweisungen kurz und präzise. Schlechte Anweisungen können die Qualität und die Leistung von Copilot beeinträchtigen.","github.copilot.config.renameSuggestions.triggerAutomatically":"Steuert, ob Copilot Vorschläge zum Umbenennen generiert","github.copilot.config.responsesApiReasoningEffort":"Legt den Aufwand für die Begründung fest, der bei der Responses-API verwendet wird. Erfordert `#github.copilot.chat.useResponsesApi#`.","github.copilot.config.responsesApiReasoningSummary":"Legt den Stil der Begründungszusammenfassung fest, der bei der Responses-API verwendet wird. Erfordert `#github.copilot.chat.useResponsesApi#`.","github.copilot.config.reviewAgent.enabled":"Aktiviert den Codeüberprüfungs-Agent.","github.copilot.config.reviewSelection.enabled":"Aktiviert die Codereview für die aktuelle Auswahl.","github.copilot.config.reviewSelection.instruction.file":"Ein Pfad zu einer Datei, die Copilot-Anforderungen hinzugefügt wird, die Codereview für die aktuelle Auswahl bereitstellen. Optional können Sie eine Sprache für die Anweisung angeben.","github.copilot.config.reviewSelection.instruction.text":"Eine Textanweisung, die Copilot-Anforderungen hinzugefügt wird, die Codereview für die aktuelle Auswahl bereitstellen. Optional können Sie eine Sprache für die Anweisung angeben.","github.copilot.config.reviewSelection.instructions":"Eine Reihe von Anweisungen, die Copilot-Anforderungen hinzugefügt wird, die Codereview für die aktuelle Auswahl bereitstellen.\nAnweisungen können aus Folgendem stammen: \n– einer Datei im Arbeitsbereich: `{ \"file\": \"fileName\" }`\n– Text in natürliche Sprache: `{ \"text\": \"Use underscore for field names.\" }`\n\nHinweis: Formulieren Sie Ihre Anweisungen kurz und präzise. Schlechte Anweisungen können die Effektivität von Copilot beeinträchtigen.","github.copilot.config.scopeSelection":"Gibt an, ob der Benutzer aufgefordert wird, einen bestimmten Symbolbereich auszuwählen, wenn der Benutzer \"/explain\" verwendet und der aktive Editor keine Auswahl hat.","github.copilot.config.setupTests.enabled":"Aktiviert die Absicht „/setupTests“ und die Eingabeaufforderung bei der Generierung von „/tests“.","github.copilot.config.startDebugging.enabled":"Aktiviert die Absicht „/startDebugging“ im Panel-Chat. Generiert oder sucht die Startkonfiguration, um der Abfrage (sofern vorhanden), der Projektstruktur und mehr zu entsprechen.","github.copilot.config.summarizeAgentConversationHistory.enabled":"Gibt an, ob der Verlauf der Agentunterhaltungen automatisch zusammengefasst werden soll, sobald das Kontextfenster gefüllt ist.","github.copilot.config.terminalChatLocation":"Steuert, wo Chatabfragen aus dem Terminal geöffnet werden sollen.","github.copilot.config.terminalChatLocation.chatView":"Chatansicht öffnen","github.copilot.config.terminalChatLocation.quickChat":"Schnellchat öffnen","github.copilot.config.terminalChatLocation.terminal":"Terminalinlinechat öffnen","github.copilot.config.testGeneration.instructions":"Eine Reihe von Anweisungen, die Copilot-Anforderungen hinzugefügt werden, die Tests generieren.\nAnweisungen können aus Folgendem stammen: \n– einer Datei im Arbeitsbereich: `{ \"file\": \"fileName\" }`\n– Text in natürliche Sprache: `{ \"text\": \"Use underscore for field names.\" }`\n\nHinweis: Halten Sie Ihre Anweisungen kurz und präzise. Schlechte Anweisungen können die Qualität und die Leistung von Copilot beeinträchtigen.","github.copilot.config.testGeneration.instructions.deprecated":"Verwenden Sie stattdessen Anweisungsdateien. Weitere Informationen finden Sie unter https://aka.ms/vscode-ghcp-custom-instructions.","github.copilot.config.useProjectTemplates":"Verwenden relevanter GitHub-Projekte als Startprojekte bei Verwendung von „/new“","github.copilot.config.useResponsesApi":"Verwenden Sie die Responses-API anstelle der Chat Completions-API, wenn diese unterstützt wird. Aktiviert Begründungen und Begründungszusammenfassungen.\n\n**Hinweis**: Dies ist ein experimentelles Feature, das noch nicht für alle Benutzer aktiviert ist.","github.copilot.config.virtualTools.threshold":"Diese Einstellung legt die Anzahl der Tools fest, über die virtuelle Tools verwendet werden sollen. Virtuelle Tools gruppieren ähnliche Tool-Sets und ermöglichen es dem Modell, diese bei Bedarf zu aktivieren. Bestimmte Toolgruppen werden vorsorglich vorab aktiviert. Wir arbeiten aktiv an der Entwicklung dieser Funktion. Sobald der Schwellenwert erreicht ist, werden Sie eine Beeinträchtigung der Toolaufrufe feststellen.\n\nKann auf „0“ festgelegt werden, um virtuelle Tools zu deaktivieren.","github.copilot.devcontainer.generateDevContainerConfig":"Entwicklungscontainerkonfiguration generieren","github.copilot.git.generateCommitMessage":"Commitnachricht generieren","github.copilot.git.resolveMergeConflicts":"Konflikte mit KI lösen","github.copilot.icon":"GitHub Copilot-Symbol","github.copilot.nextEditSuggestions.allowWhitespaceOnlyChanges":"Gibt an, ob Änderungen, die nur aus Leerzeichen bestehen, durch die nächsten Bearbeitungsvorschläge (Next Edit Suggestions, NES) vorgeschlagen werden dürfen.","github.copilot.nextEditSuggestions.enabled":"Ob „Nächste Bearbeitungsvorschläge“ (Next Edit Suggestions, NES) aktiviert werden soll\n\nNES kann einen nächsten Bearbeitungsvorschlag basierend auf Ihren letzten Änderungen machen. [Weitere Informationen](https://aka.ms/vscode-nes) zu Nächste Bearbeitungsvorschläge.","github.copilot.nextEditSuggestions.fixes":"Ob Korrekturen für Diagnosen über die nächsten Bearbeitungsvorschläge (NES) angeboten werden sollen","github.copilot.resetAutomaticCommandExecutionPrompt":"Automatische Eingabeaufforderung zurücksetzen","github.copilot.submenu.copilot.label":"Copilot","github.copilot.submenu.reviewComment.applyAndNext.label":"Anwenden und zum nächsten Wechseln","github.copilot.submenu.reviewComment.discard.label":"Verwerfen","github.copilot.submenu.reviewComment.discardAndNext.label":"Verwerfen und zum nächsten Wechseln","github.copilot.tools.createAndRunTask.description":"Aufgabe im Arbeitsbereich erstellen und ausführen.","github.copilot.tools.createAndRunTask.name":"Aufgabe erstellen und ausführen","github.copilot.tools.createAndRunTask.userDescription":"Aufgabe im Arbeitsbereich erstellen und ausführen.","github.copilot.tools.createNewWorkspace.name":"Neuen Arbeitsbereich erstellen","github.copilot.tools.createNewWorkspace.userDescription":"Einen neuen Arbeitsbereich in VS Code einrichten.","github.copilot.tools.getProjectSetupInfo.name":"Projektsetupinformationen abrufen","github.copilot.tools.githubRepo.name":"GitHub-Repository suchen","github.copilot.tools.githubRepo.userDescription":"Durchsucht ein GitHub-Repository nach relevanten Quellcodeausschnitten. Sie können ein Repository mit „besitzer/repo“ angeben.","github.copilot.tools.openEmptyFolder.name":"Leeren Ordner als VS Code-Arbeitsbereich öffnen","github.copilot.tools.searchResults.description":"Die Ergebnisse aus der Suchansicht","github.copilot.tools.searchResults.name":"Suchergebnisse anzeigen","github.copilot.viewsWelcome.chatDisabled":"GitHub Copilot Chat ist derzeit von einem Organisationsadministrator für Ihr Konto deaktiviert. Wenden Sie sich an einen Organisationsadministrator, um den Chat zu aktivieren.\n\n[Weitere Informationen](https://docs.github.com/en/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-github-copilot-features-in-your-organization/managing-policies-for-copilot-in-your-organization)","github.copilot.viewsWelcome.contactSupport":"Es scheint ein Problem mit Ihrem Konto zu geben. Wenden Sie sich an den GitHub-Support.\n\n[Support kontaktieren](https://support.github.com/?editor=vscode)","github.copilot.viewsWelcome.debug":"Debuggen Sie mit einem [Terminalbefehl](command:github.copilot.chat.startCopilotDebugCommand) oder in einem [interaktiven Chat](command:workbench.action.chat.open?%7B%22query%22%3A%22%40vscode%20%2FstartDebugging%20%22%2C%22isPartialQuery%22%3Atrue%7D).","github.copilot.viewsWelcome.enterprise":"Wenden Sie sich an ihren GitHub-Organisationsadministrator, um Copilot zu aktivieren.","github.copilot.viewsWelcome.individual.expired":"Ihr Copilot-Abonnement ist abgelaufen.\n\n[Copilot-Einstellungen überprüfen](https://github.com/settings/copilot?editor=vscode)","github.copilot.viewsWelcome.offline":"Sie sind zurzeit offline. Stellen Sie eine Internetverbindung her, um GitHub Copilot zu verwenden.\n\n[Erneuter Verbindungsversuch](command:github.copilot.refreshToken)","github.copilot.viewsWelcome.signIn":"Melden Sie sich an, um Funktionen zu aktivieren, die von GitHub Copilot unterstützt werden.\n\n[Anmelden](command:workbench.action.chat.triggerSetupForceSignIn)","github.copilot.viewsWelcome.switchToReleaseChannel":"Die Vorabversion der GitHub Copilot Chat-Erweiterung wird in der Stable-Version von VS Code derzeit nicht unterstützt. Wechseln Sie zur Releaseversion für GitHub Copilot Chat, oder testen Sie VS Code Insiders.\n\n[Zur Releaseversion wechseln und neu laden](command:runCommands?%7B%22commands%22%3A%5B%7B%22command%22%3A%22workbench.extensions.action.switchToRelease%22%2C%22args%22%3A%5B%22GitHub.copilot-chat%22%5D%7D%2C%22workbench.action.reloadWindow%22%5D%7D)\n\n[Zu VS Code Insiders wechseln](https://aka.ms/vscode-insiders)","github.copilot.walkthrough.description":"Ihr KI-Paarprogrammierer, um Code schneller und intelligenter zu schreiben","github.copilot.walkthrough.edits.description":"Verwenden Sie **Copilot-Bearbeitungen**, um Dateien auszuwählen, mit denen Sie arbeiten möchten, und beschreiben Sie die Änderungen, die Sie vornehmen möchten. Copilot wendet sie direkt auf Ihre Dateien an.\n[Bearbeiten mit Copilot](command:workbench.action.chat.open?%7B%22mode%22%3A%22edit%22%7D)","github.copilot.walkthrough.edits.media.altText":"Das Video zeigt, wie die benutzende Person Dateien per Drag & Drop in das Eingabefeld „Copilot Edits“ in der sekundären Randleiste zieht. Copilot aktualisiert die Datei dann gemäß der Anforderung der benutzenden Person.","github.copilot.walkthrough.edits.title":"Vornehmen von Änderungen mithilfe natürlicher Sprache","github.copilot.walkthrough.firstSuggest.description":"Während Sie den Editor eingeben, schlägt Copilot Code vor, der Ihnen dabei hilft, ihre ersten Schritte auszuführen.","github.copilot.walkthrough.firstSuggest.media.altText":"Das Video zeigt verschiedene Copilot-Vervollständigungen, in denen Copilot Code vorschlägt, um Benutzer ihres Codes zu unterstützen.","github.copilot.walkthrough.firstSuggest.title":"KI-vorgeschlagene Codevervollständigungen","github.copilot.walkthrough.inlineChatMac.description":"Manchmal ist es einfacher, den Code zu beschreiben, den Sie direkt in eine Datei schreiben möchten.\nPlatzieren Sie den Cursor, oder treffen Sie eine Auswahl, und verwenden Sie **'Befehlstaste+I'**, um **Inlinechat** zu öffnen.","github.copilot.walkthrough.inlineChatMac.media.altText":"Das Video zeigt, wie die benutzende Person das Inlinechatwidget aufruft und Copilot auffordert, eine Änderung in der Datei in natürlicher Sprache vorzunehmen. Copilot nimmt dann die angeforderte Änderung vor.","github.copilot.walkthrough.inlineChatMac.title":"Verwenden natürlicher Sprache in Ihren Dateien","github.copilot.walkthrough.inlineChatNotMac.description":"Manchmal ist es einfacher, den Code zu beschreiben, den Sie direkt in eine Datei schreiben möchten.\nPlatzieren Sie den Cursor, oder treffen Sie eine Auswahl, und verwenden Sie **'STRG+I'**, um **Inlinechat** zu öffnen.","github.copilot.walkthrough.inlineChatNotMac.media.altText":"Inlinechatansicht im Editor. Das Video zeigt, wie die benutzende Person das Inlinechatwidget aufruft und Copilot auffordert, eine Änderung in der Datei in natürlicher Sprache vorzunehmen. Copilot nimmt dann die angeforderte Änderung vor.","github.copilot.walkthrough.inlineChatNotMac.title":"Verwenden natürlicher Sprache in Ihren Dateien","github.copilot.walkthrough.panelChat.description":"Stellen Sie Copilot-Programmierfragen, oder erhalten Sie mithilfe von **@arbeitsbereich** Hilfe zu Ihrem Code.\n Geben Sie **@** ein, um alle verfügbaren Chatteilnehmenden anzuzeigen, mit denen Sie direkt chatten können, jede Person mit ihrem eigenen Fachwissen.\n[Chatten mit Copilot](command:workbench.action.chat.open?%7B%22mode%22%3A%22ask%22%7D)","github.copilot.walkthrough.panelChat.media.altText":"Der Benutzer ruft @workspace im Bereich „Copilot Chat“ in der sekundären Randleiste auf, um die Codebasis zu verstehen. Copilot ruft die relevanten Informationen ab und stellt eine Antwort mit Links zu den Dateien bereit.","github.copilot.walkthrough.panelChat.title":"Chatten Sie über Ihren Code","github.copilot.walkthrough.setup.noAction.description":"Sie können Copilot verwenden, um Code in mehreren Dateien zu generieren, Fehler zu beheben, Fragen zu Ihrem Code zu stellen und vieles mehr mit natürlicher Sprache.\n Wir bieten jetzt [Copilot kostenlos](https://github.com/features/copilot/plans) mit Ihrem GitHub-Konto an.","github.copilot.walkthrough.setup.signIn.description":"Sie können Copilot verwenden, um mithilfe natürlicher Sprache, Code in mehreren Dateien zu generieren, Fehler zu beheben, Fragen zu Ihrem Code zu stellen und vieles mehr.\n Wir bieten jetzt [Copilot kostenlos](https://github.com/features/copilot/plans) mit Ihrem GitHub-Konto an.\n\n[Copilot kostenlos verwenden](command:workbench.action.chat.triggerSetupForceSignIn)","github.copilot.walkthrough.setup.signIn.title":"Anmelden, um Copilot kostenlos zu verwenden","github.copilot.walkthrough.setup.signUp.description":"Sie können Copilot verwenden, um mithilfe natürlicher Sprache, Code in mehreren Dateien zu generieren, Fehler zu beheben, Fragen zu Ihrem Code zu stellen und vieles mehr.\n Wir bieten jetzt [Copilot kostenlos](https://github.com/features/copilot/plans) mit Ihrem GitHub-Konto an.\n\n[Copilot kostenlos verwenden](command:workbench.action.chat.triggerSetupForceSignIn)","github.copilot.walkthrough.setup.signUp.title":"Kostenlose Erste Schritte mit Copilot","github.copilot.walkthrough.signIn.description":"Melden Sie sich mit Ihrem GitHub-Konto an, um mit Copilot zu beginnen.\nStellen Sie sicher, dass Sie das richtige GitHub-Konto verwenden. Sie können sich auch später über das Kontomenü anmelden.\n\n[Anmelden](command:github.copilot.signIn)","github.copilot.walkthrough.signIn.media.altText":"Melden Sie sich über diese exemplarische Vorgehensweise oder das VS Code-Kontomenü bei GitHub an.","github.copilot.walkthrough.signIn.title":"Mit GitHub anmelden","github.copilot.walkthrough.sparkle.description":"Copilot verbessert Ihre Programmiererfahrung mit KI-gestützten intelligenten Aktionen in der gesamten VS Code-Schnittstelle.\nSuchen Sie nach $(sparkle)-Symbolen, z. B. in der [Quellcodeverwaltungsansicht](command:workbench.view.scm), wo Copilot Commitnachrichten und PR-Beschreibungen basierend auf Codeänderungen generiert.\n\n[Tipps und Tricks entdecken](https://code.visualstudio.com/docs/copilot/copilot-vscode-features)","github.copilot.walkthrough.sparkle.media.altText":"Das Video zeigt das Sparkle-Symbol im Eingabefeld der Quellcodeverwaltung, auf das geklickt wird, wodurch GitHub Copilot veranlasst wird, automatisch eine Commitnachricht zu generieren.","github.copilot.walkthrough.sparkle.title":"Achten Sie auf intelligente Aktionen","github.copilot.walkthrough.title":"GitHub Copilot"}
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.nls.ja.json:1:{"copilot.agent.description":"エージェント モードでワークスペース内のファイルを編集します","copilot.codebase.tool.description":"コードベース内の関連するファイル チャンク、シンボル、その他の情報を見つけます","copilot.description":"コンテキストで質問または編集","copilot.edits.description":"ワークスペース内のファイルを編集します","copilot.listCodeUsages.tool.description":"シンボルの参照、定義、その他の使用を検索します","copilot.terminal.description":"コマンドについて質問します","copilot.terminal.explain.description":"ターミナルで何か説明する","copilot.terminal.explain.sampleRequest":"最後のコマンドを説明する","copilot.terminal.sampleRequest":"サブディレクトリを含むディレクトリ内で、すべてのファイルを表示にはどうすればよいですか?","copilot.terminalPanel.description":"ターミナルで何かを行う方法を確認する","copilot.testFailure.tool.description":"前回の単体テストの失敗に関する情報が含まれています","copilot.toolSet.editing.description":"ワークスペース内のファイルを編集します","copilot.toolSet.new.description":"新しいプロジェクトをコンパイル、デバッグ、実行するために、VS Code 固有の構成を使用して新しいワークスペースをスキャフォールディングします。","copilot.toolSet.runCommand.description":"ターミナルでコマンドを実行します","copilot.toolSet.runNotebook.description":"ノートブック セルを実行します","copilot.toolSet.runTasks.description":"ワークスペースでタスクを実行します","copilot.toolSet.search.description":"ワークスペース内のファイルの検索と読み取り","copilot.tools.applyPatch.description":"ワークスペース内のテキストファイルを編集します","copilot.tools.applyPatch.name":"パッチの適用","copilot.tools.changes.description":"変更されたファイルの差分を取得します","copilot.tools.createDirectory.description":"ワークスペースに新しいディレクトリを作成します","copilot.tools.createDirectory.name":"ディレクトリの作成","copilot.tools.createFile.description":"新しいファイルを作成します","copilot.tools.createFile.name":"ファイルの作成","copilot.tools.editNotebook.name":"ノートブックの編集","copilot.tools.errors.description":"特定のファイルのエラーを確認します","copilot.tools.fetchWebPage.description":"Web ページからメイン コンテンツをフェッチします。フェッチするページの URL を含める必要があります。","copilot.tools.fetchWebPage.name":"Web ページのフェッチ","copilot.tools.findFiles.name":"ファイルの検索","copilot.tools.findTestFiles.description":"ソース コード ファイルの場合は、テストを含むファイルを検索します。テスト ファイルの場合は、テスト対象のコードを含むファイルを検索します","copilot.tools.findTestFiles.name":"テストファイルの検索","copilot.tools.findTextInFiles.name":"ファイル内のテキストの検索","copilot.tools.getChangedFiles.name":"Git 変更","copilot.tools.getDocInfo.description":"クラスや関数などのシンボルの場合は、それをドキュメント化する方法に関する情報を検索します","copilot.tools.getDocInfo.name":"ドキュメント情報","copilot.tools.getErrors.name":"問題の取得","copilot.tools.getNotebookCellOutput.description":"以前に実行されたセルの出力を読み取ります","copilot.tools.getNotebookCellOutput.name":"ノートブックセルの出力を取得","copilot.tools.getTaskOutput.name":"タスク出力の取得","copilot.tools.getVSCodeAPI.name":"VS Code API 参照の取得","copilot.tools.insertEdit.name":"ファイルの編集","copilot.tools.listCodeUsages.name":"使用状況の検索","copilot.tools.listDirectory.name":"ディレクトリの一覧表示","copilot.tools.multiReplaceString.name":"ファイル内の文字列の置換","copilot.tools.newJupyterNotebook.description":"新しい Jupyter Notebook を作成する","copilot.tools.openSimpleBrowser.description":"Simple Browser でローカルでホストされている Web サイトをプレビューします","copilot.tools.openSimpleBrowser.name":"シンプル ブラウザーの開く","copilot.tools.readFile.name":"ファイルの読み取り","copilot.tools.readProjectStructure.name":"プロジェクトの構造","copilot.tools.replaceString.name":"ファイル内の文字列の置換","copilot.tools.runNotebookCell.description":"ノートブック ファイル内のセルの実行をトリガーします","copilot.tools.runNotebookCell.name":"ノートブック セルの実行","copilot.tools.searchCodebase.name":"コードベース","copilot.tools.searchWorkspaceSymbols.name":"ワークスペース シンボル","copilot.tools.testFailure.name":"テスト エラー","copilot.tools.think.name":"Think","copilot.tools.updateUserPreferences.name":"ユーザー設定の更新","copilot.vscode.api.description":"VS Code 拡張機能の開発について質問する","copilot.vscode.api.sampleRequest":"ステータス バーにテキストを追加するにはどうすればよいですか?","copilot.vscode.description":"VS Code に関する質問をする","copilot.vscode.sampleRequest":"統合ターミナルを開くコマンドは何ですか?","copilot.vscode.search.description":"ワークスペース検索のクエリ パラメーターを生成する","copilot.vscode.search.sampleRequest":"'src' ディレクトリ配下のすべてのファイルで 'foo' を検索します","copilot.vscode.setupTests.description":"プロジェクトでテストを設定する (試験段階)","copilot.vscode.setupTests.sampleRequest":"自分のプロジェクトに Playwright テストを追加する","copilot.vscode.startDebugging.description":"VS Code で起動構成を生成してデバッグを開始する (試験段階)","copilot.vscode.startDebugging.sampleRequest":"ポート 9229 のノード アプリにアタッチする","copilot.vscode.tool.description":"VS Code API リファレンスを使用して、VS Code 拡張機能の開発に関する質問に回答します。","copilot.workspace.description":"ワークスペースについて質問する","copilot.workspace.doc.description":"この記号にドキュメントのコメントを追加する","copilot.workspace.edit.description":"ワークスペース内のファイルを編集します","copilot.workspace.edit.inline.description":"アクティブなエディターで選択したコードを編集します","copilot.workspace.explain.description":"アクティブなエディターのコードの仕組みを説明します","copilot.workspace.fix.description":"選択したコードの問題の修正を提案する","copilot.workspace.fix.sampleRequest":"このコードには問題があります。バグを修正したコードに書き換えます。","copilot.workspace.generate.description":"新しいコードを生成します","copilot.workspace.new.description":"ワークスペース内の新しいファイルまたはプロジェクトのスキャフォールディング コード","copilot.workspace.new.sampleRequest":"typescript を使用して RESTful API サーバーを作成する","copilot.workspace.newNotebook.description":"新しい Jupyter Notebook を作成する","copilot.workspace.newNotebook.sampleRequest":"csv ファイルからデータを読み込むノートブックを作成するにはどうすればよいですか?。","copilot.workspace.review.description":"アクティブなエディターで選択したコードを確認する","copilot.workspace.sampleRequest":"このプロジェクトはどのようにビルドすればよいですか?","copilot.workspace.semanticSearch.description":"クエリに関連するコードを検索する","copilot.workspace.semanticSearch.sampleRequest":"ツール バー コードはどこにありますか?","copilot.workspace.tests.description":"選択したコードの単体テストを生成する","copilot.workspaceSymbols.tool.description":"言語サービスを使用してワークスペースシンボルを検索します。","github.copilot.badge.signUp":"GitHub Copilot にサインアップする","github.copilot.badge.star":"GitHub の Star Copilot","github.copilot.badge.twitter":"Twitter で GitHub をフォローする","github.copilot.badge.youtube":"Youtube で GitHub を確認する","github.copilot.chat.attachFile":"ファイルをチャットに追加","github.copilot.chat.attachSelection":"選択内容をチャットに追加","github.copilot.chat.completionContext.typescript.mode":"TypeScript Copilot コンテキスト プロバイダーの実行モード。","github.copilot.chat.copilotDebugCommand.enabled":"ターミナルで `copilot-debug` コマンドが有効になっているかどうか。","github.copilot.chat.editor.temporalContext.enabled":"インライン チャット要求を行うときに、最近表示および編集したファイルを Copilot 要求に含めるかどうかを指定します。","github.copilot.chat.edits.suggestRelatedFilesForTests":"Copilot Edits ワーキング セットのテスト ファイルからソース ファイルを提案するかどうか。","github.copilot.chat.edits.temporalContext.enabled":"編集を行うときに、最近表示および編集したファイルを Copilot 要求に含めるかどうかを要求します。","github.copilot.chat.languageContext.fix.typescript.enabled":"/fix コマンドの TypeScript 言語コンテキスト プロバイダーを有効にします","github.copilot.chat.languageContext.inline.typescript.enabled":"インライン チャットの TypeScript 言語コンテキスト プロバイダー (生成と編集の両方) を有効にします","github.copilot.chat.languageContext.typescript.cacheTimeout":"TypeScript 言語コンテキスト プロバイダーのキャッシュ更新タイムアウト (ミリ秒)。既定値は 500 ミリ秒です。","github.copilot.chat.languageContext.typescript.enabled":"インライン入力候補に対して TypeScript 言語コンテキスト プロバイダーを有効にします","github.copilot.chat.languageContext.typescript.includeDocumentation":"生成されたコード スニペットにドキュメント コメントを含めるかどうかを制御します。","github.copilot.chat.languageContext.typescript.items":"TypeScript 言語コンテキストプロバイダーに含める項目の種類を制御します。","github.copilot.command.applyReviewSuggestion":"適用","github.copilot.command.applyReviewSuggestionAndNext":"適用して次へ移動","github.copilot.command.applySuggestionWithCopilot":"提案の適用","github.copilot.command.buildLocalWorkspaceIndex":"ローカル ワークスペース インデックスの構築","github.copilot.command.buildRemoteWorkspaceIndex":"リモート ワークスペース インデックスをビルド","github.copilot.command.collectDiagnostics":"チャット診断","github.copilot.command.collectWorkspaceIndexDiagnostics":"ワークスペース インデックス診断の収集","github.copilot.command.continueReviewInChat":"チャット パネルで表示","github.copilot.command.continueReviewInInlineChat":"破棄してインライン チャットにコピー","github.copilot.command.disableEditTracing":"チャット編集トレースを無効にする","github.copilot.command.discardAllReviewSuggestion":"すべて破棄","github.copilot.command.discardReviewSuggestion":"破棄","github.copilot.command.discardReviewSuggestionAndNext":"破棄して次へ移動","github.copilot.command.enableEditTracing":"チャット編集トレースを有効にする","github.copilot.command.explainTerminalLastCommand":"最後のターミナル コマンドの説明","github.copilot.command.explainThis":"説明","github.copilot.command.fixTestFailure":"テスト エラーの修正","github.copilot.command.fixThis":"修正","github.copilot.command.generateConfiguration":"デバッグ構成の生成","github.copilot.command.generateDocs":"ドキュメントを生成する","github.copilot.command.generateSTest":"最後のチャット要求から STest を生成する","github.copilot.command.generateTests":"テストを生成する","github.copilot.command.generateThis":"これを生成する","github.copilot.command.gotoNextReviewSuggestion":"次の候補","github.copilot.command.gotoPreviousReviewSuggestion":"前の候補","github.copilot.command.helpfulReviewSuggestion":"役に立った","github.copilot.command.inlineEdit.clearCache":"次の編集キャッシュをクリア","github.copilot.command.inlineEdit.reportNotebookNESIssue":"ノートブックの次の編集に関する問題を報告","github.copilot.command.logWorkbenchState":"Log Workbench の状態","github.copilot.command.openUserPreferences":"ユーザー設定を開く","github.copilot.command.openWalkthrough":"チュートリアルを開く","github.copilot.command.refreshClaudeCodeSessions":"Claude コード セッションの更新","github.copilot.command.rerunWithCopilotDebug":"最後のターミナル コマンドのデバッグ","github.copilot.command.resetVirtualToolGroups":"仮想ツール グループのリセット","github.copilot.command.reviewAndComment":"レビュー","github.copilot.command.reviewChanges":"コード レビュー - コミットされていない変更","github.copilot.command.reviewFileChange":"変更をレビュー","github.copilot.command.reviewStagedChanges":"コード レビュー - ステージされた変更","github.copilot.command.reviewUnstagedChanges":"コード レビュー - ステージされていない変更","github.copilot.command.sendChatFeedback":"チャット フィードバックの送信","github.copilot.command.showChatLogView":"チャット デバッグ ビューの表示","github.copilot.command.showContextInspectorView":"言語コンテキストを検査する","github.copilot.command.showNotebookLog":"チャット ログ ノートブックの表示","github.copilot.command.showOutputChannel":"出力チャネルの表示","github.copilot.command.unhelpfulReviewSuggestion":"役に立たなかった","github.copilot.config.agent.currentEditorContext.enabled":"有効にすると、Copilot はエージェント モードのコンテキストに現在アクティブなエディターの名前を含めます。","github.copilot.config.agent.thinkingTool":"エージェント モードで応答を生成する前に、Copilot が要求について深く考える思考ツールを有効にします。","github.copilot.config.alternateGptPrompt.enabled":"既定のプロンプトの代わりに、GPT モデル用の試験的な代替プロンプトを有効にします。","github.copilot.config.autoFix":"編集したファイルに関する診断を自動的に修正します。","github.copilot.config.byok.ollamaEndpoint":"Bring Your Own Key でアクセスする際に使用する Ollama のエンドポイント。既定では localhost です。","github.copilot.config.claudeSonnet45AlternatePrompt":"Claude Sonnet 4.5 に使用する試験的な代替プロンプトを指定します。","github.copilot.config.codeGeneration.instruction.file":"コードを生成する Copilot 要求に追加されるファイルへのパス。必要に応じて、命令の言語を指定できます。","github.copilot.config.codeGeneration.instruction.text":"コードを生成する Copilot 要求に追加されるテキスト命令。必要に応じて、命令の言語を指定できます。","github.copilot.config.codeGeneration.instructions":"コードを生成する Copilot 要求に追加される一連の命令。\n命令は次のところから発信できます:\n- ワークスペース内のファイル: `{ \"file\": \"fileName\" }`\n- 自然言語のテキスト: '{ \"text\": \"Use underscore for field names.\" }`\n\n注: 命令は簡潔かつ正確に記載してください。指示が不十分である場合、Copilot の品質とパフォーマンスが低下する可能性があります。","github.copilot.config.codeGeneration.instructions.deprecated":"代わりに命令ファイルを使用してください。詳細については、https://aka.ms/vscode-ghcp-custom-instructions を参照してください。","github.copilot.config.codeGeneration.useInstructionFiles":"`.github/copilot-instructions.md` からのコード命令を Copilot 要求に追加するかどうかを制御します。\n\n注: 指示は簡潔かつ正確に記述してください。指示が不十分な場合、Copilot の品質とパフォーマンスが低下する可能性があります。Copilot のカスタマイズに関する [詳細情報](https://aka.ms/github-copilot-custom-instructions)。","github.copilot.config.codesearch.enabled":"'#codebase' を使用するときにエージェント コード検索を有効にするかどうか。","github.copilot.config.commitMessageGeneration.instruction.file":"コミット メッセージを生成する Copilot 要求に追加される命令が含まれるファイルへのパス。","github.copilot.config.commitMessageGeneration.instruction.text":"コミット メッセージを生成する Copilot 要求に追加されるテキストの命令。","github.copilot.config.commitMessageGeneration.instructions":"コミット メッセージを生成する Copilot 要求に追加される一連の命令。\n命令は次のところから発信できます:\n- ワークスペース内のファイル: `{ \"file\": \"fileName\" }`\n- 自然言語のテキスト: `{ \"text\": \"Use conventional commit message format.\" }`\n\n注: 手順は簡潔かつ正確に記述してください。指示が不十分である場合、Copilot の品質とパフォーマンスが低下する可能性があります。","github.copilot.config.completionsFetcher":"インライン補完に使用されるフェッチャーを設定します。","github.copilot.config.customInstructionsInSystemMessage":"有効にすると、カスタム命令とモード命令が、ユーザー メッセージではなく、システム メッセージに追加されます。","github.copilot.config.debugTerminalCommandPatterns":"デバッグ ターミナルに [デバッグ コマンド] クイック修正アクションを表示するコマンドの一覧。","github.copilot.config.debugTerminalCommands":"デバッグ ターミナルと [copilot-debug] コマンドのヒントをすばやく修正するかどうか。","github.copilot.config.edits.enabled":"Copilot 編集機能を有効にするかどうか。","github.copilot.config.edits.suggestRelatedFilesFromGitHistory":"Copilot Edits ワーキング セットの Git 履歴から関連ファイルを提案するかどうか。","github.copilot.config.editsNewNotebook.enabled":"Copilot Edits で新しいノートブック ツールを有効にするかどうか。","github.copilot.config.enableCodeActions":"Copilot コマンドが使用可能な場合にコード アクションとして表示するかどうかを制御します","github.copilot.config.enableUserPreferences":"エージェント モードでユーザー設定の記憶を有効にします。","github.copilot.config.executePrompt.enabled":"executePrompt ツールを使用すると、エージェントは個別の分離されたコンテキストでタスクを実行できます。","github.copilot.config.experimental.testGeneration.instruction.file":"テストを生成する Copilot 要求に追加されるファイルへのパス。必要に応じて、命令の言語を指定できます。","github.copilot.config.experimental.testGeneration.instruction.text":"テストを生成する Copilot 要求に追加されるテキスト命令。必要に応じて、命令の言語を指定できます。","github.copilot.config.generateTests.codeLens":"現在のテスト カバレッジ情報でカバーされていないシンボル用に \"テストの生成\" コード レンズを表示します。","github.copilot.config.gpt5AlternatePrompt":"GPT-5 モデルに使用する試験的な代替プロンプトを指定します。","github.copilot.config.gpt5CodexAlternatePrompt":"GPT-5-Codex モデルに使用する試験的な代替プロンプトを指定します。","github.copilot.config.grokCodeAlternatePrompt":"Grok Code モデルに使用する試験的な代替プロンプトを指定します。","github.copilot.config.imageUpload.enabled":"チャット リクエストで未加工の base64 文字列の代わりに、画像アップロード URL を使用できるようにします。","github.copilot.config.localeOverride":"Copilot が応答するロケール (例: 'en'、'fr') を指定します。既定では、Copilot は、VS Codeの構成された表示言語ロケールを使用して応答します。","github.copilot.config.nesFetcher":"次の編集候補に使用するフェッチャーを設定します。","github.copilot.config.newWorkspace.useContext7":"[Context7](command:github.copilot.mcp.viewContext7) ツールを使用して、新しいワークスペースの作成用にプロジェクトをスキャフォールディングするかどうか。","github.copilot.config.newWorkspaceCreation.enabled":"新しいエージェント ワークスペースの作成を有効にするかどうか。","github.copilot.config.notebook.enhancedNextEditSuggestions":"ノートブック セルで次の編集候補を生成するために強化された手法を使用するかどうかを制御します。","github.copilot.config.notebook.followCellExecution":"現在 Copilot から実行されているセルを、ビューポートに表示するかどうかを制御します。","github.copilot.config.notebook.inlineEditAgent.enabled":"ノートブックのインライン チャット ウィジェットからエージェントのような動作を有効にします。","github.copilot.config.pullRequestDescriptionGeneration.instruction.file":"pull request のタイトルと説明を生成する Copilot 要求に追加される指示が記述されたファイルへのパス。","github.copilot.config.pullRequestDescriptionGeneration.instruction.text":"pull requestタイトルと説明を生成する Copilot 要求に追加されるテキスト命令。","github.copilot.config.pullRequestDescriptionGeneration.instructions":"pull request のタイトルと説明を生成する Copilot 要求に追加される一連の指示です。\n指示は次から取得できます。\n- ワークスペース内のファイル: `{ \"file\": \"fileName\" }`\n- 自然言語のテキスト: `{ \"text\": \"Always include a list of key changes.\" }`\n\n注: 指示は簡潔かつ正確に記述してください。指示が不十分な場合、Copilot の品質とパフォーマンスが低下することがあります。","github.copilot.config.renameSuggestions.triggerAutomatically":"Copilot が名前変更の候補を生成するかどうかを制御します","github.copilot.config.responsesApiReasoningEffort":"応答 API に使用される推論作業を設定します。`#github.copilot.chat.useResponsesApi#` が必要です。","github.copilot.config.responsesApiReasoningSummary":"応答 API に使用される推論の概要スタイルを設定します。`#github.copilot.chat.useResponsesApi#` が必要です。","github.copilot.config.reviewAgent.enabled":"コード レビュー エージェントを有効にします。","github.copilot.config.reviewSelection.enabled":"現在の選択に関するレビューを有効にします。","github.copilot.config.reviewSelection.instruction.file":"現在の選択に関するレビューを提供する Copilot 要求に追加されるファイルへのパス。必要に応じて、命令の言語を指定できます。","github.copilot.config.reviewSelection.instruction.text":"現在の選択に関するレビューを提供する Copilot 要求に追加されるテキスト命令。必要に応じて、命令の言語を指定できます。","github.copilot.config.reviewSelection.instructions":"現在の選択に関するレビューを提供する Copilot 要求に追加される一連の命令。\n命令は次のところから発信できます:\n- ワークスペース内のファイル: `{ \"file\": \"fileName\" }`\n- 自然言語のテキスト: `{ \"text\": \"Use underscore for field names.\" }`\n\n注: 手順は簡潔かつ正確に記述してください。命令が不十分な場合、Copilot の有効性が低下する可能性があります。","github.copilot.config.scopeSelection":"ユーザーが '/explain' を使用していて、アクティブなエディターに選択がない場合に、特定のシンボル スコープを選択するようにユーザーに促すかどうか。","github.copilot.config.setupTests.enabled":"'/tests' 生成で '/setupTests' インテントとプロンプトを有効にします。","github.copilot.config.startDebugging.enabled":"パネル チャットで `/startDebugging` インテントを有効にします。クエリ (存在する場合)、プロジェクト構造などと一致する起動構成を生成または検索します。","github.copilot.config.summarizeAgentConversationHistory.enabled":"コンテキスト ウィンドウが入力された後に、エージェントの会話履歴を自動で要約するかどうか。","github.copilot.config.terminalChatLocation":"ターミナルからのチャット クエリを開く場所を制御します。","github.copilot.config.terminalChatLocation.chatView":"チャット ビューを開きます。","github.copilot.config.terminalChatLocation.quickChat":"クイック チャットを開きます。","github.copilot.config.terminalChatLocation.terminal":"ターミナルインライン チャットを開く","github.copilot.config.testGeneration.instructions":"テストを生成する Copilot 要求に追加される一連の命令。\n命令は次のところから発信できます:\n- ワークスペース内のファイル: `{ \"file\": \"fileName\" }`\n- 自然言語のテキスト: '{ \"text\": \"Use underscore for field names.\" }`\n\n注: 命令は簡潔かつ正確に記載してください。指示が不十分である場合、Copilot の品質とパフォーマンスが低下する可能性があります。","github.copilot.config.testGeneration.instructions.deprecated":"代わりに命令ファイルを使用してください。詳細については、https://aka.ms/vscode-ghcp-custom-instructions を参照してください。","github.copilot.config.useProjectTemplates":"`/new` を使用するときに、関連する GitHub プロジェクトをスターター プロジェクトとして使用します","github.copilot.config.useResponsesApi":"サポートされている場合は、チャット入力候補 API の代わりに応答 API を使用します。推論と推論の要約を有効にします。\n\n**注**: これは試験的な機能であり、すべてのユーザーに対してまだ有効化されていません。","github.copilot.config.virtualTools.threshold":"この設定では、仮想ツールを使用するツールの数を定義します。仮想ツールは、類似のツール セットをグループ化し、モデルがオンデマンドでそれらをアクティブ化できるようにします。特定のツール グループは楽観的に事前にアクティブ化されます。この機能は現在開発中であり、しきい値に達するとツール呼び出しのパフォーマンスが低下します。\n\n仮想ツールを無効にするには、`0` に設定できます。","github.copilot.devcontainer.generateDevContainerConfig":"Dev Container 構成を生成","github.copilot.git.generateCommitMessage":"コミット メッセージの生成","github.copilot.git.resolveMergeConflicts":"AI を使った競合の解決","github.copilot.icon":"GitHub Copilot のアイコン","github.copilot.nextEditSuggestions.allowWhitespaceOnlyChanges":"空白のみの変更を次の編集候補 (NES) で提案するのを許可するかどうか。","github.copilot.nextEditSuggestions.enabled":"次の編集候補 (NES) を有効にするかどうか。\n\nNES では、最近加えられた変更に基づいて次の編集を提案できます。次の編集候補についての [詳細情報](https://aka.ms/vscode-nes)。","github.copilot.nextEditSuggestions.fixes":"次の修正候補 (NES) を使用して診断の修正を提供するかどうか。","github.copilot.resetAutomaticCommandExecutionPrompt":"コマンドの自動実行プロンプトのリセット","github.copilot.submenu.copilot.label":"Copilot","github.copilot.submenu.reviewComment.applyAndNext.label":"適用して次へ移動","github.copilot.submenu.reviewComment.discard.label":"破棄","github.copilot.submenu.reviewComment.discardAndNext.label":"破棄して次へ移動","github.copilot.tools.createAndRunTask.description":"ワークスペースでタスクを作成して実行する","github.copilot.tools.createAndRunTask.name":"タスクを作成して実行する","github.copilot.tools.createAndRunTask.userDescription":"ワークスペースでタスクを作成して実行する","github.copilot.tools.createNewWorkspace.name":"新しいワークスペースの作成","github.copilot.tools.createNewWorkspace.userDescription":"VS Code で新しいワークスペースをスキャフォールディングします","github.copilot.tools.getProjectSetupInfo.name":"プロジェクトのセットアップ情報を取得","github.copilot.tools.githubRepo.name":"GitHub リポジトリの検索","github.copilot.tools.githubRepo.userDescription":"GitHub リポジトリで関連するソース コード スニペットを検索します。`owner/repo` を使用してリポジトリを指定できます","github.copilot.tools.openEmptyFolder.name":"空のフォルダーを VS Code のワークスペースとして開く","github.copilot.tools.searchResults.description":"検索ビューからの結果","github.copilot.tools.searchResults.name":"検索結果の表示","github.copilot.viewsWelcome.chatDisabled":"GitHub Copilot チャットは、現在、組織の管理者によってアカウントに対して無効になっています。チャットを有効にするには、組織の管理者にお問い合わせください。\n\n[詳細情報](https://docs.github.com/en/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-github-copilot-features-in-your-organization/managing-policies-for-copilot-in-your-organization)","github.copilot.viewsWelcome.contactSupport":"アカウントに問題があるようです。GitHub サポートにお問い合わせください。\n\n[サポートに問い合わせ](https://support.github.com/?editor=vscode)","github.copilot.viewsWelcome.debug":"[ターミナル コマンド](command:github.copilot.chat.startCopilotDebugCommand) を用いるか、[対話型チャット](command:workbench.action.chat.open?%7B%22query%22%3A%22%40vscode%20%2FstartDebugging%20%22%2C%22isPartialQuery%22%3Atrue%7D) でデバッグします。","github.copilot.viewsWelcome.enterprise":"Copilot を有効にするには、GitHub 組織管理者にお問い合わせください。","github.copilot.viewsWelcome.individual.expired":"Copilot サブスクリプションの有効期限が切れています。\n\n[Copilot 設定を確認してください](https://github.com/settings/copilot?editor=vscode)","github.copilot.viewsWelcome.offline":"現在オフラインです。GitHub Copilot を使用するには、インターネットに接続してください。\n\n[接続の再試行](command:github.copilot.refreshToken)","github.copilot.viewsWelcome.signIn":"GitHub Copilot を利用した機能を有効にするには、サインインしてください。\n\n[サインイン](command:workbench.action.chat.triggerSetupForceSignIn)","github.copilot.viewsWelcome.switchToReleaseChannel":"GitHub Copilot Chat 拡張機能のプレリリース バージョンは、現在、安定バージョンの VS Code ではサポートされていません。GitHub Copilot Chat のリリース バージョンに切り替えるか、VS Code Insiders を試してください。\n\n[リリース バージョンに切り替えて再読み込み](command:runCommands?%7B%22commands%22%3A%5B%7B%22command%22%3A%22workbench.extensions.action.switchToRelease%22%2C%22args%22%3A%5B%22GitHub.copilot-chat%22%5D%7D%2C%22workbench.action.reloadWindow%22%5D%7D)\n\n[VS Code Insiders に切り替える](https://aka.ms/vscode-insiders)","github.copilot.walkthrough.description":"コードをより迅速かつスマートに記述するための AI ペアリング プログラマー","github.copilot.walkthrough.edits.description":"**Copilot Edits** を使用して、作業するファイルを選択し、行う変更について説明します。Copilot はそれをファイルに直接適用します。\n[Copilot で編集する](command:workbench.action.chat.open?%7B%22mode%22%3A%22edit%22%7D)","github.copilot.walkthrough.edits.media.altText":"このビデオでは、ユーザーがセカンダリ サイドバーにある Copilot Edits 入力ボックスにファイルをドラッグ アンド ドロップする様子が示されています。その後、Copilot はユーザーの要求に従ってファイルを更新します","github.copilot.walkthrough.edits.title":"自然言語を使用して変更する","github.copilot.walkthrough.firstSuggest.description":"エディターで入力すると、Copilot は開始した作業を完了するのに役立つコードを提案します。","github.copilot.walkthrough.firstSuggest.media.altText":"このビデオでは、さまざまな Copilot 入力候補が示されています。Copilot は、ユーザーがコードを完了するのに役立つコードを提案します","github.copilot.walkthrough.firstSuggest.title":"AI が提案するコード補完","github.copilot.walkthrough.inlineChatMac.description":"ファイル内で直接記述するコードを簡単に説明できる場合があります。\nカーソルを置くか、選択を行い、**``Cmd+I``** を使用して**インライン チャット**を開きます。","github.copilot.walkthrough.inlineChatMac.media.altText":"このビデオでは、ユーザーがインライン チャット ウィジェットを呼び出し、Copilot に自然言語を使用してファイルを変更するよう依頼する様子が示されています。その後、Copilot は要求された変更を行います","github.copilot.walkthrough.inlineChatMac.title":"ファイル内で自然言語を使用する","github.copilot.walkthrough.inlineChatNotMac.description":"ファイル内で直接記述するコードを簡単に説明できる場合があります。\nカーソルを置くか、選択を行い、**``Ctrl+I``** を使用して**インライン チャット**を開きます。","github.copilot.walkthrough.inlineChatNotMac.media.altText":"エディターでのインライン チャット ビュー。このビデオでは、ユーザーがインライン チャット ウィジェットを呼び出し、Copilot に自然言語を使用してファイルを変更するよう依頼する様子が示されています。その後、Copilot は要求された変更を行います","github.copilot.walkthrough.inlineChatNotMac.title":"ファイル内で自然言語を使用する","github.copilot.walkthrough.panelChat.description":"**@workspace** を使用して、Copilot プログラミングに関する質問をしたり、コードに関するサポートを受けたりできます。\n **@** と入力すると、直接チャットできるすべてのチャット参加者が表示されます。参加者はそれぞれの専門知識を持っています。\n[Copilot とチャットする](command:workbench.action.chat.open?%7B%22mode%22%3A%22ask%22%7D)","github.copilot.walkthrough.panelChat.media.altText":"ユーザーは、セカンダリ サイドバーのチャット パネルで @workspace を呼び出して、コード ベースを理解します。Copilot は関連情報を取得し、ファイルへのリンクを含む応答を提供します","github.copilot.walkthrough.panelChat.title":"コードに関するチャット","github.copilot.walkthrough.setup.noAction.description":"Copilot を使用すると、自然言語を使用して、複数のファイル間でコードを生成したり、エラーを修正したり、コードに関する質問をしたりすることなどができます。\n GitHub アカウントで [無料版 Copilot](https://github.com/features/copilot/plans) が提供されるようになりました。","github.copilot.walkthrough.setup.signIn.description":"Copilot を使用すると、自然言語を使用して、複数のファイル間でコードを生成したり、エラーを修正したり、コードに関する質問をしたりすることなどができます。\n GitHub アカウントで [無料版 Copilot](https://github.com/features/copilot/plans) が提供されるようになりました。\n\n[Copilot を無料で使用する](command:workbench.action.chat.triggerSetupForceSignIn)","github.copilot.walkthrough.setup.signIn.title":"サインインして Copilot を無料で使用する","github.copilot.walkthrough.setup.signUp.description":"Copilot を使用すると、自然言語を使用して、複数のファイル間でコードを生成したり、エラーを修正したり、コードに関する質問をしたりすることなどができます。\n GitHub アカウントで [無料版 Copilot](https://github.com/features/copilot/plans) が提供されるようになりました。\n\n[Copilot を無料で使用する](command:workbench.action.chat.triggerSetupForceSignIn)","github.copilot.walkthrough.setup.signUp.title":"Copilot で無料で概要","github.copilot.walkthrough.signIn.description":"Copilot の使用を開始するには、GitHub アカウントでサインインしてください。\n正しい GitHub アカウントを使用していることを確認します。アカウント メニューを使用して、後でサインインすることもできます。\n\n[サインイン](command:github.copilot.signIn)","github.copilot.walkthrough.signIn.media.altText":"このチュートリアルまたは VS Code のアカウント メニューを使用して GitHub にサインインする","github.copilot.walkthrough.signIn.title":"GitHub アカウントでサインイン","github.copilot.walkthrough.sparkle.description":"Copilot は、VS Code インターフェイス全体で AI 搭載のスマート アクションを使用してコーディング エクスペリエンスを向上させます。\nCopilot がコードの変更に基づいてコミット メッセージと PR の説明を生成する [ソース管理ビュー](command:workbench.view.scm) などの $(sparkle) アイコンを探確認してください。\n\n[ヒントとテクニックを見る](https://code.visualstudio.com/docs/copilot/copilot-vscode-features)","github.copilot.walkthrough.sparkle.media.altText":"ビデオでは、ソース管理入力ボックスの光のアイコンがクリックされ、GitHub Copilot がトリガーされてコミット メッセージが自動的に生成されます","github.copilot.walkthrough.sparkle.title":"スマート アクションに関するご確認ください","github.copilot.walkthrough.title":"GitHub Copilot"}
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.nls.it.json:1:{"copilot.agent.description":"Modificare file nell'area di lavoro in modalità agente","copilot.codebase.tool.description":"Trova blocchi di file, simboli e altre informazioni pertinenti nella codebase","copilot.description":"Chiedi o modifica nel contesto","copilot.edits.description":"Modifica i file nell'area di lavoro","copilot.listCodeUsages.tool.description":"Trova riferimenti, definizioni e altri utilizzo di un simbolo","copilot.terminal.description":"Chiedi informazioni sui comandi","copilot.terminal.explain.description":"Spiega qualcosa nel terminale","copilot.terminal.explain.sampleRequest":"Spiega l'ultimo comando","copilot.terminal.sampleRequest":"Come visualizzo tutti i file all'interno di una directory, incluse le sottodirectory?","copilot.terminalPanel.description":"Chiedi come eseguire un’operazione nel terminale","copilot.testFailure.tool.description":"Include informazioni sull'ultimo errore del test unità","copilot.toolSet.editing.description":"Modifica i file nell'area di lavoro","copilot.toolSet.new.description":"Esegui lo scaffolding di una nuova area di lavoro con configurazioni specifiche di VS Code per compilare, eseguire il debug e avviare nuovi progetti.","copilot.toolSet.runCommand.description":"Esegui comandi nel terminale","copilot.toolSet.runNotebook.description":"Esegui celle del notebook","copilot.toolSet.runTasks.description":"Esegui attività nell'area di lavoro","copilot.toolSet.search.description":"Cerca e leggi i file nell'area di lavoro","copilot.tools.applyPatch.description":"Modifica i file di testo nell'area di lavoro","copilot.tools.applyPatch.name":"Applica patch","copilot.tools.changes.description":"Recupera le differenze dei file modificati","copilot.tools.createDirectory.description":"Crea nuove directory nell'area di lavoro","copilot.tools.createDirectory.name":"Crea directory","copilot.tools.createFile.description":"Crea nuovo file","copilot.tools.createFile.name":"Crea file","copilot.tools.editNotebook.name":"Modifica notebook","copilot.tools.errors.description":"Controlla gli errori per un file specifico","copilot.tools.fetchWebPage.description":"Recuperare il contenuto principale da una pagina Web. È necessario includere l'URL della pagina da cui si desidera eseguire il recupero.","copilot.tools.fetchWebPage.name":"Recupera pagina Web","copilot.tools.findFiles.name":"Cerca in File","copilot.tools.findTestFiles.description":"Per un file di codice sorgente, trova il file che contiene i test. Per un file di test, trova il file che contiene il codice sottoposto a test","copilot.tools.findTestFiles.name":"Trova file di test","copilot.tools.findTextInFiles.name":"Trova testo nei file","copilot.tools.getChangedFiles.name":"Modifiche Git","copilot.tools.getDocInfo.description":"Per un simbolo come una classe o una funzione, trovare le informazioni su come documentarlo","copilot.tools.getDocInfo.name":"Informazioni sul documento","copilot.tools.getErrors.name":"Ottieni problemi","copilot.tools.getNotebookCellOutput.description":"Leggi l'output di una cella eseguita in precedenza","copilot.tools.getNotebookCellOutput.name":"Recupera output della cella del Blocco appunti","copilot.tools.getTaskOutput.name":"Recupera output attività","copilot.tools.getVSCodeAPI.name":"Recupera riferimenti all'API di Visual Studio Code","copilot.tools.insertEdit.name":"Modifica file","copilot.tools.listCodeUsages.name":"Trova utilizzi","copilot.tools.listDirectory.name":"Elenco directory","copilot.tools.multiReplaceString.name":"Stringa sostituzione multipla in Files","copilot.tools.newJupyterNotebook.description":"Crea un nuovo Jupyter Notebook","copilot.tools.openSimpleBrowser.description":"Visualizza in anteprima un sito Web ospitato localmente nel browser semplice","copilot.tools.openSimpleBrowser.name":"Apri browser semplice","copilot.tools.readFile.name":"Leggi file","copilot.tools.readProjectStructure.name":"Struttura del progetto","copilot.tools.replaceString.name":"Sostituisci stringa nel file","copilot.tools.runNotebookCell.description":"Attiva l'esecuzione di una cella in un file del notebook","copilot.tools.runNotebookCell.name":"Esegui cella del notebook","copilot.tools.searchCodebase.name":"Codebase","copilot.tools.searchWorkspaceSymbols.name":"Simboli dell'area di lavoro","copilot.tools.testFailure.name":"Test non riuscito","copilot.tools.think.name":"Pensa","copilot.tools.updateUserPreferences.name":"Aggiorna preferenze utente","copilot.vscode.api.description":"Chiedi informazioni sullo sviluppo di estensioni VS Code","copilot.vscode.api.sampleRequest":"Come è possibile aggiungere testo alla barra di stato?","copilot.vscode.description":"Poni domande su VS Code","copilot.vscode.sampleRequest":"Qual è il comando per aprire il terminale integrato?","copilot.vscode.search.description":"Genera i parametri di query per la ricerca nell'area di lavoro","copilot.vscode.search.sampleRequest":"Cercare 'foo' in tutti i file nella directory 'src'","copilot.vscode.setupTests.description":"Configurare i test nel progetto (sperimentale)","copilot.vscode.setupTests.sampleRequest":"aggiungi test di playwright al progetto","copilot.vscode.startDebugging.description":"Generare la configurazione di avvio e avviare il debug in VS Code (sperimentale)","copilot.vscode.startDebugging.sampleRequest":"Collega all'app Node sulla porta 9229","copilot.vscode.tool.description":"Usare i riferimenti all'API VS Code per rispondere a domande sullo sviluppo di estensioni VS Code.","copilot.workspace.description":"Richiedi informazioni sull'area di lavoro","copilot.workspace.doc.description":"Aggiungere il commento della documentazione per questo simbolo","copilot.workspace.edit.description":"Modifica i file nell'area di lavoro","copilot.workspace.edit.inline.description":"Consente di modificare il codice selezionato nell'editor attivo","copilot.workspace.explain.description":"Spiegare il funzionamento del codice nell'editor attivo","copilot.workspace.fix.description":"Proporre una soluzione per i problemi del codice selezionato.","copilot.workspace.fix.sampleRequest":"Si è verificato un problema in questo codice. Riscrivere il codice per visualizzarlo con il bug corretto.","copilot.workspace.generate.description":"Genera nuovo codice","copilot.workspace.new.description":"Codice di scaffolding per un nuovo file o progetto in un'area di lavoro","copilot.workspace.new.sampleRequest":"Creare un server API RESTful usando typescript","copilot.workspace.newNotebook.description":"Crea un nuovo Jupyter Notebook","copilot.workspace.newNotebook.sampleRequest":"Come è possibile creare un blocco appunti per caricare i dati da un file CSV?","copilot.workspace.review.description":"Consente di rivedere il codice selezionato nell'editor attivo","copilot.workspace.sampleRequest":"Come è possibile compilare il progetto?","copilot.workspace.semanticSearch.description":"Trova codice pertinente per la query","copilot.workspace.semanticSearch.sampleRequest":"Dov'è il codice della barra degli strumenti?","copilot.workspace.tests.description":"Genera unit test per il codice selezionato","copilot.workspaceSymbols.tool.description":"Cercare i simboli dell'area di lavoro usando i servizi di linguaggio.","github.copilot.badge.signUp":"Iscriviti a GitHub Copilot","github.copilot.badge.star":"Star Copilot su GitHub","github.copilot.badge.twitter":"Segui GitHub su Twitter","github.copilot.badge.youtube":"Guarda GitHub su YouTube","github.copilot.chat.attachFile":"Aggiungere file alla chat","github.copilot.chat.attachSelection":"Aggiungere selezione alla chat","github.copilot.chat.completionContext.typescript.mode":"Modalità di esecuzione del provider di contesto TypeScript Copilot.","github.copilot.chat.copilotDebugCommand.enabled":"Indica se il comando 'copilot-debug' è abilitato nel terminale.","github.copilot.chat.editor.temporalContext.enabled":"Quando si effettua una richiesta di chat inline se includere i file visualizzati e modificati di recente con le richieste di Copilot.","github.copilot.chat.edits.suggestRelatedFilesForTests":"Indica se suggerire i file origine dai file di test per il set di lavoro Copilot Edits.","github.copilot.chat.edits.temporalContext.enabled":"Quando si effettua una richiesta di modifica, specificare se includere i file visualizzati e modificati di recente con le richieste di Copilot.","github.copilot.chat.languageContext.fix.typescript.enabled":"Abilita il provider del contesto del linguaggio TypeScript per i comandi /fix","github.copilot.chat.languageContext.inline.typescript.enabled":"Abilita il provider di contesto del linguaggio TypeScript per le chat inline (genera e modifica)","github.copilot.chat.languageContext.typescript.cacheTimeout":"Il timeout per il popolamento della cache per il provider del contesto del linguaggio TypeScript, in millisecondi. L'impostazione predefinita è 500 millisecondi.","github.copilot.chat.languageContext.typescript.enabled":"Abilita il provider del contesto del linguaggio TypeScript per i completamenti inline","github.copilot.chat.languageContext.typescript.includeDocumentation":"Controlla se includere i commenti della documentazione nei frammenti di codice generati.","github.copilot.chat.languageContext.typescript.items":"Controlla i tipi di elementi da includere nel provider del contesto del linguaggio TypeScript.","github.copilot.command.applyReviewSuggestion":"Applica","github.copilot.command.applyReviewSuggestionAndNext":"Applica e vai all'elemento successivo","github.copilot.command.applySuggestionWithCopilot":"Applica suggerimento","github.copilot.command.buildLocalWorkspaceIndex":"Compilare l'indice dell'area di lavoro locale","github.copilot.command.buildRemoteWorkspaceIndex":"Crea indice area di lavoro remota","github.copilot.command.collectDiagnostics":"Diagnostica della chat","github.copilot.command.collectWorkspaceIndexDiagnostics":"Raccogli diagnosi degli indici dell'area di lavoro","github.copilot.command.continueReviewInChat":"Visualizza nel pannello della chat","github.copilot.command.continueReviewInInlineChat":"Rimuovi e copia nella chat inline","github.copilot.command.disableEditTracing":"Disabilita la traccia delle modifiche nella chat","github.copilot.command.discardAllReviewSuggestion":"Rimuovi tutto","github.copilot.command.discardReviewSuggestion":"Rimuovi","github.copilot.command.discardReviewSuggestionAndNext":"Rimuovi e vai all'elemento successivo","github.copilot.command.enableEditTracing":"Abilita la traccia delle modifiche nella chat","github.copilot.command.explainTerminalLastCommand":"Spiega ultimo comando terminale","github.copilot.command.explainThis":"Spiega","github.copilot.command.fixTestFailure":"Correggi test non superato","github.copilot.command.fixThis":"Correggi","github.copilot.command.generateConfiguration":"Genera configurazione di debug","github.copilot.command.generateDocs":"Genera documenti","github.copilot.command.generateSTest":"Genera STest dall'ultima richiesta di chat","github.copilot.command.generateTests":"Genera test","github.copilot.command.generateThis":"Genera questo","github.copilot.command.gotoNextReviewSuggestion":"Suggerimento successivo","github.copilot.command.gotoPreviousReviewSuggestion":"Suggerimento precedente","github.copilot.command.helpfulReviewSuggestion":"Utile","github.copilot.command.inlineEdit.clearCache":"Cancella cache della modifica successiva","github.copilot.command.inlineEdit.reportNotebookNESIssue":"Segnala problema di modifica successiva del blocco appunti","github.copilot.command.logWorkbenchState":"Stato di Log Workbench","github.copilot.command.openUserPreferences":"Apri preferenze utente","github.copilot.command.openWalkthrough":"Apri procedura dettagliata","github.copilot.command.refreshClaudeCodeSessions":"Aggiorna sessioni di codice Claude","github.copilot.command.rerunWithCopilotDebug":"Eseguire il debug dell'ultimo comando del terminale","github.copilot.command.resetVirtualToolGroups":"Reimposta gruppi di strumenti virtuali","github.copilot.command.reviewAndComment":"Rivedi","github.copilot.command.reviewChanges":"Revisione - Modifiche non sottoposte a commit","github.copilot.command.reviewFileChange":"Rivedi modifiche","github.copilot.command.reviewStagedChanges":"Revisione - Modifiche preparate per il commit","github.copilot.command.reviewUnstagedChanges":"Revisione - Modifiche non preparate per il commit","github.copilot.command.sendChatFeedback":"Invia feedback sulla chat","github.copilot.command.showChatLogView":"Mostra vista Debug chat","github.copilot.command.showContextInspectorView":"Controlla il contesto della lingua","github.copilot.command.showNotebookLog":"Mostra blocco appunti del log della chat","github.copilot.command.showOutputChannel":"Mostra canale di output","github.copilot.command.unhelpfulReviewSuggestion":"Poco utile","github.copilot.config.agent.currentEditorContext.enabled":"Se questa opzione è abilitata, Copilot includerà il nome dell'editor attivo corrente nel contesto per la modalità agente.","github.copilot.config.agent.thinkingTool":"Abilita lo strumento di pensiero che consente a Copilot di analizzare approfonditamente la tua richiesta prima di generare una risposta in modalità agente.","github.copilot.config.alternateGptPrompt.enabled":"Abilita un prompt sperimentale alternativo per i modelli GPT anziché il prompt predefinito.","github.copilot.config.autoFix":"Correggere automaticamente i dati diagnostici per i file modificati.","github.copilot.config.byok.ollamaEndpoint":"L'endpoint da usare per Ollama quando l’accesso viene eseguito tramite Bring Your Own Key. L'impostazione predefinita è localhost.","github.copilot.config.claudeSonnet45AlternatePrompt":"Specifica una richiesta alternativa sperimentale da usare per Claude Sonnet 4.5.","github.copilot.config.codeGeneration.instruction.file":"Percorso di un file che verrà aggiunto alle richieste Copilot che generano codice. Facoltativamente, è possibile specificare una lingua per l'istruzione.","github.copilot.config.codeGeneration.instruction.text":"Istruzione di testo che verrà aggiunta alle richieste Copilot che generano codice. Facoltativamente, è possibile specificare una lingua per l'istruzione.","github.copilot.config.codeGeneration.instructions":"Set di istruzioni che verrà aggiunto alle richieste Copilot che generano codice.\nLe istruzioni possono provenire da: \n- un file nell'area di lavoro: `{ \"file\": \"fileName\" }`\n- testo in linguaggio naturale: `{ \"text\": \"Use underscore for field names.\" }`\n\nNota: mantenere le istruzioni brevi e precise. Le istruzioni poco chiare possono ridurre la qualità e le prestazioni di Copilot.","github.copilot.config.codeGeneration.instructions.deprecated":"Usare invece i file di istruzioni. Per altre informazioni, vedere https://aka.ms/vscode-ghcp-custom-instructions.","github.copilot.config.codeGeneration.useInstructionFiles":"Controllare che le istruzioni del codice da \".github/copilot-instructions.md\" vengano aggiunte alle richieste di Copilot.\n\nNota: le istruzioni devono essere brevi e precise. Istruzioni poco chiare possono ridurre la qualità e le prestazioni di Copilot. [Altre informazioni](https://aka.ms/github-copilot-custom-instructions) sulla personalizzazione di Copilot.","github.copilot.config.codesearch.enabled":"Indica se abilitare la ricerca di codice agentic quando si utilizza '#codebase'.","github.copilot.config.commitMessageGeneration.instruction.file":"Percorso di un file con istruzioni che verranno aggiunte alle richieste Copilot che generano messaggi di commit.","github.copilot.config.commitMessageGeneration.instruction.text":"Istruzioni di testo che verranno aggiunte alle richieste Copilot che generano codice.","github.copilot.config.commitMessageGeneration.instructions":"Set di istruzioni che verrà aggiunto alle richieste Copilot che generano messaggi di commit.\nLe istruzioni possono provenire da: \n- un file nell'area di lavoro: '{ \"file\": \"fileName\" }'\n- testo in linguaggio naturale: '{ \"text\": \"Use conventional commit message format.\" }`\n\nNota: le istruzioni devono essere brevi e precise. Istruzioni poco chiare possono ridurre la qualità e le prestazioni di Copilot.","github.copilot.config.completionsFetcher":"Imposta il fetcher utilizzato per i completamenti inline.","github.copilot.config.customInstructionsInSystemMessage":"Se è attivato, le istruzioni personalizzate e le istruzioni di modalità verranno accodate al messaggio di sistema anziché a un messaggio dell'utente.","github.copilot.config.debugTerminalCommandPatterns":"Elenco di comandi per cui visualizzare l'azione di correzione rapida \"Comando debug\" nel terminale di debug.","github.copilot.config.debugTerminalCommands":"Indica se correggere rapidamente gli hint nel terminale di debug e nel comando `copilot-debug`.","github.copilot.config.edits.enabled":"Indica se abilitare la funzionalità Modifiche di Copilot.","github.copilot.config.edits.suggestRelatedFilesFromGitHistory":"Indica se suggerire i file correlati dalla cronologia Git per il set di lavoro Copilot Edits.","github.copilot.config.editsNewNotebook.enabled":"Indica se abilitare il nuovo strumento blocco appunti in Copilot Edits.","github.copilot.config.enableCodeActions":"Controlla se i comandi di Copilot vengono visualizzati come azioni codice quando disponibili","github.copilot.config.enableUserPreferences":"Abilita la memorizzazione delle preferenze utente in modalità agente.","github.copilot.config.executePrompt.enabled":"Lo strumento executePrompt permette all'agente di eseguire attività in un contesto separato e isolato.","github.copilot.config.experimental.testGeneration.instruction.file":"Percorso di un file che verrà aggiunto alle richieste Copilot che generano test. Facoltativamente, è possibile specificare una lingua per l'istruzione.","github.copilot.config.experimental.testGeneration.instruction.text":"Istruzione di testo che verrà aggiunta alle richieste Copilot che generano test. Facoltativamente, è possibile specificare una lingua per l'istruzione.","github.copilot.config.generateTests.codeLens":"Mostra il code lens 'Genera test' per i simboli non coperti dalle informazioni del code coverage del test correnti.","github.copilot.config.gpt5AlternatePrompt":"Specifica una richiesta alternativa sperimentale da usare per i modelli GPT-5.","github.copilot.config.gpt5CodexAlternatePrompt":"Specifica una richiesta alternativa sperimentale da usare per il modello GPT-5-Codex.","github.copilot.config.grokCodeAlternatePrompt":"Specifica una richiesta alternativa sperimentale da usare per i modelli GPT-5.","github.copilot.config.imageUpload.enabled":"Consente l'uso di URL di caricamento immagini nelle richieste di chat anziché stringhe base64 non elaborate.","github.copilot.config.localeOverride":"Specificare le impostazioni locali in cui Copilot deve rispondere, ad esempio 'en' o 'fr'. Per impostazione predefinita, Copilot risponderà usando le impostazioni locali della lingua di visualizzazione configurate di VS Code.","github.copilot.config.nesFetcher":"Imposta il fetcher utilizzato per i suggerimenti di modifica successivi.","github.copilot.config.newWorkspace.useContext7":"Indica se usare gli strumenti [Context7](command:github.copilot.mcp.viewContext7) per eseguire lo scaffolding del progetto per la creazione di una nuova area di lavoro.","github.copilot.config.newWorkspaceCreation.enabled":"Indica se abilitare la creazione di una nuova area di lavoro agentic.","github.copilot.config.notebook.enhancedNextEditSuggestions":"Controlla se utilizzare un approccio avanzato per generare i suggerimenti di modifica successivi nelle celle del notebook.","github.copilot.config.notebook.followCellExecution":"Controlla se la cella attualmente in esecuzione viene rivelata nel riquadro di visualizzazione al momento dell'esecuzione da Copilot.","github.copilot.config.notebook.inlineEditAgent.enabled":"Abilita il comportamento simile a un agente dal widget chat inline del notebook.","github.copilot.config.pullRequestDescriptionGeneration.instruction.file":"Percorso a un file contenente istruzioni che verrà aggiunto alle richieste Copilot che generano titoli e descrizioni per le richieste pull.","github.copilot.config.pullRequestDescriptionGeneration.instruction.text":"Istruzioni di testo che verranno aggiunte alle richieste Copilot che generano titoli e descrizioni delle richieste pull.","github.copilot.config.pullRequestDescriptionGeneration.instructions":"Set di istruzioni che verrà aggiunto alle richieste Copilot che generano titoli e descrizioni per le richieste pull.\nLe istruzioni possono provenire da: \n- un file nell'area di lavoro: '{ \"file\": \"fileName\" }'\n- testo in linguaggio naturale: '{ \"text\": \"Includi sempre un elenco di modifiche chiave\".\" }`\n\nNota: le istruzioni devono essere brevi e precise. Istruzioni poco chiare possono ridurre la qualità e le prestazioni di Copilot.","github.copilot.config.renameSuggestions.triggerAutomatically":"Controlla se Copilot genera suggerimenti per la ridenominazione","github.copilot.config.responsesApiReasoningEffort":"Imposta l'attività di ragionamento usata per l'API Risposte. Richiede '#github.copilot.chat.useResponsesApi#'.","github.copilot.config.responsesApiReasoningSummary":"Imposta lo stile del riepilogo del ragionamento usato per l'API Risposte. Richiede '#github.copilot.chat.useResponsesApi#'.","github.copilot.config.reviewAgent.enabled":"Abilita l'agente di revisione del codice.","github.copilot.config.reviewSelection.enabled":"Abilita la revisione del codice per la selezione corrente.","github.copilot.config.reviewSelection.instruction.file":"Percorso di un file che verrà aggiunto alle richieste di Copilot che forniscono la revisione del codice per la selezione corrente. Facoltativamente, è possibile specificare un linguaggio per l'istruzione.","github.copilot.config.reviewSelection.instruction.text":"Istruzione testuale che verrà aggiunta alle richieste di Copilot che forniscono la revisione del codice per la selezione corrente. Facoltativamente, è possibile specificare un linguaggio per l'istruzione.","github.copilot.config.reviewSelection.instructions":"Set di istruzioni che verrà aggiunto alle richieste di Copilot che forniscono la revisione del codice per la selezione corrente.\nLe istruzioni possono provenire da: \n- un file nell'area di lavoro: '{ \"file\": \"fileName\" }'\n- testo in linguaggio naturale: `{ \"text\": \"Use underscore for field names.\" }`\n\nNota: le istruzioni devono essere brevi e precise. Istruzioni poco chiare possono compromettere l'efficacia di Copilot.","github.copilot.config.scopeSelection":"Indica se chiedere all'utente di selezionare un ambito di simboli specifico se l'utente usa '/explain' e l'editor attivo non ha alcuna selezione.","github.copilot.config.setupTests.enabled":"Abilita la finalità \"/setupTests\" e la richiesta nella generazione \"/tests\".","github.copilot.config.startDebugging.enabled":"Abilita la finalità \"/startDebugging\" nella chat del pannello. Genera o trova la configurazione di avvio che corrisponde alla query (se disponibile), alla struttura del progetto e molto altro.","github.copilot.config.summarizeAgentConversationHistory.enabled":"Indica se riepilogare automaticamente la cronologia delle conversazioni dell'agente una volta che la finestra contestuale è piena.","github.copilot.config.terminalChatLocation":"Controlla la posizione in cui devono essere aperte le query di chat dal terminale.","github.copilot.config.terminalChatLocation.chatView":"Apri la visualizzazione della chat.","github.copilot.config.terminalChatLocation.quickChat":"Apri chat veloce.","github.copilot.config.terminalChatLocation.terminal":"Aprire chat inline del terminale","github.copilot.config.testGeneration.instructions":"Set di istruzioni che verrà aggiunto alle richieste Copilot che generano test.\nLe istruzioni possono provenire da: \n- un file nell'area di lavoro: `{ \"file\": \"fileName\" }`\n- testo in linguaggio naturale: `{ \"text\": \"Use underscore for field names.\" }`\n\nNota: mantenere le istruzioni brevi e precise. Le istruzioni poco chiare possono ridurre la qualità e le prestazioni di Copilot.","github.copilot.config.testGeneration.instructions.deprecated":"Usare invece i file di istruzioni. Per altre informazioni, vedere https://aka.ms/vscode-ghcp-custom-instructions.","github.copilot.config.useProjectTemplates":"Usa i progetti GitHub pertinenti come progetti iniziali quando si usa \"/new\"","github.copilot.config.useResponsesApi":"Se è supportata, usare l'API Risposte anziché l'API di completamenti della chat. Abilita il ragionamento e i riepiloghi del ragionamento.\n\n**Nota**: questa è una funzionalità sperimentale non ancora attivata per tutti gli utenti.","github.copilot.config.virtualTools.threshold":"Questa impostazione definisce il numero di strumenti su cui usare gli strumenti virtuali. Gli strumenti virtuali raggruppano set di strumenti simili e consentono al modello di attivarli su richiesta. Alcuni gruppi di strumenti verranno preattivati in modo ottimistico. Questa funzionalità è attivamente in fase di sviluppo e si verifica una riduzione delle chiamate degli strumenti una volta raggiunta la soglia.\n\nPuò essere impostata su '0' per disabilitare gli strumenti virtuali.","github.copilot.devcontainer.generateDevContainerConfig":"Generare la configurazione del contenitore di sviluppo","github.copilot.git.generateCommitMessage":"Genera messaggio di commit","github.copilot.git.resolveMergeConflicts":"Risolvere i conflitti con l'IA","github.copilot.icon":"Icona di GitHub Copilot","github.copilot.nextEditSuggestions.allowWhitespaceOnlyChanges":"Indica se consentire modifiche che riguardano solo spazi vuoti tramite i suggerimenti di modifica successivi (NES).","github.copilot.nextEditSuggestions.enabled":"Indica se abilitare i suggerimenti di modifica successivi (NES).\n\nNES può proporre una modifica successiva in base alle modifiche recenti. [Altre informazioni](https://aka.ms/vscode-nes) sui suggerimenti di modifica successivi.","github.copilot.nextEditSuggestions.fixes":"Indica se offrire correzioni per la diagnostica tramite i suggerimenti di modifica successivi (NES).","github.copilot.resetAutomaticCommandExecutionPrompt":"Reimposta prompt di esecuzione automatica dei comandi","github.copilot.submenu.copilot.label":"Copilot","github.copilot.submenu.reviewComment.applyAndNext.label":"Applica e vai all'elemento successivo","github.copilot.submenu.reviewComment.discard.label":"Rimuovi","github.copilot.submenu.reviewComment.discardAndNext.label":"Rimuovi e vai all'elemento successivo","github.copilot.tools.createAndRunTask.description":"Crea ed esegui un'attività nell'area di lavoro","github.copilot.tools.createAndRunTask.name":"Crea ed esegui un'attività","github.copilot.tools.createAndRunTask.userDescription":"Crea ed esegui un'attività nell'area di lavoro","github.copilot.tools.createNewWorkspace.name":"Crea nuova area di lavoro","github.copilot.tools.createNewWorkspace.userDescription":"Eseguire lo scaffolding di una nuova area di lavoro in Visual Studio Code","github.copilot.tools.getProjectSetupInfo.name":"Ottieni informazioni configurazione progetto","github.copilot.tools.githubRepo.name":"Creare in repository GitHub","github.copilot.tools.githubRepo.userDescription":"Cerca frammenti di codice sorgente pertinenti in un repository GitHub. È possibile specificare un repository utilizzando 'owner/repo'","github.copilot.tools.openEmptyFolder.name":"Apri una cartella vuota come area di lavoro di VS Code","github.copilot.tools.searchResults.description":"Risultati nella visualizzazione di ricerca","github.copilot.tools.searchResults.name":"Risultati della visualizzazione della ricerca","github.copilot.viewsWelcome.chatDisabled":"La chat di GitHub Copilot è attualmente disabilitata per l'account da un amministratore dell'organizzazione. Contatta un amministratore dell'organizzazione per abilitare la chat.\n\n[Altre informazioni](https://docs.github.com/en/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-github-copilot-features-in-your-organization/managing-policies-for-copilot-in-your-organization)","github.copilot.viewsWelcome.contactSupport":"Sembra che ci sia un problema con l'account. Contattare il supporto tecnico di GitHub.\n\n[Contattare il supporto](https://support.github.com/?editor=vscode)","github.copilot.viewsWelcome.debug":"Esegui il debug usando un [comando terminale](command:github.copilot.chat.startCopilotDebugCommand) o in una [chat interattiva](command:workbench.action.chat.open?%7B%22query%22%3A%22%40vscode%20%2FstartDebugging%20%22%2C%22isPartialQuery%22%3Atrue%7D).","github.copilot.viewsWelcome.enterprise":"Contattare l'amministratore dell'organizzazione GitHub per abilitare Copilot.","github.copilot.viewsWelcome.individual.expired":"L'abbonamento a Copilot è scaduto.\n\n[Rivedi le impostazioni di Copilot](https://github.com/settings/copilot?editor=vscode)","github.copilot.viewsWelcome.offline":"Sei attualmente offline. Connettiti a Internet per usare GitHub Copilot.\n\n[Ritenta la connessione](command:github.copilot.refreshToken)","github.copilot.viewsWelcome.signIn":"Accedere per abilitare le funzionalità con tecnologia GitHub Copilot.\n\n[Accedi](command:workbench.action.chat.triggerSetupForceSignIn)","github.copilot.viewsWelcome.switchToReleaseChannel":"La versione pre-release dell'estensione GitHub Copilot Chat attualmente non è supportata nella versione stabile di VS Code. Passa alla versione della release per GitHub Copilot Chat o prova VS Code Insiders.\n\n[Passa alla versione della release e ricarica](command:runCommands?%7B%22commands%22%3A%5B%7B%22command%22%3A%22workbench.extensions.action.switchToRelease%22%2C%22args%22%3A%5B%22GitHub.copilot-chat%22%5D%7D%2C%22workbench.action.reloadWindow%22%5D%7D)\n\n[Passa a VS Code Insiders](https://aka.ms/vscode-insiders)","github.copilot.walkthrough.description":"Il programmatore AI di supporto per scrivere codice in modo più rapido e intelligente","github.copilot.walkthrough.edits.description":"Usa **Modifiche di Copilot** per selezionare i file con cui lavorare e descrivi le modifiche da apportare. Copilot le applica direttamente ai file.\n[Modifica con Copilot](command:workbench.action.chat.open?%7B%22mode%22%3A%22edit%22%7D)","github.copilot.walkthrough.edits.media.altText":"Il video mostra l'utente che trascina e rilascia i file nella casella di input di Copilot Edits collocata nella barra laterale secondaria. Copilot aggiorna quindi il file in base alla richiesta dell'utente","github.copilot.walkthrough.edits.title":"Apporta modifiche usando il linguaggio naturale","github.copilot.walkthrough.firstSuggest.description":"Mentre digiti nell'editor, Copilot suggerisce il codice per completare le istruzioni iniziate.","github.copilot.walkthrough.firstSuggest.media.altText":"Il video mostra diversi completamenti di Copilot in cui l'utente viene aiutato a completare il suo codice","github.copilot.walkthrough.firstSuggest.title":"Completamenti del codice suggeriti dall'intelligenza artificiale","github.copilot.walkthrough.inlineChatMac.description":"A volte è più facile descrivere il codice da scrivere direttamente all'interno di un file.\nPosiziona il cursore o effettua una selezione e usa **''CMD+I''** per aprire **Chat inline**.","github.copilot.walkthrough.inlineChatMac.media.altText":"Il video mostra l'utente che richiama il widget della chat inline e chiede a Copilot di apportare una modifica al file usando il linguaggio naturale. Copilot effettua quindi la modifica richiesta","github.copilot.walkthrough.inlineChatMac.title":"Usa il linguaggio naturale nei tuoi file","github.copilot.walkthrough.inlineChatNotMac.description":"A volte è più facile descrivere il codice da scrivere direttamente all'interno di un file.\nPosiziona il cursore o effettua una selezione e usa **''CTRL+I''** per aprire **Chat inline**.","github.copilot.walkthrough.inlineChatNotMac.media.altText":"Visualizzazione chat inline nell'editor. Il video mostra l'utente che richiama il widget della chat inline e chiede a Copilot di apportare una modifica al file usando il linguaggio naturale. Copilot effettua quindi la modifica richiesta","github.copilot.walkthrough.inlineChatNotMac.title":"Usa il linguaggio naturale nei tuoi file","github.copilot.walkthrough.panelChat.description":"Poni a Copilot domande sulla programmazione oppure ottieni assistenza con il codice usando **@workspace**.\n Digita **@** per visualizzare tutte le persone disponibili che partecipano alla chat con cui puoi chattare direttamente, ognuna con le proprie competenze.\n[Chatta con Copilot](command:workbench.action.chat.open?%7B%22mode%22%3A%22ask%22%7D)","github.copilot.walkthrough.panelChat.media.altText":"L'utente richiama @workspace nel pannello Chat nella barra laterale secondaria per comprendere la codebase. Copilot recupera le informazioni pertinenti e fornisce una risposta con collegamenti ai file","github.copilot.walkthrough.panelChat.title":"Chatta sul codice","github.copilot.walkthrough.setup.noAction.description":"È possibile usare Copilot per generare codice in più file, correggere gli errori, porre domande sul codice e molto altro ancora usando il linguaggio naturale.\n Ora offriamo [Copilot gratuitamente](https://github.com/features/copilot/plans) con il tuo account GitHub.","github.copilot.walkthrough.setup.signIn.description":"Puoi usare Copilot per generare codice in più file, correggere gli errori, porre domande sul codice e molto altro ancora usando il linguaggio naturale.\n Ora offriamo [Copilot gratuitamente](https://github.com/features/copilot/plans) con il tuo account GitHub.\n\n[Usa Copilot gratuitamente](command:workbench.action.chat.triggerSetup)","github.copilot.walkthrough.setup.signIn.title":"Accedi per usare Copilot gratuitamente","github.copilot.walkthrough.setup.signUp.description":"Puoi usare Copilot per generare codice in più file, correggere gli errori, porre domande sul codice e molto altro ancora usando il linguaggio naturale.\n Ora offriamo [Copilot gratuitamente](https://github.com/features/copilot/plans) con il tuo account GitHub.\n\n[Usa Copilot gratuitamente](command:workbench.action.chat.triggerSetup)","github.copilot.walkthrough.setup.signUp.title":"Inizia a usare Copilot gratuitamente","github.copilot.walkthrough.signIn.description":"Per iniziare a usare Copilot, accedi con il tuo account GitHub.\nAssicurati di usare l'account GitHub corretto. Puoi anche accedere in un secondo momento usando il menu dell'account.\n\n[Accedi](command:github.copilot.signIn)","github.copilot.walkthrough.signIn.media.altText":"Accedere a GitHub tramite questa procedura dettagliata o il menu dell'account di VS Code","github.copilot.walkthrough.signIn.title":"Accedi con GitHub","github.copilot.walkthrough.sparkle.description":"Copilot migliora l'esperienza di scrittura del codice con azioni intelligenti basate sull'intelligenza artificiale nell'interfaccia di VS Code.\nCerca le icone $(sparkle), ad esempio nella [visualizzazione Controllo del codice sorgente](command:workbench.view.scm), in cui Copilot genera messaggi di commit e descrizioni delle richieste pull in base alle modifiche del codice.\n\n[Scopri suggerimenti e trucchi](https://code.visualstudio.com/docs/copilot/copilot-vscode-features)","github.copilot.walkthrough.sparkle.media.altText":"Il video mostra l'icona sparkle nella casella di input del controllo del codice sorgente su cui si fa clic, attivando GitHub Copilot per generare automaticamente un messaggio di commit","github.copilot.walkthrough.sparkle.title":"Cerca azioni intelligenti","github.copilot.walkthrough.title":"GitHub Copilot"}
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.nls.pl.json:1:{"copilot.agent.description":"Edytowanie plików w obszarze roboczym w trybie agenta","copilot.codebase.tool.description":"Znajdowanie istotnych fragmentów plików, symboli i innych informacji w bazie kodu","copilot.description":"Pytaj lub edytuj kontekst","copilot.edits.description":"Edytowanie plików w obszarze roboczym","copilot.listCodeUsages.tool.description":"Znajdź odwołania, definicje i inne użycia symbolu","copilot.terminal.description":"Zapytaj o polecenia","copilot.terminal.explain.description":"Wyjaśnij coś w terminalu","copilot.terminal.explain.sampleRequest":"Wyjaśnij ostatnie polecenie","copilot.terminal.sampleRequest":"Jak mogę wyświetlić wszystkie pliki w katalogu zawierającym podkatalogi?","copilot.terminalPanel.description":"Zapytaj, jak coś zrobić w terminalu","copilot.testFailure.tool.description":"Zawiera informacje o ostatnim niepowodzeniu testu jednostkowego","copilot.toolSet.editing.description":"Edytowanie plików w obszarze roboczym","copilot.toolSet.new.description":"Utwórz szkielet nowego obszaru roboczego z konfiguracjami specyficznymi dla programu VS Code, aby kompilować, debugować i uruchamiać nowe projekty.","copilot.toolSet.runCommand.description":"Uruchom polecenia w terminalu","copilot.toolSet.runNotebook.description":"Uruchom komórki notesu","copilot.toolSet.runTasks.description":"Uruchom zadania w obszarze roboczym","copilot.toolSet.search.description":"Wyszukuj i odczytuj pliki w swoim obszarze roboczym","copilot.tools.applyPatch.description":"Edytuj pliki tekstowe w obszarze roboczym","copilot.tools.applyPatch.name":"Zastosuj poprawkę","copilot.tools.changes.description":"Pobierz różnice zmienionych plików","copilot.tools.createDirectory.description":"Tworzenie nowych katalogów w obszarze roboczym","copilot.tools.createDirectory.name":"Utwórz katalog","copilot.tools.createFile.description":"Tworzenie nowych plików","copilot.tools.createFile.name":"Utwórz plik","copilot.tools.editNotebook.name":"Edytuj notes","copilot.tools.errors.description":"Sprawdź błędy w przypadku określonego pliku","copilot.tools.fetchWebPage.description":"Pobieranie głównej zawartości ze strony sieci web. Należy uwzględnić adres URL strony, którą chcesz pobrać.","copilot.tools.fetchWebPage.name":"Pobierz stronę sieci Web","copilot.tools.findFiles.name":"Znajdź pliki","copilot.tools.findTestFiles.description":"W przypadku pliku kodu źródłowego znajdź plik zawierający testy. W przypadku pliku testowego znajdź plik zawierający testowany kod","copilot.tools.findTestFiles.name":"Znajdź pliki testowe","copilot.tools.findTextInFiles.name":"Znajdź tekst w plikach","copilot.tools.getChangedFiles.name":"Zmiany Git","copilot.tools.getDocInfo.description":"W przypadku symbolu, takiego jak klasa lub funkcja, znajdź informacje o tym, jak go udokumentować","copilot.tools.getDocInfo.name":"Informacje o dokumencie","copilot.tools.getErrors.name":"Pobierz problemy","copilot.tools.getNotebookCellOutput.description":"Odczytaj dane wyjściowe poprzednio wykonanej komórki","copilot.tools.getNotebookCellOutput.name":"Pobierz dane wyjściowe komórki notesu","copilot.tools.getTaskOutput.name":"Pobierz dane wyjściowe zadania","copilot.tools.getVSCodeAPI.name":"Pobierz materiały referencyjne dotyczące interfejsu API programu VS Code","copilot.tools.insertEdit.name":"Edytuj plik","copilot.tools.listCodeUsages.name":"Znajdź użycia","copilot.tools.listDirectory.name":"Katalog listy","copilot.tools.multiReplaceString.name":"Wielokrotna zamiana ciągu w plikach","copilot.tools.newJupyterNotebook.description":"Tworzenie nowego notesu Jupyter Notebook","copilot.tools.openSimpleBrowser.description":"Wyświetl podgląd lokalnie hostowanej witryny internetowej w prostej przeglądarce","copilot.tools.openSimpleBrowser.name":"Otwórz prostą przeglądarkę","copilot.tools.readFile.name":"Odczytaj plik","copilot.tools.readProjectStructure.name":"Struktura projektu","copilot.tools.replaceString.name":"Zamień ciąg w pliku","copilot.tools.runNotebookCell.description":"Wyzwól wykonywanie komórki w pliku notesu","copilot.tools.runNotebookCell.name":"Uruchom komórkę notesu","copilot.tools.searchCodebase.name":"Baza kodu","copilot.tools.searchWorkspaceSymbols.name":"Symbole obszaru roboczego","copilot.tools.testFailure.name":"Błąd testu","copilot.tools.think.name":"Zastanów się","copilot.tools.updateUserPreferences.name":"Aktualizuj preferencje użytkownika","copilot.vscode.api.description":"Zapytaj o opracowywanie rozszerzeń programu VS Code","copilot.vscode.api.sampleRequest":"Jak mogę dodać tekst do paska stanu?","copilot.vscode.description":"Zadawaj pytania dotyczące programu VS Code","copilot.vscode.sampleRequest":"Jakie jest polecenie otwierania zintegrowanego terminalu?","copilot.vscode.search.description":"Generowanie parametrów zapytania na potrzeby wyszukiwania w obszarze roboczym","copilot.vscode.search.sampleRequest":"Wyszukaj ciąg „foo” we wszystkich plikach w moim katalogu „src”","copilot.vscode.setupTests.description":"Konfigurowanie testów w projekcie (eksperymentalne)","copilot.vscode.setupTests.sampleRequest":"dodaj testy Playwright do mojego projektu","copilot.vscode.startDebugging.description":"Generuj konfigurację uruchamiania i rozpocznij debugowanie w edytorze VS Code (eksperymentalne)","copilot.vscode.startDebugging.sampleRequest":"Dołącz do aplikacji węzła na porcie 9229","copilot.vscode.tool.description":"Skorzystaj z odwołań interfejsu API programu VS Code, aby odpowiedzieć na pytania dotyczące opracowywania rozszerzeń programu VS Code.","copilot.workspace.description":"Zapytaj o swój obszar roboczy","copilot.workspace.doc.description":"Dodaj komentarz do dokumentacji dla tego symbolu","copilot.workspace.edit.description":"Edytowanie plików w obszarze roboczym","copilot.workspace.edit.inline.description":"Edytuj wybrany kod w aktywnym edytorze","copilot.workspace.explain.description":"Wyjaśnij, jak działa kod w aktywnym edytorze","copilot.workspace.fix.description":"Zaproponuj rozwiązanie problemów w wybranym kodzie","copilot.workspace.fix.sampleRequest":"Wystąpił problem w tym kodzie. Napisz ponownie kod, aby wyświetlić go z naprawioną usterką.","copilot.workspace.generate.description":"Wygeneruj nowy kod","copilot.workspace.new.description":"Kod szkieletu dla nowego pliku lub projektu w obszarze roboczym","copilot.workspace.new.sampleRequest":"Tworzenie serwera interfejsu API RESTful przy użyciu języka TypeScript","copilot.workspace.newNotebook.description":"Tworzenie nowego notesu Jupyter Notebook","copilot.workspace.newNotebook.sampleRequest":"Jak mogę utworzyć notes w celu załadowania danych z pliku CSV?","copilot.workspace.review.description":"Przejrzyj wybrany kod w aktywnym edytorze","copilot.workspace.sampleRequest":"Jak mogę skompilować ten projekt?","copilot.workspace.semanticSearch.description":"Znajdź odpowiedni kod dla zapytania","copilot.workspace.semanticSearch.sampleRequest":"Gdzie znajduje się kod paska narzędzi?","copilot.workspace.tests.description":"Utwórz testy jednostkowe dla wybranego kodu","copilot.workspaceSymbols.tool.description":"Wyszukaj symbole obszaru roboczego przy użyciu usług językowych.","github.copilot.badge.signUp":"Zarejestruj się w usłudze GitHub Copilot","github.copilot.badge.star":"Rozpocznij funkcję Copilot w serwisie GitHub","github.copilot.badge.twitter":"Obserwuj usługę GitHub w serwisie Twitter","github.copilot.badge.youtube":"Wypróbuj usługę GitHub w serwisie Youtube","github.copilot.chat.attachFile":"Dodaj plik do czatu","github.copilot.chat.attachSelection":"Dodaj zaznaczenie do czatu","github.copilot.chat.completionContext.typescript.mode":"Tryb wykonywania dostawcy zawartości funkcji Copilot TypeScript.","github.copilot.chat.copilotDebugCommand.enabled":"Określa, czy polecenie „Copilot-debug” jest włączone w terminalu.","github.copilot.chat.editor.temporalContext.enabled":"Podczas wykonywania wbudowanej prośby o rozmowę, czy dołączać ostatnio wyświetlane i edytowane pliki do próśb Copilot.","github.copilot.chat.edits.suggestRelatedFilesForTests":"Określa, czy sugerować pliki źródłowe z plików testowych dla zestawu roboczego Copilot Edits.","github.copilot.chat.edits.temporalContext.enabled":"Podczas wprowadzania żądań edycji, czy dołączać ostatnio wyświetlane i edytowane pliki do żądań Copilot.","github.copilot.chat.languageContext.fix.typescript.enabled":"Włącza dostawcę kontekstu języka TypeScript dla poleceń /fix","github.copilot.chat.languageContext.inline.typescript.enabled":"Włącza dostawcę kontekstu języka TypeScript dla czatów wbudowanych (generowanie i edytowanie)","github.copilot.chat.languageContext.typescript.cacheTimeout":"Limit czasu wypełniania pamięci podręcznej dla dostawcy kontekstu języka TypeScript w milisekundach. Wartość domyślna to 500 milisekund.","github.copilot.chat.languageContext.typescript.enabled":"Włącza dostawcę kontekstu języka TypeScript dla uzupełnień wbudowanych","github.copilot.chat.languageContext.typescript.includeDocumentation":"Określa, czy komentarze dokumentacji mają być dołączane do wygenerowanych fragmentów kodu.","github.copilot.chat.languageContext.typescript.items":"Określa, jakiego rodzaju elementy są uwzględniane w dostawcy kontekstu języka TypeScript.","github.copilot.command.applyReviewSuggestion":"Zastosuj","github.copilot.command.applyReviewSuggestionAndNext":"Zastosuj i przejdź do następnego","github.copilot.command.applySuggestionWithCopilot":"Zastosuj sugestię","github.copilot.command.buildLocalWorkspaceIndex":"Tworzenie lokalnego indeksu obszaru roboczego","github.copilot.command.buildRemoteWorkspaceIndex":"Indeks kompilowania zdalnego obszaru roboczego","github.copilot.command.collectDiagnostics":"Diagnostyka czatu","github.copilot.command.collectWorkspaceIndexDiagnostics":"Zbieranie danych diagnostycznych indeksu obszaru roboczego","github.copilot.command.continueReviewInChat":"Wyświetl w panelu czatu","github.copilot.command.continueReviewInInlineChat":"Odrzuć i skopiuj do czatu wbudowanego","github.copilot.command.disableEditTracing":"Wyłącz śledzenie edycji czatu","github.copilot.command.discardAllReviewSuggestion":"Odrzuć wszystko","github.copilot.command.discardReviewSuggestion":"Odrzuć","github.copilot.command.discardReviewSuggestionAndNext":"Odrzuć i przejdź do następnego","github.copilot.command.enableEditTracing":"Włącz śledzenie edycji czatu","github.copilot.command.explainTerminalLastCommand":"Wyjaśnij ostatnie polecenie terminalu","github.copilot.command.explainThis":"Wyjaśnij","github.copilot.command.fixTestFailure":"Napraw błąd testu","github.copilot.command.fixThis":"Napraw","github.copilot.command.generateConfiguration":"Generuj konfigurację debugowania","github.copilot.command.generateDocs":"Generuj dokumenty","github.copilot.command.generateSTest":"Generuj test STest na podstawie ostatniego żądania czatu","github.copilot.command.generateTests":"Generuj testy","github.copilot.command.generateThis":"Wygeneruj to","github.copilot.command.gotoNextReviewSuggestion":"Następna sugestia","github.copilot.command.gotoPreviousReviewSuggestion":"Poprzednia sugestia","github.copilot.command.helpfulReviewSuggestion":"Przydatne","github.copilot.command.inlineEdit.clearCache":"Wyczyść następną edycję pamięci podręcznej","github.copilot.command.inlineEdit.reportNotebookNESIssue":"Zgłoś problem z następną edycją w funkcji Notes","github.copilot.command.logWorkbenchState":"Stan aplikacji Log Workbench","github.copilot.command.openUserPreferences":"Otwórz preferencje użytkownika","github.copilot.command.openWalkthrough":"Otwórz przewodnik","github.copilot.command.refreshClaudeCodeSessions":"Odśwież sesje kodu w języku UDW","github.copilot.command.rerunWithCopilotDebug":"Debugowanie ostatniego polecenia terminalu","github.copilot.command.resetVirtualToolGroups":"Resetuj wirtualne grupy narzędzi","github.copilot.command.reviewAndComment":"Przejrzyj","github.copilot.command.reviewChanges":"Przegląd — niezatwierdzone zmiany","github.copilot.command.reviewFileChange":"Przejrzyj zmiany","github.copilot.command.reviewStagedChanges":"Przegląd — etapowe zmiany","github.copilot.command.reviewUnstagedChanges":"Przegląd — nieprzygotowane zmiany","github.copilot.command.sendChatFeedback":"Wyślij opinię na czacie","github.copilot.command.showChatLogView":"Pokaż widok debugowania czatu","github.copilot.command.showContextInspectorView":"Sprawdź kontekst językowy","github.copilot.command.showNotebookLog":"Pokaż notes dziennika czatu","github.copilot.command.showOutputChannel":"Pokaż kanał wyjściowy","github.copilot.command.unhelpfulReviewSuggestion":"Nieprzydatne","github.copilot.config.agent.currentEditorContext.enabled":"Po włączeniu funkcja Copilot będzie zawierać nazwę bieżącego aktywnego edytora w kontekście trybu agenta.","github.copilot.config.agent.thinkingTool":"Włącza narzędzie myślące, które umożliwia funkcji Copilot dokładne przemyślenie żądania przed wygenerowaniem odpowiedzi w trybie agenta.","github.copilot.config.alternateGptPrompt.enabled":"Włącza eksperymentalny alternatywny monit dla modeli GPT zamiast monitu domyślnego.","github.copilot.config.autoFix":"Automatycznie naprawiaj diagnostykę edytowanych plików.","github.copilot.config.byok.ollamaEndpoint":"Punkt końcowy, który ma być używany dla Ollama podczas uzyskiwania dostępu za pośrednictwem funkcji Bring Your Own Key. Wartość domyślna to localhost.","github.copilot.config.claudeSonnet45AlternatePrompt":"Określa eksperymentalne alternatywne polecenie do użycia w przypadku modelu Claude Sonnet 4.5.","github.copilot.config.codeGeneration.instruction.file":"Ścieżka do pliku, która zostanie dodana do żądań funkcji Copilot generujących kod. Opcjonalnie możesz określić język dla instrukcji.","github.copilot.config.codeGeneration.instruction.text":"Instrukcja tekstowa, która zostanie dodana do żądań funkcji Copilot generujących kod. Opcjonalnie możesz określić język dla instrukcji.","github.copilot.config.codeGeneration.instructions":"Zestaw instrukcji, który zostanie dodany do żądań funkcji Copilot generujących kod.\nInstrukcje mogą pochodzić z: \n— pliku w obszarze roboczym: „{ \"file\": \"fileName\" }”\n— tekst w języku naturalnym: „{ \"text\": \"Use underscore for field names.\" }”\n\nUwaga: zachowaj krótkie i precyzyjne instrukcje. Złe instrukcje mogą obniżyć jakość i wydajność funkcji Copilot.","github.copilot.config.codeGeneration.instructions.deprecated":"Zamiast tego użyj plików instrukcji. Aby uzyskać więcej informacji, zobacz https://aka.ms/vscode-ghcp-custom-instructions.","github.copilot.config.codeGeneration.useInstructionFiles":"Określa, czy instrukcje kodu z `.github/copilot-instructions.md` są dodawane do żądań funkcji Copilot.\n\nUwaga: postaraj się, aby instrukcje były krótkie i precyzyjne. Niedokładne instrukcje mogą obniżyć jakość i wyniki funkcji Copilot. [Dowiedz się więcej](https://aka.ms/github-copilot-custom-instructions) na temat dostosowywania funkcji Copilot.","github.copilot.config.codesearch.enabled":"Określa, czy włączyć wyszukiwanie kodu przez agenta podczas korzystania z elementu `#codebase`.","github.copilot.config.commitMessageGeneration.instruction.file":"Ścieżka do pliku z instrukcjami, które zostaną dodane do żądań funkcji Copilot generujących komunikaty zatwierdzenia.","github.copilot.config.commitMessageGeneration.instruction.text":"Zestaw instrukcji, który zostanie dodany do żądań funkcji Copilot generujących komunikaty zatwierdzenia.","github.copilot.config.commitMessageGeneration.instructions":"Zestaw instrukcji, który zostanie dodany do żądań funkcji Copilot generujących komunikaty zatwierdzenia.\nInstrukcje mogą pochodzić z: \n— pliku w obszarze roboczym: `{ \"file\": \"fileName\" }`\n— tekst w języku naturalnym: `{ \"text\": \"Use conventional commit message format.\" }`\n\nUwaga: staraj się, aby instrukcje były krótkie i precyzyjne. Niedokładne instrukcje mogą obniżyć jakość i wyniki funkcji Copilot.","github.copilot.config.completionsFetcher":"Ustawia moduł pobierania używany do uzupełniania w tekście.","github.copilot.config.customInstructionsInSystemMessage":"Po włączeniu instrukcje niestandardowe i instrukcje trybu będą dołączane do komunikatu systemowego zamiast do komunikatu użytkownika.","github.copilot.config.debugTerminalCommandPatterns":"Lista poleceń, dla których akcja szybkiej poprawki „Polecenie debugowania” powinna być wyświetlana w terminalu debugowania.","github.copilot.config.debugTerminalCommands":"Określa, czy wskazówki dotyczące szybkiej poprawki mają pojawiać się w terminalu debugowania i poleceniu `copilot-debug`.","github.copilot.config.edits.enabled":"Określa, czy włączyć funkcję Edycje funkcji Copilot.","github.copilot.config.edits.suggestRelatedFilesFromGitHistory":"Określa, czy sugerować powiązane pliki z historii git dla zestawu roboczego Copilot Edits.","github.copilot.config.editsNewNotebook.enabled":"Określa, czy włączyć nowe narzędzie notesu w funkcji Copilot Edits.","github.copilot.config.enableCodeActions":"Określa, czy polecenia funkcji Copilot są wyświetlane jako akcje kodu, jeśli są dostępne","github.copilot.config.enableUserPreferences":"Włącz zapamiętywanie preferencji użytkownika w trybie agenta.","github.copilot.config.executePrompt.enabled":"Narzędzie executePrompt umożliwia agentowi wykonywanie zadań w oddzielnym, izolowanym kontekście.","github.copilot.config.experimental.testGeneration.instruction.file":"Ścieżka do pliku, który zostanie dodany do żądań usługi Copilot generujących testy. Opcjonalnie możesz określić język dla instrukcji.","github.copilot.config.experimental.testGeneration.instruction.text":"Instrukcja tekstowa, która zostanie dodana do żądań funkcji Copilot generujących testy. Opcjonalnie możesz określić język dla instrukcji.","github.copilot.config.generateTests.codeLens":"Pokaż obiektyw kodu „Generuj testy” dla symboli nieobjętych bieżącymi informacjami o pokryciu przez testy.","github.copilot.config.gpt5AlternatePrompt":"Określa eksperymentalny alternatywny komunikat do użycia dla modeli GPT-5.","github.copilot.config.gpt5CodexAlternatePrompt":"Określa eksperymentalne alternatywne polecenie do użycia dla modelu GPT-5-Codex.","github.copilot.config.grokCodeAlternatePrompt":"Określa eksperymentalne alternatywne polecenie do użycia dla modeli kodu Grok.","github.copilot.config.imageUpload.enabled":"Umożliwia używanie adresów URL przekazywania obrazów w żądaniach czatu zamiast nieprzetworzonych ciągów base64.","github.copilot.config.localeOverride":"Określ ustawienia regionalne, w których funkcja Copilot powinna odpowiadać, np. „en” lub „fr”. Domyślnie funkcja Copilot będzie odpowiadać przy użyciu skonfigurowanych ustawień regionalnych języka wyświetlania edytora VS Code.","github.copilot.config.nesFetcher":"Ustawia moduł pobierania używany do wyświetlania kolejnych sugestii edycji.","github.copilot.config.newWorkspace.useContext7":"Określa, czy używać narzędzi [Context7](command:github.copilot.mcp.viewContext7) do tworzenia szkieletu projektu na potrzeby tworzenia nowego obszaru roboczego.","github.copilot.config.newWorkspaceCreation.enabled":"Określa, czy włączyć tworzenie nowego obszaru roboczego agenta.","github.copilot.config.notebook.enhancedNextEditSuggestions":"Określa, czy do generowania następnych sugestii edycji w komórkach notesu ma być używane ulepszone podejście.","github.copilot.config.notebook.followCellExecution":"Określa, czy aktualnie wykonywana komórka jest wyświetlana w okienku ekranu po wykonaniu z funkcji Copilot.","github.copilot.config.notebook.inlineEditAgent.enabled":"Włącz zachowanie podobne do agenta ze śródwierszowego widżetu czatu notesu.","github.copilot.config.pullRequestDescriptionGeneration.instruction.file":"Ścieżka do pliku z instrukcjami, które zostaną dodane do żądań funkcji Copilot generujących tytuły i opisy żądań ściągnięcia.","github.copilot.config.pullRequestDescriptionGeneration.instruction.text":"Instrukcje tekstowe, które zostaną dodane do żądań Copilot, które generują tytuły i opisy żądań ściągnięcia.","github.copilot.config.pullRequestDescriptionGeneration.instructions":"Zestaw instrukcji, które zostaną dodane do żądań funkcji Copilot generujących tytuły i opisy żądań ściągnięcia.\nInstrukcje mogą pochodzić z: \n— pliku w obszarze roboczym: „{ \"file\": \"fileName\" }”\n— tekstu w języku naturalnym: „{ \"text\": \"Zawsze dołączaj listę zmian kluczy\". }”\n\nUwaga: postaraj się, aby instrukcje były krótkie i precyzyjne. Niedokładne instrukcje mogą obniżyć jakość i wyniki funkcji Copilot.","github.copilot.config.renameSuggestions.triggerAutomatically":"Określa, czy funkcja Copilot ma generować sugestie dotyczące zmiany nazwy","github.copilot.config.responsesApiReasoningEffort":"Ustawia nakład pracy w zakresie wnioskowania używany dla interfejsu API odpowiedzi. Wymaga elementu „#github.copilot.chat.useResponsesApi#”.","github.copilot.config.responsesApiReasoningSummary":"Ustawia styl podsumowania wnioskowania używany dla interfejsu API odpowiedzi. Wymaga elementu „#github.copilot.chat.useResponsesApi#”.","github.copilot.config.reviewAgent.enabled":"Włącza agenta przeglądu.","github.copilot.config.reviewSelection.enabled":"Włącza przegląd kodu dla bieżącego wyboru.","github.copilot.config.reviewSelection.instruction.file":"Ścieżka do pliku, który zostanie dodany do żądań funkcji Copilot zapewniających przegląd kodu dla bieżącego wyboru. Opcjonalnie możesz określić język dla instrukcji.","github.copilot.config.reviewSelection.instruction.text":"Instrukcja tekstowa, która zostanie dodana do żądań funkcji Copilot, które zapewniają przegląd kodu dla bieżącego wyboru. Opcjonalnie możesz określić język dla instrukcji.","github.copilot.config.reviewSelection.instructions":"Zestaw instrukcji, które zostaną dodane do żądań funkcji Copilot zapewniających przegląd kodu dla bieżącego wyboru.\nInstrukcje mogą pochodzić z: \n— pliku w obszarze roboczym: „{ \"file\": \"fileName\" }”\n— tekst w języku naturalnym: „{ \"text\": \"Use underscore for field names.\" }”\n\nUwaga: staraj się, aby instrukcje były krótkie i precyzyjne. Wadliwe instrukcje mogą obniżyć skuteczność działania funkcji Copilot.","github.copilot.config.scopeSelection":"Określa, czy monitować użytkownika o wybranie określonego zakresu symboli, jeśli użytkownik używa polecenia „/explain”, a aktywny edytor nie ma możliwości wyboru.","github.copilot.config.setupTests.enabled":"Udostępnia intencję „/setupTests” i obsługę monitów w generowaniu „/tests”.","github.copilot.config.startDebugging.enabled":"Udostępnia intencję „/startDebugging” na czacie panelowym. Generuje lub wyszukuje konfigurację uruchamiania pasującą do zapytania (jeśli istnieje), struktury projektu i nie tylko.","github.copilot.config.summarizeAgentConversationHistory.enabled":"Określa, czy automatycznie podsumowywać historię konwersacji agenta po wypełnieniu okna kontekstu.","github.copilot.config.terminalChatLocation":"Określa, gdzie powinny być otwierane zapytania chatu z terminalu.","github.copilot.config.terminalChatLocation.chatView":"Otwórz widok czatu.","github.copilot.config.terminalChatLocation.quickChat":"Otwórz szybki czat.","github.copilot.config.terminalChatLocation.terminal":"Otwórz czat wbudowany terminalu","github.copilot.config.testGeneration.instructions":"Zestaw instrukcji, który zostanie dodany do żądań funkcji Copilot generujących testy.\nInstrukcje mogą pochodzić z: \n— pliku w obszarze roboczym: „{ \"file\": \"fileName\" }”\n— tekst w języku naturalnym: „{ \"text\": \"Use underscore for field names.\" }”\n\nUwaga: zachowaj krótkie i precyzyjne instrukcje. Złe instrukcje mogą obniżyć jakość i wydajność funkcji Copilot.","github.copilot.config.testGeneration.instructions.deprecated":"Zamiast tego użyj plików instrukcji. Aby uzyskać więcej informacji, zobacz https://aka.ms/vscode-ghcp-custom-instructions.","github.copilot.config.useProjectTemplates":"Użyj odpowiednich projektów z serwisu GitHub jako projektów startowych podczas korzystania z opcji `/new`.","github.copilot.config.useResponsesApi":"Użyj interfejsu API odpowiedzi zamiast interfejsu API uzupełniania czatu, jeśli jest obsługiwany. Włącza rozumowanie i podsumowania rozumowania.\n\n**Uwaga**: jest to funkcja eksperymentalna, która nie została jeszcze aktywowana dla wszystkich użytkowników.","github.copilot.config.virtualTools.threshold":"To ustawienie definiuje liczbę narzędzi, powyżej której powinny być używane narzędzia wirtualne. Narzędzia wirtualne grupują podobne zestawy narzędzi, co pozwala modelowi aktywować je na żądanie. Niektóre grupy narzędzi zostaną wstępnie aktywowane. Aktywnie rozwijamy tę funkcję, a po osiągnięciu progu możesz doświadczyć obniżonej wydajności wywoływania narzędzi.\n\nMożna ustawić wartość „0”, aby wyłączyć narzędzia wirtualne.","github.copilot.devcontainer.generateDevContainerConfig":"Generowanie konfiguracji kontenera deweloperskiego","github.copilot.git.generateCommitMessage":"Generuj komunikat zatwierdzenia","github.copilot.git.resolveMergeConflicts":"Rozwiązywanie konfliktów ze sztuczną inteligencją","github.copilot.icon":"Ikona narzędzia GitHub Copilot","github.copilot.nextEditSuggestions.allowWhitespaceOnlyChanges":"Określa, czy zezwolić na proponowanie zmian dotyczących wyłącznie białych znaków przez sugestie następnej edycji (NES).","github.copilot.nextEditSuggestions.enabled":"Określa, czy włączyć funkcję Sugestie dotyczące następnej edycji (NES).\n\nFunkcja NES może zaproponować następną edycję na podstawie ostatnich zmian. [Dowiedz się więcej](https://aka.ms/vscode-nes) o sugestiach dotyczących następnej edycji.","github.copilot.nextEditSuggestions.fixes":"Określa, czy zaproponować poprawki na potrzeby diagnostyki za pośrednictwem sugestii następnej zmiany (NES).","github.copilot.resetAutomaticCommandExecutionPrompt":"Resetuj wiersz automatycznego wykonywania polecenia","github.copilot.submenu.copilot.label":"Copilot","github.copilot.submenu.reviewComment.applyAndNext.label":"Zastosuj i przejdź do następnego","github.copilot.submenu.reviewComment.discard.label":"Odrzuć","github.copilot.submenu.reviewComment.discardAndNext.label":"Odrzuć i przejdź do następnego","github.copilot.tools.createAndRunTask.description":"Utwórz i uruchom zadanie w obszarze roboczym","github.copilot.tools.createAndRunTask.name":"Utwórz i uruchom zadanie","github.copilot.tools.createAndRunTask.userDescription":"Utwórz i uruchom zadanie w obszarze roboczym","github.copilot.tools.createNewWorkspace.name":"Utwórz nowy obszar roboczy","github.copilot.tools.createNewWorkspace.userDescription":"Utwórz szkielet nowego obszaru roboczego w programie VS Code","github.copilot.tools.getProjectSetupInfo.name":"Pobierz informacje o konfiguracji projektu","github.copilot.tools.githubRepo.name":"Wyszukaj repozytorium GitHub","github.copilot.tools.githubRepo.userDescription":"Wyszukuje repozytorium GitHub pod kątem odpowiednich fragmentów kodu źródłowego. Możesz określić repozytorium przy użyciu polecenia „owner/repo”","github.copilot.tools.openEmptyFolder.name":"Otwórz pusty folder jako obszar roboczy programu VS Code","github.copilot.tools.searchResults.description":"Wyniki z widoku wyszukiwania","github.copilot.tools.searchResults.name":"Wyniki widoku wyszukiwania","github.copilot.viewsWelcome.chatDisabled":"Czat GitHub Copilot jest obecnie wyłączony dla Twojego konta przez administratora organizacji. Skontaktuj się z administratorem organizacji, aby włączyć czat.\n\n[Dowiedz się więcej](https://docs.github.com/en/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-github-copilot-features-in-your-organization/managing-policies-for-copilot-in-your-organization)","github.copilot.viewsWelcome.contactSupport":"Wygląda na to, że wystąpił problem z Twoim kontem. Skontaktuj się z pomocą techniczną usługi GitHub.\n\n[Skontaktuj się z pomocą techniczną](https://support.github.com/?editor=vscode)","github.copilot.viewsWelcome.debug":"Debugowanie przy użyciu [polecenia terminalu](command:github.copilot.chat.startCopilotDebugCommand) lub w [czacie interakcyjnym](command:workbench.action.chat.open?%7B%22query%22%3A%22%40vscode%20%2FstartDebugging%20%22%2C%22isPartialQuery%22%3Atrue%7D).","github.copilot.viewsWelcome.enterprise":"Skontaktuj się z administratorem organizacji usługi GitHub, aby włączyć funkcję Copilot.","github.copilot.viewsWelcome.individual.expired":"Twoja subskrypcja funkcji Copilot wygasła.\n\n[Przejrzyj ustawienia funkcji Copilot](https://github.com/settings/copilot?editor=vscode).","github.copilot.viewsWelcome.offline":"Obecnie jesteś w trybie offline. Połącz się z Internetem, aby korzystać z narzędzia GitHub Copilot.\n\n[Ponów próbę nawiązania połączenia](command:github.copilot.refreshToken)","github.copilot.viewsWelcome.signIn":"Zaloguj się, aby włączyć funkcje obsługiwane przez narzędzie GitHub Copilot.\n\n[Zaloguj się](command:workbench.action.chat.triggerSetupForceSignIn)","github.copilot.viewsWelcome.switchToReleaseChannel":"Wersja wstępna rozszerzenia GitHub Copilot Chat nie jest obecnie obsługiwana w stabilnej wersji programu VS Code. Przełącz się do wersji dla funkcji GitHub Copilot Chat lub wypróbuj VS Code Insiders.\n\n[Przełącz do wersji wydania i załaduj ponownie](command:runCommands?%7B%22commands%22%3A%5B%7B%22command%22%3A%22workbench.extensions.action.switchToRelease%22%2C%22args%22%3A%5B%22GitHub.copilot-chat%22%5D%7D%2C%22workbench.action.reloadWindow%22%5D%7D)\n\n[Przełącz się na VS Code Insiders](https://aka.ms/vscode-insiders)","github.copilot.walkthrough.description":"Twój programista par AI, aby szybciej i inteligentniej pisać kod","github.copilot.walkthrough.edits.description":"Skorzystaj z funkcji **Copilot Edits**, aby wybrać pliki, nad którymi chcesz pracować, i opisać zmiany, które chcesz wprowadzić. Funkcja Copilot stosuje je bezpośrednio do plików.\n[Edytuj za pomocą funkcji Copilot](command:workbench.action.chat.open?%7B%22mode%22%3A%22edit%22%7D)","github.copilot.walkthrough.edits.media.altText":"W klipie wideo przedstawiono, jak użytkownik przeciąga i upuszcza pliki w polu wprowadzania danych funkcji Copilot Edits znajdującym się na pomocniczym pasku bocznym. Funkcja Copilot aktualizuje plik zgodnie z żądaniem użytkownika","github.copilot.walkthrough.edits.title":"Wprowadzaj zmiany przy użyciu języka naturalnego","github.copilot.walkthrough.firstSuggest.description":"Gdy wpisujesz tekst w edytorze, funkcja Copilot sugeruje kod ułatwiający ukończenie rozpoczętego procesu.","github.copilot.walkthrough.firstSuggest.media.altText":"W klipie wideo przedstawiono różne Uzupełnienia Copilot, w zakresie których funkcja Copilot sugeruje kod, aby ułatwić użytkownikowi ukończenie kodu","github.copilot.walkthrough.firstSuggest.title":"Uzupełnianie kodu sugerowane przez sztuczną inteligencję","github.copilot.walkthrough.inlineChatMac.description":"Czasami łatwiej jest opisać kod, który chcesz napisać bezpośrednio w pliku.\nUmieść kursor lub dokonaj zaznaczenia i użyj kombinacji klawiszy **„Cmd+I”**, aby otworzyć **Czat wbudowany**.","github.copilot.walkthrough.inlineChatMac.media.altText":"W klipie wideo przedstawiono, jak użytkownik wywołuje śródwierszowy widżet czatu i prosi funkcję Copilot o wprowadzenie zmiany w pliku przy użyciu języka naturalnego. Funkcja Copilot następnie wprowadza żądaną zmianę","github.copilot.walkthrough.inlineChatMac.title":"Używanie języka naturalnego w plikach","github.copilot.walkthrough.inlineChatNotMac.description":"Czasami łatwiej jest opisać kod, który chcesz napisać bezpośrednio w pliku.\nUmieść kursor lub dokonaj zaznaczenia i użyj kombinacji klawiszy**„Ctrl+I”**, aby otworzyć **Czat wbudowany**.","github.copilot.walkthrough.inlineChatNotMac.media.altText":"Śródwierszowy widok czatu w edytorze. W klipie wideo przedstawiono, jak użytkownik wywołuje śródwierszowy widżet czatu i prosi funkcję Copilot o wprowadzenie zmiany w pliku przy użyciu języka naturalnego. Funkcja Copilot następnie wprowadza żądaną zmianę","github.copilot.walkthrough.inlineChatNotMac.title":"Używanie języka naturalnego w plikach","github.copilot.walkthrough.panelChat.description":"Zadawaj pytania programistyczne funkcji Copilot lub uzyskaj pomoc dotyczącą kodu przy użyciu **@workspace**.\n Wpisz **@**, aby zobaczyć wszystkich dostępnych uczestników czatu, z którymi możesz rozmawiać bezpośrednio, a każdy z nich ma własne doświadczenie.\n[Czat z funkcją Copilot](command:workbench.action.chat.open?%7B%22mode%22%3A%22ask%22%7D)","github.copilot.walkthrough.panelChat.media.altText":"Użytkownik wywołuje @workspace w panelu czatu na pomocniczym pasku bocznym, aby zrozumieć podstawę kodu. Funkcja Copilot pobiera odpowiednie informacje i udostępnia odpowiedź z linkami do plików","github.copilot.walkthrough.panelChat.title":"Czat o kodzie","github.copilot.walkthrough.setup.noAction.description":"Za pomocą funkcji Copilot można generować kod w wielu plikach, naprawiać błędy, zadawać pytania dotyczące kodu i wiele więcej przy użyciu języka naturalnego.\n Teraz oferujemy [funkcję Copilot bezpłatnie](https://github.com/features/copilot/plans) w ramach Twojego konta usługi GitHub.","github.copilot.walkthrough.setup.signIn.description":"Za pomocą funkcji Copilot możesz generować kod w wielu plikach, naprawiać błędy, zadawać pytania dotyczące kodu i wiele więcej przy użyciu języka naturalnego.\n Teraz oferujemy [funkcję Copilot bezpłatnie](https://github.com/features/copilot/plans) z Twoim kontem usługi GitHub.\n\n[Użyj funkcji Copilot bezpłatnie](command:workbench.action.chat.triggerSetupForceSignIn)","github.copilot.walkthrough.setup.signIn.title":"Zaloguj się, aby bezpłatnie korzystać z funkcji Copilot","github.copilot.walkthrough.setup.signUp.description":"Za pomocą funkcji Copilot możesz generować kod w wielu plikach, naprawiać błędy, zadawać pytania dotyczące kodu i wiele więcej przy użyciu języka naturalnego.\n Teraz oferujemy [funkcję Copilot bezpłatnie](https://github.com/features/copilot/plans) z Twoim kontem usługi GitHub.\n\n[Użyj funkcji Copilot bezpłatnie](command:workbench.action.chat.triggerSetupForceSignIn)","github.copilot.walkthrough.setup.signUp.title":"Rozpocznij bezpłatnie pracę z Copilot","github.copilot.walkthrough.signIn.description":"Aby rozpocząć korzystanie z funkcji Copilot, zaloguj się za pomocą konta usługi GitHub.\nUpewnij się, że używasz poprawnego konta usługi GitHub. Możesz też zalogować się później za pomocą menu konta.\n\n[Zaloguj się](command:github.copilot.signIn)","github.copilot.walkthrough.signIn.media.altText":"Zaloguj się do usługi GitHub za pomocą tego przewodnika lub menu konta edytora VS Code","github.copilot.walkthrough.signIn.title":"Logowanie za pomocą usługi GitHub","github.copilot.walkthrough.sparkle.description":"Funkcja Copilot ulepsza środowisko kodowania dzięki inteligentnym akcjom opartym na sztucznej inteligencji w interfejsie programu VS Code.\nPoszukaj ikon $(sparkle), na przykład w [widoku kontroli źródła](command:workbench.view.scm), gdzie funkcja Copilot generuje komunikaty zatwierdzenia i opisy żądań ściągnięcia na podstawie zmian kodu.\n\n[Odkryj porady i wskazówki](https://code.visualstudio.com/docs/copilot/copilot-vscode-features)","github.copilot.walkthrough.sparkle.media.altText":"Klip wideo przedstawia ikonę iskierki w klikanym polu wprowadzania danych mechanizmu kontroli źródła, co wyzwala funkcję GitHub Copilot w celu automatycznego wygenerowania komunikatu zatwierdzenia","github.copilot.walkthrough.sparkle.title":"Wyszukaj inteligentne akcje","github.copilot.walkthrough.title":"GitHub Copilot"}
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/dist/extension.js:449:`:"",t(n.cause,o+"  "),...Array.isArray(n.errors)?n.errors.map(l=>t(l,o+"  ")):[]].join("")}return t(r,"").trim()}var ZF=class{static{this._logs=[]}static{this._requestIds=[]}static{this.MAX_LOGS=50}static extractRequestIdFromMessage(e){let t=e.match(/request done: requestId: \[([0-9a-fA-F-]+)\] model deployment ID: \[/);if(t){let n=t[1];if(!this._requestIds.includes(n))return n}}static addLog(e,t){this._logs.length>=this.MAX_LOGS&&this._logs.shift(),this._logs.push(`${e}: ${t}`),this._requestIds.length>=this.MAX_LOGS&&this._requestIds.shift();let n=this.extractRequestIdFromMessage(t);n&&this._requestIds.push(n)}static getLogs(){return this._logs}static getRequestIds(){return this._requestIds}};function no(r){return{create(e){return e.get(K).createInstance(r)}}}var yR=class extends _e{constructor(t,n,o){super();this.allActivationBlockers=[];for(let s of t){let a;try{if(a=o.invokeFunction(s.create),UF(a)&&this._register(a),a?.activationBlocker){let l=Vo.create(),c=a.id||"UNKNOWN";this.allActivationBlockers.push(a.activationBlocker.finally(()=>{n.info(`activationBlocker from '${c}' took for ${Math.round(l.elapsed())}ms`)}))}}catch(l){n.error(l,"Error while loading contribution")}}}async waitForActivationBlockers(){await Promise.allSettled(this.allActivationBlockers)}};yR=T([v(1,ue),v(2,K)],yR);async function Tot(r){let e=r.context;if(e.extensionMode===Vh.ExtensionMode.Test&&!r.forceActivation&&!sa)return e;let t=!(Vh.env.appName.includes("Insiders")||Vh.env.appName.includes("Exploration")||Vh.env.appName.includes("OSS")),n="github.copilot.interactiveSession.switchToReleaseChannel";if(e.extension.packageJSON.isPreRelease&&t)return Vh.commands.executeCommand("setContext",n,!0),e;Vh.commands.executeCommand("setContext",n,void 0),Vh.l10n.bundle&&Cot.config({contents:Vh.l10n.bundle}),KF||r.configureDevPackages?.();let o=nur(r);return await o.invokeFunction(async s=>{await s.get(nt).hasTreatments();let l=o.createInstance(yR,r.contributions);e.subscriptions.push(l),await l.waitForActivationBlockers()}),Vh.ExtensionMode.Test===e.extensionMode&&!sa?o:{getAPI(s){if(s>hN.version)throw new Error("Invalid Copilot Chat extension API version. Please upgrade Copilot Chat.");return o.createInstance(hN)}}}function nur(r){let e=new Bse;r.registerServices(e,r.context);let t=e.seal();return r.context.subscriptions.push(t),t.invokeFunction(n=>{n.get(At).init(),n.get(JF)}),t}var DPe=require("vscode");var ks=class{constructor(e,t,n){this.owner=e;this.debugNameSource=t;this.referenceFn=n}getDebugName(e){return wot(e,this)}},Iot=new Map,Z1e=new WeakMap;function wot(r,e){let t=Z1e.get(r);if(t)return t;let n=our(r,e);if(n){let o=Iot.get(n)??0;o++,Iot.set(n,o);let s=o===1?n:`${n}#${o}`;return Z1e.set(r,s),s}}function our(r,e){let t=Z1e.get(r);if(t)return t;let n=e.owner?sur(e.owner)+".":"",o,s=e.debugNameSource;if(s!==void 0)if(typeof s=="function"){if(o=s(),o!==void 0)return n+o}else return n+s;let a=e.referenceFn;if(a!==void 0&&(o=Tj(a),o!==void 0))return n+o;if(e.owner!==void 0){let l=iur(e.owner,r);if(l!==void 0)return n+l}}function iur(r,e){for(let t in r)if(r[t]===e)return t}var xot=new Map,Rot=new WeakMap;function sur(r){let e=Rot.get(r);if(e)return e;let t=ePe(r)??"Object",n=xot.get(t)??0;n++,xot.set(t,n);let o=n===1?t:`${t}#${n}`;return Rot.set(r,o),o}function ePe(r){let e=r.constructor;if(e)return e.name==="Object"?void 0:e.name}function Tj(r){let e=r.toString(),n=/\/\*\*\s*@description\s*([^*]*)\*\//.exec(e);return(n?n[1]:void 0)?.trim()}var Wd=(r,e)=>r===e;function tPe(r){let e=new Error("BugIndicatingErrorRecovery: "+r);Ml(e),console.error("recovered from an error that indicates a bug",e)}var gN;function Ij(r){gN?gN instanceof Vse?gN.loggers.push(r):gN=new Vse([gN,r]):gN=r}function Vs(){return gN}var rPe;function Pot(r){rPe=r}function kot(r){rPe&&rPe(r)}var Vse=class{constructor(e){this.loggers=e}handleObservableCreated(e,t){for(let n of this.loggers)n.handleObservableCreated(e,t)}handleOnListenerCountChanged(e,t){for(let n of this.loggers)n.handleOnListenerCountChanged(e,t)}handleObservableUpdated(e,t){for(let n of this.loggers)n.handleObservableUpdated(e,t)}handleAutorunCreated(e,t){for(let n of this.loggers)n.handleAutorunCreated(e,t)}handleAutorunDisposed(e){for(let t of this.loggers)t.handleAutorunDisposed(e)}handleAutorunDependencyChanged(e,t,n){for(let o of this.loggers)o.handleAutorunDependencyChanged(e,t,n)}handleAutorunStarted(e){for(let t of this.loggers)t.handleAutorunStarted(e)}handleAutorunFinished(e){for(let t of this.loggers)t.handleAutorunFinished(e)}handleDerivedDependencyChanged(e,t,n){for(let o of this.loggers)o.handleDerivedDependencyChanged(e,t,n)}handleDerivedCleared(e){for(let t of this.loggers)t.handleDerivedCleared(e)}handleBeginTransaction(e){for(let t of this.loggers)t.handleBeginTransaction(e)}handleEndTransaction(e){for(let t of this.loggers)t.handleEndTransaction(e)}};function nm(r,e){let t=new vN(r,e);try{r(t)}finally{t.finish()}}function e5(r,e,t){r?e(r):nm(e,t)}var vN=class{constructor(e,t){this._fn=e;this._getDebugName=t;this._updatingObservers=[];Vs()?.handleBeginTransaction(this)}getDebugName(){return this._getDebugName?this._getDebugName():Tj(this._fn)}updateObserver(e,t){if(!this._updatingObservers){tPe("Transaction already finished!"),nm(n=>{n.updateObserver(e,t)});return}this._updatingObservers.push({observer:e,observable:t}),e.beginUpdate(t)}finish(){let e=this._updatingObservers;if(!e){tPe("transaction.finish() has already been called!");return}for(let t=0;t<e.length;t++){let{observer:n,observable:o}=e[t];n.endUpdate(o)}this._updatingObservers=null,Vs()?.handleEndTransaction(this)}debugGetUpdatingObservers(){return this._updatingObservers}};var os;(n=>{let r=!1;function e(){r=!0}n.enable=e;function t(){if(!r)return;let o=Error,s=o.stackTraceLimit;o.stackTraceLimit=3;let a=new Error().stack;return o.stackTraceLimit=s,nPe.fromStack(a,2)}n.ofCaller=t})(os||={});var nPe=class r{constructor(e,t,n,o){this.fileName=e;this.line=t;this.column=n;this.id=o}static fromStack(e,t){let n=e.split(`
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/dist/extension.js:472:`);return new Ds(o,s)}}toSingleEdit(e){let t=this.toSingleTextEdit(e),n=e.getTransformer().getOffsetRange(t.range);return new Yn(n,t.text)}toString(){return`${this.lineRange}->${JSON.stringify(this.newLines)}`}serialize(){return[this.lineRange.startLineNumber,this.lineRange.endLineNumberExclusive,this.newLines]}removeCommonSuffixPrefixLines(e){let t=this.lineRange.startLineNumber,n=this.lineRange.endLineNumberExclusive,o=0;for(;t<n&&o<this.newLines.length&&this.newLines[o]===e.getLineAt(t);)t++,o++;let s=0;for(;t<n&&s+o<this.newLines.length&&this.newLines[this.newLines.length-1-s]===e.getLineAt(n-1);)n--,s++;return o===0&&s===0?this:new r(new Xr(t,n),this.newLines.slice(o,this.newLines.length-s))}toLineEdit(){return new $d([this])}},xPe;(e=>{function r(t){return Array.isArray(t)&&t.length===3&&typeof t[0]=="number"&&typeof t[1]=="number"&&Array.isArray(t[2])&&t[2].every(n=>typeof n=="string")}e.is=r})(xPe||={});var s5;(o=>{o.DEFAULT_DIFF_PARAMS={emitFastCursorLineChange:!1,nSignificantLinesToConverge:2,nLinesToConverge:3};async function*e(s,a,l,c){let u=new RPe;for(let[m,h]of s.entries())u.add(h,m);let d=0,p=-1,f={k:"aligned"};for await(let m of a){if(++p,d>=s.length){switch(f.k){case"aligned":{f={k:"diverged",startLineIdx:d,newLines:[m]};break}case"diverged":f.newLines.push(m)}continue}if(f.k==="aligned"){if(s[d]===m){++d;continue}f={k:"diverged",startLineIdx:d,newLines:[]}}f.newLines.push(m);let h=n(s,l,u,f,d,c);h&&(yield h.singleLineEdit,d=h.convergenceEndIdx,f={k:"aligned"})}switch(f.k){case"diverged":{let m=new Xr(f.startLineIdx+1,s.length+1);yield new fu(m,f.newLines);break}case"aligned":{if(d<s.length){let m=new Xr(d+1,s.length+1);yield new fu(m,[])}break}}}o.diff=e;function t(s){return!!s.match(/[a-zA-Z1-9]+/)}function n(s,a,l,c,u,d){if(c.newLines.length===0)throw On("Cannot check for convergence without new lines");let p=c.newLines.length-1,f=l.get(c.newLines[p]).map(k=>[k,k]);if(f.length===0){if(!d.emitFastCursorLineChange||u!==a||c.newLines.length>1)return;let k=[u,u+1],H=new Xr(k[0]+1,k[1]+1);return{singleLineEdit:new fu(H,c.newLines),convergenceEndIdx:u+1}}if(c.newLines.length<d.nSignificantLinesToConverge)return;let m=1,h=t(c.newLines[p])?1:0;--p;let g,y=f[0];for(m>0&&y[0]-c.startLineIdx===c.newLines.length-1&&(g="found_significant_matches");p>=0&&(f=f.map(([k,H])=>[k,H-1]),f=f.filter(([k,H])=>H>=0&&u<=H),f=f.filter(([k,H])=>s[H]===c.newLines[p]),f.length!==0);--p)if(++m,t(c.newLines[p])&&++h,h===d.nSignificantLinesToConverge&&(g="found_significant_matches",y=f[0]),m===d.nLinesToConverge){g="found_matches",y=f[0];break}if(!g)return;let A=y[1],b=y[0],E=b-A+1,S=A-c.startLineIdx,_=c.newLines.slice(0,c.newLines.length-E),x=_.length;if(S-x>1&&x>0)return;let I=[c.startLineIdx,A],P=new Xr(I[0]+1,I[1]+1);return{singleLineEdit:new fu(P,_),convergenceEndIdx:b+1}}})(s5||={});var RPe=class{constructor(){this.map=new Map}add(e,t){let n=this.map.get(e);n?n.push(t):this.map.set(e,[t])}get(e){return this.map.get(e)||[]}};var E0="github.copilot",Pe=Me("IConfigurationService"),lae=class r extends _e{constructor(t){super();this._onDidChangeConfiguration=this._register(new Vt);this.onDidChangeConfiguration=this._onDidChangeConfiguration.event;this._isInternal=!1;this._isTeamMember=!1;this._teamMemberUsername=void 0;this.observables=new Map;t&&this._register(t.onDidStoreUpdate(()=>{let n=!!t.copilotToken?.isVscodeTeamMember;this._setUserInfo({isInternal:!!t.copilotToken?.isInternal,isTeamMember:n,teamMemberUsername:n?t.copilotToken?.username:void 0})}))}getConfigMixedWithDefaults(t){if(t.options?.valueIgnoredForExternals&&!this._isInternal)return this.getDefaultValue(t);let n=this.getConfig(t);return n===void 0?this.getDefaultValue(t):nd(n)&&nd(t.defaultValue)?{...t.defaultValue,...n}:n}getDefaultValue(t){return b0.isDefaultValueWithTeamAndInternalValue(t.defaultValue)?this._isUsingTeamDefault(t)?t.defaultValue.teamDefaultValue:this._isInternal?t.defaultValue.internalDefaultValue:t.defaultValue.defaultValue:b0.isDefaultValueWithTeamValue(t.defaultValue)?this._isUsingTeamDefault(t)?t.defaultValue.teamDefaultValue:t.defaultValue.defaultValue:t.defaultValue}_setUserInfo(t){this._isInternal===t.isInternal&&this._isTeamMember===t.isTeamMember&&this._teamMemberUsername===t.teamMemberUsername||(this._isInternal=t.isInternal,this._isTeamMember=t.isTeamMember,this._teamMemberUsername=t.teamMemberUsername,this._onDidChangeConfiguration.fire({affectsConfiguration:()=>!0}))}updateExperimentBasedConfiguration(t){t.length!==0&&this._onDidChangeConfiguration.fire({affectsConfiguration:()=>!0})}getConfigObservable(t){return this._getObservable_$show2FramesUp(t,()=>this.getConfig(t))}getExperimentBasedConfigObservable(t,n){return this._getObservable_$show2FramesUp(t,()=>this.getExperimentBasedConfig(t,n))}_getObservable_$show2FramesUp(t,n){let o=this.observables.get(t.id);return o||(o=dPe({debugName:()=>`Configuration Key "${t.id}"`},s=>this._register(this.onDidChangeConfiguration(a=>{a.affectsConfiguration(t.fullyQualifiedId)&&s(a)})),n),this.observables.set(t.id,o)),o}_isUsingTeamDefault(t){if(!this._isTeamMember||!b0.isDefaultValueWithTeamAndInternalValue(t.defaultValue)&&!b0.isDefaultValueWithTeamValue(t.defaultValue))return!1;let n=t.defaultValue.teamDefaultValueRollout;if(n===void 0||n>=1)return!0;let o=`${t.fullyQualifiedId};${this._teamMemberUsername}`;return r._extractHashValue(o)<n}static _extractHashValue(t){let n=new iC;n.update(t);let o=n.digest().substring(0,8);return parseInt(o,16)/4294967295}isConfigured(t,n){let o=this.inspectConfig(t,n);return o?.globalValue!==void 0||o?.globalLanguageValue!==void 0||o?.workspaceFolderValue!==void 0||o?.workspaceFolderLanguageValue!==void 0||o?.workspaceValue!==void 0||o?.workspaceLanguageValue!==void 0}},b0;(t=>{function r(n){return nd(n)&&"defaultValue"in n&&"teamDefaultValue"in n}t.isDefaultValueWithTeamValue=r;function e(n){return t.isDefaultValueWithTeamValue(n)&&"internalDefaultValue"in n}t.isDefaultValueWithTeamAndInternalValue=e})(b0||={});var Yo={internal:!0},gr={internal:!0,valueIgnoredForExternals:!0},aae;function Lur(){if(!aae){aae=new Map;let e=Qa.contributes.configuration.map(n=>n.properties),t=Object.assign({},...e);for(let n in t)aae.set(n,t[n].default)}return aae}function PPe(r,e,t){let n=`${E0}.${r}`,o=Lur(),s=o.has(n),a=o.get(n);if(s){let c=b0.isDefaultValueWithTeamAndInternalValue(e)||b0.isDefaultValueWithTeamValue(e)?e.defaultValue:e;if(!AR(c,a))throw new Qt(`The default value for setting ${r} is different in packageJson and in code`)}if(s&&t?.internal)throw new Qt(`The setting ${r} is public, it therefore cannot be marked internal!`);if(s&&t?.valueIgnoredForExternals)throw new Qt(`The setting ${r} is public, it therefore cannot be restricted to internal!`);if(b0.isDefaultValueWithTeamAndInternalValue(e)||b0.isDefaultValueWithTeamValue(e)){let c=e?.teamDefaultValueRollout;if(c!==void 0&&(c<0||c>1))throw new Qt(`The rollout ratio for setting ${r} is invalid`)}let l=n.startsWith("github.copilot.advanced.")?n.substring(24):void 0;return{id:r,isPublic:s,fullyQualifiedId:n,advancedSubKey:l,defaultValue:e,options:t}}var wPe=class{constructor(){this.configs=new Map}registerConfig(e){this.configs.set(e.fullyQualifiedId,e)}},Nj=new wPe;function ER(r,e,t,n){let o={...PPe(r,t,n),configType:0,validator:e};return Nj.registerConfig(o),o}function Sr(r,e,t){let n={...PPe(r,e,t),configType:0};return Nj.registerConfig(n),n}function Lt(r,e,t,n){let o={...PPe(r,e,t),configType:1,experimentName:n?.experimentName};if(o.advancedSubKey)throw new Qt("Shared settings cannot be experiment based");return Nj.registerConfig(o),o}var om=128;var a5="XtabProvider",ae;(He=>{let r;(Be=>(Be.DebugOverrideProxyUrl=Sr("advanced.debug.overrideProxyUrl",void 0,gr),Be.DebugOverrideCAPIUrl=Sr("advanced.debug.overrideCapiUrl",void 0,gr),Be.DebugUseNodeFetchFetcher=Sr("advanced.debug.useNodeFetchFetcher",!0),Be.DebugUseNodeFetcher=Sr("advanced.debug.useNodeFetcher",!1),Be.DebugUseElectronFetcher=Sr("advanced.debug.useElectronFetcher",!0),Be.AuthProvider=Sr("advanced.authProvider","github"),Be.AuthPermissions=Sr("advanced.authPermissions","default"),Be.Enable=Sr("enable",{"*":!0,plaintext:!1,markdown:!1,scminput:!1})))(r=He.Shared||={});let e;(St=>(St.DebugOverrideChatEngine=Sr("chat.advanced.debug.overrideChatEngine",void 0,gr),St.DebugOverrideChatMaxTokenNum=Sr("chat.advanced.debug.overrideChatMaxTokenNum",0,gr),St.DebugReportFeedback=Sr("chat.advanced.debug.reportFeedback",{defaultValue:!1,teamDefaultValue:!0},gr),St.DebugCollectFetcherTelemetry=Lt("chat.advanced.debug.collectFetcherTelemetry",!0,gr),St.DebugExpUseNodeFetchFetcher=Lt("chat.advanced.debug.useNodeFetchFetcher",void 0,gr),St.DebugExpUseNodeFetcher=Lt("chat.advanced.debug.useNodeFetcher",void 0,gr),St.DebugExpUseElectronFetcher=Lt("chat.advanced.debug.useElectronFetcher",void 0,gr),St.GitHistoryRelatedFilesUsingEmbeddings=Sr("chat.advanced.suggestRelatedFilesFromGitHistory.useEmbeddings",!1),St.ProjectLabelsExpanded=Lt("chat.advanced.projectLabels.expanded",!1,Yo),St.ProjectLabelsChat=Lt("chat.advanced.projectLabels.chat",!1,Yo),St.ProjectLabelsInline=Lt("chat.advanced.projectLabels.inline",!1,Yo),St.WorkspaceMaxLocalIndexSize=Lt("chat.advanced.workspace.maxLocalIndexSize",1e5,Yo),St.WorkspaceEnableFullWorkspace=Lt("chat.advanced.workspace.enableFullWorkspace",!0,Yo),St.WorkspaceEnableCodeSearch=Lt("chat.advanced.workspace.enableCodeSearch",!0,Yo),St.WorkspaceEnableEmbeddingsSearch=Lt("chat.advanced.workspace.enableEmbeddingsSearch",!0,Yo),St.WorkspacePreferredEmbeddingsModel=Lt("chat.advanced.workspace.preferredEmbeddingsModel","",Yo),St.WorkspacePrototypeAdoCodeSearchEndpointOverride=Sr("chat.advanced.workspace.prototypeAdoCodeSearchEndpointOverride","",Yo),St.FeedbackOnChange=Sr("chat.advanced.feedback.onChange",!1,Yo),St.ReviewIntent=Sr("chat.advanced.review.intent",!1,Yo),St.NotebookSummaryExperimentEnabled=Sr("chat.advanced.notebook.summaryExperimentEnabled",!1,Yo),St.NotebookVariableFilteringEnabled=Sr("chat.advanced.notebook.variableFilteringEnabled",!1,Yo),St.NotebookAlternativeDocumentFormat=Lt("chat.advanced.notebook.alternativeFormat","xml",Yo),St.UseAlternativeNESNotebookFormat=Lt("chat.advanced.notebook.alternativeNESFormat.enabled",!1,Yo),St.TerminalToDebuggerPatterns=Sr("chat.advanced.debugTerminalCommandPatterns",[],Yo),St.InlineEditsIgnoreCompletionsDisablement=ER("chat.advanced.inlineEdits.ignoreCompletionsDisablement",bR(),!1,gr),St.InlineEditsAsyncCompletions=Lt("chat.advanced.inlineEdits.asyncCompletions",!0,gr),St.InlineEditsRevisedCacheStrategy=Lt("chat.advanced.inlineEdits.revisedCacheStrategy",!0,gr),St.InlineEditsCacheTracksRejections=Lt("chat.advanced.inlineEdits.cacheTracksRejections",!0,gr),St.InlineEditsRecentlyShownCacheEnabled=Lt("chat.advanced.inlineEdits.recentlyShownCacheEnabled",!1,gr),St.InlineEditsDebounceUseCoreRequestTime=Lt("chat.advanced.inlineEdits.debounceUseCoreRequestTime",!1,gr),St.InlineEditsYieldToCopilot=Lt("chat.advanced.inlineEdits.yieldToCopilot",!1,gr),St.InlineEditsExcludedProviders=Lt("chat.advanced.inlineEdits.excludedProviders",void 0,gr),St.InlineEditsEnableCompletionsProvider=Lt("chat.advanced.inlineEdits.completionsProvider.enabled",!1,gr),St.InlineEditsEnableGhCompletionsProvider=Lt("chat.advanced.inlineEdits.githubCompletionsProvider.enabled",!1,gr),St.InlineEditsCompletionsUrl=Lt("chat.advanced.inlineEdits.completionsProvider.url",void 0,gr),St.InlineEditsLogContextRecorderEnabled=Sr("chat.advanced.inlineEdits.logContextRecorder.enabled",!1,gr),St.InlineEditsDebounce=Lt("chat.advanced.inlineEdits.debounce",200,gr),St.InlineEditsCacheDelay=Lt("chat.advanced.inlineEdits.cacheDelay",300,gr),St.InlineEditsSubsequentCacheDelay=Lt("chat.advanced.inlineEdits.subsequentCacheDelay",void 0,gr),St.InlineEditsRebasedCacheDelay=Lt("chat.advanced.inlineEdits.rebasedCacheDelay",void 0,gr),St.InlineEditsBackoffDebounceEnabled=Lt("chat.advanced.inlineEdits.backoffDebounceEnabled",!0,gr),St.InlineEditsExtraDebounceEndOfLine=Lt("chat.advanced.inlineEdits.extraDebounceEndOfLine",0,gr),St.InlineEditsDebounceOnSelectionChange=Lt("chat.advanced.inlineEdits.debounceOnSelectionChange",void 0,gr),St.InlineEditsProviderId=Lt("chat.advanced.inlineEdits.providerId",void 0,gr),St.InlineEditsHideInternalInterface=ER("chat.advanced.inlineEdits.hideInternalInterface",bR(),!1,gr),St.InlineEditsLogCancelledRequests=ER("chat.advanced.inlineEdits.logCancelledRequests",bR(),!1,gr),St.InlineEditsUnification=Lt("chat.advanced.inlineEdits.unification",!1,gr),St.InlineEditsXtabProviderUrl=ER("chat.advanced.inlineEdits.xtabProvider.url",kj(),void 0,gr),St.InlineEditsXtabProviderApiKey=ER("chat.advanced.inlineEdits.xtabProvider.apiKey",kj(),void 0,gr),St.InlineEditsXtabProviderModelConfiguration=ER("chat.advanced.inlineEdits.xtabProvider.modelConfiguration",Kot,void 0,gr),St.InlineEditsXtabProviderModelName=Lt("chat.advanced.inlineEdits.xtabProvider.modelName",void 0,gr),St.InlineEditsInlineCompletionsEnabled=ER("chat.advanced.inlineEdits.inlineCompletions.enabled",bR(),!0,gr),St.InlineEditsXtabProviderUsePrediction=ER("chat.advanced.inlineEdits.xtabProvider.usePrediction",bR(),!0,gr),St.InlineEditsXtabProviderUseVaryingLinesAbove=Lt("chat.advanced.inlineEdits.xtabProvider.useVaryingLinesAbove",void 0,gr),St.InlineEditsXtabProviderNLinesAbove=Lt("chat.advanced.inlineEdits.xtabProvider.nLinesAbove",void 0,gr),St.InlineEditsXtabProviderNLinesBelow=Lt("chat.advanced.inlineEdits.xtabProvider.nLinesBelow",void 0,gr),St.InlineEditsXtabProviderRetryWithNMoreLinesBelow=Lt("chat.advanced.inlineEdits.xtabProvider.retryWithNMoreLinesBelow",void 0,gr),St.InlineEditsAutoExpandEditWindowLines=Lt("chat.advanced.inlineEdits.autoExpandEditWindowLines",void 0,gr),St.InlineEditsXtabNRecentlyViewedDocuments=Lt("chat.advanced.inlineEdits.xtabProvider.nRecentlyViewedDocuments",jd.recentlyViewedDocuments.nDocuments,gr),St.InlineEditsXtabRecentlyViewedDocumentsMaxTokens=Lt("chat.advanced.inlineEdits.xtabProvider.recentlyViewedDocuments.maxTokens",jd.recentlyViewedDocuments.maxTokens,gr),St.InlineEditsXtabDiffNEntries=Lt("chat.advanced.inlineEdits.xtabProvider.diffNEntries",jd.diffHistory.nEntries,gr),St.InlineEditsXtabDiffMaxTokens=Lt("chat.advanced.inlineEdits.xtabProvider.diffMaxTokens",jd.diffHistory.maxTokens,gr),St.InlineEditsXtabProviderEmitFastCursorLineChange=Lt("chat.advanced.inlineEdits.xtabProvider.emitFastCursorLineChange",!0,gr),St.InlineEditsXtabIncludeViewedFiles=Lt("chat.advanced.inlineEdits.xtabProvider.includeViewedFiles",jd.recentlyViewedDocuments.includeViewedFiles,gr),St.InlineEditsXtabPageSize=Lt("chat.advanced.inlineEdits.xtabProvider.pageSize",jd.pagedClipping.pageSize,gr),St.InlineEditsXtabIncludeTagsInCurrentFile=Lt("chat.advanced.inlineEdits.xtabProvider.includeTagsInCurrentFile",jd.currentFile.includeTags,gr),St.InlineEditsXtabCurrentFileMaxTokens=Lt("chat.advanced.inlineEdits.xtabProvider.currentFileMaxTokens",jd.currentFile.maxTokens,gr),St.InlineEditsXtabPrioritizeAboveCursor=Lt("chat.advanced.inlineEdits.xtabProvider.currentFile.prioritizeAboveCursor",jd.currentFile.prioritizeAboveCursor,gr),St.InlineEditsXtabDiffOnlyForDocsInPrompt=Lt("chat.advanced.inlineEdits.xtabProvider.diffOnlyForDocsInPrompt",jd.diffHistory.onlyForDocsInPrompt,gr),St.InlineEditsXtabDiffUseRelativePaths=Lt("chat.advanced.inlineEdits.xtabProvider.diffUseRelativePaths",jd.diffHistory.useRelativePaths,gr),St.InlineEditsXtabNNonSignificantLinesToConverge=Lt("chat.advanced.inlineEdits.xtabProvider.nNonSignificantLinesToConverge",s5.DEFAULT_DIFF_PARAMS.nLinesToConverge,gr),St.InlineEditsXtabNSignificantLinesToConverge=Lt("chat.advanced.inlineEdits.xtabProvider.nSignificantLinesToConverge",s5.DEFAULT_DIFF_PARAMS.nSignificantLinesToConverge,gr),St.InlineEditsXtabLanguageContextEnabled=Lt("chat.advanced.inlineEdits.xtabProvider.languageContext.enabled",jd.languageContext.enabled,gr),St.InlineEditsXtabLanguageContextEnabledLanguages=Sr("chat.advanced.inlineEdits.xtabProvider.languageContext.enabledLanguages",zot,gr),St.InlineEditsXtabLanguageContextMaxTokens=Lt("chat.advanced.inlineEdits.xtabProvider.languageContext.maxTokens",jd.languageContext.maxTokens,gr),St.InlineEditsXtabUseUnifiedModel=Lt("chat.advanced.inlineEdits.xtabProvider.useUnifiedModel",!1,gr),St.InlineEditsXtabProviderUseSimplifiedPrompt=Lt("chat.advanced.inlineEdits.xtabProvider.simplifiedPrompt",!1,gr),St.InlineEditsXtabProviderUseXtab275Prompting=Lt("chat.advanced.inlineEdits.xtabProvider.xtab275Prompting",!1,gr),St.InlineEditsXtabUseNes41Miniv3Prompting=Lt("chat.advanced.inlineEdits.xtabProvider.useNes41Miniv3Prompting",!1,gr),St.InlineEditsXtabCodexV21NesUnified=Lt("chat.advanced.inlineEdits.xtabProvider.codexv21nesUnified",!1,gr),St.InlineEditsXtabMaxMergeConflictLines=Lt("chat.advanced.inlineEdits.xtabProvider.maxMergeConflictLines",void 0,gr),St.InlineEditsXtabOnlyMergeConflictLines=Lt("chat.advanced.inlineEdits.xtabProvider.onlyMergeConflictLines",!1,gr),St.InlineEditsUndoInsertionFilteringEnabled=Lt("chat.advanced.inlineEdits.undoInsertionFilteringEnabled",!0,gr),St.InlineEditsDiagnosticsExplorationEnabled=Sr("chat.advanced.inlineEdits.inlineEditsDiagnosticsExplorationEnabled",!1,gr),St.EditSourceTrackingShowDecorations=Sr("chat.advanced.editSourceTracking.showDecorations",!1,Yo),St.EditSourceTrackingShowStatusBar=Sr("chat.advanced.editSourceTracking.showStatusBar",!1,Yo),St.WorkspaceRecordingEnabled=Sr("chat.advanced.localWorkspaceRecording.enabled",!1,Yo),St.EditRecordingEnabled=Sr("chat.advanced.editRecording.enabled",!1,Yo),St.InternalWelcomeHintEnabled=Sr("chat.advanced.welcomePageHint.enabled",{defaultValue:!1,internalDefaultValue:!0,teamDefaultValue:!0},gr),St.TemporalContextMaxAge=Lt("chat.advanced.temporalContext.maxAge",100,Yo),St.TemporalContextPreferSameLang=Lt("chat.advanced.temporalContext.preferSameLang",!1,Yo),St.CodeSearchAgentEnabled=Sr("chat.advanced.codesearch.agent.enabled",!0,Yo),St.AgentTemperature=Sr("chat.advanced.agent.temperature",void 0,Yo),St.InlineChatUseCodeMapper=Sr("chat.advanced.inlineChat.useCodeMapper",!1,gr),St.InstantApplyModelName=Lt("chat.advanced.instantApply.modelName","gpt-4o-instant-apply-full-ft-v66",gr),St.InstantApplyShortModelName=Lt("chat.advanced.instantApply.shortContextModelName","gpt-4o-instant-apply-full-ft-v66-short",Yo),St.InstantApplyShortContextLimit=Lt("chat.advanced.instantApply.shortContextLimit",8e3,Yo),St.EnableUserPreferences=Sr("chat.advanced.enableUserPreferences",!1,Yo),St.SweBenchAgentPrompt=Sr("chat.advanced.swebench.agentPrompt",!1,Yo),St.SummarizeAgentConversationHistoryThreshold=Sr("chat.advanced.summarizeAgentConversationHistoryThreshold",void 0,Yo),St.AgentHistorySummarizationMode=Sr("chat.advanced.agentHistorySummarizationMode",void 0,Yo),St.AgentHistorySummarizationWithPromptCache=Lt("chat.advanced.agentHistorySummarizationWithPromptCache",!1,Yo),St.AgentHistorySummarizationForceGpt41=Lt("chat.advanced.agentHistorySummarizationForceGpt41",!1,Yo),St.UseResponsesApiTruncation=Sr("chat.advanced.useResponsesApiTruncation",!1),St.EnableReadFileV2=Lt("chat.advanced.enableReadFileV2",qh),St.AskAgent=Lt("chat.advanced.enableAskAgent",{defaultValue:!1,teamDefaultValue:!0,internalDefaultValue:!0}),St.VerifyTextDocumentChanges=Lt("chat.advanced.inlineEdits.verifyTextDocumentChanges",!1,gr),St.OmitBaseAgentInstructions=Sr("chat.advanced.omitBaseAgentInstructions",!1,Yo),St.PromptFileContext=Lt("chat.advanced.promptFileContextProvider.enabled",!0),St.MultiReplaceString=Lt("chat.advanced.multiReplaceString.enabled",!1,Yo),St.VirtualToolEmbeddingRanking=Lt("chat.advanced.virtualTools.embeddingRanking",!1,Yo),St.MultiReplaceStringGrok=Lt("chat.advanced.multiReplaceStringGrok.enabled",!1,Yo),St.EnableClaudeCodeAgent=Sr("chat.advanced.claudeCode.enabled",!1),St.ClaudeCodeDebugEnabled=Sr("chat.advanced.claudeCode.debug",!1),St.Gpt5AlternativePatch=Lt("chat.advanced.gpt5AlternativePatch",!1)))(e=He.Internal||={}),He.AgentThinkingTool=Sr("chat.agent.thinkingTool",!1),He.UseResponsesApi=Lt("chat.useResponsesApi",!1),He.ResponsesApiReasoningEffort=Lt("chat.responsesApiReasoningEffort","default"),He.ResponsesApiReasoningSummary=Lt("chat.responsesApiReasoningSummary","detailed"),He.EnableChatImageUpload=Lt("chat.imageUpload.enabled",!0),He.TemporalContextInlineChatEnabled=Lt("chat.editor.temporalContext.enabled",!1),He.TemporalContextEditsEnabled=Lt("chat.edits.temporalContext.enabled",!1),He.CodeGenerationInstructions=Sr("chat.codeGeneration.instructions",[]),He.TestGenerationInstructions=Sr("chat.testGeneration.instructions",[]),He.CommitMessageGenerationInstructions=Sr("chat.commitMessageGeneration.instructions",[]),He.PullRequestDescriptionGenerationInstructions=Sr("chat.pullRequestDescriptionGeneration.instructions",[]),He.GenerateTestsCodeLens=Sr("chat.generateTests.codeLens",!1),He.SetupTests=Sr("chat.setupTests.enabled",!0),He.TypeScriptLanguageContext=Lt("chat.languageContext.typescript.enabled",!1),He.TypeScriptLanguageContextMode=Lt("chat.languageContext.typescript.items","minimal"),He.TypeScriptLanguageContextIncludeDocumentation=Lt("chat.languageContext.typescript.includeDocumentation",!1),He.TypeScriptLanguageContextCacheTimeout=Lt("chat.languageContext.typescript.cacheTimeout",500),He.TypeScriptLanguageContextFix=Lt("chat.languageContext.fix.typescript.enabled",!1),He.TypeScriptLanguageContextInline=Lt("chat.languageContext.inline.typescript.enabled",!1),He.StartDebuggingIntent=Sr("chat.startDebugging.enabled",!0),He.UseInstructionFiles=Sr("chat.codeGeneration.useInstructionFiles",!0),He.ReviewAgent=Sr("chat.reviewAgent.enabled",!0),He.CodeFeedback=Sr("chat.reviewSelection.enabled",!0),He.CodeFeedbackInstructions=Sr("chat.reviewSelection.instructions",[]),He.UseProjectTemplates=Sr("chat.useProjectTemplates",!0),He.ExplainScopeSelection=Sr("chat.scopeSelection",!1),He.EnableCodeActions=Sr("editor.enableCodeActions",!0),He.LocaleOverride=Sr("chat.localeOverride","auto"),He.TerminalChatLocation=Sr("chat.terminalChatLocation","chatView"),He.AutomaticRenameSuggestions=Sr("renameSuggestions.triggerAutomatically",!0),He.GitHistoryRelatedFilesProvider=Sr("chat.edits.suggestRelatedFilesFromGitHistory",!0),He.Test2SrcRelatedFilesProvider=Sr("chat.edits.suggestRelatedFilesForTests",!0),He.TerminalToDebuggerEnabled=Sr("chat.copilotDebugCommand.enabled",!0),He.CodeSearchAgentEnabled=Sr("chat.codesearch.enabled",!1),He.InlineEditsEnabled=Lt("nextEditSuggestions.enabled",{defaultValue:!1,teamDefaultValue:!0}),He.InlineEditsEnableDiagnosticsProvider=Lt("nextEditSuggestions.fixes",{defaultValue:!0,teamDefaultValue:!0}),He.InlineEditsAllowWhitespaceOnlyChanges=Lt("nextEditSuggestions.allowWhitespaceOnlyChanges",!0),He.NewWorkspaceCreationAgentEnabled=Sr("chat.newWorkspaceCreation.enabled",!0),He.NewWorkspaceUseContext7=Sr("chat.newWorkspace.useContext7",!1),He.SummarizeAgentConversationHistory=Sr("chat.summarizeAgentConversationHistory.enabled",!0),He.VirtualToolThreshold=Lt("chat.virtualTools.threshold",om),He.CurrentEditorAgentContext=Sr("chat.agent.currentEditorContext.enabled",!0),He.OllamaEndpoint=Sr("chat.byok.ollamaEndpoint","http://localhost:11434"),He.AzureModels=Sr("chat.azureModels",{}),He.CustomOAIModels=Sr("chat.customOAIModels",{}),He.AutoFixDiagnostics=Sr("chat.agent.autoFix",!0),He.NotebookFollowCellExecution=Sr("chat.notebook.followCellExecution.enabled",!1),He.UseAlternativeNESNotebookFormat=Lt("chat.notebook.enhancedNextEditSuggestions.enabled",!1),He.CustomInstructionsInSystemMessage=Sr("chat.customInstructionsInSystemMessage",!0),He.EnableAlternateGptPrompt=Lt("chat.alternateGptPrompt.enabled",!1),He.Gpt5AlternatePrompt=Lt("chat.gpt5AlternatePrompt","default"),He.Gpt5CodexAlternatePrompt=Lt("chat.gpt5CodexAlternatePrompt","codex"),He.GrokCodeAlternatePrompt=Lt("chat.grokCodeAlternatePrompt","default"),He.ClaudeSonnet45AlternatePrompt=Lt("chat.claudeSonnet45AlternatePrompt","default"),He.ExecutePromptEnabled=Sr("chat.executePrompt.enabled",!1),He.CompletionsFetcher=Lt("chat.completionsFetcher",void 0),He.NextEditSuggestionsFetcher=Lt("chat.nesFetcher",void 0)})(ae||={});var Mur=[];function kPe(r){return Mur.push(r),r}var cC=Me("ICopilotTokenManager");function _N(){return Math.floor(Date.now()/1e3)}var fl=Me("ICopilotTokenStore"),cae=class extends _e{constructor(){super(...arguments);this._onDidStoreUpdate=this._register(new Vt);this.onDidStoreUpdate=this._onDidStoreUpdate.event}get copilotToken(){return this._copilotToken}set copilotToken(t){let n=this._copilotToken?.token;this._copilotToken=t,n!==t?.token&&this._onDidStoreUpdate.fire()}};var Lj=["user:email"],tit=["read:user"],c5=["read:user","user:email","repo","workflow"],l5=class extends Error{constructor(){super("The authentication service is in minimal mode."),this.name="MinimalModeError"}},ft=Me("IAuthenticationService"),SR=class extends _e{constructor(t,n,o,s){super();this._logService=t;this._tokenStore=n;this._tokenManager=o;this._configurationService=s;this._onDidAuthenticationChange=this._register(new Vt);this.onDidAuthenticationChange=this._onDidAuthenticationChange.event;this._onDidAccessTokenChange=this._register(new Vt);this.onDidAccessTokenChange=this._onDidAccessTokenChange.event;this._onDidAdoAuthenticationChange=this._register(new Vt);this.onDidAdoAuthenticationChange=this._onDidAdoAuthenticationChange.event;this._isMinimalMode=dl(t=>this._configurationService.getConfigObservable(ae.Shared.AuthPermissions).read(t)==="minimal");this._register(o.onDidCopilotTokenRefresh(()=>{this._logService.debug("Handling CopilotToken refresh."),this._handleAuthChangeEvent()}))}get isMinimalMode(){return this._isMinimalMode.get()}get anyGitHubSession(){return this._anyGitHubSession}get permissiveGitHubSession(){return this._permissiveGitHubSession}get anyAdoSession(){return this._anyAdoSession}get copilotToken(){return this._tokenStore.copilotToken}async getCopilotToken(t){try{let n=await this._tokenManager.getCopilotToken(t);return this._tokenStore.copilotToken=n,this._copilotTokenError=void 0,n}catch(n){this._tokenStore.copilotToken=void 0;let o=this._copilotTokenError;throw this._copilotTokenError=n,o&&n&&o.message!==n.message&&this._onDidAuthenticationChange.fire(),n}}resetCopilotToken(t){this._tokenStore.copilotToken=void 0,this._tokenManager.resetCopilotToken(t)}async _handleAuthChangeEvent(){let t=this._anyGitHubSession,n=this._permissiveGitHubSession,o=this._anyAdoSession,s=this._tokenStore.copilotToken,a=this._copilotTokenError,l=await Promise.allSettled([this.getAnyGitHubSession({silent:!0}),this.getPermissiveGitHubSession({silent:!0}),this.getAnyAdoSession({silent:!0})]);for(let c of l)c.status==="rejected"&&this._logService.error(`Error getting a session: ${c.reason}`);if(t?.accessToken!==this._anyGitHubSession?.accessToken||n?.accessToken!==this._permissiveGitHubSession?.accessToken){this._onDidAccessTokenChange.fire(),this._logService.debug("Auth state changed, minting a new CopilotToken...");try{await this.getCopilotToken(!0)}catch{}this._logService.debug("Minted a new CopilotToken.");return}o?.accessToken!==this._anyAdoSession?.accessToken&&(this._logService.debug(`Ado auth state changed, firing event. Had token before: ${!!o?.accessToken}. Has token now: ${!!this._anyAdoSession?.accessToken}.`),this._onDidAdoAuthenticationChange.fire());try{await this.getCopilotToken()}catch{}(s?.token!==this._tokenStore.copilotToken?.token||a?.message!==this._copilotTokenError?.message)&&(this._logService.debug("CopilotToken state changed, firing event."),this._onDidAuthenticationChange.fire()),this._logService.debug("Finished handling auth change event.")}};SR=T([v(0,ue),v(1,fl),v(2,cC),v(3,Pe)],SR);var wa=Me("IAuthenticationChatUpgradeService");var ar=Me("IVSCodeExtensionContext");var u5=class extends _e{constructor(t){super();this.instantiationService=t;this.askToUpgradeAuthPermissions()}async askToUpgradeAuthPermissions(){await this._register(this.instantiationService.createInstance(uC)).run()}};u5=T([v(0,K)],u5);var uC=class extends _e{constructor(t,n,o,s){super();this._authenticationService=t;this._logService=n;this._extensionContext=o;this._authenticationChatUpgradeService=s}static{this.AUTH_UPGRADE_ASK_KEY="copilot.shownPermissiveTokenModal"}async run(){await this.waitForChatEnabled(),this.registerListeners(),await this.showPrompt()}async waitForChatEnabled(){try{if((await this._authenticationService.getCopilotToken()).isChatEnabled())return}catch(t){this._logService.error(t,"Failed to get copilot token")}await _o.toPromise(_o.filter(this._authenticationService.onDidAuthenticationChange,()=>this._authenticationService.copilotToken?.isChatEnabled()??!1))}registerListeners(){this._register(this._authenticationService.onDidAuthenticationChange(async()=>{if(!this._authenticationService.permissiveGitHubSession){if(!this._authenticationService.anyGitHubSession){this._extensionContext.globalState.update(uC.AUTH_UPGRADE_ASK_KEY,!1);return}if(DPe.window.state.focused)await this.showPrompt();else{let t=DPe.window.onDidChangeWindowState(async n=>{n.focused&&(t.dispose(),await this.showPrompt())})}}}))}async showPrompt(){this._extensionContext.globalState.get(uC.AUTH_UPGRADE_ASK_KEY,!1)||!await this._authenticationChatUpgradeService.shouldRequestPermissiveSessionUpgrade()||(await this._authenticationChatUpgradeService.showPermissiveSessionModal()?this._logService.debug("Got permissive GitHub token"):this._logService.debug("Did not get permissive GitHub token"),this._extensionContext.globalState.update(uC.AUTH_UPGRADE_ASK_KEY,!0))}};uC=T([v(0,ft),v(1,ue),v(2,ar),v(3,wa)],uC);var sue=require("vscode");var Our=class{async fetch(r,e){let t={method:e.method||"GET",headers:e.headers,signal:e.signal};e.json?(t.body=JSON.stringify(e.json),t.headers={"Content-Type":"application/json",...t.headers}):e.body&&(t.body=e.body);let n,o;e.timeout&&!e.signal&&(o=new AbortController,t.signal=o.signal,n=setTimeout(()=>{o.abort()},e.timeout));try{let s=await fetch(r,t);return n&&clearTimeout(n),s}catch(s){throw n&&clearTimeout(n),s}}},NPe=class rit{constructor(){this._telemetryBaseUrl="https://copilot-telemetry.githubusercontent.com",this._originTrackerUrl="https://origin-tracker.githubusercontent.com",this._dotcomAPIUrl=this._getDotComAPIUrl(),this._proxyBaseUrl=this._getProxyUrl(void 0),this._capiBaseUrl=this._getCAPIUrl(void 0)}updateDomains(e,t){let n=this._dotcomAPIUrl,o=this._capiBaseUrl,s=this._telemetryBaseUrl,a=this._proxyBaseUrl;return this._enterpriseUrlConfig!==t&&(this._enterpriseUrlConfig=t,this._dotcomAPIUrl=this._getDotComAPIUrl()),e?(this._proxyBaseUrl=this._getProxyUrl(e),this._capiBaseUrl=this._getCAPIUrl(e),this._telemetryBaseUrl=e.endpoints.telemetry||"https://copilot-telemetry.githubusercontent.com",e.endpoints["origin-tracker"]&&(this._originTrackerUrl=e.endpoints["origin-tracker"])):(this._capiBaseUrl="https://api.githubcopilot.com",this._telemetryBaseUrl="https://copilot-telemetry.githubusercontent.com"),{dotcomUrlChanged:n!==this._dotcomAPIUrl,capiUrlChanged:o!==this._capiBaseUrl,telemetryUrlChanged:s!==this._telemetryBaseUrl,proxyUrlChanged:a!==this._proxyBaseUrl}}_getDotComAPIUrl(){if(this._enterpriseUrlConfig)try{let e=new URL(this._enterpriseUrlConfig);return`${e.protocol}//api.${e.hostname}${e.port?":"+e.port:""}`}catch(e){return console.warn("Failed to parse enterprise URL config:",this._enterpriseUrlConfig,e),"https://api.github.com"}return"https://api.github.com"}_getCAPIUrl(e){return e&&e.endpoints.api||"https://api.githubcopilot.com"}_getProxyUrl(e){return e&&e.endpoints.proxy||rit.DEFAULT_PROXY_BASE_URL}get proxyBaseURL(){return this._proxyBaseUrl}get capiBaseURL(){return this._capiBaseUrl}get capiChatURL(){return`${this._capiBaseUrl}/chat/completions`}get capiResponsesURL(){return`${this._capiBaseUrl}/responses`}get capiEmbeddingsURL(){return`${this._capiBaseUrl}/embeddings`}get capiModelsURL(){return`${this._capiBaseUrl}/models`}get capiAutoModelURL(){return`${this.capiModelsURL}/session`}get embeddingsModelURL(){return`${this.embeddingsURL}/models`}get chunksURL(){return`${this.dotComAPIURL}/chunks`}get embeddingsURL(){return`${this.dotComAPIURL}/embeddings`}get embeddingsCodeSearchURL(){return`${this.dotComAPIURL}/embeddings/code/search`}get telemetryURL(){return`${this._telemetryBaseUrl}/telemetry`}get remoteAgentsURL(){return`${this._capiBaseUrl}/agents`}get listSkillsURL(){return`${this._capiBaseUrl}/skills`}get searchSkillURL(){return`${this._capiBaseUrl}/search`}get contentExclusionURL(){return`${this._dotcomAPIUrl}/copilot_internal/content_exclusion`}get copilotUserInfoURL(){return`${this._dotcomAPIUrl}/copilot_internal/user`}get tokenURL(){return this._dotcomAPIUrl+"/copilot_internal/v2/token"}get tokenNoAuthURL(){return`${this._dotcomAPIUrl}/copilot_internal/v2/nltoken`}get dotComAPIURL(){return this._dotcomAPIUrl}get originTrackerURL(){return this._originTrackerUrl}get chatAttachmentUploadURL(){return"https://uploads.github.com/copilot/chat/attachments"}};NPe.DEFAULT_PROXY_BASE_URL="https://copilot-proxy.githubusercontent.com",NPe.CAPI_MODEL_LAB_URL="https://api-model-lab.githubcopilot.com";var uae=NPe,Bur=`The \u201C@vscode/copilot-api\u201D npm Module Terms and Conditions ("Terms") are a legal agreement between you (either as an individual or on behalf of an entity) and GitHub, Inc. regarding your use of \u201C@vscode/copilot-api\u201D npm library and associated documentation (collectively, the "Software"). By using the Software, you accept these Terms. Please read all of these Terms; in many cases, provisions set forth later in the Terms limit and qualify provisions set forth earlier in the Terms. If you do not accept these Terms, do not download, install, use, or copy the Software.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/dist/extension.js:517:`,Zr=(r=>(r.CopilotToken="CopilotToken",r.CopilotNLToken="CopilotNLToken",r.ChatCompletions="ChatCompletions",r.ChatResponses="ChatResponses",r.ProxyCompletions="ProxyCompletions",r.ProxyChatCompletions="ProxyChatCompletions",r.RemoteAgent="RemoteAgent",r.RemoteAgentChat="RemoteAgentChat",r.CodeReviewAgent="CodeReviewAgent",r.CAPIEmbeddings="CAPIEmbeddings",r.DotcomEmbeddings="DotcomEmbeddings",r.EmbeddingsModels="EmbeddingsModels",r.Models="Models",r.AutoModels="AutoModels",r.Chunks="Chunks",r.EmbeddingsCodeSearch="EmbeddingsCodeSearch",r.ListSkills="ListSkills",r.SearchSkill="SearchSkill",r.ContentExclusion="ContentExclusion",r.Telemetry="Telemetry",r.CopilotUserInfo="CopilotUserInfo",r.ModelPolicy="ModelPolicy",r.ListModel="ListModel",r.SnippyMatch="SnippyMatch",r.SnippyFilesForMatch="SnippyFlesForMatch",r.CodingGuidelines="CodingGuidelines",r.EmbeddingsIndex="EmbedingsIndex",r.ChatAttachmentUpload="ChatAttachmentUpload",r))(Zr||{});async function Uur(r){if(!r)return;let e=await crypto.subtle.importKey("raw",new TextEncoder().encode(r),{name:"HMAC",hash:"SHA-256"},!1,["sign"]),t=Math.floor(Date.now()/1e3).toString(),n=new TextEncoder().encode(t),o=await crypto.subtle.sign("HMAC",e,n),s=Array.from(new Uint8Array(o)).map(a=>a.toString(16).padStart(2,"0")).join("");return`${t}.${s}`}function Qur(r){return new Set(["ChatCompletions","ChatResponses","CAPIEmbeddings","Models","RemoteAgent","CodeReviewAgent","RemoteAgentChat","ListSkills","SearchSkill","ModelPolicy","ListModel","AutoModels"]).has(r)}var nit=class{constructor(r,e,t,n,o){this._extensionInfo=r,this._forceDevIntegration=!1,this._licenseCheckSucceeded=!1,e&&e===Fur&&(this._licenseCheckSucceeded=!0),this._domainService=new uae,this._fetcherService=t??new Our,this._hmacSecret=n,this._forceDevIntegration=!!o&&!!n}updateDomains(r,e){return r&&r.sku&&(this._copilotSku=r.sku),this._domainService.updateDomains(r,e)}async makeRequest(r,e){let{type:t}=e;switch(await this._mixinHeaders(r,e),t){case"CopilotToken":return this._fetcherService.fetch(this._domainService.tokenURL,r);case"CopilotNLToken":return this._fetcherService.fetch(this._domainService.tokenNoAuthURL,r);case"ProxyCompletions":return this._fetcherService.fetch(`${this._domainService.proxyBaseURL}/v1/engines/gpt-4o-copilot/completions`,r);case"ProxyChatCompletions":return this._fetcherService.fetch(`${this._domainService.proxyBaseURL}/chat/completions`,r);case"RemoteAgent":return this._fetcherService.fetch(this._domainService.remoteAgentsURL,r);case"CodeReviewAgent":return this._fetcherService.fetch(`${this._domainService.remoteAgentsURL}/github-code-review`,r);case"CAPIEmbeddings":return this._fetcherService.fetch(this._domainService.capiEmbeddingsURL,r);case"DotcomEmbeddings":return this._fetcherService.fetch(this._domainService.embeddingsURL,r);case"EmbeddingsModels":return this._fetcherService.fetch(this._domainService.embeddingsModelURL,r);case"Chunks":return this._fetcherService.fetch(this._domainService.chunksURL,r);case"EmbeddingsCodeSearch":return this._fetcherService.fetch(this._domainService.embeddingsCodeSearchURL,r);case"ListSkills":return this._fetcherService.fetch(this._domainService.listSkillsURL,r);case"Telemetry":return this._fetcherService.fetch(this._domainService.telemetryURL,r);case"CopilotUserInfo":return this._fetcherService.fetch(this._domainService.copilotUserInfoURL,r);case"SnippyMatch":return this._fetcherService.fetch(`${this._domainService.originTrackerURL}/twirp/github.snippy.v1.SnippyAPI/Match`,r);case"SnippyFlesForMatch":return this._fetcherService.fetch(`${this._domainService.originTrackerURL}/twirp/github.snippy.v1.SnippyAPI/FilesForMatch`,r);case"EmbedingsIndex":if(!("repoWithOwner"in e))throw new Error("repoWithOwner is required for EmbeddingsIndex request");return this._fetcherService.fetch(`${this._domainService.dotComAPIURL}/repos/${e.repoWithOwner}/copilot_internal/embeddings_index`,r);case"CodingGuidelines":if(!("repoWithOwner"in e))throw new Error("repoWithOwner is required for CodingGuidelines request");return this._fetcherService.fetch(`${this._domainService.dotComAPIURL}/repos/${e.repoWithOwner}/copilot_internal/coding_guidelines`,r);case"EmbeddingsModels":return this._fetcherService.fetch(this._domainService.embeddingsModelURL,r);case"AutoModels":return this._fetcherService.fetch(this._domainService.capiAutoModelURL,r);case"Models":return"isModelLab"in e&&e.isModelLab?this._fetcherService.fetch(`${uae.CAPI_MODEL_LAB_URL}/models`,r):this._fetcherService.fetch(this._domainService.capiModelsURL,r);case"ChatCompletions":return"isModelLab"in e&&e.isModelLab?this._fetcherService.fetch(`${uae.CAPI_MODEL_LAB_URL}/chat/completions`,r):this._fetcherService.fetch(this._domainService.capiChatURL,r);case"ChatResponses":return"isModelLab"in e&&e.isModelLab?this._fetcherService.fetch(`${uae.CAPI_MODEL_LAB_URL}/responses`,r):this._fetcherService.fetch(this._domainService.capiResponsesURL,r);case"ContentExclusion":if(!("repos"in e))throw new Error("Repos are required for ContentExclusion request");return this._fetcherService.fetch(this._prepareContentExclusionUrl(e.repos),r);case"RemoteAgentChat":return"slug"in e&&e.slug?this._fetcherService.fetch(`${this._domainService.remoteAgentsURL}/${e.slug}?chat`,r):this._fetcherService.fetch(`${this._domainService.remoteAgentsURL}/chat`,r);case"SearchSkill":if(!("slug"in e))throw new Error("Skill slug is required for SearchSkill request");return this._fetcherService.fetch(`${this._domainService.searchSkillURL}/${e.slug}`,r);case"ModelPolicy":if(!("modelId"in e))throw new Error("Model ID is required for ModelPolicy request");return this._fetcherService.fetch(`${this._domainService.capiModelsURL}/${e.modelId}/policy`,r);case"ListModel":if(!("modelId"in e))throw new Error("Model ID is required for ListModel request");return this._fetcherService.fetch(`${this._domainService.capiModelsURL}/${e.modelId}`,r);case"ChatAttachmentUpload":if(!("uploadName"in e)||!("mimeType"in e))throw new Error("uploadName and mimeType are required for ChatAttachmentUpload request");return this._fetcherService.fetch(`${this._domainService.chatAttachmentUploadURL}?name=${e.uploadName}&content_type=${e.mimeType}`,r);default:throw new Error(`Unsupported request type: ${t}`)}}_prepareContentExclusionUrl(r){let e=r.join(","),t=new URL(this._domainService.contentExclusionURL);return r.length!==0&&t.searchParams.set("repos",e),t.searchParams.set("scope","repo"),t.toString()}async _mixinHeaders(r,e){if(!Qur(e.type))return;let t=r.headers||{};t["X-GitHub-Api-Version"]="2025-08-20",t["VScode-SessionId"]=this._extensionInfo.sessionId,t["VScode-MachineId"]=this._extensionInfo.machineId,t["Editor-Plugin-Version"]=`copilot-chat/${this._extensionInfo.version}`,t["Editor-Version"]=`vscode/${this._extensionInfo.vscodeVersion}`;let n="code-oss";this._forceDevIntegration&&this._hmacSecret?n="vscode-chat-dev":this._copilotSku==="no_auth_limited_copilot"?n="vscode-nl":this._licenseCheckSucceeded&&this._extensionInfo.buildType==="prod"?n="vscode-chat":this._extensionInfo.buildType==="dev"&&this._hmacSecret&&(n="vscode-chat-dev"),n==="vscode-chat-dev"&&(t["Request-Hmac"]=await Uur(this._hmacSecret)),t["Copilot-Integration-Id"]=n,r.headers=t}get copilotTelemetryURL(){return this._domainService.telemetryURL}get dotcomAPIURL(){return this._domainService.dotComAPIURL}get capiPingURL(){return`${this._domainService.capiBaseURL}/_ping`}};var oit=`I have read and agree to the following license terms:
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/dist/extension.js:591:Reason: {1}`,r.requestId,r.reason)};case"filtered":case"promptFiltered":return{message:rDe(r.category),responseIsFiltered:!0,level:lke.Info};case"agent_unauthorized":return{message:gs.t("Sorry, something went wrong.")};case"agent_failed_dependency":return{message:r.reason};case"length":return{message:gs.t("Sorry, the response hit the length limit. Please rephrase your prompt.")};case"notFound":return{message:gs.t("Sorry, the resource was not found.")};case"unknown":return{message:gs.t("Sorry, no response was returned.")};case"extensionBlocked":return{message:gs.t("Sorry, something went wrong.")};case"invalid_stateful_marker":return{message:gs.t("Your chat session state is invalid, please start a new chat.")}}}function rDe(r,e=!0){switch(r){case"snippy":return e?gs.t({message:"Sorry, the response matched public code so it was blocked. Please rephrase your prompt. [Learn more](https://aka.ms/copilot-chat-filtered-docs).",comment:["{Locked='](https://aka.ms/copilot-chat-filtered-docs)'}"]}):gs.t("Sorry, the response matched public code so it was blocked. Please rephrase your prompt.");case"prompt":return e?gs.t({message:"Sorry, your prompt was filtered by the Responsible AI Service. Please rephrase your prompt and try again. [Learn more](https://aka.ms/copilot-chat-filtered-docs).",comment:["{Locked='](https://aka.ms/copilot-chat-filtered-docs)'}"]}):gs.t("Sorry, your prompt was filtered by the Responsible AI Service. Please rephrase your prompt and try again.");default:return e?gs.t({message:"Sorry, the response was filtered by the Responsible AI Service. Please rephrase your prompt and try again. [Learn more](https://aka.ms/copilot-chat-filtered-docs).",comment:["{Locked='](https://aka.ms/copilot-chat-filtered-docs)'}"]}):gs.t("Sorry, the response was filtered by the Responsible AI Service. Please rephrase your prompt and try again.")}}var Rle={message:"Canceled"},H5={errorDetails:Rle};var wat=require("async_hooks");var sd=class r{static{this.chatRequestScheme="ccreq"}static buildUri(e,t="markdown"){let n;return t==="markdown"?n="copilotmd":t==="json"?n="json":n="request.json",e.kind==="latest"?`${r.chatRequestScheme}:latest.${n}`:`${r.chatRequestScheme}:${e.id}.${n}`}static parseUri(e){if(e===this.buildUri({kind:"latest"},"markdown"))return{data:{kind:"latest"},format:"markdown"};if(e===this.buildUri({kind:"latest"},"json"))return{data:{kind:"latest"},format:"json"};if(e===this.buildUri({kind:"latest"},"rawrequest"))return{data:{kind:"latest"},format:"rawrequest"};let t=e.match(/ccreq:([^\s]+)\.copilotmd/);if(t)return{data:{kind:"request",id:t[1]},format:"markdown"};let n=e.match(/ccreq:([^\s]+)\.request\.json/);if(n)return{data:{kind:"request",id:n[1]},format:"rawrequest"};let o=e.match(/ccreq:([^\s]+)\.json/);if(o)return{data:{kind:"request",id:o[1]},format:"json"}}static findAllUris(e){let t=/(ccreq:[^\s]+\.(copilotmd|json|request\.json))/g;return[...e.matchAll(t)].map(n=>{let o=n[1];return{uri:o,range:new et(n.index,n.index+o.length)}})}};var Ko=Me("IRequestLogger");var Rat=new wat.AsyncLocalStorage,wle=class extends _e{get promptRendererTracing(){return!1}captureInvocation(e,t){return Rat.run(e,()=>t())}logChatRequest(e,t,n){return new oDe(this,e,t,n)}logCompletionRequest(e,t,n,o){return new nDe(this,e,t,n,o)}enableWorkspaceEditTracing(){}disableWorkspaceEditTracing(){}get currentRequest(){return Rat.getStore()}},Ple=class{constructor(e,t,n,o){this._logbook=e;this._debugName=t;this._chatEndpoint=n;this._chatParams=o;this._timeToFirstToken=void 0;this._time=new Date}markTimeToFirstToken(e){this._timeToFirstToken=e}resolveWithCancelation(){this._logbook.addEntry({type:"ChatMLCancelation",debugName:this._debugName,chatEndpoint:this._chatEndpoint,chatParams:this._chatParams,startTime:this._time,endTime:new Date})}},nDe=class extends Ple{constructor(t,n,o,s,a){super(t,n,o,s);this.requestId=a}resolve(t){if(t.isOk()){let n=t.val.choices.at(0)?.text;oa(n!==void 0,"Completion with empty choices"),this._logbook.addEntry({type:"CompletionSuccess",debugName:this._debugName,chatEndpoint:this._chatEndpoint,chatParams:this._chatParams,startTime:this._time,endTime:new Date,timeToFirstToken:this._timeToFirstToken,result:{type:"success",value:n,requestId:this.requestId}})}else this._logbook.addEntry({type:"CompletionFailure",debugName:this._debugName,chatEndpoint:this._chatEndpoint,chatParams:this._chatParams,startTime:this._time,endTime:new Date,timeToFirstToken:this._timeToFirstToken,result:{type:t.err,requestId:this.requestId}})}},oDe=class extends Ple{constructor(e,t,n,o){super(e,t,n,o)}resolve(e,t){e.type==="success"?this._logbook.addEntry({type:"ChatMLSuccess",debugName:this._debugName,usage:e.usage,chatEndpoint:this._chatEndpoint,chatParams:this._chatParams,startTime:this._time,endTime:new Date,timeToFirstToken:this._timeToFirstToken,result:e,deltas:t}):this._logbook.addEntry({type:e.type==="canceled"?"ChatMLCancelation":"ChatMLFailure",debugName:this._debugName,chatEndpoint:this._chatEndpoint,chatParams:this._chatParams,startTime:this._time,endTime:new Date,timeToFirstToken:this._timeToFirstToken,result:e})}};var kle=class{constructor(e){this._progress=e;this._items=[]}get items(){return this._items}report(e){this._items.push(e),this._progress.report(e)}};function iDe(r,e){return e&&(r.stack||r.stacktrace)?Po("stackTrace.format","{0}: {1}",kat(r),Pat(r.stack)||Pat(r.stacktrace)):kat(r)}function Pat(r){return Array.isArray(r)?r.join(`
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/dist/extension.js:619:`+JSON.stringify(r.capiError):"Rate limit exceeded",rateLimitKey:"",retryAfter:void 0,capiError:r.capiError}:r}var rp=class extends Wc{constructor(t,n,o,s,a,l,c,u,d,p,f,m,h,g){super(t,a,l,s,c,u,d,p,f,m,h,g);this.modelMetadata=t;this._apiKey=n;this._modelUrl=o;this.instantiationService=f}createRequestBody(t){if(this.useResponsesApi){t.ignoreStatefulMarker=!1;let n=super.createRequestBody(t);return n.store=!0,n.n=void 0,n.stream_options=void 0,this.modelMetadata.capabilities.supports.thinking||(n.reasoning=void 0,n.include=void 0),n.previous_response_id&&!n.previous_response_id.startsWith("resp_")&&(n.previous_response_id=void 0),n}else{let n=(s,a)=>{a&&a.id&&(s.cot_id=a.id,s.cot_summary=Array.isArray(a.text)?a.text.join(""):a.text)};return tue(t,this.model,n)}}interceptBody(t){super.interceptBody(t),t?.tools?.length===0&&delete t.tools,t?.tools&&(t.tools=t.tools.map(n=>(Ydt(n)&&n.function.parameters===void 0&&(n.function.parameters={type:"object",properties:{}}),n))),t&&(this.modelMetadata.capabilities.supports.thinking&&(delete t.temperature,t.max_completion_tokens=t.max_tokens,delete t.max_tokens),delete t.max_tokens,this.useResponsesApi||(t.stream_options={include_usage:!0}))}get urlOrRequestMetadata(){return this._modelUrl}getExtraHeaders(){let t={"Content-Type":"application/json"};return this._modelUrl.includes("openai.azure")?t["api-key"]=this._apiKey:t.Authorization=`Bearer ${this._apiKey}`,t}async acceptChatPolicy(){return!0}cloneWithTokenOverride(t){let n={...this.modelMetadata,maxInputTokens:t};return this.instantiationService.createInstance(rp,n,this._apiKey,this._modelUrl)}async makeChatRequest2(t,n){let o={...t,ignoreStatefulMarker:!1},s=await super.makeChatRequest2(o,n);return s.type==="invalid_stateful_marker"&&(s=await this._makeChatRequest2({...t,ignoreStatefulMarker:!0},n)),Dyr(s)}};rp=T([v(3,rr),v(4,Xi),v(5,Or),v(6,De),v(7,ft),v(8,Vc),v(9,Ki),v(10,K),v(11,Pe),v(12,nt),v(13,ue)],rp);var np=require("vscode");function vl(r){return typeof r=="object"&&r?.back===!0}var MU=class{constructor(e,t,n){this._configurationService=e;this._vendor=t;this._provider=n;this._configKey=ae.CustomOAIModels;this._forceRequiresAPIKey=!1;t==="azure"&&(this._forceRequiresAPIKey=!0,this._configKey=ae.AzureModels)}async configureModelOrUpdateAPIKey(){let e=[{label:"$(key) Manage API Key",detail:"Update or configure the API key for this provider",action:"apiKey"},{label:"$(settings-gear) Configure Models",detail:"Add, edit, or remove model configurations",action:"configureModels"}],t=np.window.createQuickPick();t.title=`Manage ${this._vendor==="azure"?"Azure":"Custom OpenAI"} Provider`,t.placeholder="Choose an action",t.items=e,t.ignoreFocusOut=!0;let n=await new Promise(o=>{t.onDidAccept(()=>{let s=t.selectedItems[0];o(s),t.hide()}),t.onDidHide(()=>{o(void 0)}),t.show()});if(n?.action==="apiKey")return this._provider.updateAPIKey();if(n?.action==="configureModels")return this.configure(!1)}async configure(e){for(;;){let t=this._configurationService.getConfig(this._configKey),n=[];for(let[a,l]of Object.entries(t))n.push({label:l.name,description:a,detail:`$(arrow-up) ${l.maxInputTokens} $(arrow-down) ${l.maxOutputTokens}${l.toolCalling?" \u2022 Tools":""}${l.vision?" \u2022 Vision":""}${l.thinking?" \u2022 Thinking":""}`,modelId:a,action:"edit"});if(n.length===0&&e){let a=await this._configureModel();if(a){let l={...t,[a.id]:a.config};await this._configurationService.setConfig(this._configKey,l)}return}n.length>0&&n.push({label:"",kind:-1}),n.push({label:"$(add) Add New Model",detail:"Create a new Custom OAI model configuration",action:"add"});let o=np.window.createQuickPick();o.title="Custom OAI Models Configuration",o.placeholder="Select a model to edit or add a new one",o.items=n,o.ignoreFocusOut=!0,o.buttons=n.length>1?[np.QuickInputButtons.Back]:[];let s=await new Promise(a=>{let l=new yt;l.add(o.onDidTriggerButton(c=>{c===np.QuickInputButtons.Back&&(a({back:!0}),o.hide())})),l.add(o.onDidAccept(()=>{let c=o.selectedItems[0];a(c),o.hide()})),l.add(o.onDidHide(()=>{a(void 0),l.dispose()})),o.show()});if(!s||vl(s))return;if(s.action==="add"){let a=await this._configureModel();if(a){let l={...t,[a.id]:a.config};await this._configurationService.setConfig(this._configKey,l)}}else if(s.action==="edit"&&s.modelId){let a=await this._editModel(s.modelId,t[s.modelId]);if(a){if(a.action==="update"){let l={...t,[a.id]:a.config};await this._configurationService.setConfig(this._configKey,l)}else if(a.action==="delete"){let l={...t};delete l[s.modelId],await this._configurationService.setConfig(this._configKey,l)}}}}}async _configureModel(){let e=await this._createInputBoxWithBackButton({title:"Add Custom OAI Model - Model ID",prompt:"Enter a unique identifier for this model",placeHolder:"e.g., my-custom-gpt-4",validateInput:l=>l.trim()?this._configurationService.getConfig(this._configKey)[l.trim()]?"A model with this ID already exists":null:"Model ID cannot be empty"});if(!e||vl(e))return;let t=await this._createInputBoxWithBackButton({title:"Add Custom OAI Model - Display Name",prompt:"Enter a display name for this model",placeHolder:"e.g., My Custom GPT-4",validateInput:l=>l.trim()?null:"Model name cannot be empty"});if(!t||vl(t))return;let n=await this._createInputBoxWithBackButton({title:"Add Custom OAI Model - API URL",prompt:"Enter the API endpoint URL",placeHolder:"e.g., https://api.openai.com or https://my-api.example.com/v1",validateInput:l=>{if(!l.trim())return"URL cannot be empty";try{return new URL(l.trim()),null}catch{return"Please enter a valid URL"}}});if(!n||vl(n))return;let o=await this._selectCapabilities();if(!o||vl(o))return;let s=await this._configureTokenLimits();if(!s||vl(s))return;let a={name:t.trim(),url:n.trim(),toolCalling:o.toolCalling,vision:o.vision,thinking:o.thinking,maxInputTokens:s.maxInputTokens,maxOutputTokens:s.maxOutputTokens,...this._forceRequiresAPIKey?{}:{requiresAPIKey:o.requiresAPIKey}};return{id:e.trim(),config:a}}async _editModel(e,t){let n=[{label:"$(edit) Edit Model",detail:"Modify the model configuration"},{label:"$(trash) Delete Model",detail:"Remove this model configuration"}],o=np.window.createQuickPick();o.title=`Edit Model: ${t.name}`,o.placeholder="Choose an action",o.items=n,o.ignoreFocusOut=!0,o.buttons=[np.QuickInputButtons.Back];let s=await new Promise(l=>{let c=new yt;c.add(o.onDidTriggerButton(u=>{u===np.QuickInputButtons.Back&&(l({back:!0}),o.hide())})),c.add(o.onDidAccept(()=>{let u=o.selectedItems[0];l(u),o.hide()})),c.add(o.onDidHide(()=>{l(void 0),c.dispose()})),o.show()});if(!s||vl(s))return;if(s.label.includes("Delete"))return await np.window.showWarningMessage(`Are you sure you want to delete the model "${t.name}"?`,{modal:!0},"Delete")==="Delete"?{action:"delete",id:e}:void 0;let a=await this._editModelConfig(t);if(a&&!vl(a))return{action:"update",id:e,config:a}}async _editModelConfig(e){let t=await this._createInputBoxWithBackButton({title:"Edit Model - Display Name",prompt:"Enter a display name for this model",placeHolder:"e.g., My Custom GPT-4",value:e.name,validateInput:a=>a.trim()?null:"Model name cannot be empty"});if(!t||vl(t))return vl(t)?t:void 0;let n=await this._createInputBoxWithBackButton({title:"Edit Model - API URL",prompt:"Enter the API endpoint URL",placeHolder:"e.g., https://api.openai.com or https://my-api.example.com/v1",value:e.url,validateInput:a=>{if(!a.trim())return"URL cannot be empty";try{return new URL(a.trim()),null}catch{return"Please enter a valid URL"}}});if(!n||vl(n))return vl(n)?n:void 0;let o=await this._selectCapabilities({toolCalling:e.toolCalling,vision:e.vision,thinking:e.thinking??!1,requiresAPIKey:e.requiresAPIKey??!0});if(!o||vl(o))return vl(o)?o:void 0;let s=await this._configureTokenLimits({maxInputTokens:e.maxInputTokens,maxOutputTokens:e.maxOutputTokens});return!s||vl(s)?vl(s)?s:void 0:{...e,name:t.trim(),url:n.trim(),toolCalling:o.toolCalling,vision:o.vision,thinking:o.thinking,maxInputTokens:s.maxInputTokens,maxOutputTokens:s.maxOutputTokens,...this._forceRequiresAPIKey?{}:{requiresAPIKey:o.requiresAPIKey}}}async _selectCapabilities(e){let t={toolCalling:e?.toolCalling??!1,vision:e?.vision??!1,thinking:e?.thinking??!1,requiresAPIKey:this._forceRequiresAPIKey||(e?.requiresAPIKey??!0)},n=[{label:"Tool Calling",picked:t.toolCalling},{label:"Vision",picked:t.vision},{label:"Thinking",picked:t.thinking}];this._forceRequiresAPIKey||n.push({label:"Requires API Key",picked:t.requiresAPIKey});let o=np.window.createQuickPick();o.title="Model Capabilities",o.placeholder="Select model capabilities (use space to toggle, press Enter to confirm)",o.items=n,o.canSelectMany=!0,o.ignoreFocusOut=!0,o.buttons=[np.QuickInputButtons.Back],o.selectedItems=n.filter(a=>a.picked);let s=await new Promise(a=>{let l=new yt;l.add(o.onDidTriggerButton(c=>{c===np.QuickInputButtons.Back&&(a({back:!0}),o.hide())})),l.add(o.onDidAccept(()=>{let c=o.selectedItems;a([...c]),o.hide()})),l.add(o.onDidChangeSelection(c=>{t.toolCalling=c.some(u=>u.label.includes("Tool Calling")),t.vision=c.some(u=>u.label.includes("Vision")),t.thinking=c.some(u=>u.label.includes("Thinking")),this._forceRequiresAPIKey||(t.requiresAPIKey=c.some(u=>u.label.includes("Requires API Key"))),c.forEach(u=>{u.label.includes("Tool Calling")?u.label="Tool Calling":u.label.includes("Vision")?u.label="Vision":u.label.includes("Thinking")?u.label="Thinking":u.label.includes("Requires API Key")&&(u.label="Requires API Key")})})),l.add(o.onDidHide(()=>{a(void 0),l.dispose()})),o.show()});return!s||vl(s)?vl(s)?s:void 0:t}async _configureTokenLimits(e){let t=await this._createInputBoxWithBackButton({title:"Model Token Limits - Max Input Tokens",prompt:"Enter the maximum number of input tokens",placeHolder:"e.g., 128000",value:e?.maxInputTokens?.toString()||"128000",validateInput:o=>{let s=parseInt(o.trim());return isNaN(s)||s<=0?"Please enter a positive number":null}});if(!t||vl(t))return vl(t)?t:void 0;let n=await this._createInputBoxWithBackButton({title:"Model Token Limits - Max Output Tokens",prompt:"Enter the maximum number of output tokens",placeHolder:"e.g., 4096",value:e?.maxOutputTokens?.toString()||"4096",validateInput:o=>{let s=parseInt(o.trim());return isNaN(s)||s<=0?"Please enter a positive number":null}});return!n||vl(n)?vl(n)?n:void 0:{maxInputTokens:parseInt(t.trim()),maxOutputTokens:parseInt(n.trim())}}_createInputBoxWithBackButton(e){let t=new yt,n=t.add(np.window.createInputBox());return n.ignoreFocusOut=!0,n.title=e.title,n.password=e.password||!1,n.prompt=e.prompt,n.placeholder=e.placeHolder,n.value=e.value||"",n.buttons=[np.QuickInputButtons.Back],new Promise(o=>{t.add(n.onDidTriggerButton(s=>{s===np.QuickInputButtons.Back&&(o({back:!0}),t.dispose())})),t.add(n.onDidAccept(async()=>{let s=n.value;if(e.validateInput){let a=e.validateInput(s);if(a){n.validationMessage=await a||void 0;return}}o(s),t.dispose()})),t.add(n.onDidHide(()=>{o(void 0),t.dispose()})),n.show()})}};function Nyr(r,e){return e.includes("/chat/completions")?e:(e.endsWith("/")&&(e=e.slice(0,-1)),/\/v\d+$/.test(e)?`${e}/chat/completions`:`${e}/v1/chat/completions`)}var Xb=class{constructor(e,t,n,o,s){this._byokStorageService=e;this._configurationService=t;this._logService=n;this._instantiationService=o;this._experimentationService=s;this.authType=1;this.providerName=Xb.providerName;this._lmWrapper=this._instantiationService.createInstance(UC)}static{this.providerName="CustomOAI"}getConfigKey(){return ae.CustomOAIModels}resolveUrl(e,t){return Nyr(e,t)}getUserModelConfig(){return this._configurationService.getConfig(this.getConfigKey())}requiresAPIKey(e){return this.getUserModelConfig()[e]?.requiresAPIKey!==!1}async getAllModels(){let e=this.getUserModelConfig(),t={};for(let[n,o]of Object.entries(e))t[n]={name:o.name,url:this.resolveUrl(n,o.url),toolCalling:o.toolCalling,vision:o.vision,maxInputTokens:o.maxInputTokens,maxOutputTokens:o.maxOutputTokens,thinking:o.thinking,editTools:o.editTools};return t}async getModelsWithAPIKeys(e){let t=await this.getAllModels(),n={};for(let[o,s]of Object.entries(t)){if(!this.requiresAPIKey(o)){n[o]=s;continue}let l=await this._byokStorageService.getAPIKey(this.providerName,o);!e&&!l&&(l=await qN(`${this.providerName} - ${o}`,!1),l&&await this._byokStorageService.storeAPIKey(this.providerName,l,1,o)),l&&(n[o]=s)}return n}createModelInfo(e,t){return{id:e,url:t.url||"",name:t.name,detail:this.providerName,version:"1.0.0",maxOutputTokens:t.maxOutputTokens,maxInputTokens:t.maxInputTokens,family:this.providerName,tooltip:`${t.name} is contributed via the ${this.providerName} provider.`,capabilities:{toolCalling:t.toolCalling,imageInput:t.vision,editTools:t.editTools},thinking:t.thinking||!1}}async provideLanguageModelChatInformation(e,t){try{let n=await this.getModelsWithAPIKeys(e.silent);return Object.keys(n).length===0&&!e.silent&&(await new MU(this._configurationService,this.providerName.toLowerCase(),this).configure(!0),n=await this.getModelsWithAPIKeys(e.silent)),Object.entries(n).map(([o,s])=>this.createModelInfo(o,s))}catch{return[]}}async provideLanguageModelChatResponse(e,t,n,o,s){let a=this.requiresAPIKey(e.id),l;if(a&&(l=await this._byokStorageService.getAPIKey(this.providerName,e.id),!l))throw this._logService.error(`No API key found for model ${e.id}`),new Error(`No API key found for model ${e.id}`);let c=Mj(e.id,this.providerName,void 0,{maxInputTokens:e.maxInputTokens,maxOutputTokens:e.maxOutputTokens,toolCalling:!!e.capabilities?.toolCalling||!1,vision:!!e.capabilities?.imageInput||!1,name:e.name,url:e.url,thinking:e.thinking,editTools:e.capabilities.editTools?.filter(Dle)}),u=this._instantiationService.createInstance(rp,c,l??"",e.url);return this._lmWrapper.provideLanguageModelResponse(u,t,n,n.requestInitiator,o,s)}async provideTokenCount(e,t,n){let o=this.requiresAPIKey(e.id),s;if(o&&(s=await this._byokStorageService.getAPIKey(this.providerName,e.id),!s))throw this._logService.error(`No API key found for model ${e.id}`),new Error(`No API key found for model ${e.id}`);let a=Mj(e.id,this.providerName,void 0,{maxInputTokens:e.maxInputTokens,maxOutputTokens:e.maxOutputTokens,toolCalling:!!e.capabilities?.toolCalling||!1,vision:!!e.capabilities?.imageInput||!1,name:e.name,url:e.url,thinking:e.thinking}),l=this._instantiationService.createInstance(rp,a,s??"",e.url);return this._lmWrapper.provideTokenCount(l,t)}async updateAPIKey(){let e=await this.getAllModels();if(Object.keys(e).length===0){await yY.window.showInformationMessage(`No ${this.providerName} models are configured. Please configure models first.`);return}let t=Object.entries(e).filter(a=>this.requiresAPIKey(a[0])).map(([a,l])=>({label:l.name||a,description:a,detail:`URL: ${l.url}`,modelId:a})),n=yY.window.createQuickPick();n.title=`Update ${this.providerName} Model API Key`,n.placeholder="Select a model to update its API key",n.items=t,n.ignoreFocusOut=!0;let o=await new Promise(a=>{n.onDidAccept(()=>{let l=n.selectedItems[0];n.hide(),a(l)}),n.onDidHide(()=>{a(void 0)}),n.show()});if(!o)return;let s=await qN(`${this.providerName} - ${o.modelId}`,!0);s!==void 0&&(s.trim()===""?(await this._byokStorageService.deleteAPIKey(this.providerName,1,o.modelId),await yY.window.showInformationMessage(`API key for ${o.label} has been deleted.`)):(await this._byokStorageService.storeAPIKey(this.providerName,s,1,o.modelId),await yY.window.showInformationMessage(`API key for ${o.label} has been updated.`)))}};Xb=T([v(1,Pe),v(2,ue),v(3,K),v(4,nt)],Xb);function Lyr(r,e){if(e.includes("/chat/completions"))return e;if(e.endsWith("/")&&(e=e.slice(0,-1)),e.endsWith("/v1")&&(e=e.slice(0,-3)),e.includes("models.ai.azure.com")||e.includes("inference.ml.azure.com"))return`${e}/v1/chat/completions`;if(e.includes("openai.azure.com"))return`${e}/openai/deployments/${r}/chat/completions?api-version=2025-01-01-preview`;throw new Error(`Unrecognized Azure deployment URL: ${e}`)}var Zb=class extends Xb{static{this.providerName="Azure"}constructor(e,t,n,o,s){super(e,t,n,o,s),this.providerName=Zb.providerName}getConfigKey(){return ae.AzureModels}resolveUrl(e,t){return Lyr(e,t)}};Zb=T([v(1,Pe),v(2,ue),v(3,K),v(4,nt)],Zb);var iue=class{constructor(e){this._extensionContext=e}async getAPIKey(e,t){if(t){let o=await this._extensionContext.secrets.get(`copilot-byok-${e}-${t}-api-key`);if(o)return o}return await this._extensionContext.secrets.get(`copilot-byok-${e}-api-key`)}async storeAPIKey(e,t,n,o){n!==2&&(n===0?await this._extensionContext.secrets.store(`copilot-byok-${e}-api-key`,t):n===1&&o&&await this._extensionContext.secrets.store(`copilot-byok-${e}-${o}-api-key`,t))}async deleteAPIKey(e,t,n){t!==2&&(t===0?await this._extensionContext.secrets.delete(`copilot-byok-${e}-api-key`):t===1&&n&&await this._extensionContext.secrets.delete(`copilot-byok-${e}-${n}-api-key`))}async getStoredModelConfigs(e){return this._extensionContext.globalState.get(`copilot-byok-${e}-models-config`,{})}async saveModelConfig(e,t,n,o){let s={isCustomModel:n.isCustomModel,deploymentUrl:n.deploymentUrl,isRegistered:!0,modelCapabilities:n.modelCapabilities},a=await this.getStoredModelConfigs(t);a[e]=s,await this._extensionContext.globalState.update(`copilot-byok-${t}-models-config`,a),await this.storeAPIKey(t,n.apiKey,o,e)}async removeModelConfig(e,t,n){let o=await this.getStoredModelConfigs(t),s=o[e],a=s?.isCustomModel||!1;s&&(n||!a)?(delete o[e],await this._extensionContext.globalState.update(`copilot-byok-${t}-models-config`,o),await this._extensionContext.secrets.delete(`copilot-byok-${t}-${e}-api-key`)):(s.isRegistered=!1,await this._extensionContext.globalState.update(`copilot-byok-${t}-models-config`,o))}};var op=class{constructor(e,t,n,o,s,a,l,c){this.authType=e;this._name=t;this._baseUrl=n;this._knownModels=o;this._byokStorageService=s;this._fetcherService=a;this._logService=l;this._instantiationService=c;this._lmWrapper=this._instantiationService.createInstance(UC)}async getModelInfo(e,t,n){return Mj(e,this._name,this._knownModels,n)}async getAllModels(){try{let t=await(await this._fetcherService.fetch(`${this._baseUrl}/models`,{method:"GET",headers:{Authorization:`Bearer ${this._apiKey}`,"Content-Type":"application/json"}})).json();if(t.error)throw t.error;let n={};for(let o of t.data)this._knownModels&&this._knownModels[o.id]&&(n[o.id]=this._knownModels[o.id]);return n}catch(e){throw this._logService.error(e,`Error fetching available ${this._name} models`),new Error(e.message?e.message:e)}}async provideLanguageModelChatInformation(e,t){!this._apiKey&&this.authType===0&&(this._apiKey=await this._byokStorageService.getAPIKey(this._name));try{return this._apiKey||this.authType===2?d5(this._name,await this.getAllModels()):e.silent&&!this._apiKey?[]:(await this.updateAPIKey(),this._apiKey?d5(this._name,await this.getAllModels()):[])}catch{return[]}}async provideLanguageModelChatResponse(e,t,n,o,s){let a=await this.getEndpointImpl(e);return this._lmWrapper.provideLanguageModelResponse(a,t,n,n.requestInitiator,o,s)}async provideTokenCount(e,t,n){let o=await this.getEndpointImpl(e);return this._lmWrapper.provideTokenCount(o,t)}async getEndpointImpl(e){let t=await this.getModelInfo(e.id,this._apiKey),n=t.supported_endpoints?.includes("/responses")?`${this._baseUrl}/responses`:`${this._baseUrl}/chat/completions`;return this._instantiationService.createInstance(rp,t,this._apiKey??"",n)}async updateAPIKey(){if(this.authType===2)return;let e=await qN(this._name,await this._byokStorageService.getAPIKey(this._name)!==void 0);e!==void 0&&(e===""?(this._apiKey=void 0,await this._byokStorageService.deleteAPIKey(this._name,this.authType)):e!==void 0&&(this._apiKey=e,await this._byokStorageService.storeAPIKey(this._name,this._apiKey,0)))}};op=T([v(5,rr),v(6,ue),v(7,K)],op);var eE=class extends op{static{this.providerName="Gemini"}constructor(e,t,n,o,s){super(0,eE.providerName,"https://generativelanguage.googleapis.com/v1beta/openai",e,t,n,o,s)}};eE=T([v(2,rr),v(3,ue),v(4,K)],eE);var tE=class extends op{static{this.providerName="Groq"}constructor(e,t,n,o,s){super(0,tE.providerName,"https://api.groq.com/openai/v1",e,t,n,o,s)}};tE=T([v(2,rr),v(3,ue),v(4,K)],tE);var GLe="0.6.4",qC=class extends op{constructor(t,n,o,s,a){super(2,qC.providerName,`${t}/v1`,void 0,n,o,s,a);this._ollamaBaseUrl=t;this._modelCache=new Map}static{this.providerName="Ollama"}async getAllModels(){try{await this._checkOllamaVersion();let n=(await(await this._fetcherService.fetch(`${this._ollamaBaseUrl}/api/tags`,{method:"GET"})).json()).models,o={};for(let s of n){let a=await this.getModelInfo(s.model,"",void 0);this._modelCache.set(s.model,a),o[s.model]={maxInputTokens:a.capabilities.limits?.max_prompt_tokens??4096,maxOutputTokens:a.capabilities.limits?.max_output_tokens??4096,name:a.name,toolCalling:!!a.capabilities.supports.tool_calls,vision:!!a.capabilities.supports.vision}}return o}catch(t){throw t instanceof Error&&t.message.includes("Ollama server version")?t:new Error('Failed to fetch models from Ollama. Please ensure Ollama is running. If ollama is on another host, please configure the `"github.copilot.chat.byok.ollamaEndpoint"` setting.')}}_isVersionSupported(t){let n=t.split(".").map(s=>parseInt(s,10)),o=GLe.split(".").map(s=>parseInt(s,10));for(let s=0;s<Math.max(n.length,o.length);s++){let a=n[s]||0,l=o[s]||0;if(a>l)return!0;if(a<l)return!1}return!0}async _getOllamaModelInformation(t){return(await this._fetcherService.fetch(`${this._ollamaBaseUrl}/api/show`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({model:t})})).json()}async getModelInfo(t,n,o){if(this._modelCache.has(t))return this._modelCache.get(t);if(!o){let s=await this._getOllamaModelInformation(t),a=s.model_info[`${s.model_info["general.architecture"]}.context_length`]??4096,l=a<4096?Math.floor(a/2):4096;o={name:s.model_info["general.basename"],maxOutputTokens:l,maxInputTokens:a-l,vision:s.capabilities.includes("vision"),toolCalling:s.capabilities.includes("tools")}}return super.getModelInfo(t,n,o)}async _checkOllamaVersion(){try{let n=await(await this._fetcherService.fetch(`${this._ollamaBaseUrl}/api/version`,{method:"GET"})).json();if(!this._isVersionSupported(n.version))throw new Error(`Ollama server version ${n.version} is not supported. Please upgrade to version ${GLe} or higher. Visit https://ollama.ai for upgrade instructions.`)}catch(t){throw t instanceof Error&&t.message.includes("Ollama server version")?t:new Error(`Unable to verify Ollama server version. Please ensure you have Ollama version ${GLe} or higher installed. If you're running an older version, please upgrade from https://ollama.ai`)}}};qC=T([v(2,rr),v(3,ue),v(4,K)],qC);var rE=class extends op{constructor(t,n,o,s,a,l,c){super(0,rE.providerName,"https://api.openai.com/v1",t,n,o,s,a);this._configurationService=l;this._expService=c}static{this.providerName="OpenAI"}async getModelInfo(t,n,o){let s=await super.getModelInfo(t,n,o);return this._configurationService.getExperimentBasedConfig(ae.UseResponsesApi,this._expService)&&(s.supported_endpoints=["/chat/completions","/responses"]),s}};rE=T([v(2,rr),v(3,ue),v(4,K),v(5,Pe),v(6,nt)],rE);var VC=class extends op{static{this.providerName="OpenRouter"}constructor(e,t,n,o){super(0,VC.providerName,"https://openrouter.ai/api/v1",void 0,e,t,n,o)}async getAllModels(){try{let t=await(await this._fetcherService.fetch("https://openrouter.ai/api/v1/models?supported_parameters=tools",{method:"GET"})).json(),n={};for(let o of t.data)n[o.id]={name:o.name,toolCalling:o.supported_parameters?.includes("tools")??!1,vision:o.architecture?.input_modalities?.includes("image")??!1,maxInputTokens:o.top_provider.context_length-16e3,maxOutputTokens:16e3};return this._knownModels=n,n}catch(e){throw this._logService.error(e,"Error fetching available OpenRouter models"),e}}};VC=T([v(1,rr),v(2,ue),v(3,K)],VC);var nE=class extends op{static{this.providerName="xAI"}constructor(e,t,n,o,s){super(0,nE.providerName,"https://api.x.ai/v1",e,t,n,o,s)}};nE=T([v(2,rr),v(3,ue),v(4,K)],nE);var OU=class extends _e{constructor(t,n,o,s,a,l,c){super();this._fetcherService=t;this._logService=n;this._configurationService=o;this._capiClientService=s;this._instantiationService=c;this.id="byok-contribution";this._providers=new Map;this._byokProvidersRegistered=!1;this._register(sue.commands.registerCommand("github.copilot.chat.manageBYOK",async u=>{let d=this._providers.get(u);d&&(u===Zb.providerName.toLowerCase()||u===Xb.providerName.toLowerCase())?await new MU(this._configurationService,u,d).configureModelOrUpdateAPIKey():d&&await d.updateAPIKey()})),this._byokStorageService=new iue(a),this._authChange(l,this._instantiationService),this._register(l.onDidAuthenticationChange(()=>{this._authChange(l,this._instantiationService)}))}async _authChange(t,n){if(t.copilotToken&&sit(t.copilotToken,this._capiClientService)&&!this._byokProvidersRegistered){this._byokProvidersRegistered=!0;let o=await this.fetchKnownModelList(this._fetcherService);this._providers.set(qC.providerName.toLowerCase(),n.createInstance(qC,this._configurationService.getConfig(ae.OllamaEndpoint),this._byokStorageService)),this._providers.set(Kd.providerName.toLowerCase(),n.createInstance(Kd,o[Kd.providerName],this._byokStorageService)),this._providers.set(tE.providerName.toLowerCase(),n.createInstance(tE,o[tE.providerName],this._byokStorageService)),this._providers.set(eE.providerName.toLowerCase(),n.createInstance(eE,o[eE.providerName],this._byokStorageService)),this._providers.set(nE.providerName.toLowerCase(),n.createInstance(nE,o[nE.providerName],this._byokStorageService)),this._providers.set(rE.providerName.toLowerCase(),n.createInstance(rE,o[rE.providerName],this._byokStorageService)),this._providers.set(VC.providerName.toLowerCase(),n.createInstance(VC,this._byokStorageService)),this._providers.set(Zb.providerName.toLowerCase(),n.createInstance(Zb,this._byokStorageService));for(let[s,a]of this._providers)this._store.add(sue.lm.registerLanguageModelChatProvider(s,a))}}async fetchKnownModelList(t){let n=await(await t.fetch("https://main.vscode-cdn.net/extensions/copilotChat.json",{method:"GET"})).json(),o;return n.version!==1?(this._logService.warn("BYOK: Copilot Chat known models list is not in the expected format. Defaulting to empty list."),o={}):o=n.modelInfo,this._logService.info("BYOK: Copilot Chat known models list fetched successfully."),o}};OU=T([v(0,rr),v(1,ue),v(2,Pe),v(3,Or),v(4,ar),v(5,ft),v(6,K)],OU);var FU=require("vscode");var nw=Me("IChatQuotaService");var BU=class extends _e{constructor(t){super();this.id="chat.quota";this._register(FU.commands.registerCommand("chat.enablePremiumOverages",()=>{t.clearQuota(),FU.env.openExternal(FU.Uri.parse("https://aka.ms/github-copilot-manage-overage"))}))}};BU=T([v(0,nw)],BU);var t4=z(require("vscode"));var Qyr=z(Xe());var yl=Me("IExtensionsService");var Tt=Me("IPromptPathRepresentationService"),aue=class{isWindows(){return xa}getFilePath(e){return e.scheme===Et.file||e.scheme===Et.vscodeRemote?e.fsPath:e.toString()}resolveFilePath(e,t=Et.file){let n=e.startsWith("/"),o=this.isWindows()&&(Pse(e)||e.startsWith("\\"));if(n||o){if(o){let a=e.startsWith("\\\\");e=e.replace(/\\+/g,"\\"),a&&(e="\\"+e)}let s=Fe.file(e);return t===Et.file?s:Fe.from({scheme:t,path:s.path})}if(/\w[\w\d+.-]*:\S/.test(e))try{return Fe.parse(e)}catch{return}}getExampleFilePath(e){return this.isWindows()?this.getFilePath(Fe.parse(`file:///C:${e}`)):this.getFilePath(Fe.parse(`file://${e}`))}};var ow=Me("ICustomInstructionsService");function Myr(r){return typeof r=="object"&&r!==null?typeof r.file=="string"&&(r.language===void 0||typeof r.language=="string"):!1}function Oyr(r){return typeof r=="object"&&r!==null?typeof r.text=="string"&&(r.language===void 0||typeof r.language=="string"):!1}var Byr=".instructions.md",Fyr="chat.instructionsFilesLocations",Uyr=".github/copilot-instructions.md",UU=class extends _e{constructor(t,n,o,s,a,l,c){super();this.configurationService=t;this.envService=n;this.workspaceService=o;this.fileSystemService=s;this.promptPathRepresentationService=a;this.logService=l;this.extensionService=c;this._register(this.extensionService.onDidChange(()=>{this._contributedInstructions=void 0}))}async fetchInstructionsFromFile(t){return await this.readInstructionsFromFile(t)}async getAgentInstructions(){let t=[];if(this.configurationService.getConfig(ae.UseInstructionFiles))for(let n of this.workspaceService.getWorkspaceFolders())try{let o=vj(n,Uyr);(await this.fileSystemService.stat(o)).type===cst.File&&t.push(o)}catch{}return t}async fetchInstructionsFromSetting(t){let n=[],o=[],s=new Set,a=this.configurationService.inspectConfig(t);a&&await this.collectInstructionsFromSettings([a.workspaceFolderValue,a.workspaceValue,a.globalValue],s,o,n);let l=bn.from({scheme:this.envService.uriScheme,authority:"settings",path:`/${t.fullyQualifiedId}`});return o.length>0&&n.push({kind:1,content:o,reference:l}),n}async collectInstructionsFromSettings(t,n,o,s){let a=new Set;for(let l of t)if(Array.isArray(l))for(let c of l)Myr(c)&&!n.has(c.file)&&(n.add(c.file),await this._collectInstructionsFromFile(c.file,c.language,s)),Oyr(c)&&!a.has(c.text)&&(a.add(c.text),o.push({instruction:c.text,languageId:c.language}))}async _collectInstructionsFromFile(t,n,o){this.logService.debug(`Collect instructions from file: ${t}`);let s=this.workspaceService.getWorkspaceFolders().map(async a=>{let l=bn.joinPath(a,t),c=await this.readInstructionsFromFile(l);c&&o.push(c)});await Promise.all(s)}async readInstructionsFromFile(t,n){try{let o=await this.fileSystemService.readFile(t),a=new TextDecoder().decode(o).trim();if(!a){this.logService.debug(`Instructions file is empty: ${t.toString()}`);return}return{kind:0,content:[{instruction:a,languageId:n}],reference:t}}catch{this.logService.debug(`Instructions file not found: ${t.toString()}`);return}}isExternalInstructionsFile(t){if(!t.path.endsWith(Byr))return!1;if(t.scheme===Et.vscodeUserData||this.getInstructionURLFromExtensionPoint().has(t))return!0;if(t.scheme!==Et.file)return!1;let n=this.promptPathRepresentationService.getFilePath(t),o=du(n),s=this.configurationService.getNonExtensionConfig(Fyr);if(nd(s))for(let a in s){let l=a.trim();if(s[a]===!0&&Bh(l)){let u=l.endsWith("/")||l.endsWith("*")?o:l;if(wC(u,l))return!0}}return!0}getInstructionURLFromExtensionPoint(){if(!this._contributedInstructions){let t=new Oo;for(let n of this.extensionService.all){let o=n.packageJSON.contributes?.chatInstructions;if(Array.isArray(o)){for(let s of o)if(s.path){let a=vj(n.extensionUri,s.path);t.add(a)}}}this._contributedInstructions=t}return this._contributedInstructions}};UU=T([v(0,Pe),v(1,Mt),v(2,Oe),v(3,cr),v(4,Tt),v(5,ue),v(6,yl)],UU);var ud=class{constructor(e,t){this.baseUri=e;this.pattern=t}get base(){throw new Error("Not implemented")}};var un=Me("ITabsAndEditorsService");function ys(r){if(r.isCancellationRequested)throw new Hr}function Ha(r){let e=Fe.isUri(r)?r:r.uri,t=Fe.isUri(r)?"":`#${r.range.start.line+1}-${r.range.end.line+1}`;return`[](${e.toString()}${t})`}function lue(r,e){let t=r;if(Bh(r))try{let o=e.asRelativePath(r);if(o!==r){let s=e.getWorkspaceFolder(Fe.file(r));s&&(t=new ud(s,o))}}catch{}let n=[t];return typeof t=="string"&&!t.endsWith("/**")?n.push(t+"/**"):typeof t!="string"&&!t.pattern.endsWith("/**")&&n.push(new ud(t.baseUri,t.pattern+"/**")),n}function Ii(r,e){let t=e.resolveFilePath(r);if(!t)throw new Error(`Invalid input path: ${r}. Be sure to use an absolute path.`);return t}async function lpt(r,e){try{return await cue(r,e),!0}catch{return!1}}async function cue(r,e){let t=r.get(Oe),n=r.get(un),o=r.get(Tt),s=r.get(ow);if(await HC(r,e),!t.getWorkspaceFolder(WF(e))&&!s.isExternalInstructionsFile(e)&&e.scheme!==Et.untitled&&!n.tabs.some(l=>fn(l.uri,e)))throw new Error(`File ${o.getFilePath(e)} is outside of the workspace, and not open in an editor, and can't be read`)}async function HC(r,e){let t=r.get(At),n=r.get(Tt);if(await t.isCopilotIgnored(e))throw new Error(`File ${n.getFilePath(e)} is configured to be ignored by Copilot`)}var cpt=z(Xe()),upt=z(require("http"));var uue=class{createAdapter(){return new WLe}},WLe=class{constructor(){this.name="anthropic";this.currentBlockIndex=0;this.hasTextBlock=!1;this.hadToolCalls=!1}parseRequest(e){let t=JSON.parse(e),n="";typeof t.system=="string"?n=t.system:Array.isArray(t.system)&&t.system.length>0&&(n=t.system.map(l=>l.text).join(`
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/dist/extension.js:661:`);return n.substring(o+1)}};async function C0t(r){try{let e=await hOe.create(r);Ide.set(r,e)}catch{}}var T0t=(async()=>{Ide.set("mock",new gOe),await Promise.all([C0t("cl100k_base"),C0t("o200k_base")])})();var cCr="gpt-4o-copilot",kL=class r{constructor(e,t=!0){this._ctx=e;this.fetchedModelData=[];this.customModels=[];this.editorPreviewFeaturesDisabled=!1;this._endpointProvider=this._ctx.get(DL).endpointProvider,t&&W0(this._ctx,()=>this.refreshAvailableModels())}async refreshAvailableModels(){await this.refreshModels()}getDefaultModelId(){if(this.fetchedModelData){let e=r.filterCompletionModels(this.fetchedModelData,this.editorPreviewFeaturesDisabled)[0];if(e)return e.id}return cCr}async refreshModels(){let e=await this._endpointProvider.getAllCompletionModels(!0);e&&(this.fetchedModelData=e)}getGenericCompletionModels(){let e=r.filterCompletionModels(this.fetchedModelData,this.editorPreviewFeaturesDisabled);return r.mapCompletionModels(e)}getTokenizerForModel(e){let n=this.getGenericCompletionModels().find(o=>o.modelId===e);return n?n.tokenizer:"o200k_base"}static filterCompletionModels(e,t){return e.filter(n=>n.capabilities.type==="completion").filter(n=>!t||n.preview===!1||n.preview===void 0)}static filterModelsWithEditorPreviewFeatures(e,t){return e.filter(n=>!t||n.preview===!1||n.preview===void 0)}static mapCompletionModels(e){return e.map(t=>({modelId:t.id,label:t.name,preview:!!t.preview,tokenizer:t.capabilities.tokenizer}))}getCurrentModelRequestInfo(e=void 0){let t=this.getDefaultModelId(),n=E0t(this._ctx);if(n){let l=this.getGenericCompletionModels().map(c=>c.modelId);l.includes(n)||(l.length>0&&Li.error(this._ctx,`User selected model ${n} is not in the list of generic models: ${l.join(", ")}, falling back to default model.`),n=null),t===n&&(n=null)}let o=ai(this._ctx,Xt.DebugOverrideEngine)||ai(this._ctx,Xt.DebugOverrideEngineLegacy);if(o)return new Tw(o,"override");let s=e?this._ctx.get(Fr).customEngine(e):"",a=e?this._ctx.get(Fr).customEngineTargetEngine(e):void 0;return n?s&&a&&n===a?new Tw(s,"exp"):new Tw(n,"modelpicker"):s?new Tw(s,"exp"):this.customModels.length>0?new Tw(this.customModels[0],"custommodel"):new Tw(t,"default")}},Tw=class{constructor(e,t){this.modelId=e;this.modelChoiceSource=t}get headers(){return{}}};function w4(r,e=void 0){let t=r.get(kL),n=t.getCurrentModelRequestInfo(e),o=t.getTokenizerForModel(n.modelId);return{headers:n.headers,modelId:n.modelId,engineChoiceSource:n.modelChoiceSource,tokenizer:o}}var hro=new qi("exp");function x0t(r){let e=r.get(Q0).authenticationService,t=e.onDidAccessTokenChange(()=>{e.getCopilotToken().then(n=>I0t(r,n)).catch(n=>{})});return I0t(r,e.copilotToken),t}function uCr(r){let e=r.get(cp).getEditorPluginInfo();return e.name==="copilot"&&QY(r)==="nightly"||e.name==="copilot-chat"&&QY(r)==="nightly"||e.name==="copilot-intellij"&&e.version.endsWith("nightly")?"nightly":"stable"}function I0t(r,e){let t=r.get(XC),n=vOe(r,e);t.experimentationService.setCompletionsFilters(n)}function vOe(r,e){let t=new Map;if(t.set("X-VSCode-ExtensionRelease",uCr(r)),t.set("X-Copilot-OverrideEngine",ai(r,Xt.DebugOverrideEngine)||ai(r,Xt.DebugOverrideEngineLegacy)),t.set("X-Copilot-ClientVersion",r.get(H0).isProduction()?wL(r):"1.999.0"),e){let o=pOe(e),s=e.getTokenValue("ft")??"",a=e.getTokenValue("ol")??"",l=e.getTokenValue("cml")??"",c=e.getTokenValue("tid")??"";t.set("X-Copilot-UserKind",o),t.set("X-Copilot-CustomModel",s),t.set("X-Copilot-Orgs",a),t.set("X-Copilot-CustomModelNames",l),t.set("X-Copilot-CopilotTrackingId",c),t.set("X-Copilot-UserKind",pOe(e))}let n=w4(r).modelId;return t.set("X-Copilot-Engine",n),t}var Fr=class{constructor(e){this.ctx=e}async updateExPValuesAndAssignments(e,t=Xo.createAndMarkAsIssued()){if(t instanceof WY)throw new Error("updateExPValuesAndAssignments should not be called with TelemetryWithExp");let n=this.ctx.get(lf),o=n.token??await n.getToken(),{filters:s,exp:a}=this.createExpConfigAndFilters(o);return new WY(t.properties,t.measurements,t.issuedTime,{filters:s,exp:a})}createExpConfigAndFilters(e){let t=this.ctx.get(XC).experimentationService,n={};for(let u of Object.values(Sde)){let d=t.getTreatmentVariable(u);d!==void 0&&(n[u]=d)}let o=Object.entries(n).map(([u,d])=>u+(d?"":"cf")),s=new _4(n,o.join(";")),a=vOe(this.ctx,e),l={};for(let[u,d]of a.entries())l[u]=d;return{filters:new C4(l),exp:s}}async getFallbackExpAndFilters(){let e=this.ctx.get(lf),t=e.token??await e.getToken();return this.createExpConfigAndFilters(t)}disableLogProb(e){return e.filtersAndExp.exp.variables.copilotdisablelogprob??!0}overrideBlockMode(e){return e.filtersAndExp.exp.variables.copilotoverrideblockmode||void 0}customEngine(e){return e.filtersAndExp.exp.variables.copilotcustomengine??""}customEngineTargetEngine(e){return e.filtersAndExp.exp.variables.copilotcustomenginetargetengine}suffixPercent(e){return e.filtersAndExp.exp.variables.CopilotSuffixPercent??Cde.suffix}suffixMatchThreshold(e){return e.filtersAndExp.exp.variables.copilotsuffixmatchthreshold??_de}cppHeadersEnableSwitch(e){return e.filtersAndExp.exp.variables.copilotcppheadersenableswitch??!1}relatedFilesVSCodeCSharp(e){return e.filtersAndExp.exp.variables.copilotrelatedfilesvscodecsharp??!1}relatedFilesVSCodeTypeScript(e){return e.filtersAndExp.exp.variables.copilotrelatedfilesvscodetypescript??!1}relatedFilesVSCode(e){return e.filtersAndExp.exp.variables.copilotrelatedfilesvscode??!1}contextProviders(e){let t=e.filtersAndExp.exp.variables.copilotcontextproviders??"";return t?t.split(",").map(n=>n.trim()):[]}contextProviderTimeBudget(e){return e.filtersAndExp.exp.variables.copilotcontextprovidertimebudget??150}includeNeighboringFiles(e){return e.filtersAndExp.exp.variables.copilotincludeneighboringfiles??!1}excludeRelatedFiles(e){return e.filtersAndExp.exp.variables.copilotexcluderelatedfiles??!1}maxPromptCompletionTokens(e){return e.filtersAndExp.exp.variables.maxpromptcompletionTokens??y0t+qY}ideChatMaxRequestTokens(e){return e.filtersAndExp.exp.variables.idechatmaxrequesttokens??-1}ideChatExpModelIds(e){return e.filtersAndExp.exp.variables.idechatexpmodelids??""}ideChatEnableProjectMetadata(e){return e.filtersAndExp.exp.variables.idechatenableprojectmetadata??!1}workspaceContextCoordinator(e){return e.filtersAndExp.exp.variables.copilotworkspacecontextcoordinator??!1}workspaceContextCacheTime(e){return e.filtersAndExp.exp.variables.copilotworkspacecontextcachetime??b0t}stableContextPercent(e){return e.filtersAndExp.exp.variables.copilotstablecontextpercent??Cde.stableContext}volatileContextPercent(e){return e.filtersAndExp.exp.variables.copilotvolatilecontextpercent??Cde.volatileContext}cppContextProviderParams(e){return e.filtersAndExp.exp.variables.copilotcppContextProviderParams}csharpContextProviderParams(e){return e.filtersAndExp.exp.variables.copilotcsharpcontextproviderparams}javaContextProviderParams(e){return e.filtersAndExp.exp.variables.copilotjavacontextproviderparams}multiLanguageContextProviderParams(e){return e.filtersAndExp.exp.variables.copilotmultilanguagecontextproviderparams}tsContextProviderParams(e){return e.filtersAndExp.exp.variables.copilottscontextproviderparams}completionsDebounce(e){return e.filtersAndExp.exp.variables.copilotcompletionsdebounce}enableElectronFetcher(e){return e.filtersAndExp.exp.variables.copilotelectronfetcher??!1}asyncCompletionsTimeout(e){return e.filtersAndExp.exp.variables.copilotasynccompletionstimeout??200}enablePromptContextProxyField(e){return e.filtersAndExp.exp.variables.copilotenablepromptcontextproxyfield??!0}enableProgressiveReveal(e){return e.filtersAndExp.exp.variables.copilotprogressivereveal??!1}modelAlwaysTerminatesSingleline(e){return e.filtersAndExp.exp.variables.copilotmodelterminatesingleline??!0}longLookaheadSize(e){return e.filtersAndExp.exp.variables.copilotprogressivereveallonglookaheadsize??9}shortLookaheadSize(e){return e.filtersAndExp.exp.variables.copilotprogressiverevealshortlookaheadsize??3}maxMultilineTokens(e){return e.filtersAndExp.exp.variables.copilotmaxmultilinetokens??200}multilineAfterAcceptLines(e){return e.filtersAndExp.exp.variables.copilotmultilineafteracceptlines??1}enableNESXTab(e){return e.filtersAndExp.exp.variables.copilotnesxtab??!1}getNESXTabModelID(e){return e.filtersAndExp.exp.variables.copilotnesxtabmodelid??"copilot-nes-xtab"}completionsDelay(e){return e.filtersAndExp.exp.variables.copilotcompletionsdelay??200}singleLineUnlessAccepted(e){return e.filtersAndExp.exp.variables.copilotsinglelineunlessaccepted??!1}useCompletionsComparisonPanel(e){return e.filtersAndExp.exp.variables.copilotusecompletionscomparisonpanel??!1}comparisonPanelModelIds(e){return e.filtersAndExp.exp.variables.copilotcomparisonpanelmodelids??""}comparisonPanelRandomizedMode(e){return e.filtersAndExp.exp.variables.copilotcomparisonpanelrandomizedmode??!0}};var yOe=class extends Error{constructor(e,t){super(e,{cause:t}),this.name="HttpTimeoutError"}};function NL(r){return!r||typeof r!="object"?!1:r instanceof yOe||"name"in r&&r.name==="AbortError"||"code"in r&&r.code==="ABORT_ERR"}var $0=class{getImplementation(){return this}};function R0t(r,e,t,n,o,s,a,l,c,u){let d={...l,Authorization:`Bearer ${t}`,...Ede(r)};u===void 0&&(d["Openai-Organization"]="github-copilot",d["X-Request-Id"]=o,d["VScode-SessionId"]=r.get(fE).sessionId,d["VScode-MachineId"]=r.get(fE).machineId,d["X-GitHub-Api-Version"]=g0t),n&&(d["OpenAI-Intent"]=n);let p={method:"POST",headers:d,json:s,timeout:c},f=r.get($0);if(a){let h=new AbortController;a.onCancellationRequested(()=>{Tn(r,"networking.cancelRequest",Xo.createAndMarkAsIssued({headerRequestId:o})),h.abort()}),p.signal=h.signal}return f.fetch(e,p).catch(h=>{if(dCr(h))return Tn(r,"networking.disconnectAll"),f.disconnectAll().then(()=>f.fetch(e,p));throw h})}function dCr(r){return r instanceof Error?r.message=="ERR_HTTP2_GOAWAY_SESSION"?!0:"code"in r?r.code=="ECONNRESET"||r.code=="ETIMEDOUT"||r.code=="ERR_HTTP2_INVALID_SESSION":!1:!1}function pCr(r){let e=r.getTokenValue("tid"),t=r.organizationList,n=r.enterpriseList,o=r.getTokenValue("sku");if(!e)return;let s={copilot_trackingId:e};return t&&(s.organizations_list=t.toString()),n&&(s.enterprise_list=n.toString()),o&&(s.sku=o),s}var mE=class{constructor(e){this.#e={};this.optedIn=!1;this.ftFlag="";W0(e,t=>this.updateFromToken(t))}#e;getProperties(){return this.#e}get trackingId(){return this.#e.copilot_trackingId}updateFromToken(e){let t=pCr(e);t&&(this.#e=t,this.optedIn=e.getTokenValue("rt")==="1",this.ftFlag=e.getTokenValue("ft")??"")}};var Y0=class{constructor(){this.promises=new Set}register(e){this.promises.add(e),e.finally(()=>this.promises.delete(e))}async flush(){await Promise.allSettled(this.promises)}};function xde(r){return r===1}var fCr=["engine.prompt","engine.completion","ghostText.capturedAfterAccepted","ghostText.capturedAfterRejected"],jY=8192,mCr=21;var Xo=class r{static{this.keysExemptedFromSanitization=["VSCode.ABExp.Features"]}constructor(e,t,n){this.properties=e,this.measurements=t,this.issuedTime=n}static createAndMarkAsIssued(e,t){return new r(e||{},t||{},df())}extendedBy(e,t){let n={...this.properties,...e},o={...this.measurements,...t},s=new r(n,o,this.issuedTime);return s.displayedTime=this.displayedTime,s}markAsDisplayed(){this.displayedTime===void 0&&(this.displayedTime=df())}async extendWithExpTelemetry(e){let{filters:t,exp:n}=await e.get(Fr).getFallbackExpAndFilters();n.addToTelemetry(e,this),t.addToTelemetry(this)}extendWithEditorAgnosticFields(e){this.properties.editor_version=RL(e.get(cp).getEditorInfo()),this.properties.editor_plugin_version=RL(e.get(cp).getEditorPluginInfo());let t=e.get(fE);this.properties.client_machineid=t.machineId,this.properties.client_sessionid=t.sessionId,this.properties.copilot_version=`copilot/${wL(e)}`,typeof process<"u"&&(this.properties.runtime_version=`node/${process.versions.node}`);let n=e.get(cp);this.properties.common_extname=n.getEditorPluginInfo().name,this.properties.common_extversion=n.getEditorPluginInfo().version,this.properties.common_vscodeversion=RL(n.getEditorInfo());let o=e.get($0);this.properties.fetcher=o.name;let s=e.get(sA).getHttpSettings();this.properties.proxy_enabled=s.proxy?"true":"false",this.properties.proxy_auth=s.proxyAuthorization?"true":"false",this.properties.proxy_kerberos_spn=s.proxyKerberosServicePrincipal?"true":"false",this.properties.reject_unauthorized=s.proxyStrictSSL!==!1?"true":"false"}extendWithConfigProperties(e){let t=p0t(e);t["copilot.build"]=h0t(e),t["copilot.buildType"]=QY(e),this.properties={...this.properties,...t}}extendWithRequestId(e){let t={headerRequestId:e.headerRequestId,serverExperiments:e.serverExperiments,deploymentId:e.deploymentId};this.properties={...this.properties,...t}}static{this.keysToRemoveFromStandardTelemetryHack=["gitRepoHost","gitRepoName","gitRepoOwner","gitRepoUrl","gitRepoPath","repo","request_option_nwo","userKind"]}static maybeRemoveRepoInfoFromPropertiesHack(e,t){if(xde(e))return t;let n={};for(let o in t)r.keysToRemoveFromStandardTelemetryHack.includes(o)||(n[o]=t[o]);return n}sanitizeKeys(){this.properties=r.sanitizeKeys(this.properties),this.measurements=r.sanitizeKeys(this.measurements);for(let e in this.measurements)isNaN(this.measurements[e])&&delete this.measurements[e]}multiplexProperties(){this.properties=r.multiplexProperties(this.properties)}static sanitizeKeys(e){e=e||{};let t={};for(let n in e){let o=r.keysExemptedFromSanitization.includes(n)?n:n.replace(/\./g,"_");t[o]=e[n]}return t}static multiplexProperties(e){let t={...e};for(let n in e){let o=e[n],s=o?.length??0;if(s>jY){let a=0,l=0;for(;s>0&&l<mCr;){l+=1;let c=n;l>1&&(c=n+"_"+(l<10?"0":"")+l);let u=a+jY;s<jY&&(u=a+s),t[c]=o.slice(a,u),s-=jY,a+=jY}}}return t}updateMeasurements(e){let t=e-this.issuedTime;if(this.measurements.timeSinceIssuedMs=t,this.displayedTime!==void 0){let n=e-this.displayedTime;this.measurements.timeSinceDisplayedMs=n}this.measurements.current_time===void 0&&(this.measurements.current_time=vCr(e))}async makeReadyForSending(e,t,n,o){this.extendWithConfigProperties(e),this.extendWithEditorAgnosticFields(e),this.sanitizeKeys(),this.multiplexProperties(),n==="IncludeExp"&&await this.extendWithExpTelemetry(e),this.updateMeasurements(o),Object.assign(this.properties,k0t(e))}},WY=class r extends Xo{constructor(e,t,n,o){super(e,t,n),this.filtersAndExp=o}extendedBy(e,t){let n={...this.properties,...e},o={...this.measurements,...t},s=new r(n,o,this.issuedTime,this.filtersAndExp);return s.displayedTime=this.displayedTime,s}extendWithExpTelemetry(e){return this.filtersAndExp.exp.addToTelemetry(e,this),this.filtersAndExp.filters.addToTelemetry(this),Promise.resolve()}static createEmptyConfigForTesting(){return new r({},{},0,{filters:new C4({}),exp:_4.createEmptyConfig()})}};function AOe(r,e,t,n){r.get(ag).sendGHTelemetryEvent(t,Xo.maybeRemoveRepoInfoFromPropertiesHack(e,n.properties),n.measurements)}function hCr(r,e,t,n){r.get(ag).sendGHTelemetryErrorEvent(t,Xo.maybeRemoveRepoInfoFromPropertiesHack(e,n.properties),n.measurements)}function gCr(r,e,t,n){P0t(r)&&r.get(ag).sendGHTelemetryEvent(t,Xo.maybeRemoveRepoInfoFromPropertiesHack(e,n.properties),n.measurements)}function Rde(r){return{promptCharLen:r.prefix.length+(r.context?.reduce((e,t)=>e+t.length,0)??0),promptSuffixCharLen:r.suffix.length}}function df(){return performance.now()}function vCr(r){return Math.floor(r/1e3)}function w0t(r){return r.get(mE).optedIn}function P0t(r){return r.get(mE).ftFlag!==""}function Tn(r,e,t,n){return r.get(Y0).register(yCr(r,e,df(),t?.extendedBy(),n))}async function yCr(r,e,t,n,o=0){let s=n||Xo.createAndMarkAsIssued({},{});await s.makeReadyForSending(r,o??!1,"IncludeExp",t),(!xde(o)||w0t(r))&&AOe(r,o,e,s),xde(o)&&fCr.includes(e)&&P0t(r)&&gCr(r,o,e,s)}function v0t(r,e){return r.get(Y0).register(ACr(r,e,df()))}async function ACr(r,e,t){let n="expProblem",o=Xo.createAndMarkAsIssued(e,{});await o.makeReadyForSending(r,0,"SkipExp",t),AOe(r,0,n,o)}function bOe(r,e,t,n){let o={...t,...k0t(r)};AOe(r,0,e,{properties:o,measurements:n})}function k0t(r){let e=r.get(cp),t={unique_id:wt(),common_extname:e.getEditorPluginInfo().name,common_extversion:e.getEditorPluginInfo().version,common_vscodeversion:RL(e.getEditorInfo())};return{...r.get(mE).getProperties(),...t}}function P4(r,e,t,n,o){return r.get(ag).sendGHTelemetryException(e,t||"")}function Iw(r,e,t,n){let o=async(...s)=>{try{await e(...s)}catch{}};return(...s)=>r.get(Y0).register(o(...s))}function wde(r,e,t,n){return r.get(Y0).register(bCr(r,e,df(),t?.extendedBy(),n))}async function bCr(r,e,t,n,o=0){if(xde(o)&&!w0t(r))return;let s=n||Xo.createAndMarkAsIssued({},{});await s.makeReadyForSending(r,o,"IncludeExp",t),hCr(r,o,e,s)}function D0t(r,e,t,n,o){let s=Xo.createAndMarkAsIssued({completionTextJson:JSON.stringify(e),choiceIndex:o.toString()});if(t.logprobs)for(let[a,l]of Object.entries(t.logprobs))s.properties["logprobs_"+a]=JSON.stringify(l)??"unset";return s.extendWithRequestId(n),Tn(r,"engine.completion",s,1)}function N0t(r,e,t){let n={promptJson:JSON.stringify({prefix:e.prefix,context:e.context}),promptSuffixJson:JSON.stringify(e.suffix)};if(e.context){let s=t.properties["request.option.extra"]?JSON.parse(t.properties["request.option.extra"]):{};s.context=e.context,n["request.option.extra"]=JSON.stringify(s)}let o=t.extendedBy(n);return Tn(r,"engine.prompt",o,1)}var up=z(cf()),L0t=z(uf()),Jro=up.Type.Object({accessToken:up.Type.Optional(up.Type.String({minLength:1})),handle:up.Type.Optional(up.Type.String({minLength:1})),login:up.Type.Optional(up.Type.String({minLength:1})),githubAppId:up.Type.Optional(up.Type.String({minLength:1})),apiUrl:up.Type.Optional(up.Type.String({})),serverUrl:up.Type.Optional(up.Type.String({})),tokenEndpoint:up.Type.Optional(up.Type.String({}))}),ECr;(t=>(t.method="github/didChangeAuth",t.type=new L0t.ProtocolNotificationType(t.method)))(ECr||={});var M0t=z(uf()),SCr;(t=>(t.method="copilot/ipCodeCitation",t.type=new M0t.NotificationType(t.method)))(SCr||={});var O0t=z(uf()),_Cr;(t=>(t.method="context/update",t.type=new O0t.ProtocolRequestType(t.method)))(_Cr||={});var Su=z(cf()),pf=z(uf()),CCr=Su.Type.String(),TCr=Su.Type.Object({uri:CCr}),EOe=Su.Type.Intersect([TCr,Su.Type.Object({version:Su.Type.Optional(Su.Type.Integer())})]),nno=Su.Type.Required(EOe),Pde=Su.Type.Object({line:Su.Type.Integer({minimum:0}),character:Su.Type.Integer({minimum:0})}),B0t=Su.Type.Object({start:Pde,end:Pde}),ono=Su.Type.Union([Su.Type.Integer(),Su.Type.String()]),ino=Su.Type.Object({isCancellationRequested:Su.Type.Boolean(),onCancellationRequested:Su.Type.Any()});var F0t=z(uf()),ICr;(t=>(t.method="textDocument/didFocus",t.type=new F0t.ProtocolNotificationType(t.method)))(ICr||={});var As=z(cf()),$Y=z(uf());var U0t=(t=>(t[t.Invoked=1]="Invoked",t[t.Automatic=2]="Automatic",t))(U0t||{}),xCr=As.Type.Enum(U0t),RCr=As.Type.Object({triggerKind:xCr,selectedCompletionInfo:As.Type.Optional(As.Type.Object({text:As.Type.String(),range:B0t,tooltipSignature:As.Type.Optional(As.Type.String())}))}),Q0t=As.Type.Object({textDocument:EOe,position:Pde,formattingOptions:As.Type.Optional(As.Type.Object({tabSize:As.Type.Optional(As.Type.Union([As.Type.Integer({minimum:1}),As.Type.String()])),insertSpaces:As.Type.Optional(As.Type.Union([As.Type.Boolean(),As.Type.String()]))})),context:RCr,data:As.Type.Optional(As.Type.Unknown())}),wCr;(t=>(t.method="textDocument/inlineCompletion",t.type=new $Y.ProtocolRequestType(t.method)))(wCr||={});var q0t=As.Type.Object({command:As.Type.Object({arguments:As.Type.Tuple([As.Type.String({minLength:1})])})}),uno=As.Type.Object({item:q0t}),PCr;(t=>(t.method="textDocument/didShowCompletion",t.type=new $Y.ProtocolNotificationType(t.method)))(PCr||={});var dno=As.Type.Object({item:q0t,acceptedLength:As.Type.Integer({minimum:1})}),kCr;(t=>(t.method="textDocument/didPartiallyAcceptCompletion",t.type=new $Y.ProtocolNotificationType(t.method)))(kCr||={});var V0t=z(uf()),DCr;(t=>(t.method="textDocument/inlineCompletionPrompt",t.type=new V0t.ProtocolRequestType(t.method)))(DCr||={});var H0t=z(uf()),NCr;(t=>(t.method="statusNotification",t.type=new H0t.ProtocolNotificationType(t.method)))(NCr||={});var pd=z(uf());var G0t=z(require("events")),kde="CompletionRequested",LL=class{constructor(e){this.ctx=e}#e=new G0t.default;notifyRequest(e,t,n,o,s){return this.#e.emit(kde,{completionId:t,completionState:e,telemetryData:n,cancellationToken:o,options:s})}onRequest(e){let t=Iw(this.ctx,e,`event.${kde}`);return this.#e.on(kde,t),pd.Disposable.create(()=>this.#e.off(kde,t))}};var lg=class{constructor(e){this.ctx=e;this.ignoreService=this.ctx.get(ML).ignoreService}get enabled(){return this.ignoreService.isEnabled}async evaluate(e,t,n){return{isBlocked:await this.ignoreService.isCopilotIgnored(Fe.parse(e))}}};var SOe=class extends Error{constructor(t){super(`No instance of ${t.name} has been registered`);this.ctor=t;this.name=`UnregisteredContextErrorFor${t.name}`}},Dde=class{constructor(){this.instances=new Map}get(e){let t=this.tryGet(e);if(t)return t;throw new SOe(e)}tryGet(e){let t=this.instances.get(e);if(t)return t}set(e,t){if(this.tryGet(e))throw new Error(`An instance of ${e.name} has already been registered. Use forceSet() if you're sure it's a good idea.`);this.assertIsInstance(e,t),this.instances.set(e,t)}forceSet(e,t){this.assertIsInstance(e,t),this.instances.set(e,t)}assertIsInstance(e,t){if(!(t instanceof e)){let n=JSON.stringify(t);throw new Error(`The instance you're trying to register for ${e.name} is not an instance of it (${n}).`)}}};var Os=class{constructor(e=10){this.valueMap=new Map;if(e<1)throw new Error("Size limit must be at least 1");this.sizeLimit=e}set(e,t){if(this.has(e))this.valueMap.delete(e);else if(this.valueMap.size>=this.sizeLimit){let n=this.valueMap.keys().next().value;this.delete(n)}return this.valueMap.set(e,t),this}get(e){if(this.valueMap.has(e)){let t=this.valueMap.get(e);return this.valueMap.delete(e),this.valueMap.set(e,t),t}}delete(e){return this.valueMap.delete(e)}clear(){this.valueMap.clear()}get size(){return this.valueMap.size}keys(){return new Map(this.valueMap).keys()}values(){return new Map(this.valueMap).values()}entries(){return new Map(this.valueMap).entries()}[Symbol.iterator](){return this.entries()}has(e){return this.valueMap.has(e)}forEach(e,t){new Map(this.valueMap).forEach(e,t)}get[Symbol.toStringTag](){return"LRUCacheMap"}peek(e){return this.valueMap.get(e)}};var fd=class{};async function OL(r,e,t){let n=await r.get(lg).evaluate(e.uri,t);return n.isBlocked?{status:"invalid",reason:n.message??"Document is blocked by repository policy"}:{status:"valid"}}var $0t=require("os"),COe=require("path");var W0t;(()=>{"use strict";var r={975:H=>{function D(R){if(typeof R!="string")throw new TypeError("Path must be a string. Received "+JSON.stringify(R))}function W(R,V){for(var O,B="",ne=0,Q=-1,ie=0,J=0;J<=R.length;++J){if(J<R.length)O=R.charCodeAt(J);else{if(O===47)break;O=47}if(O===47){if(!(Q===J-1||ie===1))if(Q!==J-1&&ie===2){if(B.length<2||ne!==2||B.charCodeAt(B.length-1)!==46||B.charCodeAt(B.length-2)!==46){if(B.length>2){var le=B.lastIndexOf("/");if(le!==B.length-1){le===-1?(B="",ne=0):ne=(B=B.slice(0,le)).length-1-B.lastIndexOf("/"),Q=J,ie=0;continue}}else if(B.length===2||B.length===1){B="",ne=0,Q=J,ie=0;continue}}V&&(B.length>0?B+="/..":B="..",ne=2)}else B.length>0?B+="/"+R.slice(Q+1,J):B=R.slice(Q+1,J),ne=J-Q-1;Q=J,ie=0}else O===46&&ie!==-1?++ie:ie=-1}return B}var w={resolve:function(){for(var R,V="",O=!1,B=arguments.length-1;B>=-1&&!O;B--){var ne;B>=0?ne=arguments[B]:(R===void 0&&(R=process.cwd()),ne=R),D(ne),ne.length!==0&&(V=ne+"/"+V,O=ne.charCodeAt(0)===47)}return V=W(V,!O),O?V.length>0?"/"+V:"/":V.length>0?V:"."},normalize:function(R){if(D(R),R.length===0)return".";var V=R.charCodeAt(0)===47,O=R.charCodeAt(R.length-1)===47;return(R=W(R,!V)).length!==0||V||(R="."),R.length>0&&O&&(R+="/"),V?"/"+R:R},isAbsolute:function(R){return D(R),R.length>0&&R.charCodeAt(0)===47},join:function(){if(arguments.length===0)return".";for(var R,V=0;V<arguments.length;++V){var O=arguments[V];D(O),O.length>0&&(R===void 0?R=O:R+="/"+O)}return R===void 0?".":w.normalize(R)},relative:function(R,V){if(D(R),D(V),R===V||(R=w.resolve(R))===(V=w.resolve(V)))return"";for(var O=1;O<R.length&&R.charCodeAt(O)===47;++O);for(var B=R.length,ne=B-O,Q=1;Q<V.length&&V.charCodeAt(Q)===47;++Q);for(var ie=V.length-Q,J=ne<ie?ne:ie,le=-1,Ce=0;Ce<=J;++Ce){if(Ce===J){if(ie>J){if(V.charCodeAt(Q+Ce)===47)return V.slice(Q+Ce+1);if(Ce===0)return V.slice(Q+Ce)}else ne>J&&(R.charCodeAt(O+Ce)===47?le=Ce:Ce===0&&(le=0));break}var F=R.charCodeAt(O+Ce);if(F!==V.charCodeAt(Q+Ce))break;F===47&&(le=Ce)}var Se="";for(Ce=O+le+1;Ce<=B;++Ce)Ce!==B&&R.charCodeAt(Ce)!==47||(Se.length===0?Se+="..":Se+="/..");return Se.length>0?Se+V.slice(Q+le):(Q+=le,V.charCodeAt(Q)===47&&++Q,V.slice(Q))},_makeLong:function(R){return R},dirname:function(R){if(D(R),R.length===0)return".";for(var V=R.charCodeAt(0),O=V===47,B=-1,ne=!0,Q=R.length-1;Q>=1;--Q)if((V=R.charCodeAt(Q))===47){if(!ne){B=Q;break}}else ne=!1;return B===-1?O?"/":".":O&&B===1?"//":R.slice(0,B)},basename:function(R,V){if(V!==void 0&&typeof V!="string")throw new TypeError('"ext" argument must be a string');D(R);var O,B=0,ne=-1,Q=!0;if(V!==void 0&&V.length>0&&V.length<=R.length){if(V.length===R.length&&V===R)return"";var ie=V.length-1,J=-1;for(O=R.length-1;O>=0;--O){var le=R.charCodeAt(O);if(le===47){if(!Q){B=O+1;break}}else J===-1&&(Q=!1,J=O+1),ie>=0&&(le===V.charCodeAt(ie)?--ie==-1&&(ne=O):(ie=-1,ne=J))}return B===ne?ne=J:ne===-1&&(ne=R.length),R.slice(B,ne)}for(O=R.length-1;O>=0;--O)if(R.charCodeAt(O)===47){if(!Q){B=O+1;break}}else ne===-1&&(Q=!1,ne=O+1);return ne===-1?"":R.slice(B,ne)},extname:function(R){D(R);for(var V=-1,O=0,B=-1,ne=!0,Q=0,ie=R.length-1;ie>=0;--ie){var J=R.charCodeAt(ie);if(J!==47)B===-1&&(ne=!1,B=ie+1),J===46?V===-1?V=ie:Q!==1&&(Q=1):V!==-1&&(Q=-1);else if(!ne){O=ie+1;break}}return V===-1||B===-1||Q===0||Q===1&&V===B-1&&V===O+1?"":R.slice(V,B)},format:function(R){if(R===null||typeof R!="object")throw new TypeError('The "pathObject" argument must be of type Object. Received type '+typeof R);return function(V,O){var B=O.dir||O.root,ne=O.base||(O.name||"")+(O.ext||"");return B?B===O.root?B+ne:B+"/"+ne:ne}(0,R)},parse:function(R){D(R);var V={root:"",dir:"",base:"",ext:"",name:""};if(R.length===0)return V;var O,B=R.charCodeAt(0),ne=B===47;ne?(V.root="/",O=1):O=0;for(var Q=-1,ie=0,J=-1,le=!0,Ce=R.length-1,F=0;Ce>=O;--Ce)if((B=R.charCodeAt(Ce))!==47)J===-1&&(le=!1,J=Ce+1),B===46?Q===-1?Q=Ce:F!==1&&(F=1):Q!==-1&&(F=-1);else if(!le){ie=Ce+1;break}return Q===-1||J===-1||F===0||F===1&&Q===J-1&&Q===ie+1?J!==-1&&(V.base=V.name=ie===0&&ne?R.slice(1,J):R.slice(ie,J)):(ie===0&&ne?(V.name=R.slice(1,Q),V.base=R.slice(1,J)):(V.name=R.slice(ie,Q),V.base=R.slice(ie,J)),V.ext=R.slice(Q,J)),ie>0?V.dir=R.slice(0,ie-1):ne&&(V.dir="/"),V},sep:"/",delimiter:":",win32:null,posix:null};w.posix=w,H.exports=w}},e={};function t(H){var D=e[H];if(D!==void 0)return D.exports;var W=e[H]={exports:{}};return r[H](W,W.exports,t),W.exports}t.d=(H,D)=>{for(var W in D)t.o(D,W)&&!t.o(H,W)&&Object.defineProperty(H,W,{enumerable:!0,get:D[W]})},t.o=(H,D)=>Object.prototype.hasOwnProperty.call(H,D),t.r=H=>{typeof Symbol<"u"&&Symbol.toStringTag&&Object.defineProperty(H,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(H,"__esModule",{value:!0})};var n={};let o;t.r(n),t.d(n,{URI:()=>f,Utils:()=>k}),typeof process=="object"?o=process.platform==="win32":typeof navigator=="object"&&(o=navigator.userAgent.indexOf("Windows")>=0);let s=/^\w[\w\d+.-]*$/,a=/^\//,l=/^\/\//;function c(H,D){if(!H.scheme&&D)throw new Error(`[UriError]: Scheme is missing: {scheme: "", authority: "${H.authority}", path: "${H.path}", query: "${H.query}", fragment: "${H.fragment}"}`);if(H.scheme&&!s.test(H.scheme))throw new Error("[UriError]: Scheme contains illegal characters.");if(H.path){if(H.authority){if(!a.test(H.path))throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character')}else if(l.test(H.path))throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")')}}let u="",d="/",p=/^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/;class f{static isUri(D){return D instanceof f||!!D&&typeof D.authority=="string"&&typeof D.fragment=="string"&&typeof D.path=="string"&&typeof D.query=="string"&&typeof D.scheme=="string"&&typeof D.fsPath=="string"&&typeof D.with=="function"&&typeof D.toString=="function"}scheme;authority;path;query;fragment;constructor(D,W,w,R,V,O=!1){typeof D=="object"?(this.scheme=D.scheme||u,this.authority=D.authority||u,this.path=D.path||u,this.query=D.query||u,this.fragment=D.fragment||u):(this.scheme=function(B,ne){return B||ne?B:"file"}(D,O),this.authority=W||u,this.path=function(B,ne){switch(B){case"https":case"http":case"file":ne?ne[0]!==d&&(ne=d+ne):ne=d}return ne}(this.scheme,w||u),this.query=R||u,this.fragment=V||u,c(this,O))}get fsPath(){return b(this,!1)}with(D){if(!D)return this;let{scheme:W,authority:w,path:R,query:V,fragment:O}=D;return W===void 0?W=this.scheme:W===null&&(W=u),w===void 0?w=this.authority:w===null&&(w=u),R===void 0?R=this.path:R===null&&(R=u),V===void 0?V=this.query:V===null&&(V=u),O===void 0?O=this.fragment:O===null&&(O=u),W===this.scheme&&w===this.authority&&R===this.path&&V===this.query&&O===this.fragment?this:new h(W,w,R,V,O)}static parse(D,W=!1){let w=p.exec(D);return w?new h(w[2]||u,x(w[4]||u),x(w[5]||u),x(w[7]||u),x(w[9]||u),W):new h(u,u,u,u,u)}static file(D){let W=u;if(o&&(D=D.replace(/\\/g,d)),D[0]===d&&D[1]===d){let w=D.indexOf(d,2);w===-1?(W=D.substring(2),D=d):(W=D.substring(2,w),D=D.substring(w)||d)}return new h("file",W,D,u,u)}static from(D){let W=new h(D.scheme,D.authority,D.path,D.query,D.fragment);return c(W,!0),W}toString(D=!1){return E(this,D)}toJSON(){return this}static revive(D){if(D){if(D instanceof f)return D;{let W=new h(D);return W._formatted=D.external,W._fsPath=D._sep===m?D.fsPath:null,W}}return D}}let m=o?1:void 0;class h extends f{_formatted=null;_fsPath=null;get fsPath(){return this._fsPath||(this._fsPath=b(this,!1)),this._fsPath}toString(D=!1){return D?E(this,!0):(this._formatted||(this._formatted=E(this,!1)),this._formatted)}toJSON(){let D={$mid:1};return this._fsPath&&(D.fsPath=this._fsPath,D._sep=m),this._formatted&&(D.external=this._formatted),this.path&&(D.path=this.path),this.scheme&&(D.scheme=this.scheme),this.authority&&(D.authority=this.authority),this.query&&(D.query=this.query),this.fragment&&(D.fragment=this.fragment),D}}let g={58:"%3A",47:"%2F",63:"%3F",35:"%23",91:"%5B",93:"%5D",64:"%40",33:"%21",36:"%24",38:"%26",39:"%27",40:"%28",41:"%29",42:"%2A",43:"%2B",44:"%2C",59:"%3B",61:"%3D",32:"%20"};function y(H,D,W){let w,R=-1;for(let V=0;V<H.length;V++){let O=H.charCodeAt(V);if(O>=97&&O<=122||O>=65&&O<=90||O>=48&&O<=57||O===45||O===46||O===95||O===126||D&&O===47||W&&O===91||W&&O===93||W&&O===58)R!==-1&&(w+=encodeURIComponent(H.substring(R,V)),R=-1),w!==void 0&&(w+=H.charAt(V));else{w===void 0&&(w=H.substr(0,V));let B=g[O];B!==void 0?(R!==-1&&(w+=encodeURIComponent(H.substring(R,V)),R=-1),w+=B):R===-1&&(R=V)}}return R!==-1&&(w+=encodeURIComponent(H.substring(R))),w!==void 0?w:H}function A(H){let D;for(let W=0;W<H.length;W++){let w=H.charCodeAt(W);w===35||w===63?(D===void 0&&(D=H.substr(0,W)),D+=g[w]):D!==void 0&&(D+=H[W])}return D!==void 0?D:H}function b(H,D){let W;return W=H.authority&&H.path.length>1&&H.scheme==="file"?`//${H.authority}${H.path}`:H.path.charCodeAt(0)===47&&(H.path.charCodeAt(1)>=65&&H.path.charCodeAt(1)<=90||H.path.charCodeAt(1)>=97&&H.path.charCodeAt(1)<=122)&&H.path.charCodeAt(2)===58?D?H.path.substr(1):H.path[1].toLowerCase()+H.path.substr(2):H.path,o&&(W=W.replace(/\//g,"\\")),W}function E(H,D){let W=D?A:y,w="",{scheme:R,authority:V,path:O,query:B,fragment:ne}=H;if(R&&(w+=R,w+=":"),(V||R==="file")&&(w+=d,w+=d),V){let Q=V.indexOf("@");if(Q!==-1){let ie=V.substr(0,Q);V=V.substr(Q+1),Q=ie.lastIndexOf(":"),Q===-1?w+=W(ie,!1,!1):(w+=W(ie.substr(0,Q),!1,!1),w+=":",w+=W(ie.substr(Q+1),!1,!0)),w+="@"}V=V.toLowerCase(),Q=V.lastIndexOf(":"),Q===-1?w+=W(V,!1,!0):(w+=W(V.substr(0,Q),!1,!0),w+=V.substr(Q))}if(O){if(O.length>=3&&O.charCodeAt(0)===47&&O.charCodeAt(2)===58){let Q=O.charCodeAt(1);Q>=65&&Q<=90&&(O=`/${String.fromCharCode(Q+32)}:${O.substr(3)}`)}else if(O.length>=2&&O.charCodeAt(1)===58){let Q=O.charCodeAt(0);Q>=65&&Q<=90&&(O=`${String.fromCharCode(Q+32)}:${O.substr(2)}`)}w+=W(O,!0,!1)}return B&&(w+="?",w+=W(B,!1,!1)),ne&&(w+="#",w+=D?ne:y(ne,!1,!1)),w}function S(H){try{return decodeURIComponent(H)}catch{return H.length>3?H.substr(0,3)+S(H.substr(3)):H}}let _=/(%[0-9A-Za-z][0-9A-Za-z])+/g;function x(H){return H.match(_)?H.replace(_,D=>S(D)):H}var I=t(975);let P=I.posix||I,N="/";var k;(function(H){H.joinPath=function(D,...W){return D.with({path:P.join(D.path,...W)})},H.resolvePath=function(D,...W){let w=D.path,R=!1;w[0]!==N&&(w=N+w,R=!0);let V=P.resolve(w,...W);return R&&V[0]===N&&!D.authority&&(V=V.substring(1)),D.with({path:V})},H.dirname=function(D){if(D.path.length===0||D.path===N)return D;let W=P.dirname(D.path);return W.length===1&&W.charCodeAt(0)===46&&(W=""),D.with({path:W})},H.basename=function(D){return P.basename(D.path)},H.extname=function(D){return P.extname(D.path)}})(k||(k={})),W0t=n})();var{URI:Nde,Utils:_Oe}=W0t;function Y0t(r){try{return decodeURIComponent(r)}catch{return r.length>3?r.substring(0,3)+Y0t(r.substring(3)):r}}var j0t=/(%[0-9A-Za-z][0-9A-Za-z])+/g;function LCr(r){return r.match(j0t)?r.replace(j0t,e=>Y0t(e)):r}function Lde(r){if(typeof r!="string"&&(r=r.uri),/^[A-Za-z]:\\/.test(r))throw new Error(`Could not parse <${r}>: Windows-style path`);try{let e=r.match(/^(?:([^:/?#]+?:)?\/\/)(\/\/.*)$/);return e?Nde.parse(e[1]+e[2],!0):Nde.parse(r,!0)}catch(e){throw new Error(`Could not parse <${r}>`,{cause:e})}}function hE(r){try{return Lde(r).toString()}catch{return r}}var z0t=new Set(["file","notebook","vscode-notebook","vscode-notebook-cell"]);function MCr(r){let e=Lde(r);if(!z0t.has(e.scheme))throw new Error(`Copilot currently does not support URI with scheme: ${e.scheme}`);if((0,$0t.platform)()==="win32"){let t=e.path;return e.authority?t=`//${e.authority}${e.path}`:/^\/[A-Za-z]:/.test(t)&&(t=t.substring(1)),(0,COe.normalize)(t)}else{if(e.authority)throw new Error("Unsupported remote file path");return e.path}}function OCr(r){try{return MCr(r)}catch{return}}function K0t(r){let e=OCr(r);if(e)return Nde.file(e).toString()}function YY(r,...e){let t=_Oe.joinPath(Lde(r),...e.map(BCr)).toString();return typeof r=="string"?t:{uri:t}}function BCr(r){return FCr(r)?r.replaceAll("\\","/"):r}function FCr(r){return/^[^/\\]*\\/.test(r)}function k4(r){return LCr((typeof r=="string"?r:r.uri).replace(/[#?].*$/,"").replace(/\/$/,"").replace(/^.*[/:]/,""))}function TOe(r){let e=_Oe.dirname(Lde(r)),t;return z0t.has(e.scheme)&&e.scheme!=="file"?t=e.with({scheme:"file",fragment:""}).toString():t=e.toString(),typeof r=="string"?t:{uri:t}}var xo=class{constructor(e){this.ctx=e}async textDocuments(){let e=this.getTextDocumentsUnsafe(),t=[];for(let n of e)(await OL(this.ctx,n,n.getText())).status==="valid"&&t.push(n);return t}getTextDocumentUnsafe(e){let t=hE(e.uri);return this.getTextDocumentsUnsafe().find(n=>n.uri===t)}async getTextDocument(e){return this.getTextDocumentWithValidation(e).then(t=>{if(t.status==="valid")return t.document})}validateTextDocument(e,t){return OL(this.ctx,e,t)}async getTextDocumentValidation(e){try{let t=this.getTextDocumentUnsafe(e)?.getText()??await this.readTextDocumentFromDisk(e.uri);return t===void 0?this.notFoundResult(e):this.validateTextDocument(e,t)}catch{return this.notFoundResult(e)}}async getTextDocumentWithValidation(e){let t=this.getTextDocumentUnsafe(e);if(!t)return this.notFoundResult(e);let n=await this.validateTextDocument(e,t.getText());return n.status==="valid"?{status:"valid",document:t}:n}notFoundResult({uri:e}){return{status:"notfound",message:`Document for URI could not be found: ${e}`}}async readTextDocumentFromDisk(e){try{if((await this.ctx.get(fd).stat(e)).size>5*1024*1024)return}catch{return}return await this.ctx.get(fd).readFileString(e)}getWorkspaceFolder(e){let t=hE(e.uri);return this.getWorkspaceFolders().find(n=>t.startsWith(hE(n.uri)))}getRelativePath(e){if(e.uri.startsWith("untitled:"))return;let t=hE(e.uri);for(let n of this.getWorkspaceFolders()){let o=hE(n.uri).replace(/[#?].*/,"").replace(/\/?$/,"/");if(t.startsWith(o))return t.slice(o.length)}return k4(t)}};var IOe=new Os;function J0t(r){return[...r].sort((e,t)=>{let n=IOe.get(e.uri)??0;return(IOe.get(t.uri)??0)-n})}var X0t=r=>r.get(xo).onDidFocusTextDocument(e=>{e.document&&IOe.set(e.document.uri.toString(),Date.now())});var xOe=require("vscode"),ZC=class{constructor(){this.recentNotifications=new Os(100)}async showWarningMessageOnlyOnce(e,t,...n){if(!this.recentNotifications.has(e??t))return this.recentNotifications.set(e??t,!0),this.showWarningMessage(t,...n)}async showInformationMessageOnlyOnce(e,t,...n){if(!this.recentNotifications.has(e??t))return this.recentNotifications.set(e??t,!0),this.showInformationMessage(t,...n)}},Mde=class extends ZC{async showWarningMessage(e,...t){let n=await xOe.window.showWarningMessage(e,...t.map(o=>o.title));if(n!==void 0)return{title:n}}async showInformationMessage(e,...t){let n=await xOe.window.showInformationMessage(e,...t.map(o=>o.title));if(n!==void 0)return{title:n}}async showWarningMessageOnlyOnce(e,t,...n){if(e!=="free_over_limits")return super.showWarningMessageOnlyOnce(e,t,...n)}async showInformationMessageOnlyOnce(e,t,...n){return super.showInformationMessageOnlyOnce(e,t,...n)}};var BL=class{};var UCr=["UNABLE_TO_VERIFY_LEAF_SIGNATURE","CERT_SIGNATURE_FAILURE"],Z0t="Your proxy connection requires a trusted certificate. Please make sure the proxy certificate and any issuers are configured correctly and trusted by your operating system.",evt="https://gh.io/copilot-network-errors",FL=class{constructor(){this.notifiedErrorCodes=[]}notifyUser(e,t){if(!(t instanceof Error))return;let n=t;n.code&&UCr.includes(n.code)&&!this.didNotifyBefore(n.code)&&(this.notifiedErrorCodes.push(n.code),this.displayCertificateErrorNotification(e,n))}async displayCertificateErrorNotification(e,t){new qi("certificates").error(e,`${Z0t} Please visit ${evt} to learn more. Original cause:`,t);let n={title:"Learn more"};return e.get(ZC).showWarningMessage(Z0t,n).then(o=>{if(o?.title===n.title)return e.get(BL).open(evt)})}didNotifyBefore(e){return this.notifiedErrorCodes.indexOf(e)!==-1}};var zY={abap:{extensions:[".abap"]},aspdotnet:{extensions:[".asax",".ascx",".ashx",".asmx",".aspx",".axd"]},bat:{extensions:[".bat",".cmd"]},bibtex:{extensions:[".bib",".bibtex"]},blade:{extensions:[".blade",".blade.php"]},BluespecSystemVerilog:{extensions:[".bsv"]},c:{extensions:[".c",".cats",".h",".h.in",".idc"]},csharp:{extensions:[".cake",".cs",".cs.pp",".csx",".linq"]},cpp:{extensions:[".c++",".cc",".cp",".cpp",".cppm",".cxx",".h",".h++",".hh",".hpp",".hxx",".idl",".inc",".inl",".ino",".ipp",".ixx",".rc",".re",".tcc",".tpp",".txx",".i"]},cobol:{extensions:[".cbl",".ccp",".cob",".cobol",".cpy"]},css:{extensions:[".css",".wxss"]},clojure:{extensions:[".bb",".boot",".cl2",".clj",".cljc",".cljs",".cljs.hl",".cljscm",".cljx",".edn",".hic"],filenames:["riemann.config"]},ql:{extensions:[".ql",".qll"]},coffeescript:{extensions:["._coffee",".cake",".cjsx",".coffee",".iced"],filenames:["Cakefile"]},cuda:{extensions:[".cu",".cuh"]},dart:{extensions:[".dart"]},dockerfile:{extensions:[".containerfile",".dockerfile"],filenames:["Containerfile","Dockerfile"]},dotenv:{extensions:[".env"],filenames:[".env",".env.ci",".env.dev",".env.development",".env.development.local",".env.example",".env.local",".env.prod",".env.production",".env.sample",".env.staging",".env.test",".env.testing"]},html:{extensions:[".ect",".ejs",".ejs.t",".jst",".hta",".htm",".html",".html.hl",".html5",".inc",".jsp",".njk",".tpl",".twig",".wxml",".xht",".xhtml",".phtml",".liquid"]},elixir:{extensions:[".ex",".exs"],filenames:["mix.lock"]},erlang:{extensions:[".app",".app.src",".erl",".es",".escript",".hrl",".xrl",".yrl"],filenames:["Emakefile","rebar.config","rebar.config.lock","rebar.lock"]},fsharp:{extensions:[".fs",".fsi",".fsx"]},go:{extensions:[".go"]},groovy:{extensions:[".gradle",".groovy",".grt",".gtpl",".gvy",".jenkinsfile"],filenames:["Jenkinsfile","Jenkinsfile"]},graphql:{extensions:[".gql",".graphql",".graphqls"]},terraform:{extensions:[".hcl",".nomad",".tf",".tfvars",".workflow"]},hlsl:{extensions:[".cginc",".fx",".fxh",".hlsl",".hlsli"]},erb:{extensions:[".erb",".erb.deface",".rhtml"]},razor:{extensions:[".cshtml",".razor"]},haml:{extensions:[".haml",".haml.deface"]},handlebars:{extensions:[".handlebars",".hbs"]},haskell:{extensions:[".hs",".hs-boot",".hsc"]},ini:{extensions:[".cfg",".cnf",".dof",".ini",".lektorproject",".prefs",".pro",".properties",".url"],filenames:[".buckconfig",".coveragerc",".flake8",".pylintrc","HOSTS","buildozer.spec","hosts","pylintrc","vlcrc"]},json:{extensions:[".4DForm",".4DProject",".JSON-tmLanguage",".avsc",".geojson",".gltf",".har",".ice",".json",".json.example",".jsonl",".mcmeta",".sarif",".tact",".tfstate",".tfstate.backup",".topojson",".webapp",".webmanifest",".yy",".yyp"],filenames:[".all-contributorsrc",".arcconfig",".auto-changelog",".c8rc",".htmlhintrc",".imgbotconfig",".nycrc",".tern-config",".tern-project",".watchmanconfig","MODULE.bazel.lock","Package.resolved","Pipfile.lock","bun.lock","composer.lock","deno.lock","flake.lock","mcmod.info"]},jsonc:{extensions:[".code-snippets",".code-workspace",".jsonc",".sublime-build",".sublime-color-scheme",".sublime-commands",".sublime-completions",".sublime-keymap",".sublime-macro",".sublime-menu",".sublime-mousemap",".sublime-project",".sublime-settings",".sublime-theme",".sublime-workspace",".sublime_metrics",".sublime_session"],filenames:[".babelrc",".devcontainer.json",".eslintrc.json",".jscsrc",".jshintrc",".jslintrc",".swcrc","api-extractor.json","argv.json","devcontainer.json","extensions.json","jsconfig.json","keybindings.json","language-configuration.json","launch.json","profiles.json","settings.json","tasks.json","tsconfig.json","tslint.json"]},java:{extensions:[".jav",".java",".jsh"]},javascript:{extensions:["._js",".bones",".cjs",".es",".es6",".frag",".gs",".jake",".javascript",".js",".jsb",".jscad",".jsfl",".jslib",".jsm",".jspre",".jss",".mjs",".njs",".pac",".sjs",".ssjs",".xsjs",".xsjslib"],filenames:["Jakefile"]},julia:{extensions:[".jl"]},kotlin:{extensions:[".kt",".ktm",".kts"]},less:{extensions:[".less"]},lua:{extensions:[".fcgi",".lua",".luau",".nse",".p8",".pd_lua",".rbxs",".rockspec",".wlua"],filenames:[".luacheckrc"]},makefile:{extensions:[".d",".mak",".make",".makefile",".mk",".mkfile"],filenames:["BSDmakefile","GNUmakefile","Kbuild","Makefile","Makefile.am","Makefile.boot","Makefile.frag","Makefile.in","Makefile.inc","Makefile.wat","makefile","makefile.sco","mkfile"]},markdown:{extensions:[".livemd",".markdown",".md",".mdown",".mdwn",".mdx",".mkd",".mkdn",".mkdown",".ronn",".scd",".workbook"],filenames:["contents.lr"]},"objective-c":{extensions:[".h",".m"]},"objective-cpp":{extensions:[".mm"]},php:{extensions:[".aw",".ctp",".fcgi",".inc",".install",".module",".php",".php3",".php4",".php5",".phps",".phpt",".theme"],filenames:[".php",".php_cs",".php_cs.dist","Phakefile"]},perl:{extensions:[".al",".cgi",".fcgi",".perl",".ph",".pl",".plx",".pm",".psgi",".t"],filenames:[".latexmkrc","Makefile.PL","Rexfile","ack","cpanfile","latexmkrc"]},powershell:{extensions:[".ps1",".psd1",".psm1"]},pug:{extensions:[".jade",".pug"]},python:{extensions:[".cgi",".codon",".fcgi",".gyp",".gypi",".lmi",".py",".py3",".pyde",".pyi",".pyp",".pyt",".pyw",".rpy",".sage",".spec",".tac",".wsgi",".xpy"],filenames:[".gclient","DEPS","SConscript","SConstruct","wscript"]},r:{extensions:[".r",".rd",".rsx"],filenames:[".Rprofile","expr-dist"]},ruby:{extensions:[".builder",".eye",".fcgi",".gemspec",".god",".jbuilder",".mspec",".pluginspec",".podspec",".prawn",".rabl",".rake",".rb",".rbi",".rbuild",".rbw",".rbx",".ru",".ruby",".spec",".thor",".watchr"],filenames:[".irbrc",".pryrc",".simplecov","Appraisals","Berksfile","Brewfile","Buildfile","Capfile","Dangerfile","Deliverfile","Fastfile","Gemfile","Guardfile","Jarfile","Mavenfile","Podfile","Puppetfile","Rakefile","Snapfile","Steepfile","Thorfile","Vagrantfile","buildfile"]},rust:{extensions:[".rs",".rs.in"]},scss:{extensions:[".scss"]},sql:{extensions:[".cql",".ddl",".inc",".mysql",".prc",".sql",".tab",".udf",".viw"]},sass:{extensions:[".sass"]},scala:{extensions:[".kojo",".sbt",".sc",".scala"]},shellscript:{extensions:[".bash",".bats",".cgi",".command",".fcgi",".fish",".ksh",".sh",".sh.in",".tmux",".tool",".trigger",".zsh",".zsh-theme"],filenames:[".bash_aliases",".bash_functions",".bash_history",".bash_logout",".bash_profile",".bashrc",".cshrc",".envrc",".flaskenv",".kshrc",".login",".profile",".tmux.conf",".zlogin",".zlogout",".zprofile",".zshenv",".zshrc","9fs","PKGBUILD","bash_aliases","bash_logout","bash_profile","bashrc","cshrc","gradlew","kshrc","login","man","profile","tmux.conf","zlogin","zlogout","zprofile","zshenv","zshrc"]},slang:{extensions:[".fxc",".hlsl",".s",".slang",".slangh",".usf",".ush",".vfx"]},slim:{extensions:[".slim"]},solidity:{extensions:[".sol"]},stylus:{extensions:[".styl"]},svelte:{extensions:[".svelte"]},swift:{extensions:[".swift"]},systemverilog:{extensions:[".sv",".svh",".vh"]},typescriptreact:{extensions:[".tsx"]},latex:{extensions:[".aux",".bbx",".cbx",".cls",".dtx",".ins",".lbx",".ltx",".mkii",".mkiv",".mkvi",".sty",".tex",".toc"]},typescript:{extensions:[".cts",".mts",".ts"]},verilog:{extensions:[".v",".veo"]},vim:{extensions:[".vba",".vim",".vimrc",".vmb"],filenames:[".exrc",".gvimrc",".nvimrc",".vimrc","_vimrc","gvimrc","nvimrc","vimrc"]},vb:{extensions:[".vb",".vbhtml",".Dsr",".bas",".cls",".ctl",".frm",".vbs"]},vue:{extensions:[".nvue",".vue"]},xml:{extensions:[".adml",".admx",".ant",".axaml",".axml",".builds",".ccproj",".ccxml",".clixml",".cproject",".cscfg",".csdef",".csl",".csproj",".ct",".depproj",".dita",".ditamap",".ditaval",".dll.config",".dotsettings",".filters",".fsproj",".fxml",".glade",".gml",".gmx",".gpx",".grxml",".gst",".hzp",".iml",".ivy",".jelly",".jsproj",".kml",".launch",".mdpolicy",".mjml",".mod",".mojo",".mxml",".natvis",".ncl",".ndproj",".nproj",".nuspec",".odd",".osm",".pkgproj",".plist",".pluginspec",".proj",".props",".ps1xml",".psc1",".pt",".pubxml",".qhelp",".rdf",".res",".resx",".rss",".sch",".scxml",".sfproj",".shproj",".srdf",".storyboard",".sublime-snippet",".svg",".sw",".targets",".tml",".typ",".ui",".urdf",".ux",".vbproj",".vcxproj",".vsixmanifest",".vssettings",".vstemplate",".vxml",".wixproj",".workflow",".wsdl",".wsf",".wxi",".wxl",".wxs",".x3d",".xacro",".xaml",".xib",".xlf",".xliff",".xmi",".xml",".xml.dist",".xmp",".xproj",".xsd",".xspec",".xul",".zcml"],filenames:[".classpath",".cproject",".project","App.config","NuGet.config","Settings.StyleCop","Web.Debug.config","Web.Release.config","Web.config","packages.config"]},xsl:{extensions:[".xsl",".xslt"]},yaml:{extensions:[".mir",".reek",".rviz",".sublime-syntax",".syntax",".yaml",".yaml-tmlanguage",".yaml.sed",".yml",".yml.mysql"],filenames:[".clang-format",".clang-tidy",".clangd",".gemrc","CITATION.cff","glide.lock","pixi.lock","yarn.lock"]},javascriptreact:{extensions:[".jsx"]},legend:{extensions:[".pure"]}};var tvt=[".ejs",".erb",".haml",".hbs",".j2",".jinja",".jinja2",".liquid",".mustache",".njk",".php",".pug",".slim",".webc"],rvt={".php":[".blade"]},nvt=Object.keys(zY).flatMap(r=>zY[r].extensions);var ROe=z(require("node:path")),N4=class{constructor(e,t,n){this.languageId=e;this.isGuess=t;this.fileExtension=n}},KY=class{},wOe=new Map,D4=new Map;for(let[r,{extensions:e,filenames:t}]of Object.entries(zY)){for(let n of e)wOe.set(n,[...wOe.get(n)??[],r]);for(let n of t??[])D4.set(n,[...D4.get(n)??[],r])}var POe=class extends KY{detectLanguage(e){let t=k4(e.uri),n=ROe.extname(t).toLowerCase(),o=this.extensionWithoutTemplateLanguage(t,n),s=this.detectLanguageId(t,o),a=this.computeFullyQualifiedExtension(n,o);return s?new N4(s.languageId,s.isGuess,a):new N4(e.languageId,!0,a)}extensionWithoutTemplateLanguage(e,t){if(tvt.includes(t)){let n=e.substring(0,e.lastIndexOf(".")),o=ROe.extname(n).toLowerCase();if(o.length>0&&nvt.includes(o)&&this.isExtensionValidForTemplateLanguage(t,o))return o}return t}isExtensionValidForTemplateLanguage(e,t){let n=rvt[e];return!n||n.includes(t)}detectLanguageId(e,t){if(D4.has(e))return{languageId:D4.get(e)[0],isGuess:!1};let n=wOe.get(t)??[];if(n.length>0)return{languageId:n[0],isGuess:n.length>1};for(;e.includes(".");)if(e=e.replace(/\.[^.]*$/,""),D4.has(e))return{languageId:D4.get(e)[0],isGuess:!1}}computeFullyQualifiedExtension(e,t){return e!==t?t+e:e}},kOe=class extends KY{constructor(t){super();this.delegate=t}detectLanguage(t){let n=this.delegate.detectLanguage(t),o=n.languageId;return o==="c"||o==="cpp"?new N4("cpp",n.isGuess,n.fileExtension):n}},DOe=class extends KY{constructor(t){super();this.delegate=t}detectLanguage(t){return t.uri.startsWith("untitled:")||t.uri.startsWith("vscode-notebook-cell:")?new N4(t.languageId,!0,""):this.delegate.detectLanguage(t)}},QCr=new kOe(new DOe(new POe));function L4({uri:r,languageId:e}){let t=QCr.detectLanguage({uri:r,languageId:"UNKNOWN"});return t.languageId==="UNKNOWN"?e:t.languageId}var ovt;(function(r){function e(t){return typeof t=="string"}r.is=e})(ovt||(ovt={}));var NOe;(function(r){function e(t){return typeof t=="string"}r.is=e})(NOe||(NOe={}));var ivt;(function(r){r.MIN_VALUE=-2147483648,r.MAX_VALUE=2147483647;function e(t){return typeof t=="number"&&r.MIN_VALUE<=t&&t<=r.MAX_VALUE}r.is=e})(ivt||(ivt={}));var Ode;(function(r){r.MIN_VALUE=0,r.MAX_VALUE=2147483647;function e(t){return typeof t=="number"&&r.MIN_VALUE<=t&&t<=r.MAX_VALUE}r.is=e})(Ode||(Ode={}));var dp;(function(r){function e(n,o){return n===Number.MAX_VALUE&&(n=Ode.MAX_VALUE),o===Number.MAX_VALUE&&(o=Ode.MAX_VALUE),{line:n,character:o}}r.create=e;function t(n){let o=n;return Ze.objectLiteral(o)&&Ze.uinteger(o.line)&&Ze.uinteger(o.character)}r.is=t})(dp||(dp={}));var Ws;(function(r){function e(n,o,s,a){if(Ze.uinteger(n)&&Ze.uinteger(o)&&Ze.uinteger(s)&&Ze.uinteger(a))return{start:dp.create(n,o),end:dp.create(s,a)};if(dp.is(n)&&dp.is(o))return{start:n,end:o};throw new Error(`Range#create called with invalid arguments[${n}, ${o}, ${s}, ${a}]`)}r.create=e;function t(n){let o=n;return Ze.objectLiteral(o)&&dp.is(o.start)&&dp.is(o.end)}r.is=t})(Ws||(Ws={}));var Bde;(function(r){function e(n,o){return{uri:n,range:o}}r.create=e;function t(n){let o=n;return Ze.objectLiteral(o)&&Ws.is(o.range)&&(Ze.string(o.uri)||Ze.undefined(o.uri))}r.is=t})(Bde||(Bde={}));var svt;(function(r){function e(n,o,s,a){return{targetUri:n,targetRange:o,targetSelectionRange:s,originSelectionRange:a}}r.create=e;function t(n){let o=n;return Ze.objectLiteral(o)&&Ws.is(o.targetRange)&&Ze.string(o.targetUri)&&Ws.is(o.targetSelectionRange)&&(Ws.is(o.originSelectionRange)||Ze.undefined(o.originSelectionRange))}r.is=t})(svt||(svt={}));var LOe;(function(r){function e(n,o,s,a){return{red:n,green:o,blue:s,alpha:a}}r.create=e;function t(n){let o=n;return Ze.objectLiteral(o)&&Ze.numberRange(o.red,0,1)&&Ze.numberRange(o.green,0,1)&&Ze.numberRange(o.blue,0,1)&&Ze.numberRange(o.alpha,0,1)}r.is=t})(LOe||(LOe={}));var avt;(function(r){function e(n,o){return{range:n,color:o}}r.create=e;function t(n){let o=n;return Ze.objectLiteral(o)&&Ws.is(o.range)&&LOe.is(o.color)}r.is=t})(avt||(avt={}));var lvt;(function(r){function e(n,o,s){return{label:n,textEdit:o,additionalTextEdits:s}}r.create=e;function t(n){let o=n;return Ze.objectLiteral(o)&&Ze.string(o.label)&&(Ze.undefined(o.textEdit)||O4.is(o))&&(Ze.undefined(o.additionalTextEdits)||Ze.typedArray(o.additionalTextEdits,O4.is))}r.is=t})(lvt||(lvt={}));var cvt;(function(r){r.Comment="comment",r.Imports="imports",r.Region="region"})(cvt||(cvt={}));var uvt;(function(r){function e(n,o,s,a,l,c){let u={startLine:n,endLine:o};return Ze.defined(s)&&(u.startCharacter=s),Ze.defined(a)&&(u.endCharacter=a),Ze.defined(l)&&(u.kind=l),Ze.defined(c)&&(u.collapsedText=c),u}r.create=e;function t(n){let o=n;return Ze.objectLiteral(o)&&Ze.uinteger(o.startLine)&&Ze.uinteger(o.startLine)&&(Ze.undefined(o.startCharacter)||Ze.uinteger(o.startCharacter))&&(Ze.undefined(o.endCharacter)||Ze.uinteger(o.endCharacter))&&(Ze.undefined(o.kind)||Ze.string(o.kind))}r.is=t})(uvt||(uvt={}));var MOe;(function(r){function e(n,o){return{location:n,message:o}}r.create=e;function t(n){let o=n;return Ze.defined(o)&&Bde.is(o.location)&&Ze.string(o.message)}r.is=t})(MOe||(MOe={}));var dvt;(function(r){r.Error=1,r.Warning=2,r.Information=3,r.Hint=4})(dvt||(dvt={}));var pvt;(function(r){r.Unnecessary=1,r.Deprecated=2})(pvt||(pvt={}));var fvt;(function(r){function e(t){let n=t;return Ze.objectLiteral(n)&&Ze.string(n.href)}r.is=e})(fvt||(fvt={}));var Fde;(function(r){function e(n,o,s,a,l,c){let u={range:n,message:o};return Ze.defined(s)&&(u.severity=s),Ze.defined(a)&&(u.code=a),Ze.defined(l)&&(u.source=l),Ze.defined(c)&&(u.relatedInformation=c),u}r.create=e;function t(n){var o;let s=n;return Ze.defined(s)&&Ws.is(s.range)&&Ze.string(s.message)&&(Ze.number(s.severity)||Ze.undefined(s.severity))&&(Ze.integer(s.code)||Ze.string(s.code)||Ze.undefined(s.code))&&(Ze.undefined(s.codeDescription)||Ze.string((o=s.codeDescription)===null||o===void 0?void 0:o.href))&&(Ze.string(s.source)||Ze.undefined(s.source))&&(Ze.undefined(s.relatedInformation)||Ze.typedArray(s.relatedInformation,MOe.is))}r.is=t})(Fde||(Fde={}));var M4;(function(r){function e(n,o,...s){let a={title:n,command:o};return Ze.defined(s)&&s.length>0&&(a.arguments=s),a}r.create=e;function t(n){let o=n;return Ze.defined(o)&&Ze.string(o.title)&&Ze.string(o.command)}r.is=t})(M4||(M4={}));var O4;(function(r){function e(s,a){return{range:s,newText:a}}r.replace=e;function t(s,a){return{range:{start:s,end:s},newText:a}}r.insert=t;function n(s){return{range:s,newText:""}}r.del=n;function o(s){let a=s;return Ze.objectLiteral(a)&&Ze.string(a.newText)&&Ws.is(a.range)}r.is=o})(O4||(O4={}));var OOe;(function(r){function e(n,o,s){let a={label:n};return o!==void 0&&(a.needsConfirmation=o),s!==void 0&&(a.description=s),a}r.create=e;function t(n){let o=n;return Ze.objectLiteral(o)&&Ze.string(o.label)&&(Ze.boolean(o.needsConfirmation)||o.needsConfirmation===void 0)&&(Ze.string(o.description)||o.description===void 0)}r.is=t})(OOe||(OOe={}));var B4;(function(r){function e(t){let n=t;return Ze.string(n)}r.is=e})(B4||(B4={}));var mvt;(function(r){function e(s,a,l){return{range:s,newText:a,annotationId:l}}r.replace=e;function t(s,a,l){return{range:{start:s,end:s},newText:a,annotationId:l}}r.insert=t;function n(s,a){return{range:s,newText:"",annotationId:a}}r.del=n;function o(s){let a=s;return O4.is(a)&&(OOe.is(a.annotationId)||B4.is(a.annotationId))}r.is=o})(mvt||(mvt={}));var BOe;(function(r){function e(n,o){return{textDocument:n,edits:o}}r.create=e;function t(n){let o=n;return Ze.defined(o)&&VOe.is(o.textDocument)&&Array.isArray(o.edits)}r.is=t})(BOe||(BOe={}));var FOe;(function(r){function e(n,o,s){let a={kind:"create",uri:n};return o!==void 0&&(o.overwrite!==void 0||o.ignoreIfExists!==void 0)&&(a.options=o),s!==void 0&&(a.annotationId=s),a}r.create=e;function t(n){let o=n;return o&&o.kind==="create"&&Ze.string(o.uri)&&(o.options===void 0||(o.options.overwrite===void 0||Ze.boolean(o.options.overwrite))&&(o.options.ignoreIfExists===void 0||Ze.boolean(o.options.ignoreIfExists)))&&(o.annotationId===void 0||B4.is(o.annotationId))}r.is=t})(FOe||(FOe={}));var UOe;(function(r){function e(n,o,s,a){let l={kind:"rename",oldUri:n,newUri:o};return s!==void 0&&(s.overwrite!==void 0||s.ignoreIfExists!==void 0)&&(l.options=s),a!==void 0&&(l.annotationId=a),l}r.create=e;function t(n){let o=n;return o&&o.kind==="rename"&&Ze.string(o.oldUri)&&Ze.string(o.newUri)&&(o.options===void 0||(o.options.overwrite===void 0||Ze.boolean(o.options.overwrite))&&(o.options.ignoreIfExists===void 0||Ze.boolean(o.options.ignoreIfExists)))&&(o.annotationId===void 0||B4.is(o.annotationId))}r.is=t})(UOe||(UOe={}));var QOe;(function(r){function e(n,o,s){let a={kind:"delete",uri:n};return o!==void 0&&(o.recursive!==void 0||o.ignoreIfNotExists!==void 0)&&(a.options=o),s!==void 0&&(a.annotationId=s),a}r.create=e;function t(n){let o=n;return o&&o.kind==="delete"&&Ze.string(o.uri)&&(o.options===void 0||(o.options.recursive===void 0||Ze.boolean(o.options.recursive))&&(o.options.ignoreIfNotExists===void 0||Ze.boolean(o.options.ignoreIfNotExists)))&&(o.annotationId===void 0||B4.is(o.annotationId))}r.is=t})(QOe||(QOe={}));var qOe;(function(r){function e(t){let n=t;return n&&(n.changes!==void 0||n.documentChanges!==void 0)&&(n.documentChanges===void 0||n.documentChanges.every(o=>Ze.string(o.kind)?FOe.is(o)||UOe.is(o)||QOe.is(o):BOe.is(o)))}r.is=e})(qOe||(qOe={}));var hvt;(function(r){function e(n){return{uri:n}}r.create=e;function t(n){let o=n;return Ze.defined(o)&&Ze.string(o.uri)}r.is=t})(hvt||(hvt={}));var gvt;(function(r){function e(n,o){return{uri:n,version:o}}r.create=e;function t(n){let o=n;return Ze.defined(o)&&Ze.string(o.uri)&&Ze.integer(o.version)}r.is=t})(gvt||(gvt={}));var VOe;(function(r){function e(n,o){return{uri:n,version:o}}r.create=e;function t(n){let o=n;return Ze.defined(o)&&Ze.string(o.uri)&&(o.version===null||Ze.integer(o.version))}r.is=t})(VOe||(VOe={}));var vvt;(function(r){function e(n,o,s,a){return{uri:n,languageId:o,version:s,text:a}}r.create=e;function t(n){let o=n;return Ze.defined(o)&&Ze.string(o.uri)&&Ze.string(o.languageId)&&Ze.integer(o.version)&&Ze.string(o.text)}r.is=t})(vvt||(vvt={}));var HOe;(function(r){r.PlainText="plaintext",r.Markdown="markdown";function e(t){let n=t;return n===r.PlainText||n===r.Markdown}r.is=e})(HOe||(HOe={}));var JY;(function(r){function e(t){let n=t;return Ze.objectLiteral(t)&&HOe.is(n.kind)&&Ze.string(n.value)}r.is=e})(JY||(JY={}));var yvt;(function(r){r.Text=1,r.Method=2,r.Function=3,r.Constructor=4,r.Field=5,r.Variable=6,r.Class=7,r.Interface=8,r.Module=9,r.Property=10,r.Unit=11,r.Value=12,r.Enum=13,r.Keyword=14,r.Snippet=15,r.Color=16,r.File=17,r.Reference=18,r.Folder=19,r.EnumMember=20,r.Constant=21,r.Struct=22,r.Event=23,r.Operator=24,r.TypeParameter=25})(yvt||(yvt={}));var Avt;(function(r){r.PlainText=1,r.Snippet=2})(Avt||(Avt={}));var bvt;(function(r){r.Deprecated=1})(bvt||(bvt={}));var Evt;(function(r){function e(n,o,s){return{newText:n,insert:o,replace:s}}r.create=e;function t(n){let o=n;return o&&Ze.string(o.newText)&&Ws.is(o.insert)&&Ws.is(o.replace)}r.is=t})(Evt||(Evt={}));var Svt;(function(r){r.asIs=1,r.adjustIndentation=2})(Svt||(Svt={}));var _vt;(function(r){function e(t){let n=t;return n&&(Ze.string(n.detail)||n.detail===void 0)&&(Ze.string(n.description)||n.description===void 0)}r.is=e})(_vt||(_vt={}));var Cvt;(function(r){function e(t){return{label:t}}r.create=e})(Cvt||(Cvt={}));var Tvt;(function(r){function e(t,n){return{items:t||[],isIncomplete:!!n}}r.create=e})(Tvt||(Tvt={}));var Ude;(function(r){function e(n){return n.replace(/[\\`*_{}[\]()#+\-.!]/g,"\\$&")}r.fromPlainText=e;function t(n){let o=n;return Ze.string(o)||Ze.objectLiteral(o)&&Ze.string(o.language)&&Ze.string(o.value)}r.is=t})(Ude||(Ude={}));var Ivt;(function(r){function e(t){let n=t;return!!n&&Ze.objectLiteral(n)&&(JY.is(n.contents)||Ude.is(n.contents)||Ze.typedArray(n.contents,Ude.is))&&(t.range===void 0||Ws.is(t.range))}r.is=e})(Ivt||(Ivt={}));var xvt;(function(r){function e(t,n){return n?{label:t,documentation:n}:{label:t}}r.create=e})(xvt||(xvt={}));var Rvt;(function(r){function e(t,n,...o){let s={label:t};return Ze.defined(n)&&(s.documentation=n),Ze.defined(o)?s.parameters=o:s.parameters=[],s}r.create=e})(Rvt||(Rvt={}));var wvt;(function(r){r.Text=1,r.Read=2,r.Write=3})(wvt||(wvt={}));var Pvt;(function(r){function e(t,n){let o={range:t};return Ze.number(n)&&(o.kind=n),o}r.create=e})(Pvt||(Pvt={}));var kvt;(function(r){r.File=1,r.Module=2,r.Namespace=3,r.Package=4,r.Class=5,r.Method=6,r.Property=7,r.Field=8,r.Constructor=9,r.Enum=10,r.Interface=11,r.Function=12,r.Variable=13,r.Constant=14,r.String=15,r.Number=16,r.Boolean=17,r.Array=18,r.Object=19,r.Key=20,r.Null=21,r.EnumMember=22,r.Struct=23,r.Event=24,r.Operator=25,r.TypeParameter=26})(kvt||(kvt={}));var Dvt;(function(r){r.Deprecated=1})(Dvt||(Dvt={}));var Nvt;(function(r){function e(t,n,o,s,a){let l={name:t,kind:n,location:{uri:s,range:o}};return a&&(l.containerName=a),l}r.create=e})(Nvt||(Nvt={}));var Lvt;(function(r){function e(t,n,o,s){return s!==void 0?{name:t,kind:n,location:{uri:o,range:s}}:{name:t,kind:n,location:{uri:o}}}r.create=e})(Lvt||(Lvt={}));var Mvt;(function(r){function e(n,o,s,a,l,c){let u={name:n,detail:o,kind:s,range:a,selectionRange:l};return c!==void 0&&(u.children=c),u}r.create=e;function t(n){let o=n;return o&&Ze.string(o.name)&&Ze.number(o.kind)&&Ws.is(o.range)&&Ws.is(o.selectionRange)&&(o.detail===void 0||Ze.string(o.detail))&&(o.deprecated===void 0||Ze.boolean(o.deprecated))&&(o.children===void 0||Array.isArray(o.children))&&(o.tags===void 0||Array.isArray(o.tags))}r.is=t})(Mvt||(Mvt={}));var Ovt;(function(r){r.Empty="",r.QuickFix="quickfix",r.Refactor="refactor",r.RefactorExtract="refactor.extract",r.RefactorInline="refactor.inline",r.RefactorRewrite="refactor.rewrite",r.Source="source",r.SourceOrganizeImports="source.organizeImports",r.SourceFixAll="source.fixAll"})(Ovt||(Ovt={}));var Qde;(function(r){r.Invoked=1,r.Automatic=2})(Qde||(Qde={}));var Bvt;(function(r){function e(n,o,s){let a={diagnostics:n};return o!=null&&(a.only=o),s!=null&&(a.triggerKind=s),a}r.create=e;function t(n){let o=n;return Ze.defined(o)&&Ze.typedArray(o.diagnostics,Fde.is)&&(o.only===void 0||Ze.typedArray(o.only,Ze.string))&&(o.triggerKind===void 0||o.triggerKind===Qde.Invoked||o.triggerKind===Qde.Automatic)}r.is=t})(Bvt||(Bvt={}));var Fvt;(function(r){function e(n,o,s){let a={title:n},l=!0;return typeof o=="string"?(l=!1,a.kind=o):M4.is(o)?a.command=o:a.edit=o,l&&s!==void 0&&(a.kind=s),a}r.create=e;function t(n){let o=n;return o&&Ze.string(o.title)&&(o.diagnostics===void 0||Ze.typedArray(o.diagnostics,Fde.is))&&(o.kind===void 0||Ze.string(o.kind))&&(o.edit!==void 0||o.command!==void 0)&&(o.command===void 0||M4.is(o.command))&&(o.isPreferred===void 0||Ze.boolean(o.isPreferred))&&(o.edit===void 0||qOe.is(o.edit))}r.is=t})(Fvt||(Fvt={}));var Uvt;(function(r){function e(n,o){let s={range:n};return Ze.defined(o)&&(s.data=o),s}r.create=e;function t(n){let o=n;return Ze.defined(o)&&Ws.is(o.range)&&(Ze.undefined(o.command)||M4.is(o.command))}r.is=t})(Uvt||(Uvt={}));var Qvt;(function(r){function e(n,o){return{tabSize:n,insertSpaces:o}}r.create=e;function t(n){let o=n;return Ze.defined(o)&&Ze.uinteger(o.tabSize)&&Ze.boolean(o.insertSpaces)}r.is=t})(Qvt||(Qvt={}));var qvt;(function(r){function e(n,o,s){return{range:n,target:o,data:s}}r.create=e;function t(n){let o=n;return Ze.defined(o)&&Ws.is(o.range)&&(Ze.undefined(o.target)||Ze.string(o.target))}r.is=t})(qvt||(qvt={}));var Vvt;(function(r){function e(n,o){return{range:n,parent:o}}r.create=e;function t(n){let o=n;return Ze.objectLiteral(o)&&Ws.is(o.range)&&(o.parent===void 0||r.is(o.parent))}r.is=t})(Vvt||(Vvt={}));var Hvt;(function(r){r.namespace="namespace",r.type="type",r.class="class",r.enum="enum",r.interface="interface",r.struct="struct",r.typeParameter="typeParameter",r.parameter="parameter",r.variable="variable",r.property="property",r.enumMember="enumMember",r.event="event",r.function="function",r.method="method",r.macro="macro",r.keyword="keyword",r.modifier="modifier",r.comment="comment",r.string="string",r.number="number",r.regexp="regexp",r.operator="operator",r.decorator="decorator"})(Hvt||(Hvt={}));var Gvt;(function(r){r.declaration="declaration",r.definition="definition",r.readonly="readonly",r.static="static",r.deprecated="deprecated",r.abstract="abstract",r.async="async",r.modification="modification",r.documentation="documentation",r.defaultLibrary="defaultLibrary"})(Gvt||(Gvt={}));var Wvt;(function(r){function e(t){let n=t;return Ze.objectLiteral(n)&&(n.resultId===void 0||typeof n.resultId=="string")&&Array.isArray(n.data)&&(n.data.length===0||typeof n.data[0]=="number")}r.is=e})(Wvt||(Wvt={}));var jvt;(function(r){function e(n,o){return{range:n,text:o}}r.create=e;function t(n){let o=n;return o!=null&&Ws.is(o.range)&&Ze.string(o.text)}r.is=t})(jvt||(jvt={}));var $vt;(function(r){function e(n,o,s){return{range:n,variableName:o,caseSensitiveLookup:s}}r.create=e;function t(n){let o=n;return o!=null&&Ws.is(o.range)&&Ze.boolean(o.caseSensitiveLookup)&&(Ze.string(o.variableName)||o.variableName===void 0)}r.is=t})($vt||($vt={}));var Yvt;(function(r){function e(n,o){return{range:n,expression:o}}r.create=e;function t(n){let o=n;return o!=null&&Ws.is(o.range)&&(Ze.string(o.expression)||o.expression===void 0)}r.is=t})(Yvt||(Yvt={}));var zvt;(function(r){function e(n,o){return{frameId:n,stoppedLocation:o}}r.create=e;function t(n){let o=n;return Ze.defined(o)&&Ws.is(n.stoppedLocation)}r.is=t})(zvt||(zvt={}));var GOe;(function(r){r.Type=1,r.Parameter=2;function e(t){return t===1||t===2}r.is=e})(GOe||(GOe={}));var WOe;(function(r){function e(n){return{value:n}}r.create=e;function t(n){let o=n;return Ze.objectLiteral(o)&&(o.tooltip===void 0||Ze.string(o.tooltip)||JY.is(o.tooltip))&&(o.location===void 0||Bde.is(o.location))&&(o.command===void 0||M4.is(o.command))}r.is=t})(WOe||(WOe={}));var Kvt;(function(r){function e(n,o,s){let a={position:n,label:o};return s!==void 0&&(a.kind=s),a}r.create=e;function t(n){let o=n;return Ze.objectLiteral(o)&&dp.is(o.position)&&(Ze.string(o.label)||Ze.typedArray(o.label,WOe.is))&&(o.kind===void 0||GOe.is(o.kind))&&o.textEdits===void 0||Ze.typedArray(o.textEdits,O4.is)&&(o.tooltip===void 0||Ze.string(o.tooltip)||JY.is(o.tooltip))&&(o.paddingLeft===void 0||Ze.boolean(o.paddingLeft))&&(o.paddingRight===void 0||Ze.boolean(o.paddingRight))}r.is=t})(Kvt||(Kvt={}));var Jvt;(function(r){function e(t){return{kind:"snippet",value:t}}r.createSnippet=e})(Jvt||(Jvt={}));var Xvt;(function(r){function e(t,n,o,s){return{insertText:t,filterText:n,range:o,command:s}}r.create=e})(Xvt||(Xvt={}));var Zvt;(function(r){function e(t){return{items:t}}r.create=e})(Zvt||(Zvt={}));var eyt;(function(r){r.Invoked=0,r.Automatic=1})(eyt||(eyt={}));var tyt;(function(r){function e(t,n){return{range:t,text:n}}r.create=e})(tyt||(tyt={}));var ryt;(function(r){function e(t,n){return{triggerKind:t,selectedCompletionInfo:n}}r.create=e})(ryt||(ryt={}));var nyt;(function(r){function e(t){let n=t;return Ze.objectLiteral(n)&&NOe.is(n.uri)&&Ze.string(n.name)}r.is=e})(nyt||(nyt={}));var oyt;(function(r){function e(s,a,l,c){return new jOe(s,a,l,c)}r.create=e;function t(s){let a=s;return!!(Ze.defined(a)&&Ze.string(a.uri)&&(Ze.undefined(a.languageId)||Ze.string(a.languageId))&&Ze.uinteger(a.lineCount)&&Ze.func(a.getText)&&Ze.func(a.positionAt)&&Ze.func(a.offsetAt))}r.is=t;function n(s,a){let l=s.getText(),c=o(a,(d,p)=>{let f=d.range.start.line-p.range.start.line;return f===0?d.range.start.character-p.range.start.character:f}),u=l.length;for(let d=c.length-1;d>=0;d--){let p=c[d],f=s.offsetAt(p.range.start),m=s.offsetAt(p.range.end);if(m<=u)l=l.substring(0,f)+p.newText+l.substring(m,l.length);else throw new Error("Overlapping edit");u=f}return l}r.applyEdits=n;function o(s,a){if(s.length<=1)return s;let l=s.length/2|0,c=s.slice(0,l),u=s.slice(l);o(c,a),o(u,a);let d=0,p=0,f=0;for(;d<c.length&&p<u.length;)a(c[d],u[p])<=0?s[f++]=c[d++]:s[f++]=u[p++];for(;d<c.length;)s[f++]=c[d++];for(;p<u.length;)s[f++]=u[p++];return s}})(oyt||(oyt={}));var jOe=class{constructor(e,t,n,o){this._uri=e,this._languageId=t,this._version=n,this._content=o,this._lineOffsets=void 0}get uri(){return this._uri}get languageId(){return this._languageId}get version(){return this._version}getText(e){if(e){let t=this.offsetAt(e.start),n=this.offsetAt(e.end);return this._content.substring(t,n)}return this._content}update(e,t){this._content=e.text,this._version=t,this._lineOffsets=void 0}getLineOffsets(){if(this._lineOffsets===void 0){let e=[],t=this._content,n=!0;for(let o=0;o<t.length;o++){n&&(e.push(o),n=!1);let s=t.charAt(o);n=s==="\r"||s===`
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/dist/extension.js:914:`)}};var Qfe=class extends EE{constructor(t){super();this._openDocuments=Si(this,[]);this.openDocuments=this._openDocuments;this._documents=new Map;this.ctx=t,this._started=!1,this.start()}start(){if(this._started)return;this._started=!0;let t=this.ctx.get(xo);for(let n of t.getTextDocumentsUnsafe())this.addLspDocument(n.uri,n.clientLanguageId,n.getText());t.onDidOpenTextDocument(n=>{this.addLspDocument(n.document.uri,n.document.languageId,n.document.text)}),t.onDidCloseTextDocument(n=>{this.removeClosedLspDocument(n.document.uri)}),t.onDidChangeTextDocument(n=>{this.onDidChangeLspDocument(n.document.uri,n.contentChanges)})}addLspDocument(t,n,o){let s=wm.create(t);return this.addDocument({id:s,initialValue:o,languageId:iT.create(n)},void 0)}onDidChangeLspDocument(t,n){let o=wm.create(t),s=this._documents.get(o);s&&s.applyLspContentChanges(n)}onUserPositionChange(t,n){let o=wm.create(t),s=this._documents.get(o);s&&s.updateSelectionFromLspPosition(n)}removeClosedLspDocument(t){let n=wm.create(t);this._documents.get(n)?.dispose()}addDocument(t,n=void 0){let o=this._documents.get(t.id);if(o)return o;let s=new FFe(t.id,new Bl(t.initialValue??""),[],t.languageId??iT.PlainText,()=>{this._documents.delete(t.id);let l=this._openDocuments.get(),c=l.filter(u=>u.id!==s.id);c.length!==l.length&&this._openDocuments.set(c,n,{added:[],removed:[s]})},t.workspaceRoot);return this.ctx.get(xo).getTextDocument(s.id).then(l=>{this._documents.set(t.id,s),this._openDocuments.set([...this._openDocuments.get(),s],n,{added:[s],removed:[]})}),s}getDocument(t){return this._documents.get(t)}clear(){this._openDocuments.set([],void 0,{added:[],removed:this._openDocuments.get()});for(let t of this._documents.values())t.dispose();this._documents.clear()}getWorkspaceRoot(t){return this._documents.get(t)?.workspaceRoot}},FFe=class extends Ope{constructor(e,t,n,o,s,a){super(e,t,n,o,s,0,a)}applyLspContentChanges(e){let t=this.editFromLspContentChanges(e);this.applyEdit(t.compose(),void 0)}updateSelectionFromLspPosition(e){let t=this.value.get().getTransformer().getOffset(new Tr(e.lineNumber+1,e.column+1));this.updateSelection([new et(t,t)])}editFromLspContentChanges(e){return new _E(Jt,e.map((n,o)=>this.editFromLspContentChange(n,o)))}editFromLspContentChange(e,t){if(Jbt.TextDocumentContentChangeEvent.isIncremental(e)){let n=this.value.get().getTransformer(),o=n.getOffset(new Tr(e.range.start.line+1,e.range.start.character+1)),s=n.getOffset(new Tr(e.range.end.line+1,e.range.end.character+1));if(o>s){let a=this.value.get().value,l=a.split(/\r\n|\n/).length,c=a.split(/\r\n|\r|\n/).length,u=new Qt(`Invalid range: [${o}, ${s}) from ${JSON.stringify(e.range)}. Line counts: nes=${l}, lsp=${c}`);throw l<c?u.code="ObservableWorkspace_TooFewLines":l>c?u.code="ObservableWorkspace_TooManyLines":u.code="ObservableWorkspace_InvalidRange",u.code+=t>0?"_SubsequentChange":"_FirstChange",u}return Jt.replace(new et(o,s),e.text)}throw new Error("Full replacement edits are not supported")}};var Xbt=["cpp","c","cuda-cpp"],Zbt=["typescript","javascript","typescriptreact","javascriptreact"],eEt=["csharp"],iwr=new Map([...Xbt.map(r=>[r,"related/cpp"]),...Zbt.map(r=>[r,"related/typescript"]),...eEt.map(r=>[r,"related/csharproslyn"])]);function swr(r){return iwr.get(r)??"related/other"}var qfe=class extends KL{constructor(t){super(t);this.providers=new Map;this.telemetrySent=!1;this.reportedUnknownProviders=new Set}async getRelatedFilesResponse(t,n,o){let s=Date.now(),a=t.clientLanguageId.toLowerCase();if(swr(a)==="related/other"&&!this.reportedUnknownProviders.has(a)&&(this.reportedUnknownProviders.add(a),Tu.warn(this.context,`unknown language ${a}`)),this.relatedFilesTelemetry(n),Tu.debug(this.context,`Fetching related files for ${t.uri}`),!this.isActive(a,n))return Tu.debug(this.context,"language-server related-files experiment is not active."),JBe;let c=this.providers.get(a);if(!c)return JBe;try{return this.convert(t.uri,c,s,n,o)}catch{this.relatedFileNonresponseTelemetry(a,n);return}}async convert(t,n,o,s,a){a||(a={isCancellationRequested:!1,onCancellationRequested:()=>({dispose(){}})});let l={entries:[],traits:[]},c=n.size>0;for(let u of n.values()){let d=await u.callback(t,{flags:{}},a);if(d){c=!1,l.entries.push(...d.entries),d.traits&&l.traits.push(...d.traits);for(let p of d.entries)for(let f of p.uris)Tu.debug(this.context,f.toString())}}return this.performanceTelemetry(Date.now()-o,s),c?void 0:l}registerRelatedFilesProvider(t,n,o){let s=this.providers.get(n);s?s.set(t,{extensionId:t,languageId:n,callback:o}):this.providers.set(n,new Map([[t,{extensionId:t,languageId:n,callback:o}]]))}unregisterRelatedFilesProvider(t,n,o){let s=this.providers.get(n);if(s){let a=s.get(t);a&&a.callback===o&&s.delete(t)}}isActive(t,n){return eEt.includes(t)?this.context.get(Fr).relatedFilesVSCodeCSharp(n)||ai(this.context,Xt.RelatedFilesVSCodeCSharp):Zbt.includes(t)?this.context.get(Fr).relatedFilesVSCodeTypeScript(n)||ai(this.context,Xt.RelatedFilesVSCodeTypeScript):Xbt.includes(t)?this.context.get(Fr).cppHeadersEnableSwitch(n)||ai(this.context,Xt.DebugOverrideCppHeadersEnableSwitch):this.context.get(Fr).relatedFilesVSCode(n)||ai(this.context,Xt.RelatedFilesVSCode)}relatedFilesTelemetry(t){}relatedFileNonresponseTelemetry(t,n){}performanceTelemetry(t,n){}};var FT=require("vscode");var M4t=z(L4t()),g1=z(require("os"));process.env.APPLICATION_INSIGHTS_NO_STATSBEAT="true";function Y9e(r){return`wrapped-telemetry-event-name-${r}-wrapped-telemetry-event-name`}function rKr(r){return r.includes("wrapped-telemetry-event-name-")&&r.endsWith("-wrapped-telemetry-event-name")}function nKr(r){let e=r.match(/wrapped-telemetry-event-name-(.*?)-wrapped-telemetry-event-name/);return e?e[1]:r}var H8=class{constructor(e,t,n,o,s){this.tokenStore=n;this.namespace=o;this.client=oKr(e,t,s),O4t(e,t,this.client)}separateData(e){if(e.properties!==void 0||e.measurements!==void 0)return e.properties=e.properties||{},e.measurements=e.measurements||{},e;let t={},n={};for(let[o,s]of Object.entries(e))typeof s=="number"?n[o]=s:t[o]=s;return{properties:t,measurements:n}}sendEventData(e,t){let{properties:n,measurements:o}=this.separateData(t||{}),s=this.tokenStore.copilotToken?.getTokenValue("tid");this.client.trackEvent({name:this.massageEventName(e),properties:n,measurements:o,tagOverrides:s?{"ai.user.id":s}:void 0})}sendErrorData(e,t){let{properties:n,measurements:o}=this.separateData(t||{});this.client.trackException({exception:e,properties:n,measurements:o})}flush(){return new Promise(e=>{this.client.flush({callback:()=>{e(void 0)}})})}massageEventName(e){return rKr(e)?nKr(e):e.includes(this.namespace)?e:`${this.namespace}/${e}`}};function oKr(r,e,t){let n=new M4t.TelemetryClient(t);return n.config.enableAutoCollectRequests=!1,n.config.enableAutoCollectPerformance=!1,n.config.enableAutoCollectExceptions=!1,n.config.enableAutoCollectConsole=!1,n.config.enableAutoCollectDependencies=!1,n.config.noDiagnosticChannel=!0,O4t(r,e,n),n}function O4t(r,e,t){t.commonProperties=iKr(t.commonProperties,e),t.context.tags[t.context.keys.cloudRoleInstance]="REDACTED",t.context.tags[t.context.keys.sessionId]=e.sessionId,t.config.endpointUrl=r.copilotTelemetryURL}function iKr(r,e){return r=r||{},r.common_os=g1.platform(),r.common_platformversion=g1.release(),r.common_arch=g1.arch(),r.common_cpu=Array.from(new Set(g1.cpus().map(t=>t.model))).join(),r.common_vscodemachineid=e.machineId,r.common_vscodesessionid=e.sessionId,r.common_uikind=e.uiKind,r.common_remotename=e.remoteName??"none",r.common_isnewappinstall="",r}var Z9e=require("vscode");var J9e=require("vscode");var B4t=require("vscode"),K9e="GitHub Copilot Log (Code References)";function sKr(){let r=n=>n<10?`0${n}`:n,e=n=>n<10?`00${n}`:n<100?`0${n}`:n,t=new Date;return`${t.getFullYear()}-${r(t.getMonth()+1)}-${r(t.getDate())} ${r(t.getHours())}:${r(t.getMinutes())}:${r(t.getSeconds())}.${e(t.getMilliseconds())}`}var z9e=class{constructor(e){this.output=e}info(...e){this.output.appendLine(`${sKr()} [info] ${e.join(" ")}`)}show(e){this.output.show(e)}dispose(){this.output.dispose()}},S0e=class r{constructor(e){this.checkCopilotToken=e=>{e.codeQuoteEnabled?this.output=this.createChannel():this.output?.dispose()};this.#e=W0(e,t=>this.checkCopilotToken(t)),this.output=this.createChannel()}#e;static create(e){return new r(e)}createChannel(){return this.output?this.output:new z9e(B4t.window.createOutputChannel(K9e,"code-referencing"))}log(e,...t){this.output||(this.output=this.createChannel());let[n,...o]=t;this.output[e](n,...o)}info(...e){this.log("info",...e)}forceShow(){this.output?.show(!0)}dispose(){this.output?.dispose(),this.#e.dispose()}};var X9e=class{constructor(e){this.ctx=e;this.activeLog=!1;this.subscriptions=[];this.onActiveEditorChange=e=>{this.isOutputLog(e)&&Uz.handleFocus({context:this.ctx})};this.onVisibleEditorsChange=e=>{let t=e.find(this.isOutputLog);this.activeLog?t||(this.activeLog=!1):t&&(this.activeLog=!0,Uz.handleOpen({context:this.ctx}))};this.isOutputLog=e=>e&&e.document.uri.scheme==="output"&&e.document.uri.path.includes(K9e)}register(){let e=J9e.window.onDidChangeActiveTextEditor(this.onActiveEditorChange),t=J9e.window.onDidChangeVisibleTextEditors(this.onVisibleEditorsChange);this.subscriptions.push(t),this.subscriptions.push(e)}dispose(){for(let e of this.subscriptions)e.dispose();this.subscriptions=[]}get logVisible(){return this.activeLog}};function F4t(r){let e=new X9e(r);return e.register(),e}var _0e=class{constructor(e){this.ctx=e;this.enabled=!1;this.onCopilotToken=e=>{if(this.enabled=e.codeQuoteEnabled||!1,!e.codeQuoteEnabled){this.subscriptions?.dispose(),this.subscriptions=void 0,gd.debug(this.ctx,"Public code references are disabled.");return}gd.info(this.ctx,"Public code references are enabled."),this.addDisposable(F4t(this.ctx))}}dispose(){this.subscriptions?.dispose(),this.event?.dispose()}register(){return lA(this.ctx)||(this.event=W0(this.ctx,this.onCopilotToken)),this}addDisposable(e){this.subscriptions?this.subscriptions=Z9e.Disposable.from(this.subscriptions,e):this.subscriptions=Z9e.Disposable.from(e)}};var H4t=require("vscode");var G8=require("vscode");var XM=class{constructor(e){this.context=e}};var aKr="We found a reference to public code in a recent suggestion. To learn more about public code references, review the [documentation](https://aka.ms/github-copilot-match-public-code).",U4t="View reference",Q4t="Change setting",q4t="codeReference.notified";function V4t(r){let e=r.get(XM);if(e.context.globalState.get(q4t))return;let n=r.get(ZC),o=[{title:U4t},{title:Q4t}];return n.showWarningMessage(aKr,...o).then(async s=>{let a={context:r,actor:"user"};switch(s?.title){case U4t:{DFe.handleDoAction(a),await G8.commands.executeCommand(Dfe);break}case Q4t:{await G8.env.openExternal(G8.Uri.parse("https://aka.ms/github-copilot-settings"));break}case void 0:{DFe.handleDismiss(a);break}}}),e.context.globalState.update(q4t,!0)}var C0e=class extends lE{constructor(t){super();this.codeReference=t;let n=W0(t.ctx,o=>{if(this.logger)return;this.logger=S0e.create(t.ctx);let s=H4t.commands.registerCommand(Dfe,()=>this.logger?.forceShow());this.codeReference.addDisposable(s)});this.codeReference.addDisposable(n)}async handleIPCodeCitation(t,n){if(!this.codeReference.enabled||!this.logger||n.details.length===0)return;let o=n.location?.start,s=o?`[Ln ${o.line+1}, Col ${o.character+1}]`:"Location not available",a=`${n.matchingText?.slice(0,100).replace(/[\r\n\t]+|^[ \t]+/gm," ").trim()}...`;this.logger.info(n.inDocumentUri,"Similar code at ",s,a);for(let l of n.details){let{license:c,url:u}=l;this.logger.info(`License: ${c.replace("NOASSERTION","unknown")}, URL: ${u}`)}Uz.handleWrite({context:t}),await V4t(t)}};var bs=z(require("vscode")),YPo=new qi("extensionConfig"),T0e=class extends sA{constructor(t){super();this.env=t;this.onDidChangeCopilotSettings=JC(bs.workspace.onDidChangeConfiguration,t=>{if(t.affectsConfiguration("github.copilot"))return this;if(t.affectsConfiguration("github.copilot-chat"))return this});this.onDidChangeHttpSettings=JC(bs.workspace.onDidChangeConfiguration,t=>{if(t.affectsConfiguration("http"))return this.getHttpSettings()});this.config=bs.workspace.getConfiguration(fw),bs.workspace.onDidChangeConfiguration(n=>{n.affectsConfiguration(fw)&&(this.config=bs.workspace.getConfiguration(fw))})}getConfig(t){return uOe(this.config,t)??u0t(t)}getOptionalConfig(t){return uOe(this.config,t)??d0t(t)}dumpForTelemetry(){return{}}getHttpSettings(){let t=bs.workspace.getConfiguration().get("http");return t?.proxy?Lue(t):Nft(this.env)}},lKr=new Set(["ssh-remote","dev-container","attached-container","wsl","tunnel","codespaces","amlext"]),I0e=class extends cp{getEditorInfo(){let e=bs.env.uriScheme;bs.version.endsWith("-insider")&&(e=e.replace(/-insiders$/,""));let t=bs.env.remoteName;return t&&(e+=`@${lKr.has(t)?t:"other"}`),{name:"vscode",readableName:bs.env.appName.replace(/ - Insiders$/,""),devName:e,version:bs.version,root:bs.env.appRoot}}getEditorPluginInfo(){return{name:"copilot-chat",readableName:"GitHub Copilot for Visual Studio Code",version:Qa.version}}getRelatedPluginInfo(){return["ms-vscode.cpptools","ms-vscode.cmake-tools","ms-vscode.makefile-tools","ms-dotnettools.csdevkit","ms-python.python","ms-python.vscode-pylance","vscjava.vscode-java-pack","vscode.typescript-language-features","ms-vscode.vscode-typescript-next","ms-dotnettools.csharp","github.copilot-chat"].map(e=>{let t=bs.extensions.getExtension(e)?.packageJSON;if(t&&typeof t=="object"&&"version"in t&&typeof t.version=="string")return{name:e,version:t.version}}).filter(e=>e!==void 0)}getEditorPluginSpecificFilters(){let e=[],t=bs.extensions.getExtension("github.copilot-chat")?.packageJSON;return t&&typeof t=="object"&&"completionsCoreVersion"in t&&typeof t.completionsCoreVersion=="string"&&e.push({filter:"X-VSCode-CompletionsInChatExtensionVersion",isVersion:!0,value:t.completionsCoreVersion}),e}};function cKr(r){return{"*":!0,...r.get(sA).getConfig(Xt.Enable)??{}}}function uKr(r,e){let t=cKr(r);return t[e]??t["*"]??!0}function G4t(r){let e=bs.window.activeTextEditor;if(e)return e6e(r,e.document)}function e6e(r,e){return uKr(r,e.languageId)}function W4t(){return bs.workspace.getConfiguration("editor.inlineSuggest").get("enabled")}var zPo=[["workspaceFolderLanguageValue",bs.ConfigurationTarget.WorkspaceFolder,!0],["workspaceFolderValue",bs.ConfigurationTarget.WorkspaceFolder,!1],["workspaceLanguageValue",bs.ConfigurationTarget.Workspace,!0],["workspaceValue",bs.ConfigurationTarget.Workspace,!1],["globalLanguageValue",bs.ConfigurationTarget.Global,!0],["globalValue",bs.ConfigurationTarget.Global,!1]];var x0e=require("vscode");async function j4t(r,e,t){let n=x0e.workspace.textDocuments.find(s=>s.uri.toString()===t.uri);return!n||(await OL(r,t,n.getText())).status!=="valid"?0:x0e.languages.match(e,n)}var BT=class{constructor(e="Normal",t,n=!1,o){this.kind=e;this.message=t;this.busy=n;this.command=o}};var t6e=(r,e,t)=>{let n=r instanceof RegExp?$4t(r,t):r,o=e instanceof RegExp?$4t(e,t):e,s=n!==null&&o!=null&&dKr(n,o,t);return s&&{start:s[0],end:s[1],pre:t.slice(0,s[0]),body:t.slice(s[0]+n.length,s[1]),post:t.slice(s[1]+o.length)}},$4t=(r,e)=>{let t=e.match(r);return t?t[0]:null},dKr=(r,e,t)=>{let n,o,s,a,l,c=t.indexOf(r),u=t.indexOf(e,c+1),d=c;if(c>=0&&u>0){if(r===e)return[c,u];for(n=[],s=t.length;d>=0&&!l;){if(d===c)n.push(d),c=t.indexOf(r,d+1);else if(n.length===1){let p=n.pop();p!==void 0&&(l=[p,u])}else o=n.pop(),o!==void 0&&o<s&&(s=o,a=u),u=t.indexOf(e,d+1);d=c<u&&c>=0?c:u}n.length&&a!==void 0&&(l=[s,a])}return l};var Y4t="\0SLASH"+Math.random()+"\0",z4t="\0OPEN"+Math.random()+"\0",n6e="\0CLOSE"+Math.random()+"\0",K4t="\0COMMA"+Math.random()+"\0",J4t="\0PERIOD"+Math.random()+"\0",pKr=new RegExp(Y4t,"g"),fKr=new RegExp(z4t,"g"),mKr=new RegExp(n6e,"g"),hKr=new RegExp(K4t,"g"),gKr=new RegExp(J4t,"g"),vKr=/\\\\/g,yKr=/\\{/g,AKr=/\\}/g,bKr=/\\,/g,EKr=/\\./g;function r6e(r){return isNaN(r)?r.charCodeAt(0):parseInt(r,10)}function SKr(r){return r.replace(vKr,Y4t).replace(yKr,z4t).replace(AKr,n6e).replace(bKr,K4t).replace(EKr,J4t)}function _Kr(r){return r.replace(pKr,"\\").replace(fKr,"{").replace(mKr,"}").replace(hKr,",").replace(gKr,".")}function X4t(r){if(!r)return[""];let e=[],t=t6e("{","}",r);if(!t)return r.split(",");let{pre:n,body:o,post:s}=t,a=n.split(",");a[a.length-1]+="{"+o+"}";let l=X4t(s);return s.length&&(a[a.length-1]+=l.shift(),a.push.apply(a,l)),e.push.apply(e,a),e}function Z4t(r){return r?(r.slice(0,2)==="{}"&&(r="\\{\\}"+r.slice(2)),MJ(SKr(r),!0).map(_Kr)):[]}function CKr(r){return"{"+r+"}"}function TKr(r){return/^-?0\d/.test(r)}function IKr(r,e){return r<=e}function xKr(r,e){return r>=e}function MJ(r,e){let t=[],n=t6e("{","}",r);if(!n)return[r];let o=n.pre,s=n.post.length?MJ(n.post,!1):[""];if(/\$$/.test(n.pre))for(let a=0;a<s.length;a++){let l=o+"{"+n.body+"}"+s[a];t.push(l)}else{let a=/^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(n.body),l=/^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(n.body),c=a||l,u=n.body.indexOf(",")>=0;if(!c&&!u)return n.post.match(/,(?!,).*\}/)?(r=n.pre+"{"+n.body+n6e+n.post,MJ(r)):[r];let d;if(c)d=n.body.split(/\.\./);else if(d=X4t(n.body),d.length===1&&d[0]!==void 0&&(d=MJ(d[0],!1).map(CKr),d.length===1))return s.map(f=>n.pre+d[0]+f);let p;if(c&&d[0]!==void 0&&d[1]!==void 0){let f=r6e(d[0]),m=r6e(d[1]),h=Math.max(d[0].length,d[1].length),g=d.length===3&&d[2]!==void 0?Math.abs(r6e(d[2])):1,y=IKr;m<f&&(g*=-1,y=xKr);let b=d.some(TKr);p=[];for(let E=f;y(E,m);E+=g){let S;if(l)S=String.fromCharCode(E),S==="\\"&&(S="");else if(S=String(E),b){let _=h-S.length;if(_>0){let x=new Array(_+1).join("0");E<0?S="-"+x+S.slice(1):S=x+S}}p.push(S)}}else{p=[];for(let f=0;f<d.length;f++)p.push.apply(p,MJ(d[f],!1))}for(let f=0;f<p.length;f++)for(let m=0;m<s.length;m++){let h=o+p[f]+s[m];(!e||c||h)&&t.push(h)}}return t}var OJ=r=>{if(typeof r!="string")throw new TypeError("invalid pattern");if(r.length>65536)throw new TypeError("pattern is too long")};var RKr={"[:alnum:]":["\\p{L}\\p{Nl}\\p{Nd}",!0],"[:alpha:]":["\\p{L}\\p{Nl}",!0],"[:ascii:]":["\\x00-\\x7f",!1],"[:blank:]":["\\p{Zs}\\t",!0],"[:cntrl:]":["\\p{Cc}",!0],"[:digit:]":["\\p{Nd}",!0],"[:graph:]":["\\p{Z}\\p{C}",!0,!0],"[:lower:]":["\\p{Ll}",!0],"[:print:]":["\\p{C}",!0],"[:punct:]":["\\p{P}",!0],"[:space:]":["\\p{Z}\\t\\r\\n\\v\\f",!0],"[:upper:]":["\\p{Lu}",!0],"[:word:]":["\\p{L}\\p{Nl}\\p{Nd}\\p{Pc}",!0],"[:xdigit:]":["A-Fa-f0-9",!1]},BJ=r=>r.replace(/[[\]\\-]/g,"\\$&"),wKr=r=>r.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),e3t=r=>r.join(""),t3t=(r,e)=>{let t=e;if(r.charAt(t)!=="[")throw new Error("not in a brace expression");let n=[],o=[],s=t+1,a=!1,l=!1,c=!1,u=!1,d=t,p="";e:for(;s<r.length;){let g=r.charAt(s);if((g==="!"||g==="^")&&s===t+1){u=!0,s++;continue}if(g==="]"&&a&&!c){d=s+1;break}if(a=!0,g==="\\"&&!c){c=!0,s++;continue}if(g==="["&&!c){for(let[y,[A,b,E]]of Object.entries(RKr))if(r.startsWith(y,s)){if(p)return["$.",!1,r.length-t,!0];s+=y.length,E?o.push(A):n.push(A),l=l||b;continue e}}if(c=!1,p){g>p?n.push(BJ(p)+"-"+BJ(g)):g===p&&n.push(BJ(g)),p="",s++;continue}if(r.startsWith("-]",s+1)){n.push(BJ(g+"-")),s+=2;continue}if(r.startsWith("-",s+1)){p=g,s+=2;continue}n.push(BJ(g)),s++}if(d<s)return["",!1,0,!1];if(!n.length&&!o.length)return["$.",!1,r.length-t,!0];if(o.length===0&&n.length===1&&/^\\?.$/.test(n[0])&&!u){let g=n[0].length===2?n[0].slice(-1):n[0];return[wKr(g),!1,d-t,!1]}let f="["+(u?"^":"")+e3t(n)+"]",m="["+(u?"":"^")+e3t(o)+"]";return[n.length&&o.length?"("+f+"|"+m+")":n.length?f:m,l,d-t,!0]};var v1=(r,{windowsPathsNoEscape:e=!1}={})=>e?r.replace(/\[([^\/\\])\]/g,"$1"):r.replace(/((?!\\).|^)\[([^\/\\])\]/g,"$1$2").replace(/\\([^\/])/g,"$1");var PKr=new Set(["!","?","+","*","@"]),r3t=r=>PKr.has(r),kKr="(?!(?:^|/)\\.\\.?(?:$|/))",R0e="(?!\\.)",DKr=new Set(["[","."]),NKr=new Set(["..","."]),LKr=new Set("().*{}+?[]^$\\!"),MKr=r=>r.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),o6e="[^/]",n3t=o6e+"*?",o3t=o6e+"+?",W8=class r{type;#e;#t;#r=!1;#n=[];#i;#o;#c;#s=!1;#a;#u;#d=!1;constructor(e,t,n={}){this.type=e,e&&(this.#t=!0),this.#i=t,this.#e=this.#i?this.#i.#e:this,this.#a=this.#e===this?n:this.#e.#a,this.#c=this.#e===this?[]:this.#e.#c,e==="!"&&!this.#e.#s&&this.#c.push(this),this.#o=this.#i?this.#i.#n.length:0}get hasMagic(){if(this.#t!==void 0)return this.#t;for(let e of this.#n)if(typeof e!="string"&&(e.type||e.hasMagic))return this.#t=!0;return this.#t}toString(){return this.#u!==void 0?this.#u:this.type?this.#u=this.type+"("+this.#n.map(e=>String(e)).join("|")+")":this.#u=this.#n.map(e=>String(e)).join("")}#l(){if(this!==this.#e)throw new Error("should only call on root");if(this.#s)return this;this.toString(),this.#s=!0;let e;for(;e=this.#c.pop();){if(e.type!=="!")continue;let t=e,n=t.#i;for(;n;){for(let o=t.#o+1;!n.type&&o<n.#n.length;o++)for(let s of e.#n){if(typeof s=="string")throw new Error("string part in extglob AST??");s.copyIn(n.#n[o])}t=n,n=t.#i}}return this}push(...e){for(let t of e)if(t!==""){if(typeof t!="string"&&!(t instanceof r&&t.#i===this))throw new Error("invalid part: "+t);this.#n.push(t)}}toJSON(){let e=this.type===null?this.#n.slice().map(t=>typeof t=="string"?t:t.toJSON()):[this.type,...this.#n.map(t=>t.toJSON())];return this.isStart()&&!this.type&&e.unshift([]),this.isEnd()&&(this===this.#e||this.#e.#s&&this.#i?.type==="!")&&e.push({}),e}isStart(){if(this.#e===this)return!0;if(!this.#i?.isStart())return!1;if(this.#o===0)return!0;let e=this.#i;for(let t=0;t<this.#o;t++){let n=e.#n[t];if(!(n instanceof r&&n.type==="!"))return!1}return!0}isEnd(){if(this.#e===this||this.#i?.type==="!")return!0;if(!this.#i?.isEnd())return!1;if(!this.type)return this.#i?.isEnd();let e=this.#i?this.#i.#n.length:0;return this.#o===e-1}copyIn(e){typeof e=="string"?this.push(e):this.push(e.clone(this))}clone(e){let t=new r(this.type,e);for(let n of this.#n)t.copyIn(n);return t}static#f(e,t,n,o){let s=!1,a=!1,l=-1,c=!1;if(t.type===null){let m=n,h="";for(;m<e.length;){let g=e.charAt(m++);if(s||g==="\\"){s=!s,h+=g;continue}if(a){m===l+1?(g==="^"||g==="!")&&(c=!0):g==="]"&&!(m===l+2&&c)&&(a=!1),h+=g;continue}else if(g==="["){a=!0,l=m,c=!1,h+=g;continue}if(!o.noext&&r3t(g)&&e.charAt(m)==="("){t.push(h),h="";let y=new r(g,t);m=r.#f(e,y,m,o),t.push(y);continue}h+=g}return t.push(h),m}let u=n+1,d=new r(null,t),p=[],f="";for(;u<e.length;){let m=e.charAt(u++);if(s||m==="\\"){s=!s,f+=m;continue}if(a){u===l+1?(m==="^"||m==="!")&&(c=!0):m==="]"&&!(u===l+2&&c)&&(a=!1),f+=m;continue}else if(m==="["){a=!0,l=u,c=!1,f+=m;continue}if(r3t(m)&&e.charAt(u)==="("){d.push(f),f="";let h=new r(m,d);d.push(h),u=r.#f(e,h,u,o);continue}if(m==="|"){d.push(f),f="",p.push(d),d=new r(null,t);continue}if(m===")")return f===""&&t.#n.length===0&&(t.#d=!0),d.push(f),f="",t.push(...p,d),u;f+=m}return t.type=null,t.#t=void 0,t.#n=[e.substring(n-1)],u}static fromGlob(e,t={}){let n=new r(null,void 0,t);return r.#f(e,n,0,t),n}toMMPattern(){if(this!==this.#e)return this.#e.toMMPattern();let e=this.toString(),[t,n,o,s]=this.toRegExpSource();if(!(o||this.#t||this.#a.nocase&&!this.#a.nocaseMagicOnly&&e.toUpperCase()!==e.toLowerCase()))return n;let l=(this.#a.nocase?"i":"")+(s?"u":"");return Object.assign(new RegExp(`^${t}$`,l),{_src:t,_glob:e})}get options(){return this.#a}toRegExpSource(e){let t=e??!!this.#a.dot;if(this.#e===this&&this.#l(),!this.type){let c=this.isStart()&&this.isEnd(),u=this.#n.map(m=>{let[h,g,y,A]=typeof m=="string"?r.#h(m,this.#t,c):m.toRegExpSource(e);return this.#t=this.#t||y,this.#r=this.#r||A,h}).join(""),d="";if(this.isStart()&&typeof this.#n[0]=="string"&&!(this.#n.length===1&&NKr.has(this.#n[0]))){let h=DKr,g=t&&h.has(u.charAt(0))||u.startsWith("\\.")&&h.has(u.charAt(2))||u.startsWith("\\.\\.")&&h.has(u.charAt(4)),y=!t&&!e&&h.has(u.charAt(0));d=g?kKr:y?R0e:""}let p="";return this.isEnd()&&this.#e.#s&&this.#i?.type==="!"&&(p="(?:$|\\/)"),[d+u+p,v1(u),this.#t=!!this.#t,this.#r]}let n=this.type==="*"||this.type==="+",o=this.type==="!"?"(?:(?!(?:":"(?:",s=this.#m(t);if(this.isStart()&&this.isEnd()&&!s&&this.type!=="!"){let c=this.toString();return this.#n=[c],this.type=null,this.#t=void 0,[c,v1(this.toString()),!1,!1]}let a=!n||e||t||!R0e?"":this.#m(!0);a===s&&(a=""),a&&(s=`(?:${s})(?:${a})*?`);let l="";if(this.type==="!"&&this.#d)l=(this.isStart()&&!t?R0e:"")+o3t;else{let c=this.type==="!"?"))"+(this.isStart()&&!t&&!e?R0e:"")+n3t+")":this.type==="@"?")":this.type==="?"?")?":this.type==="+"&&a?")":this.type==="*"&&a?")?":`)${this.type}`;l=o+s+c}return[l,v1(s),this.#t=!!this.#t,this.#r]}#m(e){return this.#n.map(t=>{if(typeof t=="string")throw new Error("string type in extglob ast??");let[n,o,s,a]=t.toRegExpSource(e);return this.#r=this.#r||a,n}).filter(t=>!(this.isStart()&&this.isEnd())||!!t).join("|")}static#h(e,t,n=!1){let o=!1,s="",a=!1;for(let l=0;l<e.length;l++){let c=e.charAt(l);if(o){o=!1,s+=(LKr.has(c)?"\\":"")+c;continue}if(c==="\\"){l===e.length-1?s+="\\\\":o=!0;continue}if(c==="["){let[u,d,p,f]=t3t(e,l);if(p){s+=u,a=a||d,l+=p-1,t=t||f;continue}}if(c==="*"){n&&e==="*"?s+=o3t:s+=n3t,t=!0;continue}if(c==="?"){s+=o6e,t=!0;continue}s+=MKr(c)}return[s,v1(e),!!t,a]}};var i6e=(r,{windowsPathsNoEscape:e=!1}={})=>e?r.replace(/[?*()[\]]/g,"[$&]"):r.replace(/[?*()[\]\\]/g,"\\$&");var bc=(r,e,t={})=>(OJ(e),!t.nocomment&&e.charAt(0)==="#"?!1:new j8(e,t).match(r)),OKr=/^\*+([^+@!?\*\[\(]*)$/,BKr=r=>e=>!e.startsWith(".")&&e.endsWith(r),FKr=r=>e=>e.endsWith(r),UKr=r=>(r=r.toLowerCase(),e=>!e.startsWith(".")&&e.toLowerCase().endsWith(r)),QKr=r=>(r=r.toLowerCase(),e=>e.toLowerCase().endsWith(r)),qKr=/^\*+\.\*+$/,VKr=r=>!r.startsWith(".")&&r.includes("."),HKr=r=>r!=="."&&r!==".."&&r.includes("."),GKr=/^\.\*+$/,WKr=r=>r!=="."&&r!==".."&&r.startsWith("."),jKr=/^\*+$/,$Kr=r=>r.length!==0&&!r.startsWith("."),YKr=r=>r.length!==0&&r!=="."&&r!=="..",zKr=/^\?+([^+@!?\*\[\(]*)?$/,KKr=([r,e=""])=>{let t=a3t([r]);return e?(e=e.toLowerCase(),n=>t(n)&&n.toLowerCase().endsWith(e)):t},JKr=([r,e=""])=>{let t=l3t([r]);return e?(e=e.toLowerCase(),n=>t(n)&&n.toLowerCase().endsWith(e)):t},XKr=([r,e=""])=>{let t=l3t([r]);return e?n=>t(n)&&n.endsWith(e):t},ZKr=([r,e=""])=>{let t=a3t([r]);return e?n=>t(n)&&n.endsWith(e):t},a3t=([r])=>{let e=r.length;return t=>t.length===e&&!t.startsWith(".")},l3t=([r])=>{let e=r.length;return t=>t.length===e&&t!=="."&&t!==".."},c3t=typeof process=="object"&&process?typeof process.env=="object"&&process.env&&process.env.__MINIMATCH_TESTING_PLATFORM__||process.platform:"posix",i3t={win32:{sep:"\\"},posix:{sep:"/"}},eJr=c3t==="win32"?i3t.win32.sep:i3t.posix.sep;bc.sep=eJr;var Ev=Symbol("globstar **");bc.GLOBSTAR=Ev;var tJr="[^/]",rJr=tJr+"*?",nJr="(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?",oJr="(?:(?!(?:\\/|^)\\.).)*?",iJr=(r,e={})=>t=>bc(t,r,e);bc.filter=iJr;var bv=(r,e={})=>Object.assign({},r,e),sJr=r=>{if(!r||typeof r!="object"||!Object.keys(r).length)return bc;let e=bc;return Object.assign((n,o,s={})=>e(n,o,bv(r,s)),{Minimatch:class extends e.Minimatch{constructor(o,s={}){super(o,bv(r,s))}static defaults(o){return e.defaults(bv(r,o)).Minimatch}},AST:class extends e.AST{constructor(o,s,a={}){super(o,s,bv(r,a))}static fromGlob(o,s={}){return e.AST.fromGlob(o,bv(r,s))}},unescape:(n,o={})=>e.unescape(n,bv(r,o)),escape:(n,o={})=>e.escape(n,bv(r,o)),filter:(n,o={})=>e.filter(n,bv(r,o)),defaults:n=>e.defaults(bv(r,n)),makeRe:(n,o={})=>e.makeRe(n,bv(r,o)),braceExpand:(n,o={})=>e.braceExpand(n,bv(r,o)),match:(n,o,s={})=>e.match(n,o,bv(r,s)),sep:e.sep,GLOBSTAR:Ev})};bc.defaults=sJr;var u3t=(r,e={})=>(OJ(r),e.nobrace||!/\{(?:(?!\{).)*\}/.test(r)?[r]:Z4t(r));bc.braceExpand=u3t;var aJr=(r,e={})=>new j8(r,e).makeRe();bc.makeRe=aJr;var lJr=(r,e,t={})=>{let n=new j8(e,t);return r=r.filter(o=>n.match(o)),n.options.nonull&&!r.length&&r.push(e),r};bc.match=lJr;var s3t=/[?*]|[+@!]\(.*?\)|\[|\]/,cJr=r=>r.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),j8=class{options;set;pattern;windowsPathsNoEscape;nonegate;negate;comment;empty;preserveMultipleSlashes;partial;globSet;globParts;nocase;isWindows;platform;windowsNoMagicRoot;regexp;constructor(e,t={}){OJ(e),t=t||{},this.options=t,this.pattern=e,this.platform=t.platform||c3t,this.isWindows=this.platform==="win32",this.windowsPathsNoEscape=!!t.windowsPathsNoEscape||t.allowWindowsEscape===!1,this.windowsPathsNoEscape&&(this.pattern=this.pattern.replace(/\\/g,"/")),this.preserveMultipleSlashes=!!t.preserveMultipleSlashes,this.regexp=null,this.negate=!1,this.nonegate=!!t.nonegate,this.comment=!1,this.empty=!1,this.partial=!!t.partial,this.nocase=!!this.options.nocase,this.windowsNoMagicRoot=t.windowsNoMagicRoot!==void 0?t.windowsNoMagicRoot:!!(this.isWindows&&this.nocase),this.globSet=[],this.globParts=[],this.set=[],this.make()}hasMagic(){if(this.options.magicalBraces&&this.set.length>1)return!0;for(let e of this.set)for(let t of e)if(typeof t!="string")return!0;return!1}debug(...e){}make(){let e=this.pattern,t=this.options;if(!t.nocomment&&e.charAt(0)==="#"){this.comment=!0;return}if(!e){this.empty=!0;return}this.parseNegate(),this.globSet=[...new Set(this.braceExpand())],t.debug&&(this.debug=(...s)=>console.error(...s)),this.debug(this.pattern,this.globSet);let n=this.globSet.map(s=>this.slashSplit(s));this.globParts=this.preprocess(n),this.debug(this.pattern,this.globParts);let o=this.globParts.map((s,a,l)=>{if(this.isWindows&&this.windowsNoMagicRoot){let c=s[0]===""&&s[1]===""&&(s[2]==="?"||!s3t.test(s[2]))&&!s3t.test(s[3]),u=/^[a-z]:/i.test(s[0]);if(c)return[...s.slice(0,4),...s.slice(4).map(d=>this.parse(d))];if(u)return[s[0],...s.slice(1).map(d=>this.parse(d))]}return s.map(c=>this.parse(c))});if(this.debug(this.pattern,o),this.set=o.filter(s=>s.indexOf(!1)===-1),this.isWindows)for(let s=0;s<this.set.length;s++){let a=this.set[s];a[0]===""&&a[1]===""&&this.globParts[s][2]==="?"&&typeof a[3]=="string"&&/^[a-z]:$/i.test(a[3])&&(a[2]="?")}this.debug(this.pattern,this.set)}preprocess(e){if(this.options.noglobstar)for(let n=0;n<e.length;n++)for(let o=0;o<e[n].length;o++)e[n][o]==="**"&&(e[n][o]="*");let{optimizationLevel:t=1}=this.options;return t>=2?(e=this.firstPhasePreProcess(e),e=this.secondPhasePreProcess(e)):t>=1?e=this.levelOneOptimize(e):e=this.adjascentGlobstarOptimize(e),e}adjascentGlobstarOptimize(e){return e.map(t=>{let n=-1;for(;(n=t.indexOf("**",n+1))!==-1;){let o=n;for(;t[o+1]==="**";)o++;o!==n&&t.splice(n,o-n)}return t})}levelOneOptimize(e){return e.map(t=>(t=t.reduce((n,o)=>{let s=n[n.length-1];return o==="**"&&s==="**"?n:o===".."&&s&&s!==".."&&s!=="."&&s!=="**"?(n.pop(),n):(n.push(o),n)},[]),t.length===0?[""]:t))}levelTwoFileOptimize(e){Array.isArray(e)||(e=this.slashSplit(e));let t=!1;do{if(t=!1,!this.preserveMultipleSlashes){for(let o=1;o<e.length-1;o++){let s=e[o];o===1&&s===""&&e[0]===""||(s==="."||s==="")&&(t=!0,e.splice(o,1),o--)}e[0]==="."&&e.length===2&&(e[1]==="."||e[1]==="")&&(t=!0,e.pop())}let n=0;for(;(n=e.indexOf("..",n+1))!==-1;){let o=e[n-1];o&&o!=="."&&o!==".."&&o!=="**"&&(t=!0,e.splice(n-1,2),n-=2)}}while(t);return e.length===0?[""]:e}firstPhasePreProcess(e){let t=!1;do{t=!1;for(let n of e){let o=-1;for(;(o=n.indexOf("**",o+1))!==-1;){let a=o;for(;n[a+1]==="**";)a++;a>o&&n.splice(o+1,a-o);let l=n[o+1],c=n[o+2],u=n[o+3];if(l!==".."||!c||c==="."||c===".."||!u||u==="."||u==="..")continue;t=!0,n.splice(o,1);let d=n.slice(0);d[o]="**",e.push(d),o--}if(!this.preserveMultipleSlashes){for(let a=1;a<n.length-1;a++){let l=n[a];a===1&&l===""&&n[0]===""||(l==="."||l==="")&&(t=!0,n.splice(a,1),a--)}n[0]==="."&&n.length===2&&(n[1]==="."||n[1]==="")&&(t=!0,n.pop())}let s=0;for(;(s=n.indexOf("..",s+1))!==-1;){let a=n[s-1];if(a&&a!=="."&&a!==".."&&a!=="**"){t=!0;let c=s===1&&n[s+1]==="**"?["."]:[];n.splice(s-1,2,...c),n.length===0&&n.push(""),s-=2}}}}while(t);return e}secondPhasePreProcess(e){for(let t=0;t<e.length-1;t++)for(let n=t+1;n<e.length;n++){let o=this.partsMatch(e[t],e[n],!this.preserveMultipleSlashes);if(o){e[t]=[],e[n]=o;break}}return e.filter(t=>t.length)}partsMatch(e,t,n=!1){let o=0,s=0,a=[],l="";for(;o<e.length&&s<t.length;)if(e[o]===t[s])a.push(l==="b"?t[s]:e[o]),o++,s++;else if(n&&e[o]==="**"&&t[s]===e[o+1])a.push(e[o]),o++;else if(n&&t[s]==="**"&&e[o]===t[s+1])a.push(t[s]),s++;else if(e[o]==="*"&&t[s]&&(this.options.dot||!t[s].startsWith("."))&&t[s]!=="**"){if(l==="b")return!1;l="a",a.push(e[o]),o++,s++}else if(t[s]==="*"&&e[o]&&(this.options.dot||!e[o].startsWith("."))&&e[o]!=="**"){if(l==="a")return!1;l="b",a.push(t[s]),o++,s++}else return!1;return e.length===t.length&&a}parseNegate(){if(this.nonegate)return;let e=this.pattern,t=!1,n=0;for(let o=0;o<e.length&&e.charAt(o)==="!";o++)t=!t,n++;n&&(this.pattern=e.slice(n)),this.negate=t}matchOne(e,t,n=!1){let o=this.options;if(this.isWindows){let g=typeof e[0]=="string"&&/^[a-z]:$/i.test(e[0]),y=!g&&e[0]===""&&e[1]===""&&e[2]==="?"&&/^[a-z]:$/i.test(e[3]),A=typeof t[0]=="string"&&/^[a-z]:$/i.test(t[0]),b=!A&&t[0]===""&&t[1]===""&&t[2]==="?"&&typeof t[3]=="string"&&/^[a-z]:$/i.test(t[3]),E=y?3:g?0:void 0,S=b?3:A?0:void 0;if(typeof E=="number"&&typeof S=="number"){let[_,x]=[e[E],t[S]];_.toLowerCase()===x.toLowerCase()&&(t[S]=_,S>E?t=t.slice(S):E>S&&(e=e.slice(E)))}}let{optimizationLevel:s=1}=this.options;s>=2&&(e=this.levelTwoFileOptimize(e)),this.debug("matchOne",this,{file:e,pattern:t}),this.debug("matchOne",e.length,t.length);for(var a=0,l=0,c=e.length,u=t.length;a<c&&l<u;a++,l++){this.debug("matchOne loop");var d=t[l],p=e[a];if(this.debug(t,d,p),d===!1)return!1;if(d===Ev){this.debug("GLOBSTAR",[t,d,p]);var f=a,m=l+1;if(m===u){for(this.debug("** at the end");a<c;a++)if(e[a]==="."||e[a]===".."||!o.dot&&e[a].charAt(0)===".")return!1;return!0}for(;f<c;){var h=e[f];if(this.debug(`
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/dist/extension.js:919:`)[0],u=c.length-c.trimStart().length,d=u%o;if(d!==0&&u>0){let p=" ".repeat(d);return n(l,p,f=>" ".repeat((Math.floor(f/o)+1)*o))}else return l};e.displayText=a(e.displayText),e.completionText=a(e.completionText)}}return e}function h3t(r,e,t,n,o,s,a){let l=n.lineAt(o),c=e.map(u=>{let d=pp.range(pp.position(o.line,0),pp.position(o.line,o.character+u.suffixCoverage)),p="";if(s&&(u.completion=m3t(s,u.completion,l.isEmptyOrWhitespace)),l.isEmptyOrWhitespace&&(u.completion.displayNeedsWsOffset||u.completion.completionText.startsWith(l.text)))p=u.completion.completionText;else{let m=pp.range(d.start,o);p=n.getText(m)+u.completion.displayText}return{uuid:wt(),insertText:p,range:d,uri:n.uri,index:u.completion.completionIndex,telemetry:u.telemetry,displayText:u.completion.displayText,position:o,offset:n.offsetAt(o),resultType:t,copilotAnnotations:u.copilotAnnotations,clientCompletionId:u.clientCompletionId}});if(t===2&&a!==void 0){let u=c.find(d=>d.index===a);if(u){let d=c.filter(p=>p.index!==a);c=[u,...d]}}return c}var P0e=z(uf());async function uJr(r,e,t,n={}){let o=0;n.selectedCompletionInfo?.text&&!n.selectedCompletionInfo.text.includes(")")&&(e=e.addSelectedCompletionInfo(n.selectedCompletionInfo),o=e.position.character-n.selectedCompletionInfo.range.end.character);let s=await fFe(r,e,t,n);if(s.type!=="success")return s;let[a,l]=s.value;if(t?.isCancellationRequested)return{type:"canceled",reason:"after getGhostText",telemetryData:{telemetryBlob:s.telemetryBlob}};let c=Gbt(r,e.textDocument,e.position,l),u=h3t(r,a,l,e.textDocument,e.position,n.formattingOptions,c);if(u.length===0)return{type:"empty",reason:"no completions in final result",telemetryData:s.telemetryData};if(l!==2){e=e.applyEdits([{newText:u[0].insertText,range:u[0].range}]);let p={isSpeculative:!0,opportunityId:n.opportunityId},f=()=>fFe(r,e,void 0,p);r.get(tT).set(u[0].clientCompletionId,f)}let d=u.map(p=>{let{start:f,end:m}=p.range,h=P0e.Range.create(f,P0e.Position.create(m.line,m.character-o));return{...p,range:h}});return{...s,value:d}}async function g3t(r,e,t,n,o={}){dJr(r,e,t);let s=await uJr(r,ffe(e,t),n,o);return kyt(r,s)}function dJr(r,e,t){let n=e.getText({start:{line:Math.max(t.line-1,0),character:0},end:t}),o=e.getText({start:t,end:{line:Math.min(t.line+2,e.lineCount-1),character:e.lineCount-1>t.line?0:t.character}});tpe.debug(r,`Requesting for ${e.uri} at ${t.line}:${t.character}`,`between ${JSON.stringify(n)} and ${JSON.stringify(o)}.`)}var Sg=require("vscode");var $E=require("vscode"),pJr=new Set(["output","search-editor","comment"]);function UJ(r,e){if(pJr.has(e.uri.scheme))return;let t;try{t=e.getText()}catch(o){if(o instanceof RangeError)return;throw o}let n=L4({uri:e.uri.toString(),languageId:e.languageId});return UL.create(e.uri.toString(),e.languageId,e.version,t,n)}var k0e=class extends xo{constructor(t){super(t);this.onDidFocusTextDocument=JC($E.window.onDidChangeActiveTextEditor,t=>({document:t&&{uri:t.document.uri.toString()}}));this.onDidChangeTextDocument=JC($E.workspace.onDidChangeTextDocument,t=>{let n=UJ(this.ctx,t.document);return n&&{document:n,contentChanges:t.contentChanges}});this.onDidOpenTextDocument=JC($E.workspace.onDidOpenTextDocument,t=>{let n=UJ(this.ctx,t)?.getText();if(n!==void 0)return{document:{uri:t.uri.toString(),languageId:t.languageId,version:t.version,text:n}}});this.onDidCloseTextDocument=JC($E.workspace.onDidCloseTextDocument,t=>({document:{uri:hE(t.uri.toString())}}));this.onDidChangeWorkspaceFolders=JC($E.workspace.onDidChangeWorkspaceFolders,t=>({workspaceFolders:this.getWorkspaceFolders(),added:t.added.map(n=>({uri:n.uri.toString(),name:n.name})),removed:t.removed.map(n=>({uri:n.uri.toString(),name:n.name}))}))}getTextDocumentsUnsafe(){let t=[];for(let n of $E.workspace.textDocuments){let o=UJ(this.ctx,n);o&&t.push(o)}return t}findNotebook(t){for(let n of $E.workspace.notebookDocuments)if(n.getCells().some(o=>o.document.uri.toString()===t.uri.toString()))return{getCells:()=>n.getCells().map(o=>this.wrapCell(o)),getCellFor:({uri:o})=>{let s=n.getCells().find(a=>a.document.uri.toString()===o.toString());return s?this.wrapCell(s):void 0}}}wrapCell(t){return{...t,get document(){return UL.create(t.document.uri.toString(),t.document.languageId,t.document.version,t.document.getText(),t.document.languageId)}}}getWorkspaceFolders(){return $E.workspace.workspaceFolders?.map(t=>({uri:t.uri.toString(),name:t.name}))??[]}};var v3t="_github.copilot.ghostTextPostInsert2",D0e=class{constructor(e){this.ctx=e}async provideInlineCompletionItems(e,t,n,o){let s=UJ(this.ctx,e);if(!s)return;let a=n.requestUuid,l=Sg.window.visibleTextEditors.find(d=>d.document.uri===e.uri)?.options,c=await g3t(this.ctx,s,t,o,{isCycling:n.triggerKind===Sg.InlineCompletionTriggerKind.Invoke,selectedCompletionInfo:n.selectedCompletionInfo,formattingOptions:l,opportunityId:a});return c?{items:c.map(d=>{let{start:p,end:f}=d.range,m=new Sg.Range(p.line,p.character,f.line,f.character);return new Sg.InlineCompletionItem(d.insertText,m,{title:"Completion Accepted",command:v3t,arguments:[d]})})}:void 0}handleDidShowCompletionItem(e){let t=e.command.arguments[0];Wbt(this.ctx,t)}handleDidPartiallyAcceptCompletionItem(e,t){if(typeof t=="number")return;let n=e.command.arguments[0];$bt(this.ctx,n,t.acceptedLength,t.kind)}handleEndOfLifetime(e,t){if(t.kind!==Sg.InlineCompletionEndOfLifeReasonKind.Rejected)return;let n=e.command?.arguments?.[0];n&&Tn(this.ctx,"ghostText.dismissed",n.telemetry)}};function y3t(r){return Sg.commands.registerCommand(v3t,async t=>{jbt(r,t);try{await Sg.commands.executeCommand("github.copilot.survey.signalUsage","completions")}catch{}})}var A1=require("vscode");var A3t="github.copilot.toggleStatusMenu";var b3t="github.copilot.sendCompletionFeedback2";var N0e=class extends Cu{constructor(t,n="github.copilot.languageStatus"){super();this.ctx=t;this.showingMessage=!1;this.disposables=[];this.state=t.get(BT)}didChange(t){this.state.kind=t.kind,this.state.message=t.message,this.state.command=t.command}checkEnabledForLanguage(){return G4t(this.ctx)??!0}updateStatusBarIndicator(){if(this.isDisposed())return;A1.commands.executeCommand("setContext","github.copilot.completions.quotaExceeded",this.state.command?.command===CBe);let t=this.checkEnabledForLanguage();switch(A1.commands.executeCommand("setContext","github.copilot.completions.enabled",t),this.item.command={command:A3t,title:"View Details"},this.state.kind){case"Error":this.item.severity=A1.LanguageStatusSeverity.Error,this.item.text="$(copilot-warning) Completions",this.item.detail="Error";break;case"Warning":this.item.severity=A1.LanguageStatusSeverity.Warning,this.item.text="$(copilot-warning) Completions",this.item.detail="Temporary issues";break;case"Inactive":this.item.severity=A1.LanguageStatusSeverity.Information,this.item.text="$(copilot-blocked) Completions",this.item.detail="Inactive";break;case"Normal":this.item.severity=A1.LanguageStatusSeverity.Information,W4t()?t?(this.item.text="$(copilot) Completions",this.item.detail=""):(this.item.text="$(copilot-not-connected) Completions",this.item.detail="Disabled"):(this.item.text="$(copilot-not-connected) Completions",this.item.detail="VS Code inline suggestions disabled"),this.item.command.title="Open Menu";break}this.item.accessibilityInformation={label:"Copilot Completions"},this.state.command&&(this.item.command=this.state.command,this.item.detail=this.state.message)}dispose(){for(let t of this.disposables)t.dispose();this.disposables=[]}isDisposed(){return this.disposables.length===0}};var Y8=[],ML=class{constructor(e){this.ignoreService=e}};ML=T([v(0,At)],ML);Y8.push(ML);var ag=class{constructor(e){this.telemetryService=e}sendGHTelemetryEvent(e,t,n){this.telemetryService.sendGHTelemetryEvent(Y9e(`copilot/${e}`),t,n)}sendGHTelemetryErrorEvent(e,t,n){this.telemetryService.sendGHTelemetryErrorEvent(Y9e(`copilot/${e}`),t,n)}sendGHTelemetryException(e,t){this.telemetryService.sendGHTelemetryException(e,t)}};ag=T([v(0,De)],ag);Y8.push(ag);var XC=class{constructor(e){this.experimentationService=e}};XC=T([v(0,nt)],XC);Y8.push(XC);var Q0=class{constructor(e){this.authenticationService=e}};Q0=T([v(0,ft)],Q0);Y8.push(Q0);var DL=class{constructor(e){this.endpointProvider=e}};DL=T([v(0,Je)],DL);Y8.push(DL);function E3t(r){let e=r.get(K),t=r.get(ue),n=r.get(rr),o=r.get(rm),s=r.get(ar),a=r.get(Pe),l=r.get(nt),c=new Dde;for(let u of Y8)c.set(u,e.createInstance(u));c.set(XM,new XM(s)),c.set(sA,new T0e(process.env)),c.set(lg,new lg(c)),c.set(Pw,Pw.fromEnvironment(!1)),c.set(xY,new xY),c.set(H0,new H0),c.set(ww,new ww),c.set(Fr,new Fr(c)),c.set(PL,new Ffe),c.set(mE,new mE(c)),c.set(FL,new FL),c.set(kw,new dz),c.set(qL,new jde),c.set(Y0,new Y0),c.set(LL,new LL(c)),c.set(xw,new xw(c)),c.set(Ow,new Ow(c));try{c.set(JL,$At(c))}catch(u){console.log(u)}return c.set(Z0,new Z0),c.set(dA,new dA),c.set(kL,new kL(c)),c.set(aA,new aA(c)),c.set(tT,new tT),c.set($0,new class extends $0{get name(){return"vscode-copilot-chat-fetcherService"}fetch(u,d){let p=a.getExperimentBasedConfig(ae.CompletionsFetcher,l)||void 0;return n.fetch(u,p?{...d,useFetcher:p}:d)}disconnectAll(){return n.disconnectAll()}}),c.set(ZC,new Mde),c.set(cp,new I0e),c.set(fE,new fE(FT.env.sessionId,FT.env.machineId,FT.env.remoteName,fJr(FT.env.uiKind))),c.set(BT,new BT),c.set(lf,new lf(c)),c.set(Cu,new N0e(c)),c.set(xo,new k0e(c)),c.set(EE,new Qfe(c)),c.set(YL,new Bpe(c)),c.set(fd,f3t),c.set(KL,new qfe(c)),c.set(md,new md),c.set(Nw,zyt(c,j4t,o)),c.set(cA,new cA(c)),c.set(jL,new gpe),c.set(s3,s3.default),c.set(F4,new w0e),c.set(BL,new class extends BL{async open(u){await FT.env.openExternal(Fe.parse(u))}}),c.set(T4,new class extends T4{logIt(u,d,p,...f){let m=zbt(p,...f);switch(d){case 4:return t.debug(m);case 3:return t.info(m);case 2:return t.warn(m);case 1:return t.error(m)}}}),c}function S3t(r){let e=new yt,t=new _0e(r);return r.set(lE,new C0e(t)),e.add(t.register()),e.add(y3t(r)),e.add(X0t(r)),r.get(jL).add("ms-vscode.cpptools"),e.add(x0t(r)),e}function fJr(r){switch(r){case FT.UIKind.Desktop:return"desktop";case FT.UIKind.Web:return"web"}}var K8=require("vscode");var z8={EOL:`
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/dist/extension.js:935:`}var M0e=new qi("inlineCompletionItemProvider");function yJr(){let r=K8.workspace.getConfiguration("editor.quickSuggestions");return r.get("other")!=="on"&&r.get("comments")!=="on"&&r.get("strings")!=="on"}function O0e(r,e,t,n){e instanceof Error&&e.name==="Canceled"||e instanceof Error&&e.name==="CodeExpectedError"||(r.get(ag).sendGHTelemetryException(e,"codeUnification.completions.exception"),afe(r,e,t,n))}var B0e=class extends _e{constructor(t){super();this.ctx=t;this.pendingRequests=new Set;this.copilotCompletionFeedbackTracker=this._register(new L0e(t)),this.ghostTextProvider=new D0e(t)}async waitForPendingRequests(){for(;this.pendingRequests.size>0;)await Promise.all(this.pendingRequests)}get delegate(){return this.ghostTextProvider}async provideInlineCompletionItems(t,n,o,s){Tn(this.ctx,"codeUnification.completions.invoked",Xo.createAndMarkAsIssued({languageId:t.languageId,lineCount:String(t.lineCount),currentLine:String(n.line),isCycling:String(o.triggerKind===K8.InlineCompletionTriggerKind.Invoke),completionsActive:String(o.selectedCompletionInfo!==void 0)}));try{return this._provideInlineCompletionItems(t,n,o,s)}catch(a){this.ctx.get(ag).sendGHTelemetryException(a,"codeUnification.completions.exception")}finally{Tn(this.ctx,"codeUnification.completions.returned",Xo.createAndMarkAsIssued())}}async _provideInlineCompletionItems(t,n,o,s){let a=new gE;if(this.pendingRequests.add(a.promise),o.triggerKind===K8.InlineCompletionTriggerKind.Automatic&&(!e6e(this.ctx,t)||this.ctx.get(BT).kind==="Error"))return;K8.workspace.getConfiguration(fw).get("respectSelectedCompletionInfo",yJr()||f0t(this.ctx))||(o={...o,selectedCompletionInfo:void 0});try{let c=await this.delegate.provideInlineCompletionItems(t,n,o,s);return setTimeout(()=>{this.pendingRequests.delete(a.promise),a.resolve(void 0)}),c?(Array.isArray(c)&&(c={items:c}),{...c,commands:[a6e]}):void 0}catch(c){O0e(this.ctx,c,".provideInlineCompletionItems",M0e)}}handleDidShowCompletionItem(t,n){try{return this.copilotCompletionFeedbackTracker.trackItem(t),this.delegate.handleDidShowCompletionItem?.(t,n)}catch(o){O0e(this.ctx,o,".provideInlineCompletionItems",M0e)}}handleDidPartiallyAcceptCompletionItem(t,n){try{return this.delegate.handleDidPartiallyAcceptCompletionItem?.(t,n)}catch(o){O0e(this.ctx,o,".provideInlineCompletionItems",M0e)}}handleEndOfLifetime(t,n){try{return this.delegate.handleEndOfLifetime?.(t,n)}catch(o){O0e(this.ctx,o,".handleEndOfLifetime",M0e)}}};var l6e=require("vscode");var J8=class extends _e{constructor(e){super();let t=qJ(this);this._register(pi(n=>{let o=t.read(n);e.setAdditionalExpAssignments(o?.expAssignments??[])}))}};J8=T([v(0,De)],J8);function qJ(r){return fi(r,e=>l6e.languages.onDidChangeCompletionsUnificationState?.(e)??_e.None,()=>l6e.languages.inlineCompletionsUnificationState)}var X8=class extends _e{constructor(t,n,o,s){super();this._instantiationService=t;this.authenticationService=s;this._copilotToken=fi(this,this.authenticationService.onDidAuthenticationChange,()=>this.authenticationService.copilotToken);let a=qJ(this);this._register(pi(l=>{let c=a.read(l),u=n.getExperimentBasedConfigObservable(ae.Internal.InlineEditsEnableGhCompletionsProvider,o).read(l);if(!this._copilotToken.read(l)?.isNoAuthUser&&(c?.codeUnification||u)){let d=this._getOrCreateProvider();l.store.add(T3t.languages.registerInlineCompletionItemProvider({pattern:"**"},d,{debounceDelayMs:0,excludes:["github.copilot"],groupId:"completions"}))}}))}_getOrCreateProvider(){if(!this._provider){let t=this._instantiationService.invokeFunction(E3t);this._register(S3t(t)),this._provider=this._register(new B0e(t))}return this._provider}};X8=T([v(0,K),v(1,Pe),v(2,nt),v(3,ft)],X8);var UT=require("vscode");var cMo=Object.freeze({id:"application",order:100,title:Po("applicationConfigurationTitle","Application"),type:"object"});var c6e=class{constructor(){this.migrations=[];this._onDidRegisterConfigurationMigrations=new Vt;this.onDidRegisterConfigurationMigration=this._onDidRegisterConfigurationMigrations.event}registerConfigurationMigrations(e){this.migrations.push(...e)}},EA=new c6e,F0e=class{constructor(){this._disposables=new yt;this._register(UT.workspace.onDidChangeWorkspaceFolders(async e=>{for(let t of e.added)await this.migrateConfigurationForFolder(t,EA.migrations)})),this.migrateConfigurations(EA.migrations),this._register(EA.onDidRegisterConfigurationMigration(e=>this.migrateConfigurations(e)))}async migrateConfigurations(e){if(UT.window.state.focused){await this.migrateConfigurationForFolder(void 0,e);for(let t of UT.workspace.workspaceFolders??[])await this.migrateConfigurationForFolder(t,e)}}async migrateConfigurationForFolder(e,t){await Promise.all([t.map(n=>this.migrateConfigurationsForFolder(n,e?.uri))])}async migrateConfigurationsForFolder(e,t){let n=UT.workspace.getConfiguration(void 0,t),o=n.inspect(e.key);if(!o)return;let s=[[o.globalValue,UT.ConfigurationTarget.Global],[o.workspaceValue,UT.ConfigurationTarget.Workspace]];for(let[a,l]of s){if(!a)continue;let c=[];if(a!==void 0){let u=await this.runMigration(e,a);for(let d of u??[])c.push(d)}c.length&&await Promise.allSettled(c.map(async([u,d])=>{n.update(u,d.value,l)}))}}async runMigration(e,t){let n=await e.migrateFn(t);return Array.isArray(n)?n:[[e.key,n]]}_register(e){this._disposables.add(e)}dispose(){this._disposables.dispose()}};EA.registerConfigurationMigrations([{key:"github.copilot.chat.experimental.startDebugging.enabled",migrateFn:async r=>[["github.copilot.chat.startDebugging.enabled",{value:r}],["github.copilot.chat.experimental.startDebugging.enabled",{value:void 0}]]}]);EA.registerConfigurationMigrations([{key:"github.copilot.chat.experimental.setupTests.enabled",migrateFn:async r=>[["github.copilot.chat.setupTests.enabled",{value:r}],["github.copilot.chat.experimental.setupTests.enabled",{value:void 0}]]}]);EA.registerConfigurationMigrations([{key:"github.copilot.chat.experimental.codeGeneration.instructions",migrateFn:async r=>[["github.copilot.chat.codeGeneration.instructions",{value:r}],["github.copilot.chat.experimental.codeGeneration.instructions",{value:void 0}]]}]);EA.registerConfigurationMigrations([{key:"github.copilot.chat.experimental.codeGeneration.useInstructionFiles",migrateFn:async r=>[["github.copilot.chat.codeGeneration.useInstructionFiles",{value:r}],["github.copilot.chat.experimental.codeGeneration.useInstructionFiles",{value:void 0}]]}]);EA.registerConfigurationMigrations([{key:"github.copilot.chat.experimental.testGeneration.instructions",migrateFn:async r=>[["github.copilot.chat.testGeneration.instructions",{value:r}],["github.copilot.chat.experimental.testGeneration.instructions",{value:void 0}]]}]);EA.registerConfigurationMigrations([{key:"github.copilot.chat.experimental.generateTests.codeLens",migrateFn:async r=>[["github.copilot.chat.generateTests.codeLens",{value:r}],["github.copilot.chat.experimental.generateTests.codeLens",{value:void 0}]]}]);EA.registerConfigurationMigrations([{key:"github.copilot.chat.experimental.temporalContext.enabled",migrateFn:async r=>[["github.copilot.chat.editor.temporalContext.enabled",{value:r}],["github.copilot.chat.experimental.temporalContext.enabled",{value:void 0}]]}]);EA.registerConfigurationMigrations([{key:"github.copilot.chat.temporalContext.enabled",migrateFn:async r=>[["github.copilot.chat.editor.temporalContext.enabled",{value:r}],["github.copilot.chat.temporalContext.enabled",{value:void 0}]]}]);var Da=require("vscode");var V0e=require("vscode");async function Z8(r,e,t,n,o,s,a,l){let c={Accept:"application/vnd.github+json","X-GitHub-Api-Version":"2022-11-28"};a&&(c.Authorization=`Bearer ${a}`);let u=await r.fetch(`${n}/${o}`,{method:s,headers:c,body:l?JSON.stringify(l):void 0});if(u.ok)try{let d=await u.json(),p=Number(u.headers.get("x-ratelimit-remaining")),f=`[RateLimit] REST rate limit remaining: ${p}, ${o}`;return p<1e3?(e.warn(f),t.sendMSFTTelemetryEvent("githubAPI.approachingRateLimit",{rateLimit:p.toString()})):e.debug(f),d}catch{return}}var YE=Me("IGithubRepositoryService"),U0e=Me("IOctoKitService"),I3t=1682102,b1=class{constructor(e,t,n,o){this._capiClientService=e;this._fetcherService=t;this._logService=n;this._telemetryService=o}async getCurrentAuthedUserWithToken(e){return this._makeGHAPIRequest("user","GET",e)}async getTeamMembershipWithToken(e,t,n){return this._makeGHAPIRequest(`teams/${e}/memberships/${n}`,"GET",t)}async _makeGHAPIRequest(e,t,n,o){return Z8(this._fetcherService,this._logService,this._telemetryService,this._capiClientService.dotcomAPIURL,e,t,n,o)}};var VJ=class extends b1{async getCurrentAuthedUserWithToken(e){return{avatar_url:"",login:"NullUser",name:"Null User"}}async getTeamMembershipWithToken(e,t,n){}async _makeGHAPIRequest(e,t,n,o){}};var x3t='Tests: either GITHUB_PAT or GITHUB_OAUTH_TOKEN must be set. Run "npm run get_token" to get one.';function R3t(){if(process.env.GITHUB_PAT)return process.env.GITHUB_PAT;if(process.env.GITHUB_OAUTH_TOKEN)return process.env.GITHUB_OAUTH_TOKEN;throw new Error(x3t)}function w3t(){let r;if(process.env.GITHUB_PAT&&(r=new it(HJ,[process.env.GITHUB_PAT])),process.env.GITHUB_OAUTH_TOKEN&&(r=new it(GJ,[process.env.GITHUB_OAUTH_TOKEN])),!r)throw new Error(x3t);return r}var e9=class extends _e{constructor(t,n,o,s,a,l,c){super();this._baseOctokitservice=t;this._logService=n;this._telemetryService=o;this._domainService=s;this._capiClientService=a;this._fetcherService=l;this._envService=c;this._isDisposed=!1;this._copilotTokenRefreshEmitter=this._register(new Vt);this.onDidCopilotTokenRefresh=this._copilotTokenRefreshEmitter.event;this._register(rn(()=>this._isDisposed=!0))}get copilotToken(){return this._copilotToken}set copilotToken(t){t!==this._copilotToken&&(this._copilotToken=t,this._copilotTokenRefreshEmitter.fire())}resetCopilotToken(t){t!==void 0&&this._telemetryService.sendGHTelemetryEvent("auth.reset_token_"+t),this._logService.debug(`Resetting copilot token on HTTP error ${t||"unknown"}`),this.copilotToken=void 0}async authFromGitHubToken(t,n){return this.doAuthFromGitHubTokenOrDevDeviceId({githubToken:t,ghUsername:n})}async authFromDevDeviceId(t){return this.doAuthFromGitHubTokenOrDevDeviceId({devDeviceId:t})}async doAuthFromGitHubTokenOrDevDeviceId(t){this._telemetryService.sendGHTelemetryEvent("auth.new_login");let n,o,s;if("githubToken"in t?(s=t.ghUsername,[n,o]=await Promise.all([this.fetchCopilotTokenFromGitHubToken(t.githubToken),this.fetchCopilotUserInfo(t.githubToken)])):n=await this.fetchCopilotTokenFromDevDeviceId(t.devDeviceId),!n)return this._logService.warn("Failed to get copilot token"),this._telemetryService.sendGHTelemetryErrorEvent("auth.request_failed"),{kind:"failure",reason:"FailedToGetToken"};let a=await iit(n);if(!a)return this._logService.warn("Failed to get copilot token"),this._telemetryService.sendGHTelemetryErrorEvent("auth.request_read_failed"),{kind:"failure",reason:"FailedToGetToken"};if(n.status===401)return this._logService.warn("Failed to get copilot token due to 401 status"),this._telemetryService.sendGHTelemetryErrorEvent("auth.unknown_401"),{kind:"failure",reason:"HTTP401"};if(n.status===403&&a.message?.startsWith("API rate limit exceeded"))return this._logService.warn("Failed to get copilot token due to exceeding API rate limit"),this._telemetryService.sendGHTelemetryErrorEvent("auth.rate_limited"),{kind:"failure",reason:"RateLimited"};if(!n.ok||!a.token){this._logService.warn(`Invalid copilot token: missing token: ${n.status} ${n.statusText}`);let f=is.createAndMarkAsIssued({status:n.status.toString(),status_text:n.statusText});return this._telemetryService.sendGHTelemetryErrorEvent("auth.invalid_token",f.properties,f.measurements),{kind:"failure",reason:"NotAuthorized",...a.error_details}}let l=a.expires_at;a.expires_at=_N()+a.refresh_in+60;let c=s??"unknown",u=!1;kMe(a.organization_list??[])&&"githubToken"in t&&(u=!!await this._baseOctokitservice.getTeamMembershipWithToken(I3t,t.githubToken,c));let d={...a,copilot_plan:o?.copilot_plan??a.sku??"",quota_snapshots:o?.quota_snapshots,quota_reset_date:o?.quota_reset_date,username:c,isVscodeTeamMember:u},p=is.createAndMarkAsIssued({},{adjusted_expires_at:a.expires_at,expires_at:l,current_time:_N()});return this._telemetryService.sendGHTelemetryEvent("auth.new_token",p.properties,p.measurements),{kind:"success",...d}}async fetchCopilotTokenFromGitHubToken(t){let n={headers:{Authorization:`token ${t}`,"X-GitHub-Api-Version":"2025-04-01"},retryFallbacks:!0,expectJSON:!0};return await this._capiClientService.makeRequest(n,{type:Zr.CopilotToken})}async fetchCopilotTokenFromDevDeviceId(t){let n={headers:{"X-GitHub-Api-Version":"2025-04-01","Editor-Device-Id":`${t}`},retryFallbacks:!0,expectJSON:!0};return await this._capiClientService.makeRequest(n,{type:Zr.CopilotNLToken})}async fetchCopilotUserInfo(t){let n={headers:{Authorization:`token ${t}`,"X-GitHub-Api-Version":"2025-04-01"},retryFallbacks:!0,expectJSON:!0};return await(await this._capiClientService.makeRequest(n,{type:Zr.CopilotUserInfo})).json()}},HJ=class extends e9{constructor(t,n,o,s,a,l,c){super(new VJ(s,l,n,o),n,o,a,s,l,c);this._completionsToken=t;this.copilotToken={token:t,expires_at:0,refresh_in:0,username:"fixedTokenManager",isVscodeTeamMember:!1,copilot_plan:"unknown"}}set completionsToken(t){this._completionsToken=t,this.copilotToken={token:t,expires_at:0,refresh_in:0,username:"fixedTokenManager",isVscodeTeamMember:!1,copilot_plan:"unknown"}}get completionsToken(){return this._completionsToken}async getCopilotToken(){return new pw(this.copilotToken)}async checkCopilotToken(){return{status:"OK"}}};HJ=T([v(1,ue),v(2,De),v(3,Or),v(4,Xi),v(5,rr),v(6,Mt)],HJ);var GJ=class extends e9{constructor(t,n,o,s,a,l,c,u,d){super(new VJ(l,c,o,s),o,s,a,l,c,u);this.githubToken=t;this.githubUsername=n;this.configurationService=d}async getCopilotToken(t){if(!this.copilotToken||this.copilotToken.expires_at<_N()-60*5||t){let n=await this.authFromGitHubToken(this.githubToken,this.githubUsername);if(n.kind==="failure")throw Error(`Failed to get copilot token: ${n.reason.toString()} ${n.message??""}`);this.copilotToken={...n}}return new pw(this.copilotToken)}async checkCopilotToken(){if(!this.copilotToken||this.copilotToken.expires_at<_N()){let n=await this.authFromGitHubToken(this.githubToken,this.githubUsername);if(n.kind==="failure")return n;this.copilotToken={...n}}return{status:"OK"}}};GJ=T([v(2,ue),v(3,De),v(4,Xi),v(5,Or),v(6,rr),v(7,Mt),v(8,Pe)],GJ);var zE=require("vscode");var k3t="You are not signed in to GitHub. Please sign in to use Copilot.";function Q0e(r){return r.getConfig(ae.Shared.AuthProvider)==="github-enterprise"?"github-enterprise":"github"}async function D3t(r,e,t,n={}){if(!(await zE.authentication.getAccounts(r)).length)return await zE.authentication.getSession(r,e,n);if(n.forceNewSession)return await zE.authentication.getSession(r,e,{...n,forceNewSession:sC({learnMore:Fe.parse("https://aka.ms/copilotRepoScope")},n.forceNewSession),clearSessionPreference:!0});let s=await t();return s||(n.createIfNone?await zE.authentication.getSession(r,e,{forceNewSession:{learnMore:Fe.parse("https://aka.ms/copilotRepoScope")},clearSessionPreference:!0}):await zE.authentication.getSession(r,e,n))}function q0e(r,e){let t=Q0e(r);return D3t(t,Lj,async()=>{if(r.getConfig(ae.Shared.AuthPermissions)!=="minimal"){let s=await zE.authentication.getSession(t,c5,{silent:!0});if(s)return s}let n=await zE.authentication.getSession(t,Lj,{silent:!0});if(n)return n;let o=await zE.authentication.getSession(t,tit,{silent:!0});if(o)return o},e)}function N3t(r,e){if(r.getConfig(ae.Shared.AuthPermissions)==="minimal"){if(e.createIfNone||e.forceNewSession)throw new l5;return Promise.resolve(void 0)}let t=Q0e(r);return D3t(t,c5,async()=>await zE.authentication.getSession(t,c5,{silent:!0}),e)}var L3t=!1,WJ=class extends Error{},jJ=class extends Error{},$J=class extends Error{},YJ=class extends Error{},zJ=class extends Error{},t9=class extends e9{constructor(t,n,o,s,a,l,c){super(new b1(s,a,t,n),t,n,o,s,a,l);this.configurationService=c;this._taskSingler=new Qb}async getCopilotToken(t){if(!this.copilotToken||this.copilotToken.expires_at-60*5<_N()||t)try{this._logService.debug(`Getting CopilotToken (force: ${t})...`),this.copilotToken=await this._authShowWarnings(),this._logService.debug(`Got CopilotToken (force: ${t}).`)}catch(n){throw this._logService.debug(`Getting CopilotToken (force: ${t}) threw error: ${n}`),this.copilotToken=void 0,n}return new pw(this.copilotToken)}async _auth(){let t=this.configurationService.getNonExtensionConfig("chat.allowAnonymousAccess"),n=await q0e(this.configurationService,{silent:!0});if(!n&&!t)return this._logService.warn("GitHub login failed"),this._telemetryService.sendGHTelemetryErrorEvent("auth.github_login_failed"),{kind:"failure",reason:"GitHubLoginFailed"};if(n){this._logService.info(`Logged in as ${n.account.label}`);let o=await this.authFromGitHubToken(n.accessToken,n.account.label);return o.kind==="success"&&(this._logService.info(`Got Copilot token for ${n.account.label}`),this._logService.info(`Copilot Chat: ${this._envService.getVersion()}, VS Code: ${this._envService.vscodeVersion}`)),o}else{this._logService.info("Allowing anonymous access with devDeviceId");let o=await this.authFromDevDeviceId(V0e.env.devDeviceId);if(o.kind==="success")this._logService.info("Got Copilot token for devDeviceId"),this._logService.info(`Copilot Chat: ${this._envService.getVersion()}, VS Code: ${this._envService.vscodeVersion}`);else return this._logService.warn("GitHub login failed"),{kind:"failure",reason:"GitHubLoginFailed"};return o}}async _authShowWarnings(){let t=await this._taskSingler.getOrCreate("auth",()=>this._auth());if(t.kind==="failure"&&t.reason==="NotAuthorized"){let n=t.message;switch(t.notification_id){case"not_signed_up":case"no_copilot_access":throw new WJ(n??"User not authorized");case"subscription_ended":throw new jJ(n);case"enterprise_managed_user_account":throw new YJ(n);case"server_error":case"feature_flag_blocked":case"spammy_user":case"snippy_not_configured":throw new $J(n)}}if(t.kind==="failure"&&t.reason==="HTTP401"){let n="Your GitHub token is invalid. Please sign out from your GitHub account using the VS Code accounts menu and try again.";throw L3t||(L3t=!0,V0e.window.showWarningMessage(n)),Error(n)}if(t.kind==="failure"&&t.reason==="GitHubLoginFailed")throw Error("GitHubLoginFailed");if(t.kind==="failure"&&t.reason==="RateLimited")throw Error("Your account has exceeded GitHub's API rate limit. Please try again later.");if(t.kind==="failure")throw Error("Failed to get copilot token");if(t.kind==="success"&&t.chat_enabled===!1)throw new zJ("Copilot Chat is disabled");return t}};t9=T([v(0,ue),v(1,De),v(2,Xi),v(3,Or),v(4,rr),v(5,Mt),v(6,Pe)],t9);var E1={Activated:"github.copilot-chat.activated",Offline:"github.copilot.offline",IndividualDisabled:"github.copilot.interactiveSession.individual.disabled",IndividualExpired:"github.copilot.interactiveSession.individual.expired",ContactSupport:"github.copilot.interactiveSession.contactSupport",EnterpriseDisabled:"github.copilot.interactiveSession.enterprise.disabled",CopilotChatDisabled:"github.copilot.interactiveSession.chatDisabled"},M3t="github.copilot.chat.quotaExceeded",O3t="github.copilot.chat.showLogView",AJr="github.copilot.debugReportFeedback",B3t="github.copilot.previewFeaturesDisabled",bJr="github.copilot.chat.debug",r9=class extends _e{constructor(t,n,o,s,a,l){super();this._authenticationService=t;this._telemetryService=n;this._fetcherService=o;this._logService=s;this._configService=a;this._envService=l;this._needsOfflineCheck=!1;this._showLogView=!1;this._inspectContext().catch(console.error),this._register(t.onDidAuthenticationChange(async()=>await this._onAuthenticationChange())),this._register(Da.commands.registerCommand("github.copilot.refreshToken",async()=>await this._inspectContext())),this._register(Da.commands.registerCommand("github.copilot.debug.showChatLogView",async()=>{this._showLogView=!0,await Da.commands.executeCommand("setContext",O3t,!0),await Da.commands.executeCommand("copilot-chat.focus")})),this._register({dispose:()=>this._cancelPendingOfflineCheck()}),this._register(Da.window.onDidChangeWindowState(()=>this._runOfflineCheck("Window state change"))),this._updateShowLogViewContext(),this._updateDebugContext();let c=this._configService.getConfigObservable(ae.Internal.DebugReportFeedback);this._register(pi(u=>{Da.commands.executeCommand("setContext",AJr,c.read(u))}))}_scheduleOfflineCheck(){this._cancelPendingOfflineCheck(),this._needsOfflineCheck=!0,this._logService.debug(`[context keys] Scheduling offline check. Active: ${Da.window.state.active}, focused: ${Da.window.state.focused}.`),Da.window.state.active&&Da.window.state.focused&&(this._scheduledOfflineCheck=setTimeout(()=>{this._scheduledOfflineCheck=void 0,this._runOfflineCheck("Scheduled offline check")},60*1e3))}_runOfflineCheck(t){this._logService.debug(`[context keys] ${t}. Needs offline check: ${this._needsOfflineCheck}, active: ${Da.window.state.active}, focused: ${Da.window.state.focused}.`),this._needsOfflineCheck&&Da.window.state.active&&Da.window.state.focused&&this._inspectContext().catch(n=>this._logService.error(n))}_cancelPendingOfflineCheck(){this._needsOfflineCheck=!1,this._scheduledOfflineCheck&&(clearTimeout(this._scheduledOfflineCheck),this._scheduledOfflineCheck=void 0)}async _inspectContext(){this._logService.debug("[context keys] Updating context keys."),this._cancelPendingOfflineCheck();let t=Object.values(E1),n,o;try{await this._authenticationService.getCopilotToken(),o=E1.Activated}catch(s){n=s;let a=s.message||s,l=is.createAndMarkAsIssued({reason:a});this._telemetryService.sendGHTelemetryErrorEvent("activationFailed",l.properties,l.measurements);let c=a==="GitHubLoginFailed"?k3t:`GitHub Copilot could not connect to server. Extension activation failed: "${a}"`;this._logService.error(c)}n instanceof WJ?o=E1.IndividualDisabled:n instanceof jJ?o=E1.IndividualExpired:n instanceof YJ?o=E1.EnterpriseDisabled:n instanceof $J?o=E1.ContactSupport:n instanceof zJ?o=E1.CopilotChatDisabled:this._fetcherService.isFetcherError(n)&&(o=E1.Offline,this._scheduleOfflineCheck()),o&&Da.commands.executeCommand("setContext",o,!0);for(let s of t)s!==o&&Da.commands.executeCommand("setContext",s,!1)}async _updateQuotaExceededContext(){try{let t=await this._authenticationService.getCopilotToken();Da.commands.executeCommand("setContext",M3t,t.isChatQuotaExceeded)}catch{Da.commands.executeCommand("setContext",M3t,!1)}}async _updatePreviewFeaturesDisabledContext(){try{let n=!(await this._authenticationService.getCopilotToken()).isEditorPreviewFeaturesEnabled();n&&this._logService.warn("Copilot preview features are disabled by organizational policy. Learn more: https://aka.ms/github-copilot-org-enable-features"),Da.commands.executeCommand("setContext",B3t,n)}catch{Da.commands.executeCommand("setContext",B3t,void 0)}}_updateShowLogViewContext(){this._showLogView||(this._showLogView=!!this._authenticationService.copilotToken?.isInternal||!this._envService.isProduction(),this._showLogView&&Da.commands.executeCommand("setContext",O3t,this._showLogView))}_updateDebugContext(){Da.commands.executeCommand("setContext",bJr,!this._envService.isProduction())}async _onAuthenticationChange(){this._inspectContext(),this._updateQuotaExceededContext(),this._updatePreviewFeaturesDisabledContext(),this._updateShowLogViewContext()}};r9=T([v(0,ft),v(1,De),v(2,rr),v(3,ue),v(4,Pe),v(5,Mt)],r9);var U9t=z(require("vscode"));var qm=Me("IDiffService");var If=class{get lines(){return this._lineStartOffsets.length}constructor(e){this._lineStartOffsets=[0];let t=0;for(;t<e.length;){let n=e.charCodeAt(t);t++,(n===13||n===10)&&(n===13&&t<e.length&&e.charCodeAt(t)===10&&t++,this._lineStartOffsets.push(t))}}lineOffset(e){return this._lineStartOffsets[e-1]}offsetToPosition(e){let t=1;for(;t<this._lineStartOffsets.length&&!(this._lineStartOffsets[t]>e);t++);let n=e-this._lineStartOffsets[t-1];return new Tr(t,n+1)}startOffsetOfLineContaining(e){let t=1;for(;t<this._lineStartOffsets.length&&!(this._lineStartOffsets[t]>e);t++);return this._lineStartOffsets[t-1]}positionToOffset(e){return e.lineNumber>=this._lineStartOffsets.length?this._lineStartOffsets[this._lineStartOffsets.length-1]+e.column-1:this._lineStartOffsets[e.lineNumber-1]+e.column-1}};async function n9(r,e,t,n=5e3){let o=await t.computeDiff(r,e,{maxComputationTimeMs:n,computeMoves:!1,ignoreTrimWhitespace:!1}),s=new If(r),a=new If(e),l=[];for(let c of o.changes)for(let u of c.innerChanges??[]){let d=a.positionToOffset(u.modifiedRange.getStartPosition()),p=a.positionToOffset(u.modifiedRange.getEndPosition()),f=e.substring(d,p),m=s.positionToOffset(u.originalRange.getStartPosition()),h=s.positionToOffset(u.originalRange.getEndPosition()),g=new et(m,h);l.push(new Yn(g,f))}return new Jt(l)}function S1(r){let e=r.map(n=>new Yn(et.ofStartAndLength(n.rangeOffset,n.rangeLength),n.text));return e.reverse(),new Jt(e)}var o9=class{constructor(e,t){this.initialText=e;this._diffService=t;this._document=new u6e(e)}addEdits(e){this._document.applyTextEdits(e)}getText(){return this._document.getValue()}async getEdits(){let e=this.getText();return await n9(this.initialText,e,this._diffService)}};o9=T([v(1,qm)],o9);var u6e=class{constructor(e=""){this._converter=void 0;this._value="";this._value=e}getValue(){return this._value}applyTextEdits(e){let t=new Jt(e.map(n=>{let o=this.positionToOffset(n.range.start),s=this.positionToOffset(n.range.end);return new Yn(new et(o,s),n.newText)}));this.applyOffsetEdit(t)}applyOffsetEdit(e){this._value=e.apply(this._value),this._converter=void 0}positionToOffset(e){this._converter||(this._converter=new If(this._value));let t=e.line;if(t<0)return 0;if(t>=this._converter.lines)return this._value.length;let n=e.character,o=this._converter.lineOffset(t+1);if(n<=0)return o;let s;if(t+1<this._converter.lines)if(s=this._converter.lineOffset(t+2),s>o){let a=this._value.charCodeAt(s-1);(a===13||a===10)&&s--,a===10&&s>o&&this._value.charCodeAt(s-1)===13&&s--}else s=o;else s=this._value.length;return n>s-o?s:o+n}};var i9=class extends _e{constructor(t,n,o,s){super();this._baseText=t;this._document=n;this._workspaceService=o;this._diffService=s;this._baseDocumentText=this._document.getText();this._editsOnTop=Jt.empty;this._register(this._workspaceService.onDidChangeTextDocument(a=>{if(a.document.uri.toString()!==this._document.uri.toString())return;let l=S1(a.contentChanges);this._editsOnTop=this._editsOnTop.compose(l)}))}async compute(){let t=await n9(this._baseText,this._baseDocumentText,this._diffService);return{document:this._document,baseText:this._baseText,getEditsSinceInitial:()=>{if(this._store.isDisposed)throw new Qt("EditComputer has been disposed");return t.compose(this._editsOnTop)}}}};i9=T([v(2,Oe),v(3,qm)],i9);var s9=class extends _e{constructor(t,n){super();this.textDocument=t;this._workspaceService=n;this._edits=Jt.empty;this.initialTextVersion=this.textDocument.version;this._register(this._workspaceService.onDidChangeTextDocument(o=>{if(o.document.uri.toString()===this.textDocument.uri.toString()){let s=S1(o.contentChanges);this._edits=this._edits.compose(s)}}))}getEdits(){if(this._store.isDisposed)throw new Qt("DocumentEditRecorder has been disposed");return this._edits}};s9=T([v(1,Oe)],s9);var ZM=0;function H0e(r){return r===0}var _g=2**26;function a9(r,e){return r*_g+e}function QT(r){let e=r,t=Math.floor(e/_g),n=e-t*_g;return new pl(t,n)}function KJ(r,e){let t=r+e;return e>=_g&&(t=t-r%_g),t}function F3t(r,e){return r.reduce((t,n)=>KJ(t,e(n)),ZM)}function d6e(r,e){return r===e}function JJ(r,e){let t=r,n=e;if(n-t<=0)return ZM;let s=Math.floor(t/_g),a=Math.floor(n/_g),l=n-a*_g;if(s===a){let c=t-s*_g;return a9(0,l-c)}else return a9(a-s,l)}function U3t(r,e){let t=r,n=Math.floor(t/_g),o=t-n*_g,s=e,a=Math.floor(s/_g),l=s-a*_g;return new jt(n+1,o+1,a+1,l+1)}var l9=class{constructor(e,t,n){this.startOffset=e;this.endOffset=t;this.newLength=n}toString(){return`[${QT(this.startOffset)}...${QT(this.endOffset)}) -> ${QT(this.newLength)}`}};function q3t(r,e){if(r.length===0)return e;if(e.length===0)return r;let t=new Ase(Q3t(r)),n=Q3t(e);n.push({modified:!1,lengthBefore:void 0,lengthAfter:void 0});let o=t.dequeue();function s(u){if(u===void 0){let p=t.takeWhile(f=>!0)||[];return o&&p.unshift(o),p}let d=[];for(;o&&!H0e(u);){let[p,f]=o.splitAt(u);d.push(p),u=JJ(p.lengthAfter,u),o=f??t.dequeue()}return H0e(u)||d.push(new XJ(!1,u,u)),d}let a=[];function l(u,d,p){if(a.length>0&&d6e(a[a.length-1].endOffset,u)){let f=a[a.length-1];a[a.length-1]=new l9(f.startOffset,d,KJ(f.newLength,p))}else a.push({startOffset:u,endOffset:d,newLength:p})}let c=ZM;for(let u of n){let d=s(u.lengthBefore);if(u.modified){let p=F3t(d,m=>m.lengthBefore),f=KJ(c,p);l(c,f,u.lengthAfter),c=f}else for(let p of d){let f=c;c=KJ(c,p.lengthBefore),p.modified&&l(f,c,p.lengthAfter)}}return a}var XJ=class r{constructor(e,t,n){this.modified=e;this.lengthBefore=t;this.lengthAfter=n}splitAt(e){let t=JJ(e,this.lengthAfter);return d6e(t,ZM)?[this,void 0]:this.modified?[new r(this.modified,this.lengthBefore,e),new r(this.modified,ZM,t)]:[new r(this.modified,e,e),new r(this.modified,t,t)]}toString(){return`${this.modified?"M":"U"}:${QT(this.lengthBefore)} -> ${QT(this.lengthAfter)}`}};function Q3t(r){let e=[],t=ZM;for(let n of r){let o=JJ(t,n.startOffset);H0e(o)||e.push(new XJ(!1,o,o));let s=JJ(n.startOffset,n.endOffset);e.push(new XJ(!0,s,n.newLength)),t=n.endOffset}return e}var ZJ=class r{constructor(e){this.edits=e}static{this.empty=new r([])}static fromTextEdit(e){let t=e.replacements.map(n=>new G0e(n.range,pl.ofText(n.text)));return new r(t)}static _fromTextEditInfo(e){let t=e.map(n=>{let o=QT(n.newLength);return new G0e(U3t(n.startOffset,n.endOffset),new pl(o.lineCount,o.columnCount))});return new r(t)}_toTextEditInfo(){return this.edits.map(e=>new l9(a9(e.range.startLineNumber-1,e.range.startColumn-1),a9(e.range.endLineNumber-1,e.range.endColumn-1),a9(e.newLength.lineCount,e.newLength.columnCount)))}compose(e){let t=this._toTextEditInfo(),n=e._toTextEditInfo(),o=q3t(t,n);return r._fromTextEditInfo(o)}getRange(){if(this.edits.length!==0)return jt.fromPositions(this.edits[0].range.getStartPosition(),this.edits.at(-1).range.getEndPosition())}toString(){return`[${this.edits.join(", ")}]`}},G0e=class{constructor(e,t){this.range=e;this.newLength=t}toString(){return`{ range: ${this.range}, newLength: ${this.newLength} }`}};var V3t=Object.create(null);function L(r,e){if(Ol(e)){let t=V3t[e];if(t===void 0)throw new Error(`${r} references an unknown codicon: ${e}`);e=t}return V3t[r]=e,{id:r}}var H3t={add:L("add",6e4),plus:L("plus",6e4),gistNew:L("gist-new",6e4),repoCreate:L("repo-create",6e4),lightbulb:L("lightbulb",60001),lightBulb:L("light-bulb",60001),repo:L("repo",60002),repoDelete:L("repo-delete",60002),gistFork:L("gist-fork",60003),repoForked:L("repo-forked",60003),gitPullRequest:L("git-pull-request",60004),gitPullRequestAbandoned:L("git-pull-request-abandoned",60004),recordKeys:L("record-keys",60005),keyboard:L("keyboard",60005),tag:L("tag",60006),gitPullRequestLabel:L("git-pull-request-label",60006),tagAdd:L("tag-add",60006),tagRemove:L("tag-remove",60006),person:L("person",60007),personFollow:L("person-follow",60007),personOutline:L("person-outline",60007),personFilled:L("person-filled",60007),gitBranch:L("git-branch",60008),gitBranchCreate:L("git-branch-create",60008),gitBranchDelete:L("git-branch-delete",60008),sourceControl:L("source-control",60008),mirror:L("mirror",60009),mirrorPublic:L("mirror-public",60009),star:L("star",60010),starAdd:L("star-add",60010),starDelete:L("star-delete",60010),starEmpty:L("star-empty",60010),comment:L("comment",60011),commentAdd:L("comment-add",60011),alert:L("alert",60012),warning:L("warning",60012),search:L("search",60013),searchSave:L("search-save",60013),logOut:L("log-out",60014),signOut:L("sign-out",60014),logIn:L("log-in",60015),signIn:L("sign-in",60015),eye:L("eye",60016),eyeUnwatch:L("eye-unwatch",60016),eyeWatch:L("eye-watch",60016),circleFilled:L("circle-filled",60017),primitiveDot:L("primitive-dot",60017),closeDirty:L("close-dirty",60017),debugBreakpoint:L("debug-breakpoint",60017),debugBreakpointDisabled:L("debug-breakpoint-disabled",60017),debugHint:L("debug-hint",60017),terminalDecorationSuccess:L("terminal-decoration-success",60017),primitiveSquare:L("primitive-square",60018),edit:L("edit",60019),pencil:L("pencil",60019),info:L("info",60020),issueOpened:L("issue-opened",60020),gistPrivate:L("gist-private",60021),gitForkPrivate:L("git-fork-private",60021),lock:L("lock",60021),mirrorPrivate:L("mirror-private",60021),close:L("close",60022),removeClose:L("remove-close",60022),x:L("x",60022),repoSync:L("repo-sync",60023),sync:L("sync",60023),clone:L("clone",60024),desktopDownload:L("desktop-download",60024),beaker:L("beaker",60025),microscope:L("microscope",60025),vm:L("vm",60026),deviceDesktop:L("device-desktop",60026),file:L("file",60027),fileText:L("file-text",60027),more:L("more",60028),ellipsis:L("ellipsis",60028),kebabHorizontal:L("kebab-horizontal",60028),mailReply:L("mail-reply",60029),reply:L("reply",60029),organization:L("organization",60030),organizationFilled:L("organization-filled",60030),organizationOutline:L("organization-outline",60030),newFile:L("new-file",60031),fileAdd:L("file-add",60031),newFolder:L("new-folder",60032),fileDirectoryCreate:L("file-directory-create",60032),trash:L("trash",60033),trashcan:L("trashcan",60033),history:L("history",60034),clock:L("clock",60034),folder:L("folder",60035),fileDirectory:L("file-directory",60035),symbolFolder:L("symbol-folder",60035),logoGithub:L("logo-github",60036),markGithub:L("mark-github",60036),github:L("github",60036),terminal:L("terminal",60037),console:L("console",60037),repl:L("repl",60037),zap:L("zap",60038),symbolEvent:L("symbol-event",60038),error:L("error",60039),stop:L("stop",60039),variable:L("variable",60040),symbolVariable:L("symbol-variable",60040),array:L("array",60042),symbolArray:L("symbol-array",60042),symbolModule:L("symbol-module",60043),symbolPackage:L("symbol-package",60043),symbolNamespace:L("symbol-namespace",60043),symbolObject:L("symbol-object",60043),symbolMethod:L("symbol-method",60044),symbolFunction:L("symbol-function",60044),symbolConstructor:L("symbol-constructor",60044),symbolBoolean:L("symbol-boolean",60047),symbolNull:L("symbol-null",60047),symbolNumeric:L("symbol-numeric",60048),symbolNumber:L("symbol-number",60048),symbolStructure:L("symbol-structure",60049),symbolStruct:L("symbol-struct",60049),symbolParameter:L("symbol-parameter",60050),symbolTypeParameter:L("symbol-type-parameter",60050),symbolKey:L("symbol-key",60051),symbolText:L("symbol-text",60051),symbolReference:L("symbol-reference",60052),goToFile:L("go-to-file",60052),symbolEnum:L("symbol-enum",60053),symbolValue:L("symbol-value",60053),symbolRuler:L("symbol-ruler",60054),symbolUnit:L("symbol-unit",60054),activateBreakpoints:L("activate-breakpoints",60055),archive:L("archive",60056),arrowBoth:L("arrow-both",60057),arrowDown:L("arrow-down",60058),arrowLeft:L("arrow-left",60059),arrowRight:L("arrow-right",60060),arrowSmallDown:L("arrow-small-down",60061),arrowSmallLeft:L("arrow-small-left",60062),arrowSmallRight:L("arrow-small-right",60063),arrowSmallUp:L("arrow-small-up",60064),arrowUp:L("arrow-up",60065),bell:L("bell",60066),bold:L("bold",60067),book:L("book",60068),bookmark:L("bookmark",60069),debugBreakpointConditionalUnverified:L("debug-breakpoint-conditional-unverified",60070),debugBreakpointConditional:L("debug-breakpoint-conditional",60071),debugBreakpointConditionalDisabled:L("debug-breakpoint-conditional-disabled",60071),debugBreakpointDataUnverified:L("debug-breakpoint-data-unverified",60072),debugBreakpointData:L("debug-breakpoint-data",60073),debugBreakpointDataDisabled:L("debug-breakpoint-data-disabled",60073),debugBreakpointLogUnverified:L("debug-breakpoint-log-unverified",60074),debugBreakpointLog:L("debug-breakpoint-log",60075),debugBreakpointLogDisabled:L("debug-breakpoint-log-disabled",60075),briefcase:L("briefcase",60076),broadcast:L("broadcast",60077),browser:L("browser",60078),bug:L("bug",60079),calendar:L("calendar",60080),caseSensitive:L("case-sensitive",60081),check:L("check",60082),checklist:L("checklist",60083),chevronDown:L("chevron-down",60084),chevronLeft:L("chevron-left",60085),chevronRight:L("chevron-right",60086),chevronUp:L("chevron-up",60087),chromeClose:L("chrome-close",60088),chromeMaximize:L("chrome-maximize",60089),chromeMinimize:L("chrome-minimize",60090),chromeRestore:L("chrome-restore",60091),circleOutline:L("circle-outline",60092),circle:L("circle",60092),debugBreakpointUnverified:L("debug-breakpoint-unverified",60092),terminalDecorationIncomplete:L("terminal-decoration-incomplete",60092),circleSlash:L("circle-slash",60093),circuitBoard:L("circuit-board",60094),clearAll:L("clear-all",60095),clippy:L("clippy",60096),closeAll:L("close-all",60097),cloudDownload:L("cloud-download",60098),cloudUpload:L("cloud-upload",60099),code:L("code",60100),collapseAll:L("collapse-all",60101),colorMode:L("color-mode",60102),commentDiscussion:L("comment-discussion",60103),creditCard:L("credit-card",60105),dash:L("dash",60108),dashboard:L("dashboard",60109),database:L("database",60110),debugContinue:L("debug-continue",60111),debugDisconnect:L("debug-disconnect",60112),debugPause:L("debug-pause",60113),debugRestart:L("debug-restart",60114),debugStart:L("debug-start",60115),debugStepInto:L("debug-step-into",60116),debugStepOut:L("debug-step-out",60117),debugStepOver:L("debug-step-over",60118),debugStop:L("debug-stop",60119),debug:L("debug",60120),deviceCameraVideo:L("device-camera-video",60121),deviceCamera:L("device-camera",60122),deviceMobile:L("device-mobile",60123),diffAdded:L("diff-added",60124),diffIgnored:L("diff-ignored",60125),diffModified:L("diff-modified",60126),diffRemoved:L("diff-removed",60127),diffRenamed:L("diff-renamed",60128),diff:L("diff",60129),diffSidebyside:L("diff-sidebyside",60129),discard:L("discard",60130),editorLayout:L("editor-layout",60131),emptyWindow:L("empty-window",60132),exclude:L("exclude",60133),extensions:L("extensions",60134),eyeClosed:L("eye-closed",60135),fileBinary:L("file-binary",60136),fileCode:L("file-code",60137),fileMedia:L("file-media",60138),filePdf:L("file-pdf",60139),fileSubmodule:L("file-submodule",60140),fileSymlinkDirectory:L("file-symlink-directory",60141),fileSymlinkFile:L("file-symlink-file",60142),fileZip:L("file-zip",60143),files:L("files",60144),filter:L("filter",60145),flame:L("flame",60146),foldDown:L("fold-down",60147),foldUp:L("fold-up",60148),fold:L("fold",60149),folderActive:L("folder-active",60150),folderOpened:L("folder-opened",60151),gear:L("gear",60152),gift:L("gift",60153),gistSecret:L("gist-secret",60154),gist:L("gist",60155),gitCommit:L("git-commit",60156),gitCompare:L("git-compare",60157),compareChanges:L("compare-changes",60157),gitMerge:L("git-merge",60158),githubAction:L("github-action",60159),githubAlt:L("github-alt",60160),globe:L("globe",60161),grabber:L("grabber",60162),graph:L("graph",60163),gripper:L("gripper",60164),heart:L("heart",60165),home:L("home",60166),horizontalRule:L("horizontal-rule",60167),hubot:L("hubot",60168),inbox:L("inbox",60169),issueReopened:L("issue-reopened",60171),issues:L("issues",60172),italic:L("italic",60173),jersey:L("jersey",60174),json:L("json",60175),kebabVertical:L("kebab-vertical",60176),key:L("key",60177),law:L("law",60178),lightbulbAutofix:L("lightbulb-autofix",60179),linkExternal:L("link-external",60180),link:L("link",60181),listOrdered:L("list-ordered",60182),listUnordered:L("list-unordered",60183),liveShare:L("live-share",60184),loading:L("loading",60185),location:L("location",60186),mailRead:L("mail-read",60187),mail:L("mail",60188),markdown:L("markdown",60189),megaphone:L("megaphone",60190),mention:L("mention",60191),milestone:L("milestone",60192),gitPullRequestMilestone:L("git-pull-request-milestone",60192),mortarBoard:L("mortar-board",60193),move:L("move",60194),multipleWindows:L("multiple-windows",60195),mute:L("mute",60196),noNewline:L("no-newline",60197),note:L("note",60198),octoface:L("octoface",60199),openPreview:L("open-preview",60200),package:L("package",60201),paintcan:L("paintcan",60202),pin:L("pin",60203),play:L("play",60204),run:L("run",60204),plug:L("plug",60205),preserveCase:L("preserve-case",60206),preview:L("preview",60207),project:L("project",60208),pulse:L("pulse",60209),question:L("question",60210),quote:L("quote",60211),radioTower:L("radio-tower",60212),reactions:L("reactions",60213),references:L("references",60214),refresh:L("refresh",60215),regex:L("regex",60216),remoteExplorer:L("remote-explorer",60217),remote:L("remote",60218),remove:L("remove",60219),replaceAll:L("replace-all",60220),replace:L("replace",60221),repoClone:L("repo-clone",60222),repoForcePush:L("repo-force-push",60223),repoPull:L("repo-pull",60224),repoPush:L("repo-push",60225),report:L("report",60226),requestChanges:L("request-changes",60227),rocket:L("rocket",60228),rootFolderOpened:L("root-folder-opened",60229),rootFolder:L("root-folder",60230),rss:L("rss",60231),ruby:L("ruby",60232),saveAll:L("save-all",60233),saveAs:L("save-as",60234),save:L("save",60235),screenFull:L("screen-full",60236),screenNormal:L("screen-normal",60237),searchStop:L("search-stop",60238),server:L("server",60240),settingsGear:L("settings-gear",60241),settings:L("settings",60242),shield:L("shield",60243),smiley:L("smiley",60244),sortPrecedence:L("sort-precedence",60245),splitHorizontal:L("split-horizontal",60246),splitVertical:L("split-vertical",60247),squirrel:L("squirrel",60248),starFull:L("star-full",60249),starHalf:L("star-half",60250),symbolClass:L("symbol-class",60251),symbolColor:L("symbol-color",60252),symbolConstant:L("symbol-constant",60253),symbolEnumMember:L("symbol-enum-member",60254),symbolField:L("symbol-field",60255),symbolFile:L("symbol-file",60256),symbolInterface:L("symbol-interface",60257),symbolKeyword:L("symbol-keyword",60258),symbolMisc:L("symbol-misc",60259),symbolOperator:L("symbol-operator",60260),symbolProperty:L("symbol-property",60261),wrench:L("wrench",60261),wrenchSubaction:L("wrench-subaction",60261),symbolSnippet:L("symbol-snippet",60262),tasklist:L("tasklist",60263),telescope:L("telescope",60264),textSize:L("text-size",60265),threeBars:L("three-bars",60266),thumbsdown:L("thumbsdown",60267),thumbsup:L("thumbsup",60268),tools:L("tools",60269),triangleDown:L("triangle-down",60270),triangleLeft:L("triangle-left",60271),triangleRight:L("triangle-right",60272),triangleUp:L("triangle-up",60273),twitter:L("twitter",60274),unfold:L("unfold",60275),unlock:L("unlock",60276),unmute:L("unmute",60277),unverified:L("unverified",60278),verified:L("verified",60279),versions:L("versions",60280),vmActive:L("vm-active",60281),vmOutline:L("vm-outline",60282),vmRunning:L("vm-running",60283),watch:L("watch",60284),whitespace:L("whitespace",60285),wholeWord:L("whole-word",60286),window:L("window",60287),wordWrap:L("word-wrap",60288),zoomIn:L("zoom-in",60289),zoomOut:L("zoom-out",60290),listFilter:L("list-filter",60291),listFlat:L("list-flat",60292),listSelection:L("list-selection",60293),selection:L("selection",60293),listTree:L("list-tree",60294),debugBreakpointFunctionUnverified:L("debug-breakpoint-function-unverified",60295),debugBreakpointFunction:L("debug-breakpoint-function",60296),debugBreakpointFunctionDisabled:L("debug-breakpoint-function-disabled",60296),debugStackframeActive:L("debug-stackframe-active",60297),circleSmallFilled:L("circle-small-filled",60298),debugStackframeDot:L("debug-stackframe-dot",60298),terminalDecorationMark:L("terminal-decoration-mark",60298),debugStackframe:L("debug-stackframe",60299),debugStackframeFocused:L("debug-stackframe-focused",60299),debugBreakpointUnsupported:L("debug-breakpoint-unsupported",60300),symbolString:L("symbol-string",60301),debugReverseContinue:L("debug-reverse-continue",60302),debugStepBack:L("debug-step-back",60303),debugRestartFrame:L("debug-restart-frame",60304),debugAlt:L("debug-alt",60305),callIncoming:L("call-incoming",60306),callOutgoing:L("call-outgoing",60307),menu:L("menu",60308),expandAll:L("expand-all",60309),feedback:L("feedback",60310),gitPullRequestReviewer:L("git-pull-request-reviewer",60310),groupByRefType:L("group-by-ref-type",60311),ungroupByRefType:L("ungroup-by-ref-type",60312),account:L("account",60313),gitPullRequestAssignee:L("git-pull-request-assignee",60313),bellDot:L("bell-dot",60314),debugConsole:L("debug-console",60315),library:L("library",60316),output:L("output",60317),runAll:L("run-all",60318),syncIgnored:L("sync-ignored",60319),pinned:L("pinned",60320),githubInverted:L("github-inverted",60321),serverProcess:L("server-process",60322),serverEnvironment:L("server-environment",60323),pass:L("pass",60324),issueClosed:L("issue-closed",60324),stopCircle:L("stop-circle",60325),playCircle:L("play-circle",60326),record:L("record",60327),debugAltSmall:L("debug-alt-small",60328),vmConnect:L("vm-connect",60329),cloud:L("cloud",60330),merge:L("merge",60331),export:L("export",60332),graphLeft:L("graph-left",60333),magnet:L("magnet",60334),notebook:L("notebook",60335),redo:L("redo",60336),checkAll:L("check-all",60337),pinnedDirty:L("pinned-dirty",60338),passFilled:L("pass-filled",60339),circleLargeFilled:L("circle-large-filled",60340),circleLarge:L("circle-large",60341),circleLargeOutline:L("circle-large-outline",60341),combine:L("combine",60342),gather:L("gather",60342),table:L("table",60343),variableGroup:L("variable-group",60344),typeHierarchy:L("type-hierarchy",60345),typeHierarchySub:L("type-hierarchy-sub",60346),typeHierarchySuper:L("type-hierarchy-super",60347),gitPullRequestCreate:L("git-pull-request-create",60348),runAbove:L("run-above",60349),runBelow:L("run-below",60350),notebookTemplate:L("notebook-template",60351),debugRerun:L("debug-rerun",60352),workspaceTrusted:L("workspace-trusted",60353),workspaceUntrusted:L("workspace-untrusted",60354),workspaceUnknown:L("workspace-unknown",60355),terminalCmd:L("terminal-cmd",60356),terminalDebian:L("terminal-debian",60357),terminalLinux:L("terminal-linux",60358),terminalPowershell:L("terminal-powershell",60359),terminalTmux:L("terminal-tmux",60360),terminalUbuntu:L("terminal-ubuntu",60361),terminalBash:L("terminal-bash",60362),arrowSwap:L("arrow-swap",60363),copy:L("copy",60364),personAdd:L("person-add",60365),filterFilled:L("filter-filled",60366),wand:L("wand",60367),debugLineByLine:L("debug-line-by-line",60368),inspect:L("inspect",60369),layers:L("layers",60370),layersDot:L("layers-dot",60371),layersActive:L("layers-active",60372),compass:L("compass",60373),compassDot:L("compass-dot",60374),compassActive:L("compass-active",60375),azure:L("azure",60376),issueDraft:L("issue-draft",60377),gitPullRequestClosed:L("git-pull-request-closed",60378),gitPullRequestDraft:L("git-pull-request-draft",60379),debugAll:L("debug-all",60380),debugCoverage:L("debug-coverage",60381),runErrors:L("run-errors",60382),folderLibrary:L("folder-library",60383),debugContinueSmall:L("debug-continue-small",60384),beakerStop:L("beaker-stop",60385),graphLine:L("graph-line",60386),graphScatter:L("graph-scatter",60387),pieChart:L("pie-chart",60388),bracket:L("bracket",60175),bracketDot:L("bracket-dot",60389),bracketError:L("bracket-error",60390),lockSmall:L("lock-small",60391),azureDevops:L("azure-devops",60392),verifiedFilled:L("verified-filled",60393),newline:L("newline",60394),layout:L("layout",60395),layoutActivitybarLeft:L("layout-activitybar-left",60396),layoutActivitybarRight:L("layout-activitybar-right",60397),layoutPanelLeft:L("layout-panel-left",60398),layoutPanelCenter:L("layout-panel-center",60399),layoutPanelJustify:L("layout-panel-justify",60400),layoutPanelRight:L("layout-panel-right",60401),layoutPanel:L("layout-panel",60402),layoutSidebarLeft:L("layout-sidebar-left",60403),layoutSidebarRight:L("layout-sidebar-right",60404),layoutStatusbar:L("layout-statusbar",60405),layoutMenubar:L("layout-menubar",60406),layoutCentered:L("layout-centered",60407),target:L("target",60408),indent:L("indent",60409),recordSmall:L("record-small",60410),errorSmall:L("error-small",60411),terminalDecorationError:L("terminal-decoration-error",60411),arrowCircleDown:L("arrow-circle-down",60412),arrowCircleLeft:L("arrow-circle-left",60413),arrowCircleRight:L("arrow-circle-right",60414),arrowCircleUp:L("arrow-circle-up",60415),layoutSidebarRightOff:L("layout-sidebar-right-off",60416),layoutPanelOff:L("layout-panel-off",60417),layoutSidebarLeftOff:L("layout-sidebar-left-off",60418),blank:L("blank",60419),heartFilled:L("heart-filled",60420),map:L("map",60421),mapHorizontal:L("map-horizontal",60421),foldHorizontal:L("fold-horizontal",60421),mapFilled:L("map-filled",60422),mapHorizontalFilled:L("map-horizontal-filled",60422),foldHorizontalFilled:L("fold-horizontal-filled",60422),circleSmall:L("circle-small",60423),bellSlash:L("bell-slash",60424),bellSlashDot:L("bell-slash-dot",60425),commentUnresolved:L("comment-unresolved",60426),gitPullRequestGoToChanges:L("git-pull-request-go-to-changes",60427),gitPullRequestNewChanges:L("git-pull-request-new-changes",60428),searchFuzzy:L("search-fuzzy",60429),commentDraft:L("comment-draft",60430),send:L("send",60431),sparkle:L("sparkle",60432),insert:L("insert",60433),mic:L("mic",60434),thumbsdownFilled:L("thumbsdown-filled",60435),thumbsupFilled:L("thumbsup-filled",60436),coffee:L("coffee",60437),snake:L("snake",60438),game:L("game",60439),vr:L("vr",60440),chip:L("chip",60441),piano:L("piano",60442),music:L("music",60443),micFilled:L("mic-filled",60444),repoFetch:L("repo-fetch",60445),copilot:L("copilot",60446),lightbulbSparkle:L("lightbulb-sparkle",60447),robot:L("robot",60448),sparkleFilled:L("sparkle-filled",60449),diffSingle:L("diff-single",60450),diffMultiple:L("diff-multiple",60451),surroundWith:L("surround-with",60452),share:L("share",60453),gitStash:L("git-stash",60454),gitStashApply:L("git-stash-apply",60455),gitStashPop:L("git-stash-pop",60456),vscode:L("vscode",60457),vscodeInsiders:L("vscode-insiders",60458),codeOss:L("code-oss",60459),runCoverage:L("run-coverage",60460),runAllCoverage:L("run-all-coverage",60461),coverage:L("coverage",60462),githubProject:L("github-project",60463),mapVertical:L("map-vertical",60464),foldVertical:L("fold-vertical",60464),mapVerticalFilled:L("map-vertical-filled",60465),foldVerticalFilled:L("fold-vertical-filled",60465),goToSearch:L("go-to-search",60466),percentage:L("percentage",60467),sortPercentage:L("sort-percentage",60467),attach:L("attach",60468),goToEditingSession:L("go-to-editing-session",60469),editSession:L("edit-session",60470),codeReview:L("code-review",60471),copilotWarning:L("copilot-warning",60472),python:L("python",60473),copilotLarge:L("copilot-large",60474),copilotWarningLarge:L("copilot-warning-large",60475),keyboardTab:L("keyboard-tab",60476),copilotBlocked:L("copilot-blocked",60477),copilotNotConnected:L("copilot-not-connected",60478),flag:L("flag",60479),lightbulbEmpty:L("lightbulb-empty",60480),symbolMethodArrow:L("symbol-method-arrow",60481),copilotUnavailable:L("copilot-unavailable",60482),repoPinned:L("repo-pinned",60483),keyboardTabAbove:L("keyboard-tab-above",60484),keyboardTabBelow:L("keyboard-tab-below",60485),gitPullRequestDone:L("git-pull-request-done",60486),mcp:L("mcp",60487),extensionsLarge:L("extensions-large",60488),layoutPanelDock:L("layout-panel-dock",60489),layoutSidebarLeftDock:L("layout-sidebar-left-dock",60490),layoutSidebarRightDock:L("layout-sidebar-right-dock",60491),copilotInProgress:L("copilot-in-progress",60492),copilotError:L("copilot-error",60493),copilotSuccess:L("copilot-success",60494),chatSparkle:L("chat-sparkle",60495),searchSparkle:L("search-sparkle",60496),editSparkle:L("edit-sparkle",60497),copilotSnooze:L("copilot-snooze",60498),sendToRemoteAgent:L("send-to-remote-agent",60499),commentDiscussionSparkle:L("comment-discussion-sparkle",60500),chatSparkleWarning:L("chat-sparkle-warning",60501),chatSparkleError:L("chat-sparkle-error",60502)};var EJr={dialogError:L("dialog-error","error"),dialogWarning:L("dialog-warning","warning"),dialogInfo:L("dialog-info","info"),dialogClose:L("dialog-close","close"),treeItemExpanded:L("tree-item-expanded","chevron-down"),treeFilterOnTypeOn:L("tree-filter-on-type-on","list-filter"),treeFilterOnTypeOff:L("tree-filter-on-type-off","list-selection"),treeFilterClear:L("tree-filter-clear","close"),treeItemLoading:L("tree-item-loading","loading"),menuSelection:L("menu-selection","check"),menuSubmenu:L("menu-submenu","chevron-right"),menuBarMore:L("menubar-more","more"),scrollbarButtonLeft:L("scrollbar-button-left","triangle-left"),scrollbarButtonRight:L("scrollbar-button-right","triangle-right"),scrollbarButtonUp:L("scrollbar-button-up","triangle-up"),scrollbarButtonDown:L("scrollbar-button-down","triangle-down"),toolBarMore:L("toolbar-more","more"),quickInputBack:L("quick-input-back","arrow-left"),dropDownButton:L("drop-down-button",60084),symbolCustomColor:L("symbol-customcolor",60252),exportIcon:L("export",60332),workspaceUnspecified:L("workspace-unspecified",60355),newLine:L("newline",60394),thumbsDownFilled:L("thumbsdown-filled",60435),thumbsUpFilled:L("thumbsup-filled",60436),gitFetch:L("git-fetch",60445),lightbulbSparkleAutofix:L("lightbulb-sparkle-autofix",60447),debugBreakpointPending:L("debug-breakpoint-pending",60377)},Mi={...H3t,...EJr};var G3t;(e=>{function r(t){return!!t&&typeof t=="object"&&typeof t.id=="string"}e.isThemeColor=r})(G3t||={});var e2;(g=>{g.iconNameSegment="[A-Za-z0-9]+",g.iconNameExpression="[A-Za-z0-9-]+",g.iconModifierExpression="~[A-Za-z]+",g.iconNameCharacter="[A-Za-z0-9~-]";let o=new RegExp(`^(${g.iconNameExpression})(${g.iconModifierExpression})?$`);function s(y){let A=o.exec(y.id);if(!A)return s(Mi.error);let[,b,E]=A,S=["codicon","codicon-"+b];return E&&S.push("codicon-modifier-"+E.substring(1)),S}g.asClassNameArray=s;function a(y){return s(y).join(" ")}g.asClassName=a;function l(y){return"."+s(y).join(".")}g.asCSSSelector=l;function c(y){return!!y&&typeof y=="object"&&typeof y.id=="string"&&(typeof y.color>"u"||G3t.isThemeColor(y.color))}g.isThemeIcon=c;let u=new RegExp(`^\\$\\((${g.iconNameExpression}(?:${g.iconModifierExpression})?)\\)$`);function d(y){let A=u.exec(y);if(!A)return;let[,b]=A;return{id:b}}g.fromString=d;function p(y){return{id:y}}g.fromId=p;function f(y,A){let b=y.id,E=b.lastIndexOf("~");return E!==-1&&(b=b.substring(0,E)),A&&(b=`${b}~${A}`),{id:b}}g.modify=f;function m(y){let A=y.id.lastIndexOf("~");if(A!==-1)return y.id.substring(A+1)}g.getModifier=m;function h(y,A){return y.id===A.id&&y.color?.id===A.color?.id}g.isEqual=h})(e2||={});var W3t=-1;function Cg(){return W3t!==-1?W3t:Date.now()}var Tg;(s=>(s.circleSlash={themeIcon:e2.fromId("circle-slash"),svg:'<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16"><path fill="currentColor" d="M8 1a7 7 0 1 1-7 7a7.01 7.01 0 0 1 7-7M2 8c0 1.418.504 2.79 1.423 3.87l8.447-8.447A5.993 5.993 0 0 0 2 8m12 0c0-1.418-.504-2.79-1.423-3.87L4.13 12.577A5.993 5.993 0 0 0 14 8"/></svg>'},s.error={themeIcon:e2.fromId("error"),svg:'<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 16 16"><path fill="currentColor" fill-rule="evenodd" d="M8.6 1c1.6.1 3.1.9 4.2 2c1.3 1.4 2 3.1 2 5.1c0 1.6-.6 3.1-1.6 4.4c-1 1.2-2.4 2.1-4 2.4s-3.2.1-4.6-.7s-2.5-2-3.1-3.5S.8 7.5 1.3 6c.5-1.6 1.4-2.9 2.8-3.8C5.4 1.3 7 .9 8.6 1m.5 12.9c1.3-.3 2.5-1 3.4-2.1c.8-1.1 1.3-2.4 1.2-3.8c0-1.6-.6-3.2-1.7-4.3c-1-1-2.2-1.6-3.6-1.7c-1.3-.1-2.7.2-3.8 1S2.7 4.9 2.3 6.3c-.4 1.3-.4 2.7.2 4q.9 1.95 2.7 3c1.2.7 2.6.9 3.9.6M7.9 7.5L10.3 5l.7.7l-2.4 2.5l2.4 2.5l-.7.7l-2.4-2.5l-2.4 2.5l-.7-.7l2.4-2.5l-2.4-2.5l.7-.7z" clip-rule="evenodd"/></svg>'},s.skipped={themeIcon:e2.fromId("testing-skipped-icon"),svg:'<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 16 16"><path fill="currentColor" fill-rule="evenodd" d="M14.25 5.75v-4h-1.5v2.542c-1.145-1.359-2.911-2.209-4.84-2.209c-3.177 0-5.92 2.307-6.16 5.398l-.02.269h1.501l.022-.226c.212-2.195 2.202-3.94 4.656-3.94c1.736 0 3.244.875 4.05 2.166h-2.83v1.5h4.163l.962-.975V5.75zM8 14a2 2 0 1 0 0-4a2 2 0 0 0 0 4" clip-rule="evenodd"/></svg>'},s.lightbulbFull={themeIcon:e2.fromId("refactor-preview-view-icon"),svg:'<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16"><path fill="currentColor" fill-rule="evenodd" d="M11.67 8.658a3.7 3.7 0 0 0-.781 1.114a3.3 3.3 0 0 0-.268 1.329v1.6a1.3 1.3 0 0 1-.794 1.197a1.3 1.3 0 0 1-.509.102H7.712a1.3 1.3 0 0 1-.922-.379a1.3 1.3 0 0 1-.38-.92v-1.6q0-.718-.274-1.329a3.6 3.6 0 0 0-.776-1.114a4.7 4.7 0 0 1-1.006-1.437A4.2 4.2 0 0 1 4 5.5a4.43 4.43 0 0 1 .616-2.27q.296-.504.705-.914a4.6 4.6 0 0 1 .911-.702q.508-.294 1.084-.454a4.5 4.5 0 0 1 1.2-.16a4.5 4.5 0 0 1 2.276.614a4.5 4.5 0 0 1 1.622 1.616a4.44 4.44 0 0 1 .616 2.27q0 .926-.353 1.721a4.7 4.7 0 0 1-1.006 1.437zM9.623 10.5H7.409v2.201q-.001.12.09.212a.3.3 0 0 0 .213.09h1.606a.3.3 0 0 0 .213-.09a.3.3 0 0 0 .09-.212V10.5z" clip-rule="evenodd"/></svg>'},s.database={themeIcon:e2.fromId("database"),svg:'<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16"><path fill="currentColor" d="M13 3.5C13 2.119 10.761 1 8 1S3 2.119 3 3.5c0 .04.02.077.024.117H3v8.872l.056.357C3.336 14.056 5.429 15 8 15s4.664-.944 4.944-2.154l.056-.357V3.617h-.024c.004-.04.024-.077.024-.117M8 2.032c2.442 0 4 .964 4 1.468s-1.558 1.468-4 1.468S4 4 4 3.5s1.558-1.468 4-1.468m4 10.458l-.03.131C11.855 13.116 10.431 14 8 14s-3.855-.884-3.97-1.379L4 12.49v-7.5A7.4 7.4 0 0 0 8 6a7.4 7.4 0 0 0 4-1.014z"/></svg>'}))(Tg||={});var W0e=class{constructor(e){this.documents=e;cl(e.length>0)}getMostRecentDocument(){return this.documents.at(-1)}getDocument(e){return this.documents.find(t=>t.docId===e)}getDocumentAndIdx(e){let t=this.documents.findIndex(n=>n.docId===e);if(t!==-1)return{doc:this.documents[t],idx:t}}},j0e=class{constructor(e,t,n,o,s){this.docId=e;this.languageId=t;this.base=n;this.lastEdits=o;this.lastSelection=s;this.lastEdit=new ql(this.base,this.lastEdits.compose())}};var $0e=class extends _e{constructor(t,n){super();this._documentState=new Map;this._lastDocuments=new f6e(50);this._register(pi(o=>{o.readObservable(n.branch)!==void 0&&(this._lastGitCheckout=Cg(),this._documentState.forEach(a=>a.applyAllEdits()))})),Hs(this,t.openDocuments,(o,s)=>{let a=o.selection.get().at(0),l=new p6e(o.id,o.value.get().value,o.languageId.get(),a);this._documentState.set(l.docId,l),a&&this._lastDocuments.push(l),s.add(gc(this,{value:o.value,selection:o.selection,languageId:o.languageId},c=>{c.languageId.changes.length>0&&(l.languageId=c.languageId.value);let u=this._isAwaitingGitCheckoutCooldown();for(let d of c.value.changes)this._lastDocuments.push(l),l.handleEdit(d,u);c.selection.changes.length>0&&(l.handleSelection(c.selection.value.at(0)),this._lastDocuments.push(l))})),s.add(rn(()=>{let c=this._documentState.get(o.id);c&&this._lastDocuments.remove(c),this._documentState.delete(o.id)}))},o=>o.id).recomputeInitiallyAndOnChange(this._store)}getHistoryContext(t){let n=this._documentState.get(t);if(!n||!this._lastDocuments.has(n))return;let o=[],s=!1,a=5;for(let l of this._lastDocuments.getItemsReversed()){let c=l.getRecentEdit(a);if(c!==void 0&&(c.editCount===0&&s||(l.docId===t&&(s=!0),o.push(c.history),a-=c.editCount,a<=0)))break}if(o.reverse(),!!o.some(l=>l.docId===t))return new W0e(o)}_isAwaitingGitCheckoutCooldown(){if(!this._lastGitCheckout)return!1;let t=Cg()-this._lastGitCheckout<2*1e3;return t||(this._lastGitCheckout=void 0),t}},p6e=class r{constructor(e,t,n,o){this.docId=e;this.languageId=n;this._edits=[];this._isUserDocument=!1;this._baseValue=new Bl(t),this._currentValue=this._baseValue,this.handleSelection(o)}static{this.MAX_EDITED_LINES_PER_EDIT=10}static{this.MAX_EDITED_CHARS_PER_EDIT=5e3}getSelection(){return this._selection}handleSelection(e){e&&(this._isUserDocument=!0),this._selection=e}handleEdit(e,t){if(e.isEmpty())return;this._currentValue=e.applyOnText(this._currentValue);let n=Wh.fromStringEdit(e,this._currentValue),o=ZJ.fromTextEdit(n);if(t){this._baseValue=this._currentValue,this._edits=[];return}function s(l){return t2(l.replacements,c=>c.newText.length)}let a=this._edits.at(-1);a&&s(a.edit)<200&&SJr(e,a.edit)?(a.edit=a.edit.compose(e),a.textLengthEdit=a.textLengthEdit.compose(o),a.instant=Cg(),a.edit.isEmpty()&&this._edits.pop()):this._edits.push({edit:e,textLengthEdit:o,instant:Cg()})}getRecentEdit(e){if(!this._isUserDocument)return;let{editCount:t}=this._applyStaleEdits(e),n=new _E(Jt,this._edits.map(o=>o.edit));return{history:new j0e(this.docId,this.languageId,this._baseValue,n,this._selection),editCount:t}}applyAllEdits(){this._baseValue=this._currentValue,this._edits=[]}_applyStaleEdits(e){let t=this._currentValue,n=Jt.empty,o=ZJ.empty,s,a=0,l=Jt.empty;for(s=this._edits.length-1;s>=0;s--){let c=this._edits[s];if(Cg()-c.instant>10*60*1e3)break;let u=c.textLengthEdit.compose(o),d=u.getRange();if(oa(d,"we only compose non-empty Edits"),d.endLineNumber-d.startLineNumber>100)break;let p=t2(c.textLengthEdit.edits,E=>E.range.endLineNumber-E.range.startLineNumber+E.newLength.lineCount);if(p>r.MAX_EDITED_LINES_PER_EDIT||t2(c.edit.replacements,E=>E.newText.length)>r.MAX_EDITED_CHARS_PER_EDIT||t2(c.edit.replacements,E=>E.replaceRange.length)>r.MAX_EDITED_CHARS_PER_EDIT)break;if(s===this._edits.length-1)l=c.edit;else{let E=Jt.trySwap(c.edit,l);if(E)l=E.e1;else{if(p>=2)break;l=c.edit.compose(l)}}t=c.edit.inverse(t.value).applyOnText(t);let g=c.edit.compose(n),y=ql.toLineEdit(new ql(t,g)),b=new pg(t,y).removeCommonSuffixPrefixLines().edit.replacements.length;if(b>e)break;a=b,n=g,o=u}for(let c=0;c<=s;c++){let u=this._edits[c];this._baseValue=u.edit.applyOnText(this._baseValue)}return this._edits=this._edits.slice(s+1),{editCount:a}}toString(){return new _E(Jt,this._edits.map(e=>e.edit)).toHumanReadablePatch(this._baseValue)}};function t2(r,e){let t=0;for(let n of r)t+=e(n);return t}function SJr(r,e){let t=e.getNewRanges();return r.replacements.every(n=>_Jr(n.replaceRange,t))}function _Jr(r,e){return e.some(t=>r.start===t.endExclusive||r.endExclusive===t.start)}var f6e=class{constructor(e){this.maxSize=e;this._arr=[]}push(e){let t=this._arr.indexOf(e);t!==-1?this._arr.splice(t,1):this._arr.length>=this.maxSize&&this._arr.shift(),this._arr.push(e)}remove(e){let t=this._arr.indexOf(e);t!==-1&&this._arr.splice(t,1)}getItemsReversed(){let e=[...this._arr];return e.reverse(),e}has(e){return this._arr.indexOf(e)!==-1}};var Y0e=class{constructor(e,t){this.originalText=e;this._trackedEdit=t;let n=t.removeCommonSuffixPrefix(e);this._updatedTrackedEdit=n.mapData(()=>new z0e(!0))}handleEdits(e){let t=e.mapData(s=>new z0e(!1)),o=this._updatedTrackedEdit.compose(t).decomposeSplit(s=>!s.data.isTrackedEdit).e2;this._updatedTrackedEdit=o}getAcceptedRestrainedCharactersCount(){return t2(this._updatedTrackedEdit.replacements,t=>t.getNewLength())}getOriginalCharacterCount(){return t2(this._trackedEdit.replacements,e=>e.getNewLength())}getDebugState(){return{edits:this._updatedTrackedEdit.replacements.map(e=>({range:e.replaceRange.toString(),newText:e.newText,isTrackedEdit:e.data.isTrackedEdit}))}}},z0e=class{constructor(e){this.isTrackedEdit=e}join(e){if(this.isTrackedEdit===e.isTrackedEdit)return this}};var K0e=class{constructor(e,t){this.originalText=e;this._combinedEditsSinceStart=Jt.empty;this._text=t.apply(this.originalText),this._textAfterTrackedEdits=this._text,this._originalEdits=t}handleEdits(e){let t=e.apply(this._text),n=this._combinedEditsSinceStart.compose(e);n=n.removeCommonSuffixPrefix(this._textAfterTrackedEdits),this._combinedEditsSinceStart=n,this._text=t}computeTrackedEditsSurvivalScore(){let e=0,t=0,n=0,o=0,s=this._originalEdits.getNewRanges(),a=m6e(s,this._combinedEditsSinceStart);for(let l=0;l<s.length;l++){let c=this._originalEdits.replacements[l],u=this.originalText.substring(c.replaceRange.start,c.replaceRange.endExclusive),d=c.newText,p=a[l],f=this._text.substring(p.start,p.endExclusive),m=eX(f,d),h=eX(d,u),g=eX(f,u);if(h!==1){let b=1-Math.max(g-h,0)/(1-h);n+=c.replaceRange.length*b,o+=c.replaceRange.length}let y=c.newText.length*m,A=c.newText.length;e+=y,t+=A}return{fourGram:t===0?1:e/t,noRevert:o===0?1:n/o}}};function eX(r,e){if(r.length<4||e.length<4)return r===e?1:0;let n=new Map;for(let l=0;l<=r.length-4;l++){let c=r.substring(l,l+4),u=n.get(c)||0;n.set(c,u+1)}for(let l=0;l<=e.length-4;l++){let c=e.substring(l,l+4),u=n.get(c)||0;n.set(c,u-1)}let o=r.length-4+1+e.length-4+1,s=0;for(let l of n.values())s+=Math.abs(l);return(o-s)/o}function m6e(r,e){r=r.slice();let t=[],n=0;for(let o of e.replacements){for(;;){let a=r[0];if(!a||a.endExclusive>=o.replaceRange.start)break;r.shift(),t.push(a.delta(n))}let s=[];for(;;){let a=r[0];if(!a||!a.intersectsOrTouches(o.replaceRange))break;r.shift(),s.push(a)}for(let a=s.length-1;a>=0;a--){let l=s[a],c=l.intersect(o.replaceRange).length;l=l.deltaEnd(-c+(a===0?o.newText.length:0));let u=l.start-o.replaceRange.start;u>0&&(l=l.delta(-u)),a!==0&&(l=l.delta(o.newText.length)),l=l.delta(-(o.newText.length-o.replaceRange.length)),r.unshift(l)}n+=o.newText.length-o.replaceRange.length}for(;;){let o=r[0];if(!o)break;r.shift(),t.push(o.delta(n))}return t}var KE=class{constructor(e,t,n,o,s,a,l,c,u){this._document=e;this._documentTextBeforeMarkedEdits=t;this._markedEdits=n;this._options=s;this._sendTelemetryEvent=a;this._gitService=c;this._telemetryService=u;this._store=new yt;this._editSurvivalTracker=new K0e(this._documentTextBeforeMarkedEdits,this._markedEdits);this._arcTracker=this._options.includeArc===!0?new Y0e(this._documentTextBeforeMarkedEdits,this._markedEdits):void 0;this._store.add(l.onDidChangeTextDocument(d=>{if(d.document!==this._document)return;let p=S1(d.contentChanges);this._editSurvivalTracker.handleEdits(p),this._arcTracker?.handleEdits(p)})),this._editSurvivalTracker.handleEdits(o),this._arcTracker?.handleEdits(o),this._initialBranchName=this._gitService.activeRepository.get()?.headBranchName,this._reportAfter(30*1e3),this._reportAfter(120*1e3),this._reportAfter(300*1e3),this._reportAfter(600*1e3),this._reportAfter(900*1e3,()=>{this._store.dispose()})}_getCurrentBranchName(){return this._gitService.activeRepository.get()?.headBranchName}_reportAfter(e,t){let n=new zF(()=>{this._report(e),n.dispose(),t&&t()},e);this._store.add(n)}_report(e){let t=this._editSurvivalTracker.computeTrackedEditsSurvivalScore(),o=this._getCurrentBranchName()!==this._initialBranchName;this._sendTelemetryEvent({telemetryService:this._telemetryService,fourGram:t.fourGram,noRevert:t.noRevert,timeDelayMs:e,didBranchChange:o,currentFileContent:this._document.getText(),arc:this._arcTracker?.getAcceptedRestrainedCharactersCount()})}cancel(){this._store.dispose()}};KE=T([v(6,Oe),v(7,bl),v(8,De)],KE);var Sv=Me("IEditSurvivalTrackerService"),J0e=class{collectAIEdits(){}startReporter(){}cancel(){}};var c9=class{constructor(e,t){this._instantiationService=e;this._logService=t}initialize(e){let t=this._instantiationService.createInstance(o9,e.getText()),n;return{collectAIEdits:o=>{try{t.addEdits(Array.isArray(o)?o:[o])}catch(s){this._logService.error("[EditSurvivalTrackerService] Error while collecting edits",s)}},startReporter:o=>{let s=this._instantiationService.createInstance(i9,t.getText(),e);(async()=>{try{let[a,l]=await Promise.all([t.getEdits(),s.compute()]),c=l.getEditsSinceInitial();n=this._instantiationService.createInstance(KE,e,t.initialText,a,c,{},o)}finally{s.dispose()}})()},cancel:()=>{n?.cancel()}}}};c9=T([v(0,K),v(1,ue)],c9);function j3t(r,e,t){let n=[],o=0,s=0;for(let a=0;a<t.length;a++){let l=t[a];for(let u=0;u<l.original.startLineNumber-1-o;u++)n.push({originalCellIndex:o+u,modifiedCellIndex:s+u,type:"unchanged"});let c=CJr(r,e,l);n.push(...c),o=l.original.startLineNumber-1+l.original.length,s=l.modified.startLineNumber-1+l.modified.length}for(let a=o;a<r.length;a++)n.push({originalCellIndex:a,modifiedCellIndex:a-o+s,type:"unchanged"});return n}function CJr(r,e,t){let n=[],o=Math.min(t.original.length,t.modified.length);for(let s=0;s<o;s++){let a=r[t.original.startLineNumber-1+s],l=e[t.modified.startLineNumber-1+s];a!==l?(n.push({originalCellIndex:t.original.startLineNumber-1+s,type:"delete"}),n.push({modifiedCellIndex:t.modified.startLineNumber-1+s,type:"insert"})):n.push({originalCellIndex:t.original.startLineNumber-1+s,modifiedCellIndex:t.modified.startLineNumber-1+s,type:"unchanged"})}for(let s=o;s<t.original.length;s++)n.push({originalCellIndex:t.original.startLineNumber-1+s,type:"delete"});for(let s=o;s<t.modified.length;s++)n.push({modifiedCellIndex:t.modified.startLineNumber-1+s,type:"insert"});return n}var Vm=Me("IAlternativeNotebookContentEditGenerator"),u9=class{constructor(e,t,n,o){this.alternativeContentService=e;this.diffService=t;this.logger=n;this.telemetryService=o}getFormat(e){let t=e.trim().substring(0,1);return t==="{"?"json":t==="<"?"xml":"text"}getEOLForNewCell(e,t){let n=zn(e)?void 0:e.getCells().find(o=>o.kind===t)?.document.eol??void 0;return n?n===id.LF?`
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/dist/extension.js:1023:`),l=t[t.length-1];return{file:e,text:a,rawText:a,isFullFile:s&&t[0].lineNumber===0,range:new jt(t[0].lineNumber,0,l.lineNumber,l.text.length)}}};Q9=T([v(1,Ki)],Q9);function V9t(r){let e;for(let n of r){let o=n.match(/^\s+/),s=o?o[0]:"";if(e===void 0?e=s:e=H9t(e,s),!e||e.length===0)return{trimmedLines:r,shortestLeadingCommonWhitespace:""}}let t=(e??"").length;return{trimmedLines:r.map(n=>n.substring(t)),shortestLeadingCommonWhitespace:e??""}}function H9t(r,e){let t=hR(r,e);return r.substring(0,t)}var _s=Me("IRunCommandExecutionService");var Oi=Me("IGitExtensionService");var aye=class{showInformationMessage(e,t,...n){return Promise.resolve(void 0)}showWarningMessage(e,...t){return Promise.resolve(void 0)}showQuotaExceededDialog(e){return Promise.resolve()}withProgress(e,t){return Promise.resolve(t({report:()=>{}},dr.None))}},Km=Me("INotificationService");var Ep=Me("IReviewService");var CX="github.copilot-dynamic.platform",q9={workspace:{explain:"explain",edit:"edit",review:"review",tests:"tests",fix:"fix",new:"new",newNotebook:"newNotebook",semanticSearch:"semanticSearch",setupTests:"setupTests"},vscode:{search:"search",startDebugging:"startDebugging"},terminal:{explain:"terminalExplain"},editor:{doc:"doc",fix:"fix",explain:"explain",review:"review",tests:"tests",edit:"edit",generate:"generate"},chatReplay:{chatReplay:"chatReplay"}};function lye(r,e){if(Object.keys(q9).includes(r))return{agent:r};for(let[t,n]of Object.entries(q9))if(!(e===4&&t!=="editor")&&Object.values(n).includes(r))return{agent:t,command:r}}var xA="GitHub.copilot-chat";var e7t=z(Ht()),T6=z(Xe());var cye=z(Xe());var oS=class{constructor(e){this.charLimit=e;this._totalChars=0}get totalChars(){return this._totalChars}addLine(e){this._totalChars+=e.length+1}lineWouldFit(e){return this._totalChars+e.length+1<this.charLimit}},Sp=class{constructor(e,t,n){this.tracker=e;this.document=t;this.language=n;this.lines=[];this.firstLineIndex=this.document.lineCount;this.lastLineIndex=-1;this.isComplete=!1;this.nonTrimWhitespaceCharCount=0;this.lines=[],this.firstLineIndex=t.lineCount,this.lastLineIndex=-1}get hasContent(){return this.lines.length===0||this.nonTrimWhitespaceCharCount===0?!1:this.lines.length>0}generatePrompt(){if(!this.hasContent)return[];let e=[];return e.push("```"+this.language.languageId),e.push(Lve.forDocument(this.language,this.document)),e.push(...this.lines),e.push("```"),e}prependLine(e){let n=this.document.lineAt(e).text;return this.tracker.lineWouldFit(n)?(this.firstLineIndex=Math.min(this.firstLineIndex,e),this.lastLineIndex=Math.max(this.lastLineIndex,e),this.lines.unshift(n),this.tracker.addLine(n),this.nonTrimWhitespaceCharCount+=n.trim().length,!0):!1}appendLine(e){let n=this.document.lineAt(e).text;return this.tracker.lineWouldFit(n)?(this.firstLineIndex=Math.min(this.firstLineIndex,e),this.lastLineIndex=Math.max(this.lastLineIndex,e),this.lines.push(n),this.tracker.addLine(n),this.nonTrimWhitespaceCharCount+=n.trim().length,!0):!1}trim(e){let t=e?Math.min(this.lastLineIndex,e.start.line):this.lastLineIndex;for(;this.firstLineIndex<t&&this.lines.length>0&&this.lines[0].trim().length===0;)this.firstLineIndex++,this.lines.shift();let n=e?Math.max(this.firstLineIndex,e.end.line):this.firstLineIndex;for(;n<this.lastLineIndex&&this.lines.length>0&&this.lines[this.lines.length-1].trim().length===0;)this.lastLineIndex--,this.lines.pop()}toString(){return`{${this.firstLineIndex} -> ${this.lastLineIndex}}`}};var H1=class extends cye.PromptElement{constructor(t,n,o,s){super(t);this._telemetryService=n;this._parserService=o;this._ignoreService=s}async prepare(t,n,o){if(await this._ignoreService.isCopilotIgnored(this.props.documentContext.document.uri))return{k:"ignored"};let s=this.props.nodeToDocument??await G1(this._parserService,this._telemetryService,this.props.documentContext),a=ien(this.props.endpointInfo,this.props.documentContext,s.range);return{k:"found",nodeToDocument:s,codeExcerptToDocument:a.range}}render(t,n){if(t.k==="ignored")return vscpp("ignoredFiles",{value:[this.props.documentContext.document.uri]});let o=t.codeExcerptToDocument.generatePrompt().join(`
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/dist/extension.js:1305:Usage: {0}`,n),s={errorDetails:{message:o}};return this.turn.setResponse("error",{type:"meta",message:o},void 0,s),s}}};DP=T([v(6,K),v(7,Je),v(8,Cd),v(9,At),v(10,RA),v(11,fI),v(12,un),v(13,ue),v(14,ft),v(15,wa)],DP);function Q2(r,e){let t=r.get(K),n=[],o,s;for(let a of e)if(a instanceof $ae)s=a;else{let l=t.invokeFunction(Brn,a);if(l)n.push(l);else if(s){let u=t.invokeFunction(Urn,s,a);s=void 0,n.push(u)}let c=a.result;typeof c.metadata?.sessionId=="string"&&(o=c.metadata.sessionId)}return{turns:n,sessionId:o}}function Brn(r,e){let t=r.get(fI),n=Frn(e);return(n?t.getConversation(n):void 0)?.turns.find(s=>s.id===n)}function Frn(r){if(r instanceof Kit)return r.result?.metadata?.responseId}function Urn(r,e,t){let n=r.get(Cd),o=r.get(Oe),s=r.get(K),a=new Zh(void 0,{message:e.prompt,type:"user"},new Kn(e.references),e.toolReferences.map(PC.from),e.editedFileEvents),l=t.response.map(f=>f instanceof gu?f.value.value:f instanceof By?g7t(f):"content"in f?f.content:f instanceof k5?Qrn(o,f):null).filter(Boolean).join(""),c=t.command||eye(t.participant),u=n.getCommand(c,1),d;t.result.errorDetails?t.result.errorDetails?.responseIsFiltered?t.result.metadata?.category==="prompt"?d="prompt-filtered":d="filtered":t.result.errorDetails.message==="Cancelled"||t.result.errorDetails.message===Rle.message?d="cancelled":d="error":d="success",a.setResponse(d,{message:l,type:"model",name:u?.commandId||ah.ID},void 0,t.result);let p=t.result.metadata;if(p?.renderedGlobalContext){let f=p.globalContextCacheKey??s.invokeFunction(F$);a.setMetadata(new kC(p?.renderedGlobalContext,f))}return p?.renderedUserMessage&&a.setMetadata(new jy(p.renderedUserMessage)),a}function Qrn(r,e){let t,n;if(Fe.isUri(e.value))n=w0(r,e.value),t=`\`${n}\``;else if(Fo(e.value))n=w0(r,e.value.uri),t=`\`${n}\``;else if(ilt(e.value))n=w0(r,e.value.location.uri),t=`\`${e.value.name}\``;else return"";return`[${t}](${n} ${e.title?`"${e.title}"`:""})`}var Ts=z(require("vscode"));var NP=class extends Ts.CodeAction{constructor(){super(...arguments);this.isAI=!0}},wf=class{constructor(e,t,n){this.configurationService=e;this.ignoreService=t;this.reviewService=n}static{this.fixKind=Ts.CodeActionKind.QuickFix.append("copilot")}static{this.explainKind=Ts.CodeActionKind.QuickFix.append("explain").append("copilot")}static{this.reviewKind=Ts.CodeActionKind.RefactorRewrite.append("review").append("copilot")}static{this.providedCodeActionKinds=[this.fixKind,this.explainKind,this.reviewKind]}static getWarningOrErrorDiagnostics(e){return e.filter(t=>t.severity<=Ts.DiagnosticSeverity.Warning)}static getDiagnosticsAsText(e){return e.map(t=>t.message).join(", ")}async provideCodeActions(e,t,n,o){if(!this.configurationService.getConfig(ae.EnableCodeActions)||await this.ignoreService.isCopilotIgnored(e.uri)||o.isCancellationRequested)return;let a=[],l=Ts.window.activeTextEditor;if(!l)return a;let c=this.provideAltTextQuickFix(e,t);if(c&&(c.command={title:c.title,command:"github.copilot.chat.generateAltText",arguments:[{type:c.type,resolvedImagePath:c.resolvedImagePath,isUrl:c.isUrl}]},a.push(c)),this.reviewService.isCodeFeedbackEnabled()&&!l.selection.isEmpty){let y=new NP(Ts.l10n.t("Review"),wf.reviewKind);y.command={title:y.title,command:"github.copilot.chat.review"},a.push(y)}let u=wf.getWarningOrErrorDiagnostics(n.diagnostics);if(u.length===0)return a;let d=u.map(y=>y.range).reduce((y,A)=>y.union(A)),p=new Ts.Selection(d.start,d.end),f=wf.getDiagnosticsAsText(u),m=new NP(Ts.l10n.t("Fix"),wf.fixKind);m.diagnostics=u,m.command={title:m.title,command:"vscode.editorChat.start",arguments:[{autoSend:!0,message:`/fix ${f}`,position:d.start,initialSelection:p,initialRange:d}]};let h=new NP(Ts.l10n.t("Explain"),wf.explainKind);h.diagnostics=u;let g=`@${fZ} /explain ${f}`;return h.command={title:h.title,command:"github.copilot.chat.explain",arguments:[g]},a.push(m,h),a}provideAltTextQuickFix(e,t){let n=e.lineAt(t.start.line).text,o=uDe(n),s=uDe(n,!0);if(!(!o&&!s)){if(o){let a=this.isValidUrl(o),l=a?o:Fh(du(e.uri.fsPath),o);return{title:Ts.l10n.t("Generate alt text"),kind:Ts.CodeActionKind.QuickFix,resolvedImagePath:l,type:"generate",isUrl:a,isAI:!0}}else if(s){let a=this.isValidUrl(s),l=a?s:Fh(du(e.uri.fsPath),s);return{title:Ts.l10n.t("Refine alt text"),kind:Ts.CodeActionKind.QuickFix,resolvedImagePath:l,type:"refine",isUrl:a,isAI:!0}}}}isValidUrl(e){try{return new URL(e),!0}catch{return!1}}};wf=T([v(0,Pe),v(1,At),v(2,Ep)],wf);var Mg=class{constructor(e,t,n,o,s){this.logger=e;this.configurationService=t;this.ignoreService=n;this.parserService=o;this.telemetryService=s}static{this.MAX_FILE_SIZE=1024*1024}static{this.generateOrModifyKind=Ts.CodeActionKind.RefactorRewrite.append("copilot")}static{this.generateDocsKind=Ts.CodeActionKind.RefactorRewrite.append("generateDocs").append("copilot")}static{this.generateTestsKind=Ts.CodeActionKind.RefactorRewrite.append("generateTests").append("copilot")}static{this.providedCodeActionKinds=[this.generateOrModifyKind,this.generateDocsKind,this.generateTestsKind]}async provideCodeActions(e,t,n,o){if(!this.configurationService.getConfig(ae.EnableCodeActions)||await this.ignoreService.isCopilotIgnored(e.uri)||o.isCancellationRequested)return;let a=await Qc(Promise.allSettled([this.provideGenerateUsingCopilotCodeAction(e,t),this.provideDocGenCodeAction(e,t,o),this.provideTestGenCodeAction(e,t,o)]),o);return a===void 0?void 0:Mve(a,l=>l.status==="fulfilled"&&l.value!==void 0?l.value:void 0)}provideGenerateUsingCopilotCodeAction(e,t){let n;if(t.isEmpty){let s=e.lineAt(t.start.line).text;t.end.character===s.length&&/^\s*$/g.test(s)&&(n=Ts.l10n.t("Generate"))}else{let s=e.getText(t);/^\s*$/g.test(s)||(n=Ts.l10n.t("Modify"))}if(n===void 0)return;let o=new NP(n,Mg.generateOrModifyKind);return o.command={title:o.title,command:"vscode.editorChat.start",arguments:[{position:t.start,initialSelection:new Ts.Selection(t.start,t.end),initialRange:t}]},o}async provideDocGenCodeAction(e,t,n){if(e.getText().length>Mg.MAX_FILE_SIZE)return;let o={startIndex:e.offsetAt(t.start),endIndex:e.offsetAt(t.end)},s=this.parserService.getTreeSitterAST(e);if(s===void 0)return;let a;try{a=await s.getDocumentableNodeIfOnIdentifier(o)}catch(d){this.logger.error(d,"RefactorsProvider: getDocumentableNodeIfOnIdentifier failed"),this.telemetryService.sendGHTelemetryException(d,"RefactorsProvider: getDocumentableNodeIfOnIdentifier failed")}if(a===void 0||n.isCancellationRequested)return;let l=Ts.l10n.t("Generate Docs"),c=new NP(l,Mg.generateDocsKind),u=a.nodeRange===void 0?void 0:new st(e.positionAt(a.nodeRange.startIndex),e.positionAt(a.nodeRange.endIndex));return c.command={title:l,command:"vscode.editorChat.start",arguments:[{autoSend:!0,message:"/doc",initialRange:u}]},c}async provideTestGenCodeAction(e,t,n){if(e.getText().length>Mg.MAX_FILE_SIZE)return;let o={startIndex:e.offsetAt(t.start),endIndex:e.offsetAt(t.end)},s=this.parserService.getTreeSitterAST(e);if(s===void 0)return;let a=null;try{a=await s.getTestableNode(o)}catch(d){this.logger.error(d,"RefactorsProvider: getTestableNode failed"),this.telemetryService.sendGHTelemetryException(d,"RefactorsProvider: getTestableNode failed")}if(!a||n.isCancellationRequested||!new st(e.positionAt(a.identifier.range.startIndex),e.positionAt(a.identifier.range.endIndex)).contains(t))return;let c=Ts.l10n.t("Generate Tests"),u=new NP(c,Mg.generateTestsKind);return u.command={title:c,command:"github.copilot.chat.generateTests"},u}};Mg=T([v(0,ue),v(1,Pe),v(2,At),v(3,Lr),v(4,De)],Mg);var _qe=z(Ht()),LP=z(require("vscode"));var qrn="application/vnd.code.notebook.error",S7=class{constructor(e){this.logService=e}async provideCellStatusBarItems(e,t){if(LP.workspace.getConfiguration("notebook").get("cellFailureDiagnostics"))return[];if(e.kind===LP.NotebookCellKind.Markup){let a=LP.workspace.getConfiguration("notebook.experimental").get("cellChat");if(!a)return[];let l=e.document.getText().trim();if(!a||l.length===0)return[];let c=_qe.t("Generate code from markdown content"),u=l;return[{text:"$(sparkle)",alignment:LP.NotebookCellStatusBarAlignment.Left,priority:Number.MAX_SAFE_INTEGER-1,tooltip:c,command:{title:c,command:"notebook.cell.chat.start",arguments:[{index:e.index+1,input:u,autoSend:!0}]}}]}let o=e.outputs.flatMap(a=>a.items).find(a=>a.mime===qrn);if(!o)return[];let s;try{let a=new TextDecoder;if(s=JSON.parse(a.decode(o.data)),!s.name&&!s.message)return[];let l=_qe.t("Fix using Copilot"),c=[s.name,s.message].filter(Boolean).join(": ").replace(/\s*\(\S+,\s*line\s*\d+\)/,"");return[{text:"$(sparkle)",alignment:LP.NotebookCellStatusBarAlignment.Left,priority:Number.MAX_SAFE_INTEGER-1,tooltip:l,command:{title:l,command:"vscode.editorChat.start",arguments:[{autoSend:!0,message:`/fix ${c}`}]}}]}catch(a){this.logService.error(`Failed to parse error output ${a}`)}return[]}};S7=T([v(0,ue)],S7);function eQt(r){let e=r.get(K),t=r.get(un),n=r.get(Ly),o=r.get(At),s=r.get(Ep),a=r.get(ue),l=r.get(De),c=r.get(ar),u=r.get(Pe),d=r.get(Lr),p=new yt,f=async(D,W)=>{let w=`@${fZ} /explain `,R,V,O=!1;if(typeof D=="string"&&D)w=D;else{let B=th.getCurrentSelection(t,!0);if(B){let Q=yr.languages.getDiagnostics(B.activeDocument.uri),ie=Q.filter(le=>!!le.range.intersection(B.range));wf.getWarningOrErrorDiagnostics(ie).length&&(w+=wf.getDiagnosticsAsText(Q),O=!0)}let ne=th.getCurrentSelection(t);if(!O&&ne&&(w+=Zye,R=Z7t({languageId:ne.languageId,selectedText:ne.selectedText}),V=ne.activeDocument.uri),!O&&B&&W)try{let Q=await Td.getSelectedScope(o,u,t,n,d,{document:vr.create(B.activeDocument),selection:B.range});if(Q&&Q.symbolAtCursorState&&Q.symbolAtCursorState.codeAtCursor){w+=Zye;let ie=Q.symbolAtCursorState.document.languageId??"";R=Z7t({languageId:ie,selectedText:Q.symbolAtCursorState.codeAtCursor}),V=B.activeDocument.uri}}catch(Q){if(Q instanceof Hr)return;J_(Q)}}V&&R&&!await o.isCopilotIgnored(V)&&(w+=R),yr.commands.executeCommand("workbench.action.chat.open",{query:w})},m=async(D,W=!1)=>{let w=s.findReviewComment(D);if(!w||!w.suggestion)return;let R=yr.window.activeTextEditor;if(!R||R.document.uri.toString()!==w.document.uri.toString())return;let{edits:V}=await w.suggestion;R.edit(B=>{V.forEach(ne=>{B.replace(ne.range,ne.newText)})}),W&&_(D,1);let O=s.getReviewComments().length;s.removeReviewComments([w]),X1(w,O,"applySuggestion",a,l,e)},h=async D=>{let W=s.findReviewComment(D);if(!W)return;let w=s.getReviewComments().length,R=W.body instanceof yr.MarkdownString?W.body.value:W.body;s.removeReviewComments([W]),await yr.commands.executeCommand("vscode.editorChat.start",{initialRange:D.range,message:`/fix ${R}`,autoSend:!0}),X1(W,w,"continueInInlineChat",a,l,e)},g=async D=>{let W=s.findReviewComment(D);if(!W)return;let w=s.getReviewComments().length,R=W.body instanceof yr.MarkdownString?W.body.value:W.body;await yr.commands.executeCommand("workbench.action.chat.open",{query:"Explain your comment.",isPartialQuery:!0,previousRequests:[{request:"Review my code.",response:`In file \`${Nr(W.uri.fsPath)}\` at line ${W.range.start.line+1}:
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/dist/extension.js:1307:${R}`}]}),X1(W,w,"continueInChat",a,l,e)},y=async(D,W=!1)=>{W&&_(D,1);let w=s.findReviewComment(D);if(w){let R=s.getReviewComments().length;s.removeReviewComments([w]),X1(w,R,"discardComment",a,l,e)}},A=async()=>{let D=s.getReviewComments();D.length&&(s.removeReviewComments(D),X1(D,D.length,"discardAllComments",a,l,e))},b=async D=>{let W=s.findReviewComment(D);if(W){let w=s.findCommentThread(W);w&&(w.contextValue=kAe(w.contextValue,"markedAsHelpful","markedAsUnhelpful"));let R=s.getReviewComments().length;X1(W,R,"helpful",a,l,e)}},E=async D=>{let W=s.findReviewComment(D);if(W){let w=s.findCommentThread(W);w&&(w.contextValue=kAe(w.contextValue,"markedAsUnhelpful","markedAsHelpful"));let R=s.getReviewComments().length;X1(W,R,"unhelpful",a,l,e)}},S=c.extensionMode;typeof S=="number"&&(S!==yr.ExtensionMode.Test||sa)&&s.updateContextValues();let _=(D,W)=>{let w;if(D){let V=s.findReviewComment(D);if(!V)return;let O=s.getReviewComments(),ne=(O.indexOf(V)+W+O.length)%O.length;w=O[ne]}else{let V=s.getReviewComments();w=V[W>0?0:V.length-1]}let R=w&&s.findCommentThread(w);R&&(W!==0&&R.reveal(),e.invokeFunction(Vrn,R))},x=()=>yr.commands.executeCommand("vscode.editorChat.start",{message:"/generate "}),I=()=>yr.commands.executeCommand("vscode.editorChat.start",{message:`/${fS.ID} `,autoSend:!0,initialRange:yr.window.activeTextEditor?.selection}),P=D=>{let W=D&&typeof D=="object"&&"document"in D&&D.document&&typeof D.document=="object"&&"getText"in D.document&&"selection"in D&&D.selection instanceof yr.Range?D:void 0;return e.createInstance(G6).runCommand(W)},N=()=>{let D=yr.window.activeTextEditor;if(!D)return;let W=D.selection,w=yr.languages.getDiagnostics(D.document.uri).filter(R=>!!W.intersection(R.range)).map(R=>R.message).join(", ");return yr.commands.executeCommand("vscode.editorChat.start",{message:`/fix ${w}`,autoSend:!0,initialRange:yr.window.activeTextEditor?.selection})},k=async D=>{if(D&&typeof D=="object"&&"isUrl"in D&&"resolvedImagePath"in D&&typeof D.resolvedImagePath=="string"&&"type"in D){let W='Create an alt text description that is helpful for screen readers and people who are blind or have visual impairment. Never start alt text with "Image of..." or "Picture of...". Please clearly identify the primary subject or subjects of the image. Describe what the subject is doing, if applicable. Please add a short description of the wider environment. If there is text in the image please transcribe and include it. Please describe the emotional tone of the image, if applicable. Do not use single or double quotes in the alt text.',w=D.type==="generate"?W:`Refine the existing alt text for clarity and usefulness for screen readers. ${W}`,R=D.isUrl?Fe.parse(D.resolvedImagePath):Fe.file(D.resolvedImagePath);return yr.commands.executeCommand("vscode.editorChat.start",{message:w,attachments:[R],autoSend:!0,initialRange:yr.window.activeTextEditor?.selection})}},H=D=>[D.get(Ly),D.get(K),D.get(Ep),D.get(ft),D.get(ue),D.get(Oi),D.get(Or),D.get(Xi),D.get(rr),D.get(Mt),D.get(At),D.get(un),D.get(Oe),D.get(_s),D.get(Km)];return p.add(yr.commands.registerCommand("github.copilot.chat.explain",f)),p.add(yr.commands.registerCommand("github.copilot.chat.explain.palette",()=>f(void 0,!0))),p.add(yr.commands.registerCommand("github.copilot.chat.review",()=>rI(...e.invokeFunction(H),"selection",yr.ProgressLocation.Notification))),p.add(yr.commands.registerCommand("github.copilot.chat.review.stagedChanges",()=>rI(...e.invokeFunction(H),"index",yr.ProgressLocation.Notification))),p.add(yr.commands.registerCommand("github.copilot.chat.review.unstagedChanges",()=>rI(...e.invokeFunction(H),"workingTree",yr.ProgressLocation.Notification))),p.add(yr.commands.registerCommand("github.copilot.chat.review.changes",()=>rI(...e.invokeFunction(H),"all",yr.ProgressLocation.Notification))),p.add(yr.commands.registerCommand("github.copilot.chat.review.stagedFileChange",D=>rI(...e.invokeFunction(H),{group:"index",file:D.resourceUri},yr.ProgressLocation.Notification))),p.add(yr.commands.registerCommand("github.copilot.chat.review.unstagedFileChange",D=>rI(...e.invokeFunction(H),{group:"workingTree",file:D.resourceUri},yr.ProgressLocation.Notification))),p.add(yr.commands.registerCommand("github.copilot.chat.review.apply",m)),p.add(yr.commands.registerCommand("github.copilot.chat.review.applyAndNext",D=>m(D,!0))),p.add(yr.commands.registerCommand("github.copilot.chat.review.applyShort",D=>m(D,!0))),p.add(yr.commands.registerCommand("github.copilot.chat.review.continueInInlineChat",h)),p.add(yr.commands.registerCommand("github.copilot.chat.review.continueInChat",g)),p.add(yr.commands.registerCommand("github.copilot.chat.review.discard",y)),p.add(yr.commands.registerCommand("github.copilot.chat.review.discardAndNext",D=>y(D,!0))),p.add(yr.commands.registerCommand("github.copilot.chat.review.discardShort",D=>y(D,!0))),p.add(yr.commands.registerCommand("github.copilot.chat.review.discardAll",A)),p.add(yr.commands.registerCommand("github.copilot.chat.review.markHelpful",b)),p.add(yr.commands.registerCommand("github.copilot.chat.review.markUnhelpful",E)),p.add(yr.commands.registerCommand("github.copilot.chat.review.previous",D=>_(D,-1))),p.add(yr.commands.registerCommand("github.copilot.chat.review.next",D=>_(D,1))),p.add(yr.commands.registerCommand("github.copilot.chat.review.current",D=>_(D,0))),p.add(yr.commands.registerCommand("github.copilot.chat.generate",x)),p.add(yr.commands.registerCommand("github.copilot.chat.generateDocs",I)),p.add(yr.commands.registerCommand("github.copilot.chat.generateTests",P)),p.add(yr.commands.registerCommand("github.copilot.chat.fix",N)),p.add(yr.commands.registerCommand("github.copilot.chat.generateAltText",k)),p.add(yr.languages.registerCodeActionsProvider("*",e.createInstance(wf),{providedCodeActionKinds:wf.providedCodeActionKinds})),p.add(yr.languages.registerCodeActionsProvider("*",e.createInstance(Mg),{providedCodeActionKinds:Mg.providedCodeActionKinds})),p.add(yr.notebooks.registerNotebookCellStatusBarItemProvider("jupyter-notebook",e.createInstance(S7))),p}function Vrn(r,e){let t=r.get(ue),n=r.get(Ep),o=r.get(K),s=n.findReviewComment(e);!s||s.suggestion||s.skipSuggestion||(s.suggestion=(async()=>{let a=s.body instanceof yr.MarkdownString?s.body.value:s.body,l=s.document,c=new yr.Selection(s.range.start,s.range.end),u="fix",d=a,p={location:yr.ChatLocation.Editor,location2:new yr.ChatRequestEditorData(l.document,c,c),command:u,prompt:d,references:[],attempt:0,enableCommandDetection:!1,isParticipantDetected:!1,toolReferences:[],toolInvocationToken:void 0,model:null,tools:new Map,id:"1",sessionId:"1"},f="",m=[],h=new jl(b=>{b instanceof yr.ChatResponseTextEditPart&&b.edits.length>0?m.push(...b.edits.map(E=>({range:E.range,newText:E.newText,oldText:l.getText(E.range)})).filter(E=>E.newText!==E.oldText)):b instanceof yr.ChatResponseMarkdownPart&&(f+=b.value.value)},()=>{}),y=await o.createInstance(DP,[],p,h,dr.None,{agentId:Rv(d2),agentName:d2,intentId:p.command},_o.None).getResult();if(y.errorDetails)throw new Error(y.errorDetails.message);let A={markdown:f,edits:m};return s.suggestion=A,n.updateReviewComment(s),e.contextValue=m.length?kAe(e.contextValue,"hasSuggestion","hasNoSuggestion"):kAe(e.contextValue,"hasNoSuggestion","hasSuggestion"),A})().catch(a=>(t.error(a,"Error fetching suggestion"),s.suggestion={markdown:`Error fetching suggestion: ${a?.message}`,edits:[]},n.updateReviewComment(s),s.suggestion)),n.updateReviewComment(s))}function kAe(r,e,t){return(r?r.split(","):[]).filter(n=>n!==e&&n!==t).concat(e).sort().join(",")}function Z7t(r){let e=r.fileName?`From the file: ${Nr(r.fileName)}
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/dist/extension.js:1336:`))),vscpp(wd.UserMessage,{priority:900},"Generate the contents of the file: ",this.props.filePath," ",vscpp("br",null),"This is the project tree structure:",vscpp("br",null),"\\`\\`\\`filetree' ",vscpp("br",null),this.props.fileTreeStr,vscpp("br",null),"\\`\\`\\`",vscpp("br",null),"The project should adhere to the following specification:",vscpp("br",null),this.props.projectSpecification,vscpp("br",null)))}},BAe=class extends wd.PromptElement{render(){return vscpp(vscppf,null,this.props.history&&vscpp(FAe,{messages:this.props.history}),vscpp(wd.SystemMessage,{priority:1e3},"You are a VS Code assistant. Your job is to generate the project specification when given the user description and file tree structure of the project that a user wants to create. ",vscpp("br",null),vscpp(Un,null),vscpp(mn,null),vscpp(Ur,null),vscpp("br",null),"Additional Rules",vscpp("br",null),"Think step by step and respond with a text description that lists and summarizes each file inside this project.",vscpp("br",null),"List the classes, types, interfaces, functions, and constants it exports and imports if it is a code file.",vscpp("br",null),"Consider filenames and file extensions when determining the programming languages used in the project. List any special configurations or settings required for configuration files such as package.json or tsconfig.json to help compile the project successfully",vscpp("br",null),"You should be as specific as possible when listing the public properties and methods for each exported class.",vscpp("br",null),"Do not use code blocks or backticks. Do not include any text before or after the file contents.",vscpp("br",null),"Do not include comments in json files.",vscpp("br",null),"Do not use code blocks or backticks.",vscpp("br",null),"Do not include product names such as Visual Studio in the comments.",vscpp("br",null),"Below you will find a set of examples of what you should respond with. Please follow these examples as closely as possible.",vscpp("br",null),vscpp("br",null),"## Valid question",vscpp("br",null),"User: I want to set up the following project: Create a TypeScript Express app",vscpp("br",null),"This is the project tree structure:",vscpp("br",null),"\\`\\`\\`markdown ",vscpp("br",null),"my-express-app",vscpp("br",null),"\u251C\u2500\u2500 src",vscpp("br",null),"\u2502   \u251C\u2500\u2500 app.ts",vscpp("br",null),"\u2502   \u251C\u2500\u2500 controllers",vscpp("br",null),"\u2502   \u2502   \u2514\u2500\u2500 index.ts",vscpp("br",null),"\u2502   \u251C\u2500\u2500 routes",vscpp("br",null),"\u2502   \u2502   \u2514\u2500\u2500 index.ts",vscpp("br",null),"\u2502   \u2514\u2500\u2500 types",vscpp("br",null),"\u2502       \u2514\u2500\u2500 index.ts",vscpp("br",null),"\u251C\u2500\u2500 package.json",vscpp("br",null),"\u251C\u2500\u2500 tsconfig.json",vscpp("br",null),"\u2514\u2500\u2500 README.md",vscpp("br",null),"\\`\\`\\`",vscpp("br",null),"## Valid response",vscpp("br",null),"Assistant: The project has the following files:",vscpp("br",null),"\\`src/app.ts\\`: This file is the entry point of the application. It creates an instance of the express app and sets up middleware and routes.",vscpp("br",null),"\\`src/controllers/index.ts\\`: This file exports a class \\`IndexController\\` which has a method \\`getIndex\\` that handles the root route of the application.",vscpp("br",null),"\\`src/routes/index.ts\\`: This file exports a function \\`setRoutes\\` which sets up the routes for the application. It uses the \\`IndexController\\` to handle the root route.",vscpp("br",null),"\\`src/types/index.ts\\`: This file exports interfaces \\`Request\\` and \\`Response\\` which extend the interfaces from the \\`express\\` library.",vscpp("br",null),"\\`tsconfig.json\\`: This file is the configuration file for TypeScript. It specifies the compiler options and the files to include in the compilation.",vscpp("br",null),"\\`package.json\\`: This file is the configuration file for npm. It lists the dependencies and scripts for the project.",vscpp("br",null),"\\`README.md\\`: This file contains the documentation for the project.",vscpp("br",null)),vscpp(wd.UserMessage,{priority:900},"I want to set up the following project: ",this.props.query,vscpp("br",null),"This is the project tree structure:",vscpp("br",null),"\\`\\`\\`markdown' ",vscpp("br",null),this.props.fileTreeStr,vscpp("br",null),"\\`\\`\\`",vscpp("br",null)))}},FAe=class extends wd.PromptElement{render(e,t){let n=[];for(let o of this.props.messages)switch(o.role){case wd.Raw.ChatRole.User:n.push(vscpp(wd.UserMessage,{priority:600},Va(o.content)));break;case wd.Raw.ChatRole.System:n.push(vscpp(wd.AssistantMessage,{priority:800},Va(o.content)));break;default:break}return vscpp(vscppf,null,n)}};var T7=class{constructor(e,t,n){this.promptType=e;this.endpointProvider=t;this.instantiationService=n}async generate(e,t){let n=await this.endpointProvider.getChatEndpoint("gpt-4o-mini"),s=await It.create(this.instantiationService,n,this.promptType,e).render(),a=await n.makeChatRequest("newWorkspaceContentGenerator",s.messages,void 0,t,6,void 0,void 0);return a.type==="success"?e.filePath?this.parseContents(e.filePath,a.value):a.value:""}};T7=T([v(1,Je),v(2,K)],T7);var I7=class extends T7{constructor(e,t){super(BAe,e,t)}parseContents(e,t){throw new Error("Method not implemented.")}};I7=T([v(0,Je),v(1,K)],I7);var x7=class extends T7{constructor(e,t){super(OAe,e,t)}parseContents(e,t){function n(o,s){try{let a=s.exec(o.trim());if(a&&a.length>2)return a[2]}catch(a){console.error(a)}return o}if(e.endsWith(".md")){let o=n(t,/^```([a-zA-Z]+)?\s*([\s\S]+?)\s*```$/),[s,...a]=o.split("#");return s.length?["",...a].join("#"):o}else return n(t,/```([^\n]+)?\s*\n([\s\S]+?)\s*```/g)}};x7=T([v(0,Je),v(1,K)],x7);var GZ=Me("INewWorkspacePreviewContentManager"),Pqe="github.copilot.createProject",kqe="github.copilot.createFile",UAe="github.copilot.openFile",R7=class{constructor(e){this.responseScopedData=new Map;this.prevFileContents=new Map;this.copilotContentManager=e.createInstance(qZ),this.githubContentManager=e.createInstance(VZ),this.fileContentManager=new Iqe}set(e,t,n,o){this.responseScopedData.set(e,n),Rqe(n.baseUri)?this.githubContentManager.set(e,t,n,o):wqe(n.baseUri)?this.fileContentManager.set(e,t,n,o):this.copilotContentManager.set(e,t,n,o)}get(e){this.prevResponseId!==e.authority&&(this.prevFileContents.clear(),this.prevResponseId=e.authority);let t;return Rqe(e)?t=this.githubContentManager.get(e.authority,e.path):wqe(e)?t=this.fileContentManager.get(e.authority,e.path):t=this.copilotContentManager.get(e.authority,e.path,this.prevFileContents),t?.content?.then(n=>{if(this.prevFileContents.has(e.path))return;let s=new TextDecoder().decode(n);this.prevFileContents.set(e.path,s)}),t}getFileTree(e){return this.responseScopedData.get(e)}};R7=T([v(0,K)],R7);var qZ=class{constructor(e){this.instantiationService=e;this.promises=[];this.responseScopedData=new Map;this.generatePlanPrompt=this.instantiationService.createInstance(I7);this.generateFilePrompt=this.instantiationService.createInstance(x7)}set(e,t,n,o){let{userPrompt:s,projectStructure:a,chatMessages:l}=o,c={query:s,fileTreeStr:a,history:l},u=this.generatePlanPrompt.generate(c,dr.None);this.promises.push(u);let d=this._getResponseScopedData(e),p={userPrompt:s,projectSpecification:u,projectStructure:a,fileTree:n,chatMessages:l};d.set(t,p)}get(e,t,n){let{projectName:o,path:s}=this._getProjectMetadata(t),l=this._getResponseScopedData(e).get(o);if(!l)return;let c=l.fileTree.value,u=Dqe(c,s);if(u&&!u?.content){let d=u;d.content=this._getFileContent(l.userPrompt,l.projectStructure,l.projectSpecification,t,l.chatMessages,n).catch(()=>d.content=void 0)}return u}_prefetch(e,t,n,o,s){let a=Date.now();return o.children?{...o,type:2,children:o.children.map(l=>this._prefetch(e,t,n,l,s)),ctime:a}:{...o,type:1,content:void 0,ctime:a}}async _getFileContent(e,t,n,o,s,a){let l={query:e,fileTreeStr:t,filePath:o,projectSpecification:await n,history:s,relavantFiles:a.has(o)?new Map([[o,a.get(o)]]):void 0};return this.generateFilePrompt.generate(l,dr.None).then(c=>Buffer.from(c))}_getResponseScopedData(e){let t=this.responseScopedData.get(e);return t||(t=new Map,this.responseScopedData.set(e,t)),t}_getProjectMetadata(e){let[,t,...n]=e.split("/");return{projectName:t,path:n}}};qZ=T([v(0,K)],qZ);var VZ=class{constructor(e){this.repositoryService=e;this.responseScopedData=new Map}set(e,t,n,o){let s=o,a=this._getResponseScopedData(e),l={...s,fileTree:n};a.set(t,l)}get(e,t){let{projectName:n,path:o}=this._getProjectMetadata(t),a=this._getResponseScopedData(e).get(n);if(!a)return;let l=a.fileTree.value,c=Dqe(l,o);if(c&&!c?.content&&!c?.children){let u=c,d=a.path==="."?sn.relative(a.repo,t):sn.relative(a.path,t.slice(1));u.content=this.repositoryService.getRepositoryItemContent(a.org,a.repo,d).catch(()=>u.content=void 0)}return c}_getProjectMetadata(e){let[,t,...n]=e.split("/");return{projectName:t,path:n}}_getResponseScopedData(e){let t=this.responseScopedData.get(e);return t||(t=new Map,this.responseScopedData.set(e,t)),t}};VZ=T([v(0,YE)],VZ);var Iqe=class{constructor(){this.responseScopedData=new Map}set(e,t,n,o){let s=o,a=this._getResponseScopedData(e),l={content:s,fileTree:n};a.set(t,l)}get(e,t){let{projectName:n,path:o}=this._getFileMetadata(t),a=this._getResponseScopedData(e).get(n);if(!a)return;let l=a.fileTree.value,c=Dqe(l,o);return c&&!c?.content&&!c?.children&&(c.content=Promise.resolve(new Uint8Array(new TextEncoder().encode(a.content)))),c}_getFileMetadata(e){let[,t,...n]=e.split("/");return{projectName:t,path:n}}_getResponseScopedData(e){let t=this.responseScopedData.get(e);return t||(t=new Map,this.responseScopedData.set(e,t)),t}};function Dqe(r,e){let t;for(let n of e)t?t.children&&(t=t.children.find(o=>o.name===n)??t):t=r.find(o=>o.name===n);return t}var Tqe="new",w7=class{constructor(e,t){this.endpointProvider=e;this.instantiationService=t;this.id="new";this.locations=[1];this.description=CI.t("Scaffold code for a new file or project in a workspace");this.commandInfo={allowsEmptyArgs:!1,defaultEnablement:!0}}static{this.ID="new"}async invoke(e){let t=e.location,n=await this.endpointProvider.getChatEndpoint(e.request);return this.instantiationService.createInstance(HZ,this,n,t)}};w7=T([v(0,Je),v(1,K)],w7);function oQt(r,e){return{command:Pqe,arguments:[r,e],title:CI.t("Create Workspace...")}}function Yrn(r){return{command:kqe,arguments:[r],title:CI.t("Create File...")}}var HZ=class{constructor(e,t,n,o,s,a,l){this.intent=e;this.endpoint=t;this.location=n;this.instantiationService=o;this.configurationService=s;this.newWorkspacePreviewContentManager=a;this.workspaceService=l;this.linkification={disable:!0}}async getShouldUseProjectTemplate(){let e=this.configurationService.getConfig(ae.UseProjectTemplates);return e!==void 0?e:!1}async buildPrompt(e,t,n){let{query:o,history:s,chatVariables:a}=e,l=!a.hasVariables()&&s[s.length-1]?.request?.message!==o&&await this.getShouldUseProjectTemplate(),u=await It.create(this.instantiationService,this.endpoint,C7,{promptContext:e,useTemplates:l,endpoint:this.endpoint}).render(t,n),d=u.metadata.get(q2);return d&&(this.githubContentMetadata=d),u}processResponse(e,t,n,o){return new xqe(this.newWorkspacePreviewContentManager,this.workspaceService,this.githubContentMetadata).processResponse(e,t,n,o)}};HZ=T([v(3,K),v(4,Pe),v(5,GZ),v(6,Oe)],HZ);function zrn(r,e,t){let n;t?n=r.map(u=>[e.path,u.path].join("/")):n=r.map(u=>u.path);let o=n[0].split("/")[0],s={name:o,children:[]},a={rootName:s};for(let u of n){let d=u.split("/"),p=o,f=s;for(let m=1;m<d.length;m++){let h=d[m];if(p+=`/${h}`,!a[p]){let g={name:h};f.children===void 0&&(f.children=[]),f.children.push(g),a[p]=g}f=a[p]}}let l;t?l=s.children?.[0].children??[]:l=s.children??[];let c=l?.sort((u,d)=>u.children&&!d.children?-1:1)??[];return new By([{name:o,children:c}],e)}var QAe="vscode-copilot-workspace",qAe="vscode-copilot-github-workspace",V2="vscode-copilot-file";function iQt(r,e,t=!1){return bn.from({scheme:t?qAe:QAe,authority:r??"",path:e?`/${e}`:void 0})}var xqe=class{constructor(e,t,n){this.newWorkspacePreviewContentManager=e;this.workspaceService=t;this.githubContentMetadata=n;this._appliedText="";this._p=Promise.resolve("")}async processResponse(e,t,n,o){let{turn:s,messages:a}=e,l=!1,c="",u=/```filetree\n/,d=a.filter(f=>f.role!==sQt.Raw.ChatRole.System),p=!1;for await(let{delta:f}of t){if(o.isCancellationRequested)break;let m=f.text;this._p=this._p.then(async()=>{let h=s.id;if(!m)return this._appliedText;if(this._appliedText+=m,this._appliedText.startsWith("#"))/(?:.*\n){1,}/.test(this._appliedText)&&n.markdown(m);else{let g=s.request.message,y=this._appliedText.match(/```filetree\n([\s\S]+?)\n```/);if(y&&(l||!p)){l=!1;let[A,b]=this._appliedText.split(y[0]);p||n.markdown(A),c=y[1];let{chatResponseTree:E,projectName:S}=DAe(c,_=>iQt(h,_));n.progress(CI.t("Generating workspace preview...")),n.push(E),n.markdown(b),this.newWorkspacePreviewContentManager.set(h,S,E,{userPrompt:g,projectStructure:c,chatMessages:d})}else if(this._appliedText.match(u)&&!l&&!y){l=!0;let[A,b]=this._appliedText.split(u);c+=b,n.progress(CI.t("Generating workspace preview..."))}else l?c+=m:!l&&!this._appliedText.match(/```/)&&(p=!0,n.markdown(m))}return this._appliedText})}if(await this._p,s.id&&this.githubContentMetadata&&this.githubContentMetadata.org&&this.githubContentMetadata.repo&&this.githubContentMetadata.path&&this.githubContentMetadata.githubRepoItems&&!this.newWorkspacePreviewContentManager.getFileTree(s.id)){n.reference(bn.parse(this.githubContentMetadata.githubRepoItems[0].html_url)),n.progress(CI.t("Generating workspace preview..."));let f=this.githubContentMetadata.path===".",m=f?this.githubContentMetadata.repo:this.githubContentMetadata.path.split("/")[0],h=zrn(this.githubContentMetadata.githubRepoItems,iQt(s.id,m,!0),f);n.push(h);let g=this.workspaceService.getWorkspaceFolders();n.button(oQt(h,g.length>0?g[0]:void 0)),this.newWorkspacePreviewContentManager.set(s.id,m,h,this.githubContentMetadata);let y=encodeURIComponent(`["@workspace /${Tqe} ${s.request.message}"]`),A=new Rt(CI.t("Hint: You can [regenerate this project without using this sample](command:workbench.action.chat.open?{0}) or use this [setting](command:workbench.action.openSettings?%5B%22github.copilot.chat.useProjectTemplates%22%5D) to configure the behavior.",y));A.isTrusted={enabledCommands:["workbench.action.openSettings","workbench.action.chat.open"]},n.markdown(A)}else{let f=Yc(this._appliedText);if(f.length===2){let m;try{m=R0(f[1].code)}catch(b){throw b}let h=bn.from({scheme:V2,authority:s.id,path:`/${m.fileName}`}),g=new By([{name:`${m.fileName}`}],h),y=UZ(UAe,[g]),A=new Rt(`[${m.fileName}](${y})`);A.isTrusted={enabledCommands:[UAe]},n.markdown(CI.t("Sure, here is the file you requested:")),n.markdown(A),this.newWorkspacePreviewContentManager.set(s.id,m.fileName,g,f[0].code)}}this.pushCommands(s.id,n)}pushCommands(e,t){let n=this.newWorkspacePreviewContentManager.getFileTree(e);if(!n||Rqe(n.baseUri))return;if(wqe(n.baseUri)){t.button(Yrn(n));return}let o=this.workspaceService.getWorkspaceFolders();t.button(oQt(n,o.length>0?o[0]:void 0))}};function Rqe(r){return r.scheme===qAe}function wqe(r){return r.scheme===V2}var Nqe=z(Ht());var MP=z(Xe());var VAe=z(Xe());var MA=class extends VAe.PromptElement{constructor(t,n){super(t);this._terminalService=n}async prepare(){return this._terminalService.terminalLastCommand}render(t,n){if(!t)return;let o=[];t.commandLine&&(o.push("The following is the last command run in the terminal:"),o.push(t.commandLine)),t.cwd&&(o.push("It was run in the directory:"),o.push(typeof t.cwd=="object"?t.cwd.toString():t.cwd)),t.output&&(o.push("It has the following output:"),o.push(t.output));let s=o.join(`
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/dist/extension.js:1429:`))}},B7=class extends Kc.PromptElement{constructor(t,n){super(t);this._terminalService=n}render(){return vscpp(vscppf,null,vscpp(Kc.UserMessage,{priority:this.props.priority},"The active terminal's shell type is: ",this._terminalService.terminalShellType))}};B7=T([v(1,Mu)],B7);var F7=class extends Kc.PromptElement{constructor(t,n){super(t);this._envService=n}render(){return vscpp(vscppf,null,vscpp(Kc.UserMessage,{priority:this.props.priority},"The active operating system is: ",this._envService.OS))}};F7=T([v(1,Mt)],F7);function unn(r){switch(r){case 3:return zZ.t("high relevance");case 2:return zZ.t("medium relevance");case 1:return zZ.t("low relevance")}}function dnn(r){switch(r){case"high":return 3;case"medium":return 2;case"low":return 1}}function hQt(r){gQt=r}var gQt;async function vQt(r){let e=gQt;if(!e)return;let t=new Promise(c=>{r.createInstance(YZ).generateTerminalQuickFix(e,dr.None).then(u=>{let d=(u??[]).sort((f,m)=>m.relevance-f.relevance).map(f=>({label:f.command,description:f.description,suggestion:f})),p;for(let f=0;f<d.length;f++){let m=d[f],h=d.at(f-1);"suggestion"in m&&(!p||f>0&&"suggestion"in h&&m.suggestion.relevance!==h.suggestion.relevance)&&(p=m.suggestion.relevance,d.splice(f++,0,{label:unn(p),kind:Pf.QuickPickItemKind.Separator}))}c(d)})});t.then(c=>{c.length===0&&Pf.window.showInformationMessage("No fixes found")});let n=Pf.window.createQuickPick();n.canSelectMany=!1;let o=zZ.t("Generating");n.placeholder=o,n.busy=!0;let s=0,a=new Ny;a.cancelAndSet(()=>{s++,s>3&&(s=0),n.placeholder=o+".".repeat(s)},250),n.show(),n.items=await t,a.cancel(),n.placeholder="",n.busy=!1,await new Promise(c=>n.onDidAccept(()=>c()));let l=n.activeItems[0];if(l&&"suggestion"in l){let c=!l.suggestion.command.match(/{.+}/);Pf.window.activeTerminal?.sendText(l.suggestion.command,c)}n.dispose()}var YZ=class{constructor(e,t,n,o){this._endpointProvider=e;this._instantiationService=t;this._logService=n;this._workspaceService=o}async generateTerminalQuickFix(e,t){let n=await this._generateTerminalQuickFixFileContext(e,t);if(!n||t.isCancellationRequested)return;let o=[],s=[],a=[];for(let f of n)try{let m=await Pf.workspace.fs.stat(f);m.type===Pf.FileType.File||m.type===Pf.FileType.SymbolicLink?o.push(f):m.type===Pf.FileType.Directory?s.push(f):a.push(f)}catch{a.push(f)}let l=await this._endpointProvider.getChatEndpoint("gpt-4o-mini"),u=await It.create(this._instantiationService,l,O7,{commandLine:e.commandLine,output:[],verifiedContextUris:o,verifiedContextDirectoryUris:s,nonExistentContextUris:a}).render(void 0,void 0),d=await l.makeChatRequest("terminalQuickFixGenerator",u.messages,void 0,t,6);if(this._logService.info("Terminal QuickFix FetchResult "+d),t.isCancellationRequested)return;if(d.type!=="success")throw new Error(Pf.l10n.t("Encountered an error while determining terminal quick fixes: {0}",d.type));this._logService.debug("generalTerminalQuickFix fetchResult.value "+d.value);let p=[];try{let f=Yc(d.value),m=JSON.parse(f.length>0?f[0].code:d.value);if(m&&Array.isArray(m)){for(let h of m)if(typeof h=="object"&&h){let g="command"in h&&typeof h.command=="string"?h.command:void 0,y="description"in h&&typeof h.description=="string"?h.description:void 0,A="relevance"in h&&typeof h.relevance=="string"&&(h.relevance==="low"||h.relevance==="medium"||h.relevance==="high")?h.relevance:void 0;g&&y&&A&&p.push({command:g,description:y,relevance:dnn(A)})}}}catch(f){this._logService.error("Error parsing terminal quick fix results: "+f)}return p}async _generateTerminalQuickFixFileContext(e,t){let n=await this._endpointProvider.getChatEndpoint("gpt-4o-mini"),s=await It.create(this._instantiationService,n,M7,{commandLine:e.commandLine,output:[]}).render(void 0,void 0);this._logService.debug("_generalTerminalQuickFixFileContext prompt.messages: "+s.messages);let a=await n.makeChatRequest("terminalQuickFixGenerator",s.messages,async f=>{},t,6);if(this._logService.info("Terminal Quick Fix Fetch Result: "+a),t.isCancellationRequested)return;if(a.type!=="success")throw new Error(Pf.l10n.t("Encountered an error while fetching quick fix file context: {0}",a.type));this._logService.debug("_generalTerminalQuickFixFileContext fetchResult.value"+a.value);let l=[];try{let f=JSON.parse(a.value);if(f&&Array.isArray(f)){for(let m of f)if(typeof m=="object"&&m){let h="fileName"in m&&typeof m.fileName=="string"?m.fileName:void 0;h&&l.push({fileName:h})}}}catch{}let c=[],u=new Set,d=this._workspaceService.getWorkspaceFolders(),p=async f=>{for(let m of d){let h=Fe.joinPath(m,f);if(u.has(h.toString()))return;u.add(h.toString()),c.push(h)}};for(let{fileName:f}of l)f.endsWith(".exe")||f.includes("/bin/")&&!f.endsWith("activate")||(Bh(f)?c.push(mQt.Uri.file(f)):await p(f));return c}};YZ=T([v(0,Je),v(1,K),v(2,ue),v(3,Oe)],YZ);var U7=class{constructor(e,t,n,o,s,a,l,c,u,d,p,f,m,h,g){this.instantiationService=e;this.logService=t;this.configurationService=n;this.conversationOptions=o;this.chatAgentService=s;this.telemetryService=a;this.authenticationService=l;this.embeddingIndex=c;this.devContainerConfigurationService=u;this.gitCommitMessageService=d;this.mergeConflictService=p;this.linkifyService=f;this.extensionContext=m;this.newWorkspacePreviewContentManager=h;this.settingsEditorSearchService=g;this._disposables=new yt;this._activatedDisposables=new yt;this._searchProviderRegistered=!1;this._settingsSearchProviderRegistered=!1;this.id="conversationFeature";this._enabled=!1,this._activated=!1,this.registerCopilotTokenListener();let y=new ro;this.activationBlocker=y.p,l.copilotToken&&(this.logService.debug("ConversationFeature: Copilot token already available"),this.activated=!0,y.complete()),this._disposables.add(l.onDidAuthenticationChange(async()=>{let A=!!l.copilotToken;this.logService.debug(`ConversationFeature: onDidAuthenticationChange has token: ${A}`),A?this.activated=!0:this.activated=!1,y.complete()}))}get enabled(){return this._enabled}set enabled(e){e&&!this.activated&&(this.activated=!0),this._enabled=e,Xn.commands.executeCommand("setContext","github.copilot.interactiveSession.disabled",!e)}get activated(){return this._activated}set activated(e){if(this._activated!==e)if(this._activated=e,!e)this._activatedDisposables.clear();else{let t=this.conversationOptions;this._activatedDisposables.add(this.registerProviders()),this._activatedDisposables.add(this.registerCommands(t)),this._activatedDisposables.add(this.registerRelatedInformationProviders()),this._activatedDisposables.add(this.registerParticipants(t)),this._activatedDisposables.add(this.instantiationService.createInstance(yR,yQt))}}dispose(){this._activated=!1,this._activatedDisposables.dispose(),this._disposables?.dispose()}[Symbol.dispose](){this.dispose()}registerParticipants(e){return this.chatAgentService.register(e)}registerSearchProvider(){if(!this._searchProviderRegistered){if(this._searchProviderRegistered=!0,this.authenticationService.copilotToken?.isNoAuthUser){this.logService.debug("ConversationFeature: Skipping search provider registration - no GitHub session available");return}return Xn.workspace.registerAITextSearchProvider("file",this.instantiationService.createInstance(An))}}registerSettingsSearchProvider(){if(!this._settingsSearchProviderRegistered)return this._settingsSearchProviderRegistered=!0,Xn.ai.registerSettingsSearchProvider(this.settingsEditorSearchService)}registerProviders(){let e=new yt;try{let t=this.registerParticipantDetectionProvider();t&&e.add(t);let n=this.registerSearchProvider();n&&e.add(n);let o=this.registerSettingsSearchProvider();o&&e.add(o)}catch(t){this.logService.error(t,"Registration of interactive providers failed")}return e}registerParticipantDetectionProvider(){if("registerChatParticipantDetectionProvider"in Xn.chat){let e=this.instantiationService.createInstance(kP);return Xn.chat.registerChatParticipantDetectionProvider(e)}}registerCommands(e){let t=new yt;return[Xn.commands.registerCommand("github.copilot.interactiveSession.feedback",async()=>Xn.env.openExternal(Xn.Uri.parse(Qdt))),Xn.commands.registerCommand("github.copilot.terminal.explainTerminalLastCommand",async()=>this.triggerTerminalChat({query:`/${RS.intentName} #terminalLastCommand`})),Xn.commands.registerCommand("github.copilot.terminal.fixTerminalLastCommand",async()=>vQt(this.instantiationService)),Xn.commands.registerCommand("github.copilot.terminal.generateCommitMessage",async()=>{let n=Xn.workspace.workspaceFolders;if(!n?.length)return;let o=n.length===1?n[0].uri:await Xn.window.showWorkspaceFolderPick().then(l=>l?.uri);if(!o)return;let s=this.gitCommitMessageService.getRepository(o);if(!s)return;let a=await this.gitCommitMessageService.generateCommitMessage(s,dr.None);if(a){let c=`git commit -m "${a.replace(/"/g,'\\"').replace(/\\/g,"\\\\").replace(/\$/g,"\\$")}"`;Xn.window.activeTerminal?.sendText(c,!1)}}),Xn.commands.registerCommand("github.copilot.git.generateCommitMessage",async(n,o,s)=>{let a=this.gitCommitMessageService.getRepository(n);if(!a)return;let l=await this.gitCommitMessageService.generateCommitMessage(a,s);l&&(a.inputBox.value=l)}),Xn.commands.registerCommand("github.copilot.git.resolveMergeConflicts",async(...n)=>{let o=n.filter(s=>!!s).map(s=>zn(s)?s:s.resourceUri);await this.mergeConflictService.resolveMergeConflicts(o,void 0)}),Xn.commands.registerCommand("github.copilot.devcontainer.generateDevContainerConfig",async(n,o=new Xn.CancellationTokenSource().token)=>this.devContainerConfigurationService.generateConfiguration(n,o)),Xn.commands.registerCommand("github.copilot.chat.openUserPreferences",async()=>{let n=Fe.joinPath(this.extensionContext.globalStorageUri,"copilotUserPreferences.md");return Xn.commands.executeCommand("vscode.open",n)}),this.instantiationService.invokeFunction(pQt),lQt(this.telemetryService),this.linkifyService.registerGlobalLinkifier({create:()=>this.instantiationService.createInstance(k7)}),this.linkifyService.registerGlobalLinkifier({create:()=>this.instantiationService.createInstance(L7)}),this.linkifyService.registerGlobalLinkifier({create:()=>t.add(this.instantiationService.createInstance(N7))}),this.instantiationService.invokeFunction(eQt),this.registerTerminalQuickFixProviders(),fQt(this.newWorkspacePreviewContentManager,this.logService,e),fnn(this.instantiationService),pnn()].forEach(n=>t.add(n)),t}async triggerTerminalChat(e){let t=this.configurationService.getConfig(ae.TerminalChatLocation),n;switch(t){case"quickChat":n="workbench.action.quickchat.toggle",e.query=`@${q1} `+e.query;break;case"terminal":n="workbench.action.terminal.chat.start";break;case"chatView":default:n="workbench.action.chat.open",e.query=`@${q1} `+e.query;break}await Xn.commands.executeCommand(n,e)}registerRelatedInformationProviders(){let e=new yt;return[Xn.ai.registerRelatedInformationProvider(Xn.RelatedInformationType.CommandInformation,this.embeddingIndex.commandIdIndex),Xn.ai.registerRelatedInformationProvider(Xn.RelatedInformationType.SettingInformation,this.embeddingIndex.settingsIndex)].forEach(t=>e.add(t)),e}registerCopilotTokenListener(){this._disposables.add(this.authenticationService.onDidAuthenticationChange(()=>{let e=this.authenticationService.copilotToken?.isChatEnabled();this.logService.info(`copilot token chat_enabled: ${e}, sku: ${this.authenticationService.copilotToken?.sku??""}`),this.enabled=e??!1}))}registerTerminalQuickFixProviders(){let e=()=>this.enabled;return QF(Xn.window.registerTerminalQuickFixProvider("copilot-chat.fixWithCopilot",{provideTerminalQuickFixes(t,n){return!e()||t.commandLine.endsWith("^C")?[]:(hQt(t),[{command:"github.copilot.terminal.fixTerminalLastCommand",title:Xn.l10n.t("Fix using Copilot")},{command:"github.copilot.terminal.explainTerminalLastCommand",title:Xn.l10n.t("Explain using Copilot")}])}}),Xn.window.registerTerminalQuickFixProvider("copilot-chat.generateCommitMessage",{provideTerminalQuickFixes:(t,n)=>this.enabled?[{command:"github.copilot.terminal.generateCommitMessage",title:Xn.l10n.t("Generate Commit Message")}]:[]}))}};U7=T([v(0,K),v(1,ue),v(2,Pe),v(3,Ym),v(4,Yve),v(5,De),v(6,ft),v(7,V1),v(8,tye),v(9,oye),v(10,sye),v(11,m7),v(12,ar),v(13,GZ),v(14,iye)],U7);function pnn(){return Xn.commands.registerCommand("github.copilot.executeSearch",async r=>{let e=r.filesToExclude.length>0||r.filesToInclude.length>0;Xn.commands.executeCommand("workbench.view.search.focus").then(()=>Xn.commands.executeCommand("workbench.action.search.toggleQueryDetails",{show:e})),Xn.commands.executeCommand("workbench.action.findInFiles",r)})}function fnn(r){return r.createInstance(Z1)}var q7=z(require("vscode"));var Q7=class extends _e{constructor(t){super();this.authenticationService=t;this._register(q7.commands.registerCommand("github.copilot.report",async(n="")=>{let s=this.authenticationService.copilotToken?.isVscodeTeamMember,a=s?["<details><summary>Prompt Details</summary>"]:["<details><summary>Logs</summary>"];mnn(a,ZF.getLogs().join(`
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/dist/extension.js:1434:`+qr.l10n.t({message:"Please authorize usage of **@{0}** on {1} and resend your question. [Learn more]({2}).",args:[o,R.hostname,"https://aka.ms/vscode-github-chat-extension-editor-context"],comment:["{Locked=']({'}"]}),{url:w.authorizationUrl},[qr.l10n.t("Authorize"),qr.l10n.t("Authorize for All Workspaces")]),{metadata:y,nextQuestion:{prompt:u.prompt,participant:n,command:u.command}}}else{if(w.type==="agent_failed_dependency")return{errorDetails:{message:qr.l10n.t("Sorry, an error occurred: {0}",w.reason)},metadata:y};if(w.type!=="unknown"||!W)return{errorDetails:{message:w.reason},metadata:y}}}return!this.checkAuthorized(o)&&e?.editor_context&&!l&&(p.confirmation(qr.l10n.t("Grant access to editor context"),qr.l10n.t({message:"**@{0}** would like to read your active file and selection. [Learn More]({1})",args:[o,"https://aka.ms/vscode-github-chat-extension-editor-context"],comment:["{Locked=']({'}"]}),{hasAcknowledgedImplicitReferences:!0},[qr.l10n.t("Allow"),qr.l10n.t("Allow for All Workspaces")]),l=!0),{metadata:y}}catch(b){return this.logService.error(`/agents/${o} failed: ${b}`),{metadata:y}}}));return c.iconPath=e?bn.parse(e.avatar_url):new qr.ThemeIcon("github"),o===JAe&&(c.participantVariableProvider={triggerCharacters:["#"],provider:{provideCompletionItems:async(u,d)=>(await this.getPlatformAgentSkills()).map(f=>{let m=new qr.ChatCompletionItem(`copilot.${f.name}`,"#"+f.name,[{value:f.insertText,level:qr.ChatVariableLevel.Full,description:f.description}]);return m.command=f.command,m.detail=f.description,m})}}),t.add(c.onDidReceiveFeedback(u=>this.userFeedbackService.handleFeedback(u,n))),t}async prepareClientPlatformReferences(e,t){let n=[],o=[],s=!1,a=!1,l=async(f,m)=>{let h=Nr(f.uri.toString()),g=f.getText(m);return await this.ignoreService.isCopilotIgnored(f.uri)?(s=!0,g="content-exclusion"):h.startsWith(".")?g="hidden-file":Buffer.byteLength(g,"utf8")>1024**3&&(g="file-too-large"),g},c=async f=>{let m=await this.gitService.getRepository(f),h=m?m.rootUri.toString():this.workspaceService.getWorkspaceFolder(f)?.toString();return h?ki(h,f.toString()):Nr(f.path)},u=async(f,m,h)=>{n.push({type:"client.file",data:{language:f.languageId,content:await l(f)},is_implicit:!!h,id:await c(f.uri)}),o.push(m?{variableName:m,value:f.uri}:f.uri)},d=async(f,m,h=!1,g)=>{let y=f.selection.start.line,A=f.selection.isEmpty?new qr.Range(new qr.Position(y,0),new qr.Position(y+1,0)):f.selection;n.push({type:"client.selection",data:{start:{line:A.start.line,col:A.start.character},end:{line:A.end.line,col:A.end.character},content:await l(f.document,A)},is_implicit:!!g,id:await c(f.document.uri)}),h&&o.push(m?{variableName:m,value:new qr.Location(f.document.uri,A)}:new qr.Location(f.document.uri,A))};if(this.checkAuthorized(t)){let{activeTextEditor:f}=this.tabsAndEditorsService;f&&e.find(m=>m.id.startsWith("vscode.implicit"))&&(await u(f.document,void 0,!0),await d(f,void 0,void 0,!0),a=!0)}for(let f of e)if(Fe.isUri(f.value)){let m=await this.workspaceService.openTextDocument(f.value);await u(m,f.name)}else if(f.name==="selection"){let{activeTextEditor:m}=this.tabsAndEditorsService;if(!m)throw new Error(qr.l10n.t({message:"Please open a text editor to use the `#selection` variable.",comment:"{Locked='`#selection`'}"}));a||await d(m,f.name,!0)}else f.name==="editor"&&this.tabsAndEditorsService.activeTextEditor&&await u(this.tabsAndEditorsService.activeTextEditor.document,f.name);this.gitService.isInitialized||await this.gitService.initialize();let p=this.gitService.repositories;for(let f of p){let m=G4(f)?.id;if(m)try{let h=await this.githubRepositoryService.getRepositoryInfo(m.org,m.repo);n.push({type:"github.repository",id:K0(m),data:{type:"repository",name:m.repo,ownerLogin:m.org,id:h.id}})}catch(h){h instanceof Error&&h.message.includes("Failed to fetch repository info")&&this.authenticationService.getPermissiveGitHubSession({silent:!0}),this.logService.error(h,"Failed to fetch info about current GitHub repository")}}return{clientReferences:n,vscodeReferences:o,hasIgnoredFiles:s}}async listEnabledSkills(e){return this.enabledSkillsPromise||(this.enabledSkillsPromise=this.capiClientService.makeRequest({method:"GET",headers:{Authorization:`Bearer ${e}`}},{type:Zr.ListSkills}).then(t=>t.json()).then(t=>t?.skills.reduce((n,o)=>n.add(o.slug),new Set))),this.enabledSkillsPromise}async resolveCopilotSkills(e,t){if(e===JAe){let n=new Set;for(let o of t.references)AQt[o.name]&&n.add(AQt[o.name]);return{copilot_skills:[...n]}}return{copilot_skills:[]}}async getPlatformAgentSkills(){let e=this.authenticationService.anyGitHubSession?.accessToken;if(!e)return[];let t=await this.listEnabledSkills(e);return[{name:"web",insertText:"#web",description:"Search Bing for real-time context",kind:"bing-search",command:void 0}].filter(n=>t.has(n.kind))}};j7=T([v(0,ue),v(1,Je),v(2,Or),v(3,nI),v(4,Oe),v(5,un),v(6,At),v(7,bl),v(8,YE),v(9,ar),v(10,ft),v(11,G7),v(12,K),v(13,wa)],j7);function vnn(r){return[...r.acceptedConfirmationData?.map(t=>({state:"accepted",confirmation:t}))??[],...r.rejectedConfirmationData?.map(t=>({state:"dismissed",confirmation:t}))??[]]}function ynn(r,e){let t=[];for(let n of e.history)if(n.participant===r&&(n instanceof qr.ChatRequestTurn&&t.push({role:W2.Raw.ChatRole.User,content:[{type:W2.Raw.ChatCompletionContentPartKind.Text,text:n.prompt}]}),n instanceof qr.ChatResponseTurn)){let o=n.result.metadata?.copilot_references,s=n.response.map(a=>a instanceof qr.ChatResponseMarkdownPart?a.value.value:"content"in a?a.content:null).filter(a=>!!a).join("");t.push({role:W2.Raw.ChatRole.Assistant,content:[{type:W2.Raw.ChatCompletionContentPartKind.Text,text:s}],...o?{copilot_references:o}:void 0})}return t}function Ann(r){let e;for(let t of r.history)if(t instanceof qr.ChatResponseTurn){let n=t.result.metadata?.sessionId;if(typeof n=="string"){e=n;break}}return e??wt()}var TI=z(require("vscode"));var ZAe=class extends _e{constructor(){super(),this._register(TI.commands.registerCommand("github.copilot.open.walkthrough",()=>{TI.commands.executeCommand("workbench.action.openWalkthrough",{category:"GitHub.copilot-chat#copilotWelcome"},!1)})),this._register(TI.commands.registerCommand("github.copilot.mcp.viewContext7",()=>{let t=TI.env.appName.includes("Insiders")?"vscode-insiders":"vscode",o=encodeURIComponent(JSON.stringify({name:"context7",gallery:!0,command:"npx",args:["-y","@upstash/context7-mcp@latest"]})),s=`${t}:mcp/install?${o}`;TI.env.openExternal(TI.Uri.parse(s))}))}};var Fqe={};sl(Fqe,{create:()=>bnn});var Y7=z(require("vscode")),KZ=require("vscode");var OP="copilot.newWorkspaceAgent.workspaceContexts";function bQt(r,e){let t=e.globalState.get(OP,[]),n=t.findIndex(o=>o.workspaceURI===r.workspaceURI);for(n>=0&&t.splice(n,1),t.unshift(r);t.length>30;)t.pop();e.globalState.update(OP,t)}var $7=class extends _e{constructor(t,n,o){super();this._extensionContext=t;this.workspaceService=n;this.fileSystemService=o;this._updateWorkspace()}async _updateWorkspace(){let t=this.workspaceService.getWorkspaceFolders();if(!t||t.length===0)return;let n=this._extensionContext.globalState.get(OP,[]),o=n.findIndex(u=>u.workspaceURI===t[0].toString());if(o===-1)return;let s=n[o],a=KZ.l10n.t("Continue Setup"),l=KZ.l10n.t("Continue Workspace Setup?"),c=KZ.l10n.t("Copilot will resume setting up the workspace by creating the necessary files.");if(!s.initialized){s.initialized=!0,n[o]=s,this._extensionContext.globalState.update(OP,n),await Y7.window.showInformationMessage(l,{modal:!0,detail:c},a)===a?Y7.commands.executeCommand("workbench.action.chat.open",{mode:"agent",query:`${KZ.l10n.t("Continue with #new workspace setup")}`}):(n.splice(o,1),this._extensionContext.globalState.update(OP,n));return}(await this.fileSystemService.readDirectory(t[0])).length>0?(n.splice(o,1),this._extensionContext.globalState.update(OP,n)):await Y7.window.showInformationMessage(l,{modal:!0,detail:c},a)===a?Y7.commands.executeCommand("workbench.action.chat.open",{mode:"agent",query:s.userPrompt}):(n.splice(o,1),this._extensionContext.globalState.update(OP,n))}};$7=T([v(0,ar),v(1,Oe),v(2,cr)],$7);function bnn(r){let e=r.get(K),t=new yt;return t.add(e.createInstance($7)),t}var EQt=z(require("vscode"));var JZ=class{constructor(e){this._ignoreService=e}provideFileIgnored(e,t){return this._ignoreService.isCopilotIgnored(e)}};JZ=T([v(0,At)],JZ);var z7=class extends _e{constructor(t){super();this.instantiationService=t;this._register(EQt.lm.registerIgnoredFileProvider(this.instantiationService.createInstance(JZ)))}};z7=T([v(0,K)],z7);var lh=z(require("vscode"));var ZZ;(o=>{let r=new Map;r.set("typescript",new Set(["abstract","any","as","asserts","async","await","bigint","boolean","break","case","catch","class","const","continue","constructor","debugger","declare","default","delete","do","else","enum","export","extends","false","finally","for","from","function","get","if","implements","import","in","infer","instanceof","interface","is","keyof","let","module","namespace","never","new","null","number","object","of","package","private","protected","public","readonly","require","return","set","static","string","super","switch","symbol","this","throw","true","try","type","typeof","undefined","unique","unknown","var","void","while","with","yield"])),r.set("typescriptreact",new Set(["abstract","any","as","asserts","async","await","bigint","boolean","break","case","catch","class","const","continue","constructor","debugger","declare","default","delete","do","else","enum","export","extends","false","finally","for","from","function","get","if","implements","import","in","infer","instanceof","interface","is","keyof","let","module","namespace","never","new","null","number","object","of","package","private","protected","public","readonly","require","return","set","static","string","super","switch","symbol","this","throw","true","try","type","typeof","undefined","unique","unknown","var","void","while","with","yield"])),r.set("javascript",new Set(["async","await","break","case","catch","class","const","continue","constructor","debugger","default","delete","do","else","enum","export","extends","false","finally","for","from","function","get","if","import","in","instanceof","interface","is","let","new","null","require","return","set","static","string","super","switch","symbol","this","throw","true","try","type","typeof","undefined","var","void","while","with","yield"])),r.set("javascriptreact",new Set(["async","await","break","case","catch","class","const","continue","constructor","debugger","default","delete","do","else","enum","export","extends","false","finally","for","from","function","get","if","import","in","instanceof","interface","is","let","new","null","require","return","set","static","string","super","switch","symbol","this","throw","true","try","type","typeof","undefined","var","void","while","with","yield"])),r.set("python",new Set(["False","None","True","and","as","assert","async","await","break","class","continue","def","del","elif","else","except","finally","for","from","global","if","import","in","is","lambda","nonlocal","not","or","pass","raise","return","try","while","with","yield"])),r.set("java",new Set(["abstract","assert","boolean","break","byte","case","catch","char","class","const","continue","default","do","double","else","enum","extends","final","finally","float","for","goto","if","implements","import","instanceof","int","interface","long","native","new","null","package","private","protected","public","return","short","static","strictfp","super","switch","synchronized","this","throw","throws","transient","try","void","volatile","while"])),r.set("go",new Set(["break","case","chan","const","continue","default","defer","else","fallthrough","for","func","go","goto","if","import","interface","map","package","range","return","select","struct","switch","type","var"])),r.set("csharp",new Set(["abstract","as","base","bool","break","byte","case","catch","char","checked","class","const","continue","decimal","default","delegate","do","double","else","enum","event","explicit","extern","false","finally","fixed","float","for","foreach","goto","if","implicit","in","int","interface","internal","is","lock","long","namespace","new","null","object","operator","out","override","params","private","protected","public","readonly","ref","return","sbyte","sealed","short","sizeof","stackalloc","static","string","struct","switch","this","throw","true","try","typeof","uint","ulong","unchecked","unsafe","ushort","using","virtual","void","volatile","while"])),r.set("cpp",new Set(["alignas","alignof","and","and_eq","asm","atomic_cancel","atomic_commit","atomic_noexcept","auto","bitand","bitor","bool","break","case","catch","char","char8_t","char16_t","char32_t","class","compl","concept","const","consteval","constexpr","constinit","const_cast","continue","co_await","co_return","co_yield","decltype","default","delete","do","double","dynamic_cast","else","enum","explicit","export","extern","false","float","for","friend","goto","if","import","inline","int","long","module","mutable","namespace","new","noexcept","not","not_eq","nullptr","operator","or","or_eq","private","protected","public","reflexpr","register","reinterpret_cast","requires","return","short","signed","sizeof","static","static_assert","static_cast","struct","switch","synchronized","template","this","thread_local","throw","true","try","typedef","typeid","typename","union","unsigned","using","virtual","void","volatile","wchar_t","while","xor","xor_eq"])),r.set("rust",new Set(["as","break","const","continue","crate","else","enum","extern","false","fn","for","if","impl","in","let","loop","match","mod","move","mut","pub","ref","return","self","Self","static","struct","super","trait","true","type","unsafe","use","where","while","async","await","dyn"])),r.set("ruby",new Set(["BEGIN","END","alias","and","begin","break","case","class","def","defined?","do","else","elsif","end","ensure","false","for","if","in","module","next","nil","not","or","redo","rescue","retry","return","self","super","then","true","undef","unless","until","when","while","yield"])),r.set("*",new Set(["abstract","as","async","await","break","case","catch","class","const","continue","debugger","default","delete","do","else","enum","export","extends","false","finally","for","from","function","get","if","import","in","instanceof","interface","is","let","new","null","package","private","protected","public","return","static","super","switch","this","throw","true","try","type","typeof","var","void","while","with","yield"])),o.languages=Array.from(r.keys());function t(s,a){let l=r.get(s.languageId),c=[],u=s.lineAt(a),d=u.firstNonWhitespaceCharacterIndex,p=d;for(;d<u.range.end.character;){let m=new lh.Position(a.line,d),h=s.getWordRangeAtPosition(m);if(!h){d+=1;continue}let g=h.start.character,y=h.end.character;if(g!==p){let b=u.text.substring(p,g);c.push({type:b.match(/^\s+$/)?"space":"other",value:b})}let A=u.text.substring(g,y);c.push({type:l?.has(A)?"keyword":"word",value:A}),d=y+1,p=y}if(p<u.range.end.character){let m=u.text.substring(p);c.push({type:m.match(/^\s+$/)?"space":"other",value:m})}let f=c.at(-1);if(f?.type==="word"){for(let m of l??[])if(m.startsWith(f.value)){f.type="keyword_start";break}}return c}function n(s,a,l){let c=t(s,a),u=0,d=0,p=0,f=0,m=0;for(let h=0;h<c.length;h++)switch(c[h].type){case"keyword":d+=1;break;case"keyword_start":p+=1;break;case"word":u+=1;break;case"space":f+=1;break;case"other":m+=1;break}return l?.trace("[ChatTrigger] "+JSON.stringify({wordCount:u,keywordCount:d,spaceCount:f,otherCount:m,tokenCount:c.length})),!(c.length<4||f<2||d===0&&m===0||d+p>=u||m>=f)}o.isNaturalLanguageDominated=n})(ZZ||={});var XZ=class{constructor(e){this._logService=e;this._store=new yt;this._sessionStore=new yt;this._store.add(lh.window.onDidChangeActiveTextEditor(()=>this._update())),this._update()}dispose(){this._store.dispose()}_update(){this._sessionStore.clear();let e=lh.window.activeTextEditor;!e||!e.viewColumn||lh.languages.match(ZZ.languages,e.document)&&(this._sessionStore.add(lh.window.onDidChangeTextEditorSelection(t=>{if(t.textEditor!==e)return;let n=e.document.lineAt(e.selection.active.line).range;t.kind===lh.TextEditorSelectionChangeKind.Keyboard&&e.selection.isSingleLine&&n.end.character===e.selection.active.character&&ZZ.isNaturalLanguageDominated(e.document,e.selection.active,this._logService)?lh.commands.executeCommand("inlineChat.showHint",e.document.uri,e.selection.active):lh.commands.executeCommand("inlineChat.hideHint")})),this._sessionStore.add(rn(()=>{lh.commands.executeCommand("inlineChat.hideHint")})))}};XZ=T([v(0,ue)],XZ);var K7=class{constructor(e,t){this._store=new yt;let n=this._store.add(new Ry),o="inlineChat.lineNaturalLanguageHint",s=()=>{t.getNonExtensionConfig(o)?n.value=e.createInstance(XZ):n.clear()};this._store.add(t.onDidChangeConfiguration(a=>{a.affectsConfiguration(o)&&s()})),s()}dispose(){this._store.dispose()}};K7=T([v(0,K),v(1,Pe)],K7);var Yv=require("vscode");var AHe=z(cHt());function Tc(r){return r instanceof Error?r:typeof r=="string"?new Error(r):new Error(`An unexpected error occurred: ${aC(r)}`)}function FA(r){return r.stack?r.stack:r.message}var Kbe=class extends Hr{constructor(t){super();this.extraInformation=t}};function uHt(r){return{start:r.start,end:r.end,items:r.items.map(e=>({context:Yan(e.context),timeStamp:e.timeStamp,onTimeout:e.onTimeout}))}}function Yan(r){switch(r.kind){case"snippet":return zan(r);case"trait":return Kan(r)}}function zan(r){return{kind:r.kind,priority:r.priority,uri:r.uri.toString(),additionalUris:r.additionalUris?.map(e=>e.toString()),value:r.value}}function Kan(r){return{kind:r.kind,priority:r.priority,name:r.name,value:r.value}}function Jan(r,e){return{uri:e.toString(),severity:r.severity,message:r.message,source:r.source||""}}function dHt(r){return r.flatMap(([e,t])=>t.map(n=>Jan(n,e)))}var kee=z(Xe());function Jbe(r){return r.map(Xan).join(`
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/dist/extension.js:1638:${o}`}_headerSeparator(){return"	"}_bodySeparator(){return"		"}async _reportIssue(t,n){VHe({title:t,data:n})}};_Q=T([v(0,K),v(1,Pe),v(2,Ko),v(3,De),v(4,Sd)],_Q);async function VHe(r){await uEe.commands.executeCommand("workbench.action.openIssueReporter",{extensionId:xA,issueTitle:r.title,data:r.data,issueBody:r.issueBody??"",uri:uEe.Uri.parse(r.public?"https://github.com/microsoft/vscode":"https://github.com/microsoft/vscode-copilot-issues")})}function MHt(r,...e){r.push("<details><summary>Prompt Details</summary>","<p>","",...e,"</p>","</details>")}async function OHt(r,e){let t=await HHe(e);t&&r.push("<details><summary>STest</summary>","<p>","STest code:","","```ts",...t,"```","</p>","</details>")}async function HHe(r){let e=r.getMetadata(Qv)?.value;if(e&&e.location===4)return kln(r)}function kln(r){let e=r.getMetadata(cU);if(!e)return;let t=lc(e.uri),n=o=>JSON.stringify(o);return[`stest({ description: 'Issue #XXXXX', language: ${n(e.languageId)}, model }, (testingServiceCollection) => {`,"	return simulateInlineChat(testingServiceCollection, {","		files: [toFile({",`			fileName: ${n(`${e.intentId}/issue-XXXXX/${t}`)},`,"			fileContents: [",...Ise(e.initialDocumentText).map(o=>`				${n(o)},`),"			]","		})],","		queries: [","			{",`				file: ${n(t)},`,`				selection: ${n(Dln(e.userSelection))},`,`				query: ${n(e.userPrompt)},`,"				diagnostics: 'tsc',",`				expectedIntent: ${n(e.intentId)},`,"				validate: async (outcome, workspace, accessor) => {","					assertInlineEdit(outcome);","					await assertNoDiagnosticsAsync(accessor, outcome, workspace, KnownDiagnosticProviders.tscIgnoreImportErrors);","				}","			}","		]","	});","});"]}function Dln(r){return[r.start.line,r.start.character,r.end.line,r.end.character]}var jHe=z(Xe());function FHt(r,e){let t={id:e??"copilot-nes-xtab",urlOrRequestMetadata:{type:Zr.ProxyChatCompletions},name:"xtab-proxy",model_picker_enabled:!1,is_chat_default:!1,is_chat_fallback:!1,version:"unknown",capabilities:{type:"chat",family:"xtab-proxy",tokenizer:"o200k_base",limits:{max_prompt_tokens:12285,max_output_tokens:4096},supports:{streaming:!0,parallel_tool_calls:!1,tool_calls:!1,vision:!1,prediction:!0}}};return r.createInstance(Wc,t)}var dEe=class r{static filterEdit(e,t){return t.filter(o=>!r._isWhitespaceOnlyChange(o,e.documentAfterEditsLines))}static _isWhitespaceOnlyChange(e,t){let n=e.lineRange.toOffsetRange().slice(t),o=e.newLines,s=o.length===0;if(s&&n.every(a=>a.trim()==="")||!s&&o.every(a=>a.trim()===""))return!0;if(n.length!==o.length)return!1;for(let a=0;a<n.length;a++){let l=n[a],c=o[a];if(l.trim()!==c.trim())return!1}return!0}},pEe=class r{static filterEdit(e,t){return t.filter(n=>!r._isFormattingOnlyChange(e.documentAfterEditsLines,n))}static _isFormattingOnlyChange(e,t){let n=t.lineRange.toOffsetRange().slice(e).join("").replace(/\s/g,""),o=t.newLines.join("").replace(/\s/g,"");return n===o}};var OS=class{constructor(){this._runningTask=void 0;this._pendingTasks=[]}schedule(e){let t=new ro;return this._pendingTasks.push({task:e,deferred:t,setUndefinedWhenCleared:!1}),this._runIfNotRunning(),t.p}scheduleSkipIfCleared(e){let t=new ro;return this._pendingTasks.push({task:e,deferred:t,setUndefinedWhenCleared:!0}),this._runIfNotRunning(),t.p}_runIfNotRunning(){this._runningTask===void 0&&this._processQueue()}async _processQueue(){if(this._pendingTasks.length===0)return;let e=this._pendingTasks.shift();if(e){if(this._runningTask)throw new Qt;this._runningTask=e.task;try{let t=await e.task();e.deferred.complete(t)}catch(t){e.deferred.error(t)}finally{this._runningTask=void 0,this._processQueue()}}}clearPending(){let e=this._pendingTasks;this._pendingTasks=[];for(let t of e)t.setUndefinedWhenCleared?t.deferred.complete(void 0):t.deferred.error(new Hr)}},CQ=class{constructor(e,t){this._fn=e;this._waitingTimeMs=t;this._queue=[];this._timeout=null}request(e){this._timeout===null&&(this._timeout=setTimeout(()=>this._flush(),this._waitingTimeMs));let t=new ro;return this._queue.push({arg:e,promise:t}),t.p}async _flush(){let e=this._queue;this._queue=[],this._timeout=null;let t=e.map(o=>o.arg),n;try{n=await this._fn(t)}catch(o){for(let s of e)s.promise.error(o);return}for(let[o,s]of n.entries())e[o].promise.complete(s)}};function UHt(r,e){return new Promise((t,n)=>{if(r.length===0){t(void 0);return}let o=!1,s=r.length;for(let a of r)a.then(l=>{s--,o||(e(l)?(o=!0,t(l)):s===0&&t(void 0))}).catch(n)})}var GHe=class{constructor(e,t,n=Date.now()){this.baseDebounceTime=e;this.expectedTotalTime=t;this.providerInvocationTime=n;this.extraDebounce=0}setExtraDebounce(e){this.extraDebounce=e}getDebounceTime(){let e=this.expectedTotalTime===void 0?this.baseDebounceTime+this.extraDebounce:Math.min(this.baseDebounceTime+this.extraDebounce,this.expectedTotalTime),t=Date.now()-this.providerInvocationTime;return Math.max(0,e-t)}getArtificialDelay(){if(this.expectedTotalTime===void 0)return 0;let e=Date.now()-this.providerInvocationTime;return Math.max(0,this.expectedTotalTime-e)}},TQ=class{constructor(e,t){this._configurationService=e;this._experimentationService=t;this._recentUserActions=[]}createDelaySession(e){let t=this._configurationService.getExperimentBasedConfig(ae.Internal.InlineEditsDebounce,this._experimentationService),o=this._configurationService.getExperimentBasedConfig(ae.Internal.InlineEditsBackoffDebounceEnabled,this._experimentationService)?this._getExpectedTotalTime(t):void 0;return new GHe(t,o,e)}handleAcceptance(){this._recordUserAction("accepted")}handleRejection(){this._recordUserAction("rejected")}_recordUserAction(e){this._recentUserActions.push({time:Date.now(),kind:e}),this._recentUserActions=this._recentUserActions.slice(-10)}_getExpectedTotalTime(e){let l=Date.now(),c=1;for(let d of this._recentUserActions){let p=l-d.time;if(p>6e5)continue;let f=Math.exp(-p/6e5),m=d.kind==="rejected"?1.5:.8;c*=1+(m-1)*f}let u=e*c;return u=Math.min(3e3,Math.max(50,u)),u}};TQ=T([v(0,Pe),v(1,nt)],TQ);var QHt=.7;function WHt(r,e){let t=e.toEdit(r.documentAfterEdits);if(t=t.normalizeOnSource(r.documentAfterEdits.value),!Nln(t))return!1;for(let n=r.recentEdits.edits.length-1;n>=0;n--){let o=r.recentEdits.edits[n],s=t.tryRebase(o);if(!s)return!0;t=s}return!1}function Nln(r){let e=r.replacements.reduce((n,o)=>n+o.replaceRange.length,0);return r.replacements.reduce((n,o)=>n+o.newText.length,0)===0&&e>0}var Uee=class r{constructor(e=new Set,t=new Set){this.inserted=e;this.deleted=t}combine(e){return new r(VHt(this.inserted,e.inserted),VHt(this.deleted,e.deleted))}isUndoneBy(e){let t=HHt(e.inserted,e.deleted),n=HHt(e.deleted,e.inserted),o=GHt(n,this.inserted),s=GHt(t,this.deleted);return n.size>6&&o/n.size>QHt||t.size>6&&s/t.size>QHt}};function WHe(r,e){let t=new Set,n=new Set,o=a=>{if(!a)return;let l=r.substring(a.start,a.endExclusive);for(let c of l.split(/\r\n|\r|\n/)){c=c.trim();for(let u of qHt(c))n.add(u)}},s=a=>{for(let l of a.split(/\r\n|\r|\n/)){l=l.trim();for(let c of qHt(l))t.add(c)}};for(let a of e.replacements){let l=a.removeCommonPrefix(r).removeCommonSuffix(r),c=a.removeCommonSuffix(r).removeCommonPrefix(r);l.isEmpty||(o(l.replaceRange),o(c.replaceRange),o(l.replaceRange.intersect(c.replaceRange)),s(Lln(l.newText,c.newText)))}return new Uee(t,n)}function Lln(r,e){let t=Math.min(r.length,e.length);for(let n=0;n<t;n++){let o=r.slice(0,r.length-n),s=e.slice(n);if(o===s)return o}return""}function qHt(r){let e=[];for(let t=4;t<r.length;t++){let n=r.slice(t-4,t);e.push(n)}return e}function VHt(r,e){let t=new Set;for(let n of r)t.add(n);for(let n of e)t.add(n);return t}function HHt(r,e){let t=new Set;for(let n of r)e.has(n)||t.add(n);return t}function GHt(r,e){let t=0;for(let n of r)e.has(n)&&t++;return t}function jHt(r){let e=new et(0,0);return r.lastSelectionInAfterEdit&&!r.lastSelectionInAfterEdit.equals(e)?r.documentAfterEdits.getTransformer().getRange(r.lastSelectionInAfterEdit):Mln(r)}function Mln(r){let e=r.recentEdits.edits.at(-1);if(e===void 0)return null;let t=e.replacements.at(-1);if(t===void 0)return null;let n=t.replaceRange,s=t.newText.length-n.length,a=n.endExclusive+s;return r.documentAfterEdits.getTransformer().getRange(new et(a,a))}var fEe=class r{static isImportChange(e,t,n){return e.newLines.some(o=>YT(o,t))||Oln(e,n).some(o=>YT(o,t))}static filterEdit(e,t){let n=e.languageId;return t.filter(s=>!r.isImportChange(s,n,e.documentLinesBeforeEdit))}};function Oln(r,e){return Gr(r.lineRange.mapToLineArray(t=>e[t-1]))}var RI=class extends Wc{constructor(t,n,o,s,a,l,c,u,d,p,f,m,h,g){let y=o?{...RI.chatModelInfo,id:o}:RI.chatModelInfo;super(y,a,c,l,u,d,p,f,m,s,h,g);this._url=t;this._apiKey=n;this._configService=s}static{this.chatModelInfo={id:"xtab-4o-mini-finetuned",name:"xtab-4o-mini-finetuned",model_picker_enabled:!1,is_chat_default:!1,is_chat_fallback:!1,version:"unknown",capabilities:{type:"chat",family:"xtab-4o-mini-finetuned",tokenizer:"o200k_base",limits:{max_prompt_tokens:12285,max_output_tokens:4096},supports:{streaming:!0,parallel_tool_calls:!1,tool_calls:!1,vision:!1,prediction:!0}}}}get urlOrRequestMetadata(){return this._configService.getConfig(ae.Internal.InlineEditsXtabProviderUrl)||this._url}getExtraHeaders(){let t=this._configService.getConfig(ae.Internal.InlineEditsXtabProviderApiKey)||this._apiKey;if(!t){let n=`Missing API key for custom URL (${this.urlOrRequestMetadata}). Provide the API key using vscode setting \`github.copilot.chat.advanced.inlineEdits.xtabProvider.apiKey\` or, if in simulations using \`--nes-api-key\` or \`--config-file\``;throw console.error(n),new Error(n)}return{Authorization:`Bearer ${t}`,"api-key":t}}};RI=T([v(3,Pe),v(4,Xi),v(5,rr),v(6,Or),v(7,De),v(8,ft),v(9,Vc),v(10,Ki),v(11,K),v(12,nt),v(13,ue)],RI);function $Ht(r){return new _n(async e=>{let t="";for await(let n of r){t+=n.delta.text;let o=t.split(/\r?\n/);t=o.pop()??"",e.emitMany(o)}t&&e.emitOne(t)})}function YHt(r){return new _n(async e=>{let t=-1,n;for await(let o of r)if(++t,n&&(e.emitOne(n),n=void 0),o.match(/^```[a-z]*$/)){if(t===0)continue;n=o}else e.emitOne(o)})}var Z2;(n=>(n.NO_CHANGE={start:"<NO_CHANGE>"},n.EDIT={start:"<EDIT>",end:"</EDIT>"},n.INSERT={start:"<INSERT>",end:"</INSERT>"}))(Z2||={});var kf=class{constructor(e,t,n,o,s,a,l,c,u,d){this.simulationCtx=e;this.instaService=t;this.workspaceService=n;this.diffService=o;this.configService=s;this.expService=a;this.logService=l;this.langCtxService=c;this.langDiagService=u;this.ignoreService=d;this.ID=kf.ID;this.dependsOnSelection=!0;this.showNextEditPreference="always";this.forceUseDefaultModel=!1;this.delayer=new TQ(this.configService,this.expService),this.tracer=Rl(["NES","XtabProvider"],p=>this.logService.trace(p))}static{this.ID=a5}handleAcceptance(){this.delayer.handleAcceptance()}handleRejection(){this.delayer.handleRejection()}provideNextEdit(e,t,n,o){let s=a=>{if(a.isError()){t(a);return}let{edit:l}=a.val;this.filterEdit(e.getActiveDocument(),[l]).length!==0&&t(a)};return this._provideNextEdit(e,s,n,o)}filterEdit(e,t){let n=[o=>fEe.filterEdit(e,o),o=>dEe.filterEdit(e,o)];return this.configService.getExperimentBasedConfig(ae.InlineEditsAllowWhitespaceOnlyChanges,this.expService)||n.push(o=>pEe.filterEdit(e,o)),this.configService.getExperimentBasedConfig(ae.Internal.InlineEditsUndoInsertionFilteringEnabled,this.expService)&&n.push(o=>WHt(e,new $d(o))?[]:o),n.reduce((o,s)=>s(o),t)}async _provideNextEdit(e,t,n,o){let s=new cQ(e);n.setProviderStartTime();try{if(e.xtabEditHistory.length===0)return Wv.noEdit(new Zn.ActiveDocumentHasNoEdits,s);let a=this.delayer.createDelaySession(e.providerRequestStartDateTime),l=await this.doGetNextEdit(e,t,a,n,o,s,0);return l.isError()&&l.err instanceof Zn.GotCancelled&&n.setIsSkipped(),l.isOk()&&await this.enforceArtificialDelay(a,s),new Wv(l,s.build(l))}catch(a){return Wv.noEdit(new Zn.Unexpected(Tc(a)),s)}finally{n.setProviderEndTime()}}async doGetNextEdit(e,t,n,o,s,a,l){return this.doGetNextEditWithSelection(e,jHt(e.getActiveDocument()),t,n,o,s,a,l)}async doGetNextEditWithSelection(e,t,n,o,s,a,l,c){let u=this.tracer.sub("doGetNextEditWithSelection"),d=e.getActiveDocument();if(t===null)return pt.error(new Zn.Uncategorized(new Error("NoSelection")));let p=this.determineModelConfiguration(d),f=this.getEndpoint(p.modelName);s.setEndpointInfo(typeof f.urlOrRequestMetadata=="string"?f.urlOrRequestMetadata:JSON.stringify(f.urlOrRequestMetadata.type),f.model),l.setModelName(f.model);let m=Ie=>Math.floor(Ie.length/4),h=new Tr(t.endLineNumber,t.endColumn),g=d.documentAfterEdits.getTransformer().getOffset(h),y=d.documentAfterEdits,A=y.getLines(),b=h.lineNumber-1,E=A[b],S=h.column===E.trimEnd().length;S&&o.setExtraDebounce(this.configService.getExperimentBasedConfig(ae.Internal.InlineEditsExtraDebounceEndOfLine,this.expService)),l.setIsCursorAtLineEnd(S);let _=this.computeAreaAroundEditWindowLinesRange(A,b),x=this.configService.getExperimentBasedConfig(ae.Internal.InlineEditsXtabMaxMergeConflictLines,this.expService),I=this.computeEditWindowLinesRange(A,b,e,x,c),P=Math.max(0,b-I.start),N=d.documentAfterEdits.getTransformer().getLineLength(I.endExclusive),k=d.documentAfterEdits.getTransformer().getOffsetRange(new jt(I.start+1,1,I.endExclusive,N+1)),H=A.slice(I.start,I.endExclusive),W=!H.some(Ie=>Ie.includes(Fi.CURSOR)),V=Jt.single(Yn.insert(g,Fi.CURSOR)).applyOnText(y).getLines(),O=V.slice(I.start,I.endExclusive),B=[Fi.AREA_AROUND.start,...V.slice(_.start,I.start),Fi.EDIT_WINDOW.start,...O,Fi.EDIT_WINDOW.end,...V.slice(I.endExclusive,_.endExclusive),Fi.AREA_AROUND.end].join(`
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/dist/extension.js:1671:`&&(this.crlfOffsets.push(n),n++)}translate(e){if(this.originalEol===id.LF)return e;let t=0,n=this.crlfOffsets.length;for(;t<n;){let o=t+n>>1;this.crlfOffsets[o]<e?t=o+1:n=o}return e-t}};var FEe=class r{constructor(e,t,n,o,s,a){this.cell=e;this.blockComment=t;this.lineCommentStart=n;this.code=o;this.prefix=s;this.suffix=a;this.crlfTranslator=new BEe(e.document.getText(),e.document.eol),this.positionTransformer=new Jd(`${s}${o}${a}`);let l=this.positionTransformer.getPosition(this.positionTransformer.getText().length);this.altRange=new st(0,0,l.line,l.character),this.lineCount=this.altRange.end.line+1,this.lastLineLength=this.suffix.length===0?this.altRange.end.character:this.positionTransformer.getPosition(this.positionTransformer.getText().length-this.suffix.length).character}static fromNotebookCell(e,t,n){let o=Jh(e),s=lce(o,n),a=e.document.getText().replace(/\r\n|\n/g,mo),l=e.kind===ln.Markup?`${s}${mo}${t[0]}${mo}`:`${s}${mo}`,c=e.kind===ln.Markup?`${mo}${t[1]}`:"";return new r(e,t,n,a,l,c)}normalizeEdits(e){return e.map(t=>{let n=this.toAltRange(t.range),o=this.crlfTranslator.translate(t.rangeOffset),s=this.crlfTranslator.translate(t.rangeOffset+t.rangeLength);return{range:n,rangeLength:s-o,rangeOffset:o,text:t.text.replace(/\r\n|\n/g,mo)}})}withTextEdit(e){let t=e.apply(this.code);return new r(this.cell,this.blockComment,this.lineCommentStart,t,this.prefix,this.suffix)}get altText(){return this.positionTransformer.getText()}toAltOffsetRange(e){let t=this.toAltOffset(e.start),n=this.toAltOffset(e.end);return new et(t,n)}toAltOffset(e){let t=this.cell.kind===ln.Markup?2:1;return this.positionTransformer.getOffset(new ir(e.line+t,e.character))}toAltRange(e){let t=this.cell.kind===ln.Markup?2:1;return new st(e.start.line+t,e.start.character,e.end.line+t,e.end.character)}fromAltOffsetRange(e){let t=e.start,n=e.endExclusive,o=this.positionTransformer.getPosition(t),s=this.positionTransformer.getPosition(n),a=this.cell.kind===ln.Markup?2:1,l=this.cell.kind===ln.Markup?1:0,c=Math.max(o.line-a,0),u=this.lineCount-l-1,d=s.line,p=s.character;d>u?(p=p===0?p:-1,d=u-a):d=Math.max(s.line-a,0),d===u-a&&(p!==0&&p===-1||this.lastLineLength<p)&&(p=this.lastLineLength);let f=o.line-a>=0?o.character:0;return new st(c,f,d,p)}fromAltRange(e){let t=this.cell.kind===ln.Markup?2:1,n=this.cell.kind===ln.Markup?1:0,o=Math.max(e.start.line-t,0),a=(t?e.start.line+1<=t:!1)?0:e.start.character,l=n>0&&e.end.line===this.lineCount-1,c=l?this.lineCount-t-n-1:Math.max(e.end.line-t,0),u=this.lineCount-t-n-1,d=l?this.lastLineLength:c===u?Math.min(e.end.character,this.lastLineLength):e.end.character;return new st(o,a,c,d)}};function EGe(r,e){let t=0,n=0;return r.map(o=>{let s=e(o),a=t,l=n;return t+=s.lineCount,n+=s.altText.length+mo.length,{altCell:s,startLine:a,startOffset:l}})}var AGe=class{constructor(e,t,n,o,s){this.notebook=e;this.excludeMarkdownCells=t;this.blockComment=n;this.lineCommentStart=o;this.cells=s;this.cellTextDocuments=new Map;for(let{altCell:a}of this.cells)this.cellTextDocuments.set(a.cell.document,a.cell)}getCell(e){return this.cellTextDocuments.get(e)}getText(e){let t=this.cells.map(n=>n.altCell.altText).join(mo);return e?e.substring(t):t}fromAltRange(e){let t=Xf(this.cells,o=>o.startLine<=e.start.line);if(t===-1)return[];let n=[];for(let o=t;o<this.cells.length;o++){let{altCell:s,startLine:a}=this.cells[o];if(o===t){let l=e.start.line-a,c=e.end.line-a,u=c<=s.lineCount-1?c:s.lineCount-1,d=e.end.character;u!==c&&(d=s.altRange.end.character);let p=new st(l,e.start.character,u,d);n.push([s.cell,s.fromAltRange(p)])}else if(a+s.lineCount<=e.end.line){let l=new st(0,0,s.altRange.end.line,s.altRange.end.character);n.push([s.cell,s.fromAltRange(l)])}else if(a<e.end.line){let l=new st(0,0,e.end.line-a,e.end.character);n.push([s.cell,s.fromAltRange(l)])}}return n}fromAltOffsetRange(e){let t=Xf(this.cells,o=>o.startOffset<=e.start);if(t===-1)return[];let n=[];for(let o=t;o<this.cells.length;o++){let{altCell:s,startOffset:a}=this.cells[o];if(o===t){let l=e.endExclusive>a+s.altText.length?a+s.altText.length:e.endExclusive,c=new et(e.start-a,l-a);n.push([s.cell,s.fromAltOffsetRange(c)])}else if(a+s.altText.length<e.endExclusive){let l=new et(0,s.altText.length);n.push([s.cell,s.fromAltOffsetRange(l)])}else if(a<e.endExclusive){let l=new et(0,e.endExclusive-a);n.push([s.cell,s.fromAltOffsetRange(l)])}}return n}toAltOffset(e,t){let n=this.cells.find(o=>o.altCell.cell===e);if(n)return n.altCell.toAltOffset(t)}toAltOffsetRange(e,t){let n=0;for(let{altCell:o}of this.cells){if(o.cell===e)return t.map(s=>{let a=o.toAltOffsetRange(s);return new et(n+a.start,n+a.endExclusive)});n+=o.altText.length+mo.length}return[]}toAltRange(e,t){let n=0;for(let{altCell:o,startLine:s}of this.cells){if(o.cell===e)return t.map(a=>{let l=o.toAltRange(a);return new st(l.start.line+s,l.start.character,l.end.line+s,l.end.character)});n+=o.altText.length+mo.length}return[]}};var bGe=class r extends AGe{constructor(t,n,o,s,a){super(t,n,o,s,a);this.cells=a}static create(t,n){let o=iU(t),s=sU(t),a=t.getCells().filter(c=>!n||c.kind!==ln.Markup),l=EGe(a,c=>FEe.fromNotebookCell(c,o,s));return new r(t,n,o,s,l)}updateCells(t){this.cells.splice(0,this.cells.length,...t)}applyNotebookChanges(t){let n=sGt(this.cells,this.blockComment,this.lineCommentStart,t,this.excludeMarkdownCells)[0];this.updateCells(n)}applyCellChanges(t,n){if(n instanceof Jt?n.isEmpty():n.length===0)return;let[o]=ocn(this.cells,t,n)||[void 0,void 0];o&&this.updateCells(o)}};function ocn(r,e,t){if(t instanceof Jt?t.isEmpty():t.length===0)return;let n=r.find(a=>a.altCell.cell.document===e);if(!n)return;let o=t instanceof Jt?t:S1(n.altCell.normalizeEdits(t));return[EGe(r,a=>a.altCell.cell.document===e?a.altCell.withTextEdit(o):a.altCell),t]}function sGt(r,e,t,n,o){if(!n.length)return[r,void 0];if(n.every(l=>l.removedCells.length===0&&l.addedCells.every(c=>c.kind===ln.Markup)))return[r,void 0];let s=r.slice(),a=Jt.empty;for(let l of n){let c=l.addedCells.filter(h=>o?h.kind===ln.Code:!0).map(h=>({altCell:FEe.fromNotebookCell(h,e,t),startLine:0,startOffset:0})),u=s.slice(l.range.start,l.range.end),d=-1;l.range.isEmpty,d=l.range.start===0?-1:l.range.start-1;let p=d===-1?0:s[d].startOffset+s[d].altCell.altText.length+mo.length,f=u.map(h=>h.altCell.altText).join(mo).length,m=c.map(h=>h.altCell.altText).join(mo);p!==0&&(l.range.end<s.length||(m=`${mo}${m}`)),l.range.end<s.length&&(m&&(m+=mo),f&&(f+=mo.length)),a=a.compose(Jt.replace(new et(p,p+f),m)),s.splice(l.range.start,l.range.end-l.range.start,...c),s=EGe(s,h=>h.altCell)}return[s,a]}function aGt(r,e=!0){return bGe.create(r,e)}function lGt(r,e,t){let n=icn(r,e,t);return S1(n)}function cGt(r,e){return sGt(r.cells,r.blockComment,r.lineCommentStart,e,r.excludeMarkdownCells)[1]}function icn(r,e,t){return Gr(t.map(n=>{let o=r.getCell(e);if(!o)return;let s=r.toAltRange(o,[n.range]),a=r.toAltOffsetRange(o,[n.range]);if(!s.length||!a.length)return;let l=s[0],c=a[0];return{range:l,rangeLength:c.endExclusive-c.start,rangeOffset:c.start,text:n.text.replace(/\r\n|\n/g,mo)}}))}function BQ(r){return new Bl(r.getText())}function FQ(r){let e=r.map(t=>Yn.replace(et.ofStartAndLength(t.rangeOffset,t.rangeLength),t.text));return Jt.composeSequentialReplacements(e)}var UQ=class{constructor(e,t){this._ignoreService=e;this._configurationService=t;this._enabledLanguages=dl(this,e=>{let t=this._enabledLanguagesObs.read(e),n=new Map(Object.entries(t));return n.has("*")||n.set("*",!1),n});this._enabledLanguagesObs=this._configurationService.getConfigObservable(ae.Shared.Enable),this._ignoreCompletionsDisablement=this._configurationService.getConfigObservable(ae.Internal.InlineEditsIgnoreCompletionsDisablement)}async isTrackingEnabled(e){return!(!["file","untitled"].includes(e.uri.scheme)&&!Jo(e.uri)||scn(e)&&!this._isGhostTextEnabled(e.languageId)||await this._ignoreService.isCopilotIgnored(e.uri))}_isGhostTextEnabled(e){let t=this._enabledLanguages.get();return t.get(e)??(t.get("*")||this._ignoreCompletionsDisablement.get())}};UQ=T([v(0,At),v(1,Pe)],UQ);function scn(r){return!r.notebookType}var Yee=require("vscode");var QQ=class extends _e{constructor(t){super();this._telemetryService=t;this._documentStates=new Map;let n=new Set(["file","vscode-notebook-cell","untitled"]);function o(s){return n.has(s.uri.scheme)}this._register(Yee.workspace.onDidOpenTextDocument(s=>{if(!o(s))return;let a=s.uri.toString();this._documentStates.set(a,{text:s.getText(),linefeed:s.eol})})),this._register(Yee.workspace.onDidCloseTextDocument(s=>{if(!o(s))return;let a=s.uri.toString();this._documentStates.delete(a)})),Yee.workspace.textDocuments.forEach(s=>{if(!o(s))return;let a=s.uri.toString();this._documentStates.set(a,{text:s.getText(),linefeed:s.eol})}),this._register(Yee.workspace.onDidChangeTextDocument(s=>{o(s.document)&&this._verifyDocumentStateConsistency(s)}))}_verifyDocumentStateConsistency(t){let n=t.document.uri.toString(),o=t.document.getText(),s=this._documentStates.get(n);if(s===void 0){this._telemetryService.sendMSFTTelemetryEvent("vscode.contentChangeForUnknownDocument",{},{});return}this._documentStates.set(n,{text:o,linefeed:t.document.eol}),FQ(t.contentChanges).apply(s.text)!==o&&this._telemetryService.sendMSFTTelemetryEvent("vscode.contentChangeInconsistencyDetected",{languageId:t.document.languageId,scheme:t.document.uri.scheme,sourceOfChange:t.detailedReason?.source||""},{reason:t.reason,previousLineFeed:s.linefeed,currentLineFeed:t.document.eol})}};QQ=T([v(0,De)],QQ);var ZP=class extends EE{constructor(t,n,o,s){super();this._workspaceService=t;this._instaService=n;this._configurationService=o;this._experimentationService=s;this._openDocuments=Si(this,[]);this.openDocuments=this._openDocuments;this._store=new yt;this._filter=this._instaService.createInstance(UQ);this._markdownNotebookCells=new Kr(()=>{let t=new Oo;return Lo.workspace.notebookDocuments.forEach(n=>SGe(n.getCells(),t)),t});this._obsDocsByDocId=dl(this,t=>{let o=this._textDocsWithShouldTrackFlag.read(t).map(c=>c.obsDoc.read(t)).filter(ns),s=new Map(o.map(c=>[c.id,c]));return this._notebookDocsWithShouldTrackFlag.read(t).map(c=>c.obsDoc.read(t)).filter(ns).forEach(c=>s.set(c.id,c)),s});this._vscodeTextDocuments=acn(this._useAlternativeNotebookFormat,this._markdownNotebookCells.value);this._textDocsWithShouldTrackFlag=Hs(this,this._vscodeTextDocuments,(t,n)=>{let o=Si(this,!1),s=()=>{this._filter.isTrackingEnabled(t).then(l=>{o.set(l,void 0)}).catch(l=>{Ml(l)})},a=dl(this,l=>{if(!o.read(l))return;let c=wm.create(t.uri.toString()),u=Lo.window.visibleTextEditors.find(m=>m.document.uri.toString()===t.uri.toString()),d=new DI(c,BQ(t),t.version,[],[],iT.create(t.languageId),[],t),p=Gr((u?.selections||[]).map(m=>d.toOffsetRange(t,m))),f=Gr((u?.visibleRanges||[]).map(m=>d.toOffsetRange(t,m)));return nm(m=>{d.selection.set(p,m),d.visibleRanges.set(f,m),d.diagnostics.set(this._createTextDocumentDiagnosticData(d),m)}),d}).recomputeInitiallyAndOnChange(n);return s(),{doc:t,updateShouldTrack:s,obsDoc:a}});this._vscodeNotebookDocuments=this.getNotebookDocuments();this._altNotebookDocs=new WeakMap;this._notebookDocsWithShouldTrackFlag=Hs(this,this._vscodeNotebookDocuments,(t,n)=>{let o=Si(this,!1),s=()=>{this._filter.isTrackingEnabled(t).then(l=>{o.set(l,void 0)}).catch(l=>{Ml(l)})},a=dl(this,l=>{if(!o.read(l))return;let c=this.getAltNotebookDocument(t),u=wm.create(t.uri.toString()),d=this.getNotebookSelections(t),p=this.getNotebookVisibleRanges(t),f=this._createNotebookDiagnosticData(c),m=Ho(Xd(c.notebook)).languageId;return new QEe(u,BQ(c),t.version,d??[],p??[],iT.create(m),f,t,c)}).recomputeInitiallyAndOnChange(n);return s(),{doc:t,updateShouldTrack:s,obsDoc:a}});this._obsDocsWithUpdateIgnored=dl(this,t=>{let n=this._textDocsWithShouldTrackFlag.read(t),o=new Map(n.map(a=>[a.doc.uri.toString(),a]));return this._notebookDocsWithShouldTrackFlag.read(t).forEach(a=>{o.set(a.doc.uri.toString(),a),a.doc.getCells().filter(l=>l.kind===Lo.NotebookCellKind.Code).forEach(l=>o.set(l.document.uri.toString(),a))}),o});let a=this._configurationService.getExperimentBasedConfigObservable(ae.Internal.VerifyTextDocumentChanges,this._experimentationService);this._store.add(pi(c=>{a.read(c)&&c.store.add(this._instaService.createInstance(QQ))}));let l=new Map;this._store.add(pi(c=>{let u=this._obsDocsByDocId.read(c),d=Rnt(l,u);l=u,this._openDocuments.set([...u.values()],void 0,{added:d.added,removed:d.removed})})),this._store.add(Lo.workspace.onDidChangeTextDocument(c=>{let u=this._getDocumentByDocumentAndUpdateShouldTrack(c.document.uri);if(u)if(u instanceof DI){let d=FQ(c.contentChanges),p=new aT(d.replacements,sT.create(c.detailedReason?.metadata));nm(f=>{u.languageId.set(iT.create(c.document.languageId),f),u.value.set(BQ(c.document),f,p),u.version.set(c.document.version,f)})}else{let d=lGt(u.altNotebook,c.document,c.contentChanges);u.altNotebook.applyCellChanges(c.document,c.contentChanges);let p=new aT(d.replacements,sT.create(c.detailedReason?.metadata));nm(f=>{u.value.set(BQ(u.altNotebook),f,p),u.version.set(u.notebook.version,f)})}})),this._useAlternativeNotebookFormat&&this._store.add(Lo.workspace.onDidOpenNotebookDocument(c=>SGe(c.getCells(),this._markdownNotebookCells.value))),this._store.add(Lo.workspace.onDidChangeNotebookDocument(c=>{let u=this._getDocumentByDocumentAndUpdateShouldTrack(c.notebook.uri);if(!u||!c.contentChanges.length||u instanceof DI)return;let d=cGt(u.altNotebook,c.contentChanges);if(!d)return;u.altNotebook.applyNotebookChanges(c.contentChanges);let p=new aT(d.replacements,sT.unknown);nm(f=>{u.value.set(BQ(u.altNotebook),f,p),u.version.set(u.notebook.version,f)}),this._useAlternativeNotebookFormat&&(c.contentChanges.map(f=>f.removedCells).flat().forEach(f=>{this._markdownNotebookCells.value.delete(f.document.uri)}),SGe(c.contentChanges.map(f=>f.addedCells).flat(),this._markdownNotebookCells.value))})),this._store.add(Lo.window.onDidChangeTextEditorSelection(c=>{let u=this._getDocumentByDocumentAndUpdateShouldTrack(c.textEditor.document.uri);if(!u)return;let d=u instanceof DI?Gr(c.selections.map(p=>u.toOffsetRange(c.textEditor.document,p))):this.getNotebookSelections(u.notebook,c.textEditor);u.selection.set(d,void 0)})),this._store.add(Lo.window.onDidChangeTextEditorVisibleRanges(c=>{let u=this._getDocumentByDocumentAndUpdateShouldTrack(c.textEditor.document.uri);if(!u)return;let d=u instanceof DI?Gr(c.visibleRanges.map(p=>u.toOffsetRange(c.textEditor.document,p))):this.getNotebookVisibleRanges(u.notebook);u.visibleRanges.set(d,void 0)})),this._store.add(Lo.languages.onDidChangeDiagnostics(c=>{c.uris.forEach(u=>{let d=this._getDocumentByDocumentAndUpdateShouldTrack(u);if(!d)return;let p=d instanceof DI?this._createTextDocumentDiagnosticData(d):this._createNotebookDiagnosticData(d.altNotebook);d.diagnostics.set(p,void 0)})}))}get _useAlternativeNotebookFormat(){return this._configurationService.getExperimentBasedConfig(ae.Internal.UseAlternativeNESNotebookFormat,this._experimentationService)||this._configurationService.getExperimentBasedConfig(ae.UseAlternativeNESNotebookFormat,this._experimentationService)}dispose(){this._store.dispose()}getNotebookDocuments(){return this._useAlternativeNotebookFormat?lcn():Si("",[])}getAltNotebookDocument(t){let n=this._altNotebookDocs.get(t);return n||(n=aGt(t,!0),this._altNotebookDocs.set(t,n)),n}getNotebookSelections(t,n){let o=this.getAltNotebookDocument(t),s=new Map(Lo.window.visibleTextEditors.map(u=>[u.document,u])),a=Lo.window.activeNotebookEditor?.selection,l=n?o.getCell(n.document):a&&a.start<t.cellCount?t.cellAt(a.start):void 0,c=l?s.get(l.document):void 0;return c&&l?o.toAltOffsetRange(l,c.selections):[]}getNotebookVisibleRanges(t){let n=this.getAltNotebookDocument(t),o=new Map(Lo.window.visibleTextEditors.map(a=>[a.document,a]));return Gr(t.getCells().map(a=>o.has(a.document)?[a,o.get(a.document)]:void 0)).flatMap(a=>n.toAltOffsetRange(a[0],a[1].visibleRanges))}_getDocumentByDocumentAndUpdateShouldTrack(t){let n=this._getInternalDocument(t);if(n)return n.updateShouldTrack(),n.obsDoc.get()}_getInternalDocument(t,n){return this._obsDocsWithUpdateIgnored.read(n).get(t.toString())}_createTextDocumentDiagnosticData(t){return Lo.languages.getDiagnostics(t.textDocument.uri).map(n=>this._createDiagnosticData(n,t)).filter(ns)}_createDiagnosticData(t,n){return qEe(t,n.textDocument.uri,o=>n.toOffsetRange(n.textDocument,o))}_createNotebookDiagnosticData(t){return Gr(t.notebook.getCells().flatMap(n=>Lo.languages.getDiagnostics(n.document.uri).map(o=>this._createNotebookCellDiagnosticData(o,t,n.document))))}_createNotebookCellDiagnosticData(t,n,o){let s=n.getCell(o);if(s)return qEe(t,n.notebook.uri,a=>{let l=n.toAltOffsetRange(s,[a]);return l.length?l[0]:void 0})}getDocumentByTextDocument(t,n){this._store.assertNotDisposed();let o=this._getInternalDocument(t.uri,n);if(o)return o.obsDoc.get()}getWorkspaceRoot(t){let n=t.toUri();if(n.scheme===Et.vscodeNotebookCell){let o=Eo(n,this._workspaceService.notebookDocuments);o&&(n=o.uri)}return Lo.workspace.getWorkspaceFolder(n)?.uri}};ZP=T([v(0,Oe),v(1,K),v(2,Pe),v(3,nt)],ZP);var UEe=class{constructor(e,t,n,o,s,a,l){this.id=e;this.value=Si(this,t),this.version=Si(this,n),this.selection=Si(this,o),this.visibleRanges=Si(this,s),this.languageId=Si(this,a),this.diagnostics=Si(this,l)}},DI=class extends UEe{constructor(t,n,o,s,a,l,c,u){super(t,n,o,s,a,l,c);this.textDocument=u}fromOffsetRange(t,n){let o=this.textDocument,s;if(t instanceof et?s=t:n!==void 0&&(o=t,s=n),o!==this.textDocument)throw new Error("TextDocument does not match the one of this observable document.");if(!s)throw new Error("OffsetRange is not defined.");let a=new Lo.Range(o.positionAt(s.start),o.positionAt(s.endExclusive));return t instanceof et?[[this.textDocument,a]]:a}toOffsetRange(t,n){return new et(t.offsetAt(n.start),t.offsetAt(n.end))}fromRange(t,n){if(t instanceof Lo.Range)return[[this.textDocument,t]];if(n!==void 0){if(t!==this.textDocument)throw new Error("TextDocument does not match the one of this observable document.");return n}else return}toRange(t,n){return n}async getCodeActions(t,n,o){let s=this.fromOffsetRange(this.textDocument,t);return s?(await qc(Qc(dGt(this.textDocument.uri,s,n),o),1e3))?.map(l=>uGt(l,this,c=>this.toOffsetRange(this.textDocument,c))):void 0}},QEe=class extends UEe{constructor(t,n,o,s,a,l,c,u,d){super(t,n,o,s,a,l,c);this.notebook=u;this.altNotebook=d}fromOffsetRange(t,n){if(t instanceof et)return this.altNotebook.fromAltOffsetRange(t).map(o=>[o[0].document,o[1]]);if(n!==void 0){if(!this.altNotebook.getCell(t))return;let a=this.altNotebook.fromAltOffsetRange(n).find(l=>l[0].document===t);return a?a[1]:void 0}}fromRange(t,n){if(t instanceof Lo.Range)return this.altNotebook.fromAltRange(t).map(o=>[o[0].document,o[1]]);if(n!==void 0){if(!this.altNotebook.getCell(t))return;let a=this.altNotebook.fromAltRange(n).find(l=>l[0].document===t);return a?a[1]:void 0}}toOffsetRange(t,n){let o=this.altNotebook.getCell(t);if(!o)return;let s=this.altNotebook.toAltOffsetRange(o,[n]);return s.length?s[0]:void 0}toRange(t,n){let o=this.altNotebook.getCell(t);if(!o)return;let s=this.altNotebook.toAltRange(o,[n]);return s.length>0?s[0]:void 0}async getCodeActions(t,n,o){let s=this.fromOffsetRange(t);if(!(!s||s.length===0))return Promise.all(s.map(async([a,l])=>{let c=this.altNotebook.getCell(a);return c?(await qc(Qc(dGt(a.uri,l,n),o),1e3))?.map(d=>uGt(d,this,p=>{let f=this.altNotebook.toAltOffsetRange(c,[p]);return f.length?f[0]:void 0})):void 0})).then(a=>Gr(a.flat()))}};function acn(r,e){return fi(void 0,t=>{let n=Lo.workspace.onDidOpenTextDocument(t),o=Lo.workspace.onDidCloseTextDocument(t);return{dispose:()=>{n.dispose(),o.dispose()}}},()=>r?Lo.workspace.textDocuments.filter(t=>t.uri.scheme!==Et.vscodeNotebookCell||e.has(t.uri)):Lo.workspace.textDocuments)}function lcn(){return fi(void 0,r=>{let e=Lo.workspace.onDidOpenNotebookDocument(r),t=Lo.workspace.onDidCloseNotebookDocument(r);return{dispose:()=>{e.dispose(),t.dispose()}}},()=>Lo.workspace.notebookDocuments)}function SGe(r,e){r.forEach(t=>{t.kind===Lo.NotebookCellKind.Markup&&e.add(t.document.uri)})}function qEe(r,e,t){if(!r.source||r.severity!==Lo.DiagnosticSeverity.Error&&r.severity!==Lo.DiagnosticSeverity.Warning)return;let n=t(r.range);if(n)return new OEe(e,r.message,r.severity===Lo.DiagnosticSeverity.Error?"error":"warning",n,r.code&&typeof r.code!="number"&&typeof r.code!="string"?r.code.value:r.code,r.source)}function uGt(r,e,t){let n=e.id.toUri(),o=Gr((r.diagnostics||[]).map(l=>qEe(l,n,t))).concat(ccn(r,n,t)),s=ucn(r,e);if(s){let l=e.value.get();s=s.filter(c=>l.getValueOfRange(c.range)!==c.text)}return new MEe(r.title,o,s)}function ccn(r,e,t){let n=r.command?.arguments||[];return Gr(n.map(o=>{if(o&&typeof o=="object"&&"diagnostic"in o){let s=o.diagnostic;if(s&&typeof s=="object"&&"range"in s&&"message"in s&&"severity"in s)return qEe(s,e,t)}}))}function ucn(r,e){let t=r.edit;if(t){if(e instanceof DI)return t.get(e.id.toUri()).map(n=>XHe(n.range,n.newText));if(e instanceof QEe){let n=Gr(e.notebook.getCells().flatMap(o=>t.get(o.document.uri).map(s=>{let a=e.toRange(o.document,s.range);return a?XHe(a,s.newText):void 0})));return n.length?n:void 0}}}async function dGt(r,e,t){return Aot(()=>Lo.commands.executeCommand("vscode.executeCodeActionProvider",r,e,Lo.CodeActionKind.QuickFix.value,t))}function pGt(r){let e=Si("overrideObs",void 0);return aPe(e,t=>e.read(t)??r.read(t),(t,n)=>{e.set(t,n)})}var dcn=!1,pcn="github.copilot.chat.enableEnhancedNotebookNES",qQ=class extends _e{constructor(t,n,o,s,a,l,c,u){super();this._vscodeExtensionContext=t;this._configurationService=n;this._authenticationService=o;this._expService=s;this._envService=a;this._logService=l;this._instantiationService=c;this._inlineEditsProviderId=pGt(this._configurationService.getExperimentBasedConfigObservable(ae.Internal.InlineEditsProviderId,this._expService));this._hideInternalInterface=this._configurationService.getConfigObservable(ae.Internal.InlineEditsHideInternalInterface);this._enableDiagnosticsProvider=this._configurationService.getExperimentBasedConfigObservable(ae.InlineEditsEnableDiagnosticsProvider,this._expService);this._enableCompletionsProvider=this._configurationService.getExperimentBasedConfigObservable(ae.Internal.InlineEditsEnableCompletionsProvider,this._expService);this._yieldToCopilot=this._configurationService.getExperimentBasedConfigObservable(ae.Internal.InlineEditsYieldToCopilot,this._expService);this._excludedProviders=this._configurationService.getExperimentBasedConfigObservable(ae.Internal.InlineEditsExcludedProviders,this._expService).map(t=>t?t.split(",").map(n=>n.trim()).filter(n=>n!==""):[]);this._copilotToken=fi(this,this._authenticationService.onDidAuthenticationChange,()=>this._authenticationService.copilotToken);this.inlineEditsEnabled=dl(this,t=>{let n=this._copilotToken.read(t);return!(n===void 0||n.isCompletionsQuotaExceeded)});this._internalActionsEnabled=dl(this,t=>!!this._copilotToken.read(t)?.isInternal&&!this._hideInternalInterface.read(t));this.inlineEditsLogFileEnabled=this._configurationService.getConfigObservable(ae.Internal.InlineEditsLogContextRecorderEnabled);this._workspace=uPe(this,t=>this._instantiationService.createInstance(ZP));let p=Rl(["NES","Feature"],g=>this._logService.trace(g)).sub("constructor"),f="copilot.chat.nextEdits.hasEnabledNesInSettings",m=this._configurationService.getExperimentBasedConfig(ae.Internal.UseAlternativeNESNotebookFormat,u)||this._configurationService.getExperimentBasedConfig(ae.UseAlternativeNESNotebookFormat,u),h=qJ(this);Yv.commands.executeCommand("setContext",pcn,m),this._register(pi(g=>{let y=this._copilotToken.read(g);y!==void 0&&this._expService.getTreatmentVariable("copilotchat.enableNesInSettings")&&this._vscodeExtensionContext.globalState.get(f)!==!0&&!y.isFreeUser&&(this._vscodeExtensionContext.globalState.update(f,!0),this._configurationService.isConfigured(ae.InlineEditsEnabled)||this._configurationService.setConfig(ae.InlineEditsEnabled,!0))})),this._register(pi(g=>{if(!this.inlineEditsEnabled.read(g))return;let y=g.store.add(this._instantiationService.createInstance(OQ)),A=this._inlineEditsProviderId.read(g),b=this._workspace.read(g),E=g.store.add(this._instantiationService.createInstance($P)),S=new $0e(b,E),_;this._enableDiagnosticsProvider.read(g)&&(_=g.store.add(this._instantiationService.createInstance(NQ,b,E)));let x=this._enableCompletionsProvider.read(g)?g.store.add(this._instantiationService.createInstance(bQ,b)):void 0,I=g.store.add(this._instantiationService.createInstance(MQ,A,b,S,_,x)),P=Qn(this._vscodeExtensionContext.globalStorageUri.fsPath,"logContextRecordings"),N=this.inlineEditsLogFileEnabled?g.store.add(this._instantiationService.createInstance(bEe,P,y)):void 0,k=g.store.add(new gEe(this._internalActionsEnabled,this.inlineEditsEnabled,I.debugRecorder,this._inlineEditsProviderId)),H=this._register(this._instantiationService.createInstance(EQ)),D=this._instantiationService.createInstance(LQ,I,y,N,k,H),W=h.read(g),w=this._excludedProviders.read(g);if(W?.modelUnification&&(w=w.slice(0),w.includes("completions")||w.push("completions"),w.includes("github.copilot")||w.push("github.copilot")),g.store.add(Yv.languages.registerInlineCompletionItemProvider("*",D,{displayName:D.displayName,yieldTo:this._yieldToCopilot.read(g)?["github.copilot"]:void 0,debounceDelayMs:0,groupId:"nes",excludes:w})),dcn){let R=new LEe(I.workspace);g.store.add(Yv.window.onDidChangeActiveTextEditor(V=>{V!==void 0&&R.hadEditsRecently&&I.onChange.trigger(void 0)})),g.store.add(R)}g.store.add(Yv.commands.registerCommand(mGe,()=>{this._envService.openExternal(Fe.parse(hGe))})),g.store.add(Yv.commands.registerCommand(fcn,()=>{I.nextEditProvider.clearCache()})),g.store.add(Yv.commands.registerCommand(mcn,()=>{let R=Yv.window.activeNotebookEditor,V=Yv.window.activeTextEditor?.document;if(!R||!V||!$b(V.uri))return;let O=I.workspace.getDocumentByTextDocument(V);if(!R.selection||!O)return;let ne=new lQ(O.id.uri,V.version,void 0);ne.recordingBookmark=I.debugRecorder.createBookmark(),Yv.commands.executeCommand(hEe,{logContext:ne})}))})),p.returns()}};qQ=T([v(0,ar),v(1,Pe),v(2,ft),v(3,nt),v(4,Mt),v(5,ue),v(6,K),v(7,nt)],qQ);var mGe="github.copilot.debug.inlineEdit.learnMore",hGe="https://aka.ms/vscode-nes",fcn="github.copilot.debug.inlineEdit.clearCache",mcn="github.copilot.debug.inlineEdit.reportNotebookNESIssue";var _Ge=z(Ht()),Rp=z(require("vscode"));var VQ=class extends _e{constructor(e,t,n){super();let o=this._register(new yt);hcn(o,t,e),gcn(e,n,o)}};VQ=T([v(0,AS),v(1,De),v(2,Pe)],VQ);function hcn(r,e,t){function n(s){return t.getLastFailureFor(s)||Zf(s.children,([,l])=>n(l))}r.add(Rp.commands.registerCommand("github.copilot.tests.fixTestFailure.fromInline",s=>{let a=n(s);a&&o({message:a.task.messages[0],test:a.snapshot,source:"testResultsPanel"})})),r.add(Rp.commands.registerCommand("github.copilot.tests.fixTestFailure",o));async function o(s){if(!s.test.uri)return;e.sendMSFTTelemetryEvent("intent.fixTestFailure.actioned",{source:s.source??"testResultsPanel"});let a=await Rp.workspace.openTextDocument(s.test.uri);await Rp.window.showTextDocument(a,{preserveFocus:!1,preview:!0,selection:s.test.range?new Rp.Range(s.test.range.start,s.test.range.start):void 0}),await Rp.commands.executeCommand("vscode.editorChat.start",{message:"/fix the #testFailure",autoSend:!0})}}function gcn(r,e,t){t.add(Rp.languages.registerCodeActionsProvider("*",{provideCodeActions(n,o,s,a){if(!e.getConfig(ae.EnableCodeActions))return;let c=r.getFailureAtPosition(n.uri,o.start);if(!c)return;let u=new Rp.CodeAction(_Ge.t("Fix test failure"),Rp.CodeActionKind.QuickFix);return u.isAI=!0,u.command={title:_Ge.t("Fix test failure"),command:"github.copilot.tests.fixTestFailure",arguments:[{message:c.task.messages[0],test:c.snapshot,source:"sparkles"}]},[u]}}))}var Xc=z(require("vscode"));var ek=class{constructor(e,t){this.logService=e;this.parserService=t;this.store=new yt,this.onDidChangeCodeLenses=Xc.tests.onDidChangeTestResults}static{this.codeLensTitle=Xc.l10n.t("Generate tests using Copilot")}static isEnabled(e){return e.getConfig(ae.GenerateTestsCodeLens)}dispose(){this.store.dispose()}provideCodeLenses(e,t){return this.computeCodeLens(e,t)}async computeCodeLens(e,t){if(e.uri.scheme==="output")return[];let n=Xc.tests.testResults;if(n.length===0)return this.logService.trace("No test results"),[];let o=n[0],s;try{s=await o.getDetailedCoverage?.(e.uri,t)}catch(l){return this.logService.error(l),[]}if(!s||s.length===0)return[];let a=[];for(let l of s)if(l instanceof Xc.DeclarationCoverage){if(this.logService.trace(`Received statement coverage for ${l.name}. (detail.executed: ${l.executed})`),!!l.executed)continue;let u=l.location instanceof Xc.Range?l.location:new Xc.Range(l.location,l.location);a.push(this.createCodeLens(e,u))}else l instanceof Xc.StatementCoverage?this.logService.trace("Received statement coverage; did nothing"):this.logService.error("Unexpected coverage type");if(a.length===0){let l=this.parserService.getTreeSitterAST(e);if(l===void 0)return a;let c=await l.getTestableNodes();if(c===null)return a;let u=s.flatMap(p=>p.executed?[]:p.location instanceof Xc.Position?[p.location.line]:this.toLineNumbers(p.location)),d=new Set(u);for(let p of c){let f=e.positionAt(p.node.startIndex),m=e.positionAt(p.node.endIndex),h=new Xc.Range(f,m);Ese(f.line,m.line).every(g=>d.has(g))&&a.push(this.createCodeLens(e,h))}}return a}createCodeLens(e,t){return new Xc.CodeLens(t,{title:ek.codeLensTitle,command:"github.copilot.chat.generateTests",arguments:[{document:e,selection:t}]})}toLineNumbers(e){let t=[];for(let n=e.start.line;n<=e.end.line;n++)t.push(n);return t}};ek=T([v(0,ue),v(1,Lr)],ek);var HQ=class extends _e{constructor(e,t){if(super(),ek.isEnabled(e)){let n=this._register(t.createInstance(ek));this._register(Xc.languages.registerCodeLensProvider("*",n))}}};HQ=T([v(0,Pe),v(1,K)],HQ);var cXt=z(require("dns")),hYe=z(require("http")),gYe=z(require("https")),G_e=z(require("tls")),uXt=z(require("util")),xc=z(require("vscode"));var tk=class extends dae{constructor(e,t){super(process.env.HMAC_SECRET,!!process.env.FORCE_DEV_INTEGRATION,e,t)}};tk=T([v(0,rr),v(1,Mt)],tk);var vcn=z(require("http")),ycn=z(require("https"));var eO=class{constructor(e,t){this._envService=e;this._userAgentLibraryUpdate=t}getUserAgentLibrary(){return"node-http"}fetch(e,t){let n={...t.headers};n["User-Agent"]=`GitHubCopilotChat/${this._envService.getVersion()}`,n[eue]=this._userAgentLibraryUpdate?this._userAgentLibraryUpdate(this.getUserAgentLibrary()):this.getUserAgentLibrary();let o=t.body;if(t.json){if(t.body)throw new Error("Illegal arguments! Cannot pass in both 'body' and 'json'!");n["Content-Type"]="application/json",o=JSON.stringify(t.json)}let s=t.method||"GET";if(s!=="GET"&&s!=="POST")throw new Error("Illegal arguments! 'method' must be either 'GET' or 'POST'!");let a=t.signal??new AbortController().signal;if(a&&!(a instanceof AbortSignal))throw new Error("Illegal arguments! 'signal' must be an instance of AbortSignal!");return this._fetch(e,s,n,o,a)}_fetch(e,t,n,o,s){return new Promise((a,l)=>{let u=(e.startsWith("https:")?ycn:vcn).request(e,{method:t,headers:n},d=>{if(s.aborted){d.destroy(),u.destroy(),l(CGe(s));return}let p=new TGe(u,d,s);a(new wb(d.statusCode||0,d.statusMessage||"",p.headers,async()=>p.text(),async()=>p.json(),async()=>p.body()))});u.setTimeout(60*1e3),u.on("error",l),o&&u.write(o),u.end()})}async disconnectAll(){}makeAbortController(){return new AbortController}isAbortError(e){return Acn(e)}isInternetDisconnectedError(e){return!1}isFetcherError(e){return e&&["EADDRINUSE","ECONNREFUSED","ECONNRESET","ENOTFOUND","EPIPE","ETIMEDOUT"].includes(e.code)}getUserMessageForFetcherError(e){return`Please check your firewall rules and network connection then try again. Error Code: ${e.code}.`}};function CGe(r){return r.reason}function Acn(r){return r&&r.name==="AbortError"}var TGe=class{constructor(e,t,n){this.req=e;this.res=t;this.signal=n;this.headers=new class{get(o){let s=t.headers[o];return Array.isArray(s)?s[0]:s??null}[Symbol.iterator](){let o=Object.keys(t.headers),s=0;return{next:()=>{if(s>=o.length)return{done:!0,value:void 0};let a=o[s++];return{done:!1,value:[a,this.get(a)]}}}}}}text(){return new Promise((e,t)=>{let n=[];this.res.on("data",o=>n.push(o)),this.res.on("end",()=>e(Buffer.concat(n).toString())),this.res.on("error",t),this.signal.addEventListener("abort",()=>{this.res.destroy(),this.req.destroy(),t(CGe(this.signal))})})}async json(){let e=await this.text();return JSON.parse(e)}async body(){return this.signal.addEventListener("abort",()=>{this.res.emit("error",CGe(this.signal)),this.res.destroy(),this.req.destroy()}),this.res}};var sXt=z(iXt());var fYe=require("stream");var Pq=class{constructor(e,t,n){this._fetchImpl=e;this._envService=t;this.userAgentLibraryUpdate=n}async fetch(e,t){let n={...t.headers};n["User-Agent"]=`GitHubCopilotChat/${this._envService.getVersion()}`,n[eue]=this.userAgentLibraryUpdate?this.userAgentLibraryUpdate(this.getUserAgentLibrary()):this.getUserAgentLibrary();let o=t.body;if(t.json){if(t.body)throw new Error("Illegal arguments! Cannot pass in both 'body' and 'json'!");n["Content-Type"]="application/json",o=JSON.stringify(t.json)}let s=t.method||"GET";if(s!=="GET"&&s!=="POST")throw new Error("Illegal arguments! 'method' must be either 'GET' or 'POST'!");let a=t.signal??new AbortController().signal;if(a&&!(a instanceof AbortSignal))throw new Error("Illegal arguments! 'signal' must be an instance of AbortSignal!");return this._fetch(e,s,n,o,a)}async _fetch(e,t,n,o,s){let a=await this._fetchImpl(e,{method:t,headers:n,body:o,signal:s});return new wb(a.status,a.statusText,a.headers,()=>a.text(),()=>a.json(),async()=>a.body?fYe.Readable.fromWeb(a.body):fYe.Readable.from([]))}async disconnectAll(){}makeAbortController(){return new AbortController}isAbortError(e){return e&&e.name==="AbortError"}getUserMessageForFetcherError(e){return`Please check your firewall rules and network connection then try again. Error Code: ${e.message}.`}};var PO=class extends Pq{constructor(e,t){super(HSn(),e,t)}getUserAgentLibrary(){return"node-fetch"}isInternetDisconnectedError(e){return!1}isFetcherError(e){let t=e?.code||e?.cause?.code;return t&&["EADDRINUSE","ECONNREFUSED","ECONNRESET","ENOTFOUND","EPIPE","ETIMEDOUT"].includes(t)}};function HSn(){let r=globalThis.__vscodePatchedFetch||globalThis.fetch;return function(e,t){return r(e,{dispatcher:GSn.value,...t})}}var GSn=new Kr(()=>new sXt.Agent({allowH2:!0}));var kO=class r extends Pq{static create(e,t){let n=WSn();return n?new r(n.fetch,e,t):null}getUserAgentLibrary(){return"electron-fetch"}isInternetDisconnectedError(e){return["net::ERR_INTERNET_DISCONNECTED","net::ERR_NETWORK_IO_SUSPENDED"].includes(e?.message)}isFetcherError(e){return e&&e.message&&e.message.startsWith("net::")}};function WSn(){try{return require("electron").net}catch{}}var mYe=require("stream");var jSn={"electron-fetch":ae.Shared.DebugUseElectronFetcher,"node-fetch":ae.Shared.DebugUseNodeFetchFetcher,"node-http":ae.Shared.DebugUseNodeFetcher};async function lXt(r,e,t,n,o,s){if(t.retryFallbacks&&r.length>1){let l,c=new Set;for(let u of r){let d=await aXt(u,e,t,s);if(u===r[0]&&(l=d),!d.ok){c.add(u.getUserAgentLibrary());continue}if(u!==r[0]){let p=await aXt(r[0],e,t,s);if(p.ok)return{response:p.response};s.info(`FetcherService: using ${u.getUserAgentLibrary()} from now on`);let f=r.slice();return f.splice(f.indexOf(u),1),f.unshift(u),{response:d.response,updatedFetchers:f,updatedKnownBadFetchers:c}}return{response:d.response}}if("response"in l)return{response:l.response};throw l.err}let a=r[0];if(t.useFetcher)if(n.has(t.useFetcher))s.trace(`FetcherService: not using requested fetcher ${t.useFetcher} as it is known to be failing, using ${a.getUserAgentLibrary()} instead.`);else{let l=jSn[t.useFetcher];if(l&&o.inspectConfig(l)?.globalValue===!1)s.trace(`FetcherService: not using requested fetcher ${t.useFetcher} as it is disabled in user settings, using ${a.getUserAgentLibrary()} instead.`);else{let c=r.find(u=>u.getUserAgentLibrary()===t.useFetcher);c?(a=c,s.trace(`FetcherService: using ${t.useFetcher} as requested.`)):s.info(`FetcherService: could not find requested fetcher ${t.useFetcher}, using ${a.getUserAgentLibrary()} instead.`)}}return{response:await a.fetch(e,t)}}async function aXt(r,e,t,n){try{let o=await r.fetch(e,t);if(!o.ok)return n.info(`FetcherService: ${r.getUserAgentLibrary()} failed with status: ${o.status} ${o.statusText}`),{ok:!1,response:o};if(!t.expectJSON)return n.debug(`FetcherService: ${r.getUserAgentLibrary()} succeeded (not JSON)`),{ok:o.ok,response:o};let s=await o.text();try{let a=JSON.parse(s);return n.debug(`FetcherService: ${r.getUserAgentLibrary()} succeeded (JSON)`),{ok:!0,response:new wb(o.status,o.statusText,o.headers,async()=>s,async()=>a,async()=>mYe.Readable.from([s]))}}catch(a){return n.info(`FetcherService: ${r.getUserAgentLibrary()} failed to parse JSON: ${a.message}`),{ok:!1,err:a,response:new wb(o.status,o.statusText,o.headers,async()=>s,async()=>{throw a},async()=>mYe.Readable.from([s]))}}}catch(o){return n.info(`FetcherService: ${r.getUserAgentLibrary()} failed with error: ${o.message}`),{ok:!1,err:o}}}var XS=class{constructor(e,t,n,o){this._logService=t;this._envService=n;this._configurationService=o;this._knownBadFetchers=new Set;this._availableFetchers=e?[e]:void 0}setExperimentationService(e){this._experimentationService=e}_getAvailableFetchers(){return this._availableFetchers||(this._experimentationService?this._logService.debug("FetcherService: Using experimentation service to determine fetcher configuration."):this._logService.info("FetcherService: Experimentation service not available yet, using default fetcher configuration."),this._availableFetchers=this._getFetchers(this._configurationService,this._experimentationService,this._envService)),this._availableFetchers}_getFetchers(e,t,n){let o=DO(e,t,ae.Shared.DebugUseElectronFetcher,ae.Internal.DebugExpUseElectronFetcher),s=kO.create(n),a=!(o&&s)&&DO(e,t,ae.Shared.DebugUseNodeFetcher,ae.Internal.DebugExpUseNodeFetcher),l=!(o&&s)&&!a&&DO(e,t,ae.Shared.DebugUseNodeFetchFetcher,ae.Internal.DebugExpUseNodeFetchFetcher),c=[];s&&c.push(s),o&&(s?this._logService.info("Using the Electron fetcher."):this._logService.info("Can't use the Electron fetcher in this environment."));let u=new PO(n);l?(this._logService.info("Using the Node fetch fetcher."),c.unshift(u)):c.push(u);let d=new eO(n);return a||!(o&&s)&&!l?(this._logService.info("Using the Node fetcher."),c.unshift(d)):c.push(d),c}getUserAgentLibrary(){return this._getAvailableFetchers()[0].getUserAgentLibrary()}async fetch(e,t){let{response:n,updatedFetchers:o,updatedKnownBadFetchers:s}=await lXt(this._getAvailableFetchers(),e,t,this._knownBadFetchers,this._configurationService,this._logService);return o&&(this._availableFetchers=o),s&&(this._knownBadFetchers=s),n}disconnectAll(){return this._getAvailableFetchers()[0].disconnectAll()}makeAbortController(){return this._getAvailableFetchers()[0].makeAbortController()}isAbortError(e){return this._getAvailableFetchers()[0].isAbortError(e)}isInternetDisconnectedError(e){return this._getAvailableFetchers()[0].isInternetDisconnectedError(e)}isFetcherError(e){return this._getAvailableFetchers()[0].isFetcherError(e)}getUserMessageForFetcherError(e){return this._getAvailableFetchers()[0].getUserMessageForFetcherError(e)}};XS=T([v(1,ue),v(2,Mt),v(3,Pe)],XS);function DO(r,e,t,n){if(!e)return r.getConfig(t);let o=r.inspectConfig(t);if(o?.globalValue!==void 0)return o.globalValue;let s=r.getExperimentBasedConfig(n,e);return s!==void 0?s:r.getConfig(t)}var kq=class{constructor(e,t,n,o,s,a,l,c){this._context=e;this.envService=t;this.configurationService=n;this.experimentationService=o;this.authService=s;this.capiClientService=a;this.fetcherService=l;this.logService=c;this._context.subscriptions.push(xc.commands.registerCommand("github.copilot.debug.collectDiagnostics",async()=>{let u=await xc.workspace.openTextDocument({language:"markdown"}),d=await xc.window.showTextDocument(u),p=DO(this.configurationService,this.experimentationService,ae.Shared.DebugUseElectronFetcher,ae.Internal.DebugExpUseElectronFetcher),f=DO(this.configurationService,this.experimentationService,ae.Shared.DebugUseNodeFetcher,ae.Internal.DebugExpUseNodeFetcher),m=DO(this.configurationService,this.experimentationService,ae.Shared.DebugUseNodeFetchFetcher,ae.Internal.DebugExpUseNodeFetchFetcher);await ba(d,`## GitHub Copilot Chat
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/dist/extension.js:1714:`).reduce(V_n,Object.create(null)),V_n=(r,e)=>{let t=parseInt(e,10);if(t!==Buffer.byteLength(e)+1)return r;e=e.slice((t+" ").length);let n=e.split("="),o=n.shift();if(!o)return r;let s=o.replace(/^SCHILY\.(dev|ino|nlink)/,"$1"),a=n.join("=");return r[s]=/^([A-Z]+\.)?([mac]|birth|creation)time$/.test(s)?new Date(Number(a)*1e3):/^[0-9]+$/.test(a)?+a:a,r};var H_n=process.env.TESTING_TAR_FAKE_PLATFORM||process.platform,jn=H_n!=="win32"?r=>r:r=>r&&r.replace(/\\/g,"/");var Hq=class extends iy{extended;globalExtended;header;startBlockSize;blockRemain;remain;type;meta=!1;ignore=!1;path;mode;uid;gid;uname;gname;size=0;mtime;atime;ctime;linkpath;dev;ino;nlink;invalid=!1;absolute;unsupported=!1;constructor(e,t,n){switch(super({}),this.pause(),this.extended=t,this.globalExtended=n,this.header=e,this.remain=e.size??0,this.startBlockSize=512*Math.ceil(this.remain/512),this.blockRemain=this.startBlockSize,this.type=e.type,this.type){case"File":case"OldFile":case"Link":case"SymbolicLink":case"CharacterDevice":case"BlockDevice":case"Directory":case"FIFO":case"ContiguousFile":case"GNUDumpDir":break;case"NextFileHasLongLinkpath":case"NextFileHasLongPath":case"OldGnuLongPath":case"GlobalExtendedHeader":case"ExtendedHeader":case"OldExtendedHeader":this.meta=!0;break;default:this.ignore=!0}if(!e.path)throw new Error("no path provided for tar.ReadEntry");this.path=jn(e.path),this.mode=e.mode,this.mode&&(this.mode=this.mode&4095),this.uid=e.uid,this.gid=e.gid,this.uname=e.uname,this.gname=e.gname,this.size=this.remain,this.mtime=e.mtime,this.atime=e.atime,this.ctime=e.ctime,this.linkpath=e.linkpath?jn(e.linkpath):void 0,this.uname=e.uname,this.gname=e.gname,t&&this.#e(t),n&&this.#e(n,!0)}write(e){let t=e.length;if(t>this.blockRemain)throw new Error("writing more to entry than is appropriate");let n=this.remain,o=this.blockRemain;return this.remain=Math.max(0,n-t),this.blockRemain=Math.max(0,o-t),this.ignore?!0:n>=t?super.write(e):super.write(e.subarray(0,n))}#e(e,t=!1){e.path&&(e.path=jn(e.path)),e.linkpath&&(e.linkpath=jn(e.linkpath)),Object.assign(this,Object.fromEntries(Object.entries(e).filter(([n,o])=>!(o==null||n==="path"&&t))))}};var VO=(r,e,t,n={})=>{r.file&&(n.file=r.file),r.cwd&&(n.cwd=r.cwd),n.code=t instanceof Error&&t.code||e,n.tarCode=e,!r.strict&&n.recoverable!==!1?(t instanceof Error&&(n=Object.assign(t,n),t=t.message),r.emit("warn",e,t,n)):t instanceof Error?r.emit("error",Object.assign(t,n)):r.emit("error",Object.assign(new Error(`${e}: ${t}`),n))};var G_n=1024*1024,VYe=Buffer.from([31,139]),sy=Symbol("state"),HO=Symbol("writeEntry"),nx=Symbol("readEntry"),HYe=Symbol("nextEntry"),qXt=Symbol("processEntry"),n_=Symbol("extendedHeader"),sre=Symbol("globalExtendedHeader"),Ck=Symbol("meta"),VXt=Symbol("emitMeta"),Zs=Symbol("buffer"),ox=Symbol("queue"),Tk=Symbol("ended"),GYe=Symbol("emittedEnd"),GO=Symbol("emit"),eu=Symbol("unzip"),ACe=Symbol("consumeChunk"),bCe=Symbol("consumeChunkSub"),WYe=Symbol("consumeBody"),HXt=Symbol("consumeMeta"),GXt=Symbol("consumeHeader"),are=Symbol("consuming"),jYe=Symbol("bufferConcat"),ECe=Symbol("maybeEnd"),Gq=Symbol("writing"),Ik=Symbol("aborted"),SCe=Symbol("onDone"),WO=Symbol("sawValidEntry"),_Ce=Symbol("sawNullBlock"),CCe=Symbol("sawEOF"),WXt=Symbol("closeStream"),W_n=()=>!0,ix=class extends jXt.EventEmitter{file;strict;maxMetaEntrySize;filter;brotli;writable=!0;readable=!1;[ox]=new Vq;[Zs];[nx];[HO];[sy]="begin";[Ck]="";[n_];[sre];[Tk]=!1;[eu];[Ik]=!1;[WO];[_Ce]=!1;[CCe]=!1;[Gq]=!1;[are]=!1;[GYe]=!1;constructor(e={}){super(),this.file=e.file||"",this.on(SCe,()=>{(this[sy]==="begin"||this[WO]===!1)&&this.warn("TAR_BAD_ARCHIVE","Unrecognized archive format")}),e.ondone?this.on(SCe,e.ondone):this.on(SCe,()=>{this.emit("prefinish"),this.emit("finish"),this.emit("end")}),this.strict=!!e.strict,this.maxMetaEntrySize=e.maxMetaEntrySize||G_n,this.filter=typeof e.filter=="function"?e.filter:W_n;let t=e.file&&(e.file.endsWith(".tar.br")||e.file.endsWith(".tbr"));this.brotli=!e.gzip&&e.brotli!==void 0?e.brotli:t?void 0:!1,this.on("end",()=>this[WXt]()),typeof e.onwarn=="function"&&this.on("warn",e.onwarn),typeof e.onReadEntry=="function"&&this.on("entry",e.onReadEntry)}warn(e,t,n={}){VO(this,e,t,n)}[GXt](e,t){this[WO]===void 0&&(this[WO]=!1);let n;try{n=new jg(e,t,this[n_],this[sre])}catch(o){return this.warn("TAR_ENTRY_INVALID",o)}if(n.nullBlock)this[_Ce]?(this[CCe]=!0,this[sy]==="begin"&&(this[sy]="header"),this[GO]("eof")):(this[_Ce]=!0,this[GO]("nullBlock"));else if(this[_Ce]=!1,!n.cksumValid)this.warn("TAR_ENTRY_INVALID","checksum failure",{header:n});else if(!n.path)this.warn("TAR_ENTRY_INVALID","path is required",{header:n});else{let o=n.type;if(/^(Symbolic)?Link$/.test(o)&&!n.linkpath)this.warn("TAR_ENTRY_INVALID","linkpath required",{header:n});else if(!/^(Symbolic)?Link$/.test(o)&&!/^(Global)?ExtendedHeader$/.test(o)&&n.linkpath)this.warn("TAR_ENTRY_INVALID","linkpath forbidden",{header:n});else{let s=this[HO]=new Hq(n,this[n_],this[sre]);if(!this[WO])if(s.remain){let a=()=>{s.invalid||(this[WO]=!0)};s.on("end",a)}else this[WO]=!0;s.meta?s.size>this.maxMetaEntrySize?(s.ignore=!0,this[GO]("ignoredEntry",s),this[sy]="ignore",s.resume()):s.size>0&&(this[Ck]="",s.on("data",a=>this[Ck]+=a),this[sy]="meta"):(this[n_]=void 0,s.ignore=s.ignore||!this.filter(s.path,s),s.ignore?(this[GO]("ignoredEntry",s),this[sy]=s.remain?"ignore":"header",s.resume()):(s.remain?this[sy]="body":(this[sy]="header",s.end()),this[nx]?this[ox].push(s):(this[ox].push(s),this[HYe]())))}}}[WXt](){queueMicrotask(()=>this.emit("close"))}[qXt](e){let t=!0;if(!e)this[nx]=void 0,t=!1;else if(Array.isArray(e)){let[n,...o]=e;this.emit(n,...o)}else this[nx]=e,this.emit("entry",e),e.emittedEnd||(e.on("end",()=>this[HYe]()),t=!1);return t}[HYe](){do;while(this[qXt](this[ox].shift()));if(!this[ox].length){let e=this[nx];!e||e.flowing||e.size===e.remain?this[Gq]||this.emit("drain"):e.once("drain",()=>this.emit("drain"))}}[WYe](e,t){let n=this[HO];if(!n)throw new Error("attempt to consume body without entry??");let o=n.blockRemain??0,s=o>=e.length&&t===0?e:e.subarray(t,t+o);return n.write(s),n.blockRemain||(this[sy]="header",this[HO]=void 0,n.end()),s.length}[HXt](e,t){let n=this[HO],o=this[WYe](e,t);return!this[HO]&&n&&this[VXt](n),o}[GO](e,t,n){!this[ox].length&&!this[nx]?this.emit(e,t,n):this[ox].push([e,t,n])}[VXt](e){switch(this[GO]("meta",this[Ck]),e.type){case"ExtendedHeader":case"OldExtendedHeader":this[n_]=_k.parse(this[Ck],this[n_],!1);break;case"GlobalExtendedHeader":this[sre]=_k.parse(this[Ck],this[sre],!0);break;case"NextFileHasLongPath":case"OldGnuLongPath":{let t=this[n_]??Object.create(null);this[n_]=t,t.path=this[Ck].replace(/\0.*/,"");break}case"NextFileHasLongLinkpath":{let t=this[n_]||Object.create(null);this[n_]=t,t.linkpath=this[Ck].replace(/\0.*/,"");break}default:throw new Error("unknown meta: "+e.type)}}abort(e){this[Ik]=!0,this.emit("abort",e),this.warn("TAR_ABORT",e,{recoverable:!1})}write(e,t,n){if(typeof t=="function"&&(n=t,t=void 0),typeof e=="string"&&(e=Buffer.from(e,typeof t=="string"?t:"utf8")),this[Ik])return n?.(),!1;if((this[eu]===void 0||this.brotli===void 0&&this[eu]===!1)&&e){if(this[Zs]&&(e=Buffer.concat([this[Zs],e]),this[Zs]=void 0),e.length<VYe.length)return this[Zs]=e,n?.(),!0;for(let l=0;this[eu]===void 0&&l<VYe.length;l++)e[l]!==VYe[l]&&(this[eu]=!1);let a=this.brotli===void 0;if(this[eu]===!1&&a)if(e.length<512)if(this[Tk])this.brotli=!0;else return this[Zs]=e,n?.(),!0;else try{new jg(e.subarray(0,512)),this.brotli=!1}catch{this.brotli=!0}if(this[eu]===void 0||this[eu]===!1&&this.brotli){let l=this[Tk];this[Tk]=!1,this[eu]=this[eu]===void 0?new fCe({}):new gCe({}),this[eu].on("data",u=>this[ACe](u)),this[eu].on("error",u=>this.abort(u)),this[eu].on("end",()=>{this[Tk]=!0,this[ACe]()}),this[Gq]=!0;let c=!!this[eu][l?"end":"write"](e);return this[Gq]=!1,n?.(),c}}this[Gq]=!0,this[eu]?this[eu].write(e):this[ACe](e),this[Gq]=!1;let s=this[ox].length?!1:this[nx]?this[nx].flowing:!0;return!s&&!this[ox].length&&this[nx]?.once("drain",()=>this.emit("drain")),n?.(),s}[jYe](e){e&&!this[Ik]&&(this[Zs]=this[Zs]?Buffer.concat([this[Zs],e]):e)}[ECe](){if(this[Tk]&&!this[GYe]&&!this[Ik]&&!this[are]){this[GYe]=!0;let e=this[HO];if(e&&e.blockRemain){let t=this[Zs]?this[Zs].length:0;this.warn("TAR_BAD_ARCHIVE",`Truncated input (needed ${e.blockRemain} more bytes, only ${t} available)`,{entry:e}),this[Zs]&&e.write(this[Zs]),e.end()}this[GO](SCe)}}[ACe](e){if(this[are]&&e)this[jYe](e);else if(!e&&!this[Zs])this[ECe]();else if(e){if(this[are]=!0,this[Zs]){this[jYe](e);let t=this[Zs];this[Zs]=void 0,this[bCe](t)}else this[bCe](e);for(;this[Zs]&&this[Zs]?.length>=512&&!this[Ik]&&!this[CCe];){let t=this[Zs];this[Zs]=void 0,this[bCe](t)}this[are]=!1}(!this[Zs]||this[Tk])&&this[ECe]()}[bCe](e){let t=0,n=e.length;for(;t+512<=n&&!this[Ik]&&!this[CCe];)switch(this[sy]){case"begin":case"header":this[GXt](e,t),t+=512;break;case"ignore":case"body":t+=this[WYe](e,t);break;case"meta":t+=this[HXt](e,t);break;default:throw new Error("invalid state: "+this[sy])}t<n&&(this[Zs]?this[Zs]=Buffer.concat([e.subarray(t),this[Zs]]):this[Zs]=e.subarray(t))}end(e,t,n){return typeof e=="function"&&(n=e,t=void 0,e=void 0),typeof t=="function"&&(n=t,t=void 0),typeof e=="string"&&(e=Buffer.from(e,t)),n&&this.once("finish",n),this[Ik]||(this[eu]?(e&&this[eu].write(e),this[eu].end()):(this[Tk]=!0,this.brotli===void 0&&(e=e||Buffer.alloc(0)),e&&this.write(e),this[ECe]())),this}};var o_=r=>{let e=r.length-1,t=-1;for(;e>-1&&r.charAt(e)==="/";)t=e,e--;return t===-1?r:r.slice(0,t)};var j_n=r=>{let e=r.onReadEntry;r.onReadEntry=e?t=>{e(t),t.resume()}:t=>t.resume()},$Ye=(r,e)=>{let t=new Map(e.map(s=>[o_(s),!0])),n=r.filter,o=(s,a="")=>{let l=a||(0,TCe.parse)(s).root||".",c;if(s===l)c=!1;else{let u=t.get(s);u!==void 0?c=u:c=o((0,TCe.dirname)(s),l)}return t.set(s,c),c};r.filter=n?(s,a)=>n(s,a)&&o(o_(s)):s=>o(o_(s))},$_n=r=>{let e=new ix(r),t=r.file,n;try{let o=jO.default.statSync(t),s=r.maxReadSize||16*1024*1024;if(o.size<s)e.end(jO.default.readFileSync(t));else{let a=0,l=Buffer.allocUnsafe(s);for(n=jO.default.openSync(t,"r");a<o.size;){let c=jO.default.readSync(n,l,0,s,a);a+=c,e.write(l.subarray(0,c))}e.end()}}finally{if(typeof n=="number")try{jO.default.closeSync(n)}catch{}}},Y_n=(r,e)=>{let t=new ix(r),n=r.maxReadSize||16*1024*1024,o=r.file;return new Promise((a,l)=>{t.on("error",l),t.on("end",a),jO.default.stat(o,(c,u)=>{if(c)l(c);else{let d=new OO(o,{readSize:n,size:u.size});d.on("error",l),d.pipe(t)}})})},$O=t_($_n,Y_n,r=>new ix(r),r=>new ix(r),(r,e)=>{e?.length&&$Ye(r,e),r.noResume||j_n(r)});var fre=z(require("fs"),1);var JA=z(require("fs"),1);var XYe=z(require("path"),1);var YYe=(r,e,t)=>(r&=4095,t&&(r=(r|384)&-19),e&&(r&256&&(r|=64),r&32&&(r|=8),r&4&&(r|=1)),r);var YXt=require("node:path"),{isAbsolute:z_n,parse:$Xt}=YXt.win32,lre=r=>{let e="",t=$Xt(r);for(;z_n(r)||t.root;){let n=r.charAt(0)==="/"&&r.slice(0,4)!=="//?/"?"/":t.root;r=r.slice(n.length),e+=n,t=$Xt(r)}return[e,r]};var ICe=["|","<",">","?",":"],zYe=ICe.map(r=>String.fromCharCode(61440+r.charCodeAt(0))),K_n=new Map(ICe.map((r,e)=>[r,zYe[e]])),J_n=new Map(zYe.map((r,e)=>[r,ICe[e]])),KYe=r=>ICe.reduce((e,t)=>e.split(t).join(K_n.get(t)),r),zXt=r=>zYe.reduce((e,t)=>e.split(t).join(J_n.get(t)),r);var tZt=(r,e)=>e?(r=jn(r).replace(/^\.(\/|$)/,""),o_(e)+"/"+r):jn(r),X_n=16*1024*1024,JXt=Symbol("process"),XXt=Symbol("file"),ZXt=Symbol("directory"),ZYe=Symbol("symlink"),eZt=Symbol("hardlink"),cre=Symbol("header"),xCe=Symbol("read"),eze=Symbol("lstat"),RCe=Symbol("onlstat"),tze=Symbol("onread"),rze=Symbol("onreadlink"),nze=Symbol("openfile"),oze=Symbol("onopenfile"),xk=Symbol("close"),wCe=Symbol("mode"),ize=Symbol("awaitDrain"),JYe=Symbol("ondrain"),i_=Symbol("prefix"),ure=class extends iy{path;portable;myuid=process.getuid&&process.getuid()||0;myuser=process.env.USER||"";maxReadSize;linkCache;statCache;preservePaths;cwd;strict;mtime;noPax;noMtime;prefix;fd;blockLen=0;blockRemain=0;buf;pos=0;remain=0;length=0;offset=0;win32;absolute;header;type;linkpath;stat;onWriteEntry;#e=!1;constructor(e,t={}){let n=ere(t);super(),this.path=jn(e),this.portable=!!n.portable,this.maxReadSize=n.maxReadSize||X_n,this.linkCache=n.linkCache||new Map,this.statCache=n.statCache||new Map,this.preservePaths=!!n.preservePaths,this.cwd=jn(n.cwd||process.cwd()),this.strict=!!n.strict,this.noPax=!!n.noPax,this.noMtime=!!n.noMtime,this.mtime=n.mtime,this.prefix=n.prefix?jn(n.prefix):void 0,this.onWriteEntry=n.onWriteEntry,typeof n.onwarn=="function"&&this.on("warn",n.onwarn);let o=!1;if(!this.preservePaths){let[a,l]=lre(this.path);a&&typeof l=="string"&&(this.path=l,o=a)}this.win32=!!n.win32||process.platform==="win32",this.win32&&(this.path=zXt(this.path.replace(/\\/g,"/")),e=e.replace(/\\/g,"/")),this.absolute=jn(n.absolute||XYe.default.resolve(this.cwd,e)),this.path===""&&(this.path="./"),o&&this.warn("TAR_ENTRY_INFO",`stripping ${o} from absolute path`,{entry:this,path:o+this.path});let s=this.statCache.get(this.absolute);s?this[RCe](s):this[eze]()}warn(e,t,n={}){return VO(this,e,t,n)}emit(e,...t){return e==="error"&&(this.#e=!0),super.emit(e,...t)}[eze](){JA.default.lstat(this.absolute,(e,t)=>{if(e)return this.emit("error",e);this[RCe](t)})}[RCe](e){this.statCache.set(this.absolute,e),this.stat=e,e.isFile()||(e.size=0),this.type=Z_n(e),this.emit("stat",e),this[JXt]()}[JXt](){switch(this.type){case"File":return this[XXt]();case"Directory":return this[ZXt]();case"SymbolicLink":return this[ZYe]();default:return this.end()}}[wCe](e){return YYe(e,this.type==="Directory",this.portable)}[i_](e){return tZt(e,this.prefix)}[cre](){if(!this.stat)throw new Error("cannot write header before stat");this.type==="Directory"&&this.portable&&(this.noMtime=!0),this.onWriteEntry?.(this),this.header=new jg({path:this[i_](this.path),linkpath:this.type==="Link"&&this.linkpath!==void 0?this[i_](this.linkpath):this.linkpath,mode:this[wCe](this.stat.mode),uid:this.portable?void 0:this.stat.uid,gid:this.portable?void 0:this.stat.gid,size:this.stat.size,mtime:this.noMtime?void 0:this.mtime||this.stat.mtime,type:this.type==="Unsupported"?void 0:this.type,uname:this.portable?void 0:this.stat.uid===this.myuid?this.myuser:"",atime:this.portable?void 0:this.stat.atime,ctime:this.portable?void 0:this.stat.ctime}),this.header.encode()&&!this.noPax&&super.write(new _k({atime:this.portable?void 0:this.header.atime,ctime:this.portable?void 0:this.header.ctime,gid:this.portable?void 0:this.header.gid,mtime:this.noMtime?void 0:this.mtime||this.header.mtime,path:this[i_](this.path),linkpath:this.type==="Link"&&this.linkpath!==void 0?this[i_](this.linkpath):this.linkpath,size:this.header.size,uid:this.portable?void 0:this.header.uid,uname:this.portable?void 0:this.header.uname,dev:this.portable?void 0:this.stat.dev,ino:this.portable?void 0:this.stat.ino,nlink:this.portable?void 0:this.stat.nlink}).encode());let e=this.header?.block;if(!e)throw new Error("failed to encode header");super.write(e)}[ZXt](){if(!this.stat)throw new Error("cannot create directory entry without stat");this.path.slice(-1)!=="/"&&(this.path+="/"),this.stat.size=0,this[cre](),this.end()}[ZYe](){JA.default.readlink(this.absolute,(e,t)=>{if(e)return this.emit("error",e);this[rze](t)})}[rze](e){this.linkpath=jn(e),this[cre](),this.end()}[eZt](e){if(!this.stat)throw new Error("cannot create link entry without stat");this.type="Link",this.linkpath=jn(XYe.default.relative(this.cwd,e)),this.stat.size=0,this[cre](),this.end()}[XXt](){if(!this.stat)throw new Error("cannot create file entry without stat");if(this.stat.nlink>1){let e=`${this.stat.dev}:${this.stat.ino}`,t=this.linkCache.get(e);if(t?.indexOf(this.cwd)===0)return this[eZt](t);this.linkCache.set(e,this.absolute)}if(this[cre](),this.stat.size===0)return this.end();this[nze]()}[nze](){JA.default.open(this.absolute,"r",(e,t)=>{if(e)return this.emit("error",e);this[oze](t)})}[oze](e){if(this.fd=e,this.#e)return this[xk]();if(!this.stat)throw new Error("should stat before calling onopenfile");this.blockLen=512*Math.ceil(this.stat.size/512),this.blockRemain=this.blockLen;let t=Math.min(this.blockLen,this.maxReadSize);this.buf=Buffer.allocUnsafe(t),this.offset=0,this.pos=0,this.remain=this.stat.size,this.length=this.buf.length,this[xCe]()}[xCe](){let{fd:e,buf:t,offset:n,length:o,pos:s}=this;if(e===void 0||t===void 0)throw new Error("cannot read file without first opening");JA.default.read(e,t,n,o,s,(a,l)=>{if(a)return this[xk](()=>this.emit("error",a));this[tze](l)})}[xk](e=()=>{}){this.fd!==void 0&&JA.default.close(this.fd,e)}[tze](e){if(e<=0&&this.remain>0){let o=Object.assign(new Error("encountered unexpected EOF"),{path:this.absolute,syscall:"read",code:"EOF"});return this[xk](()=>this.emit("error",o))}if(e>this.remain){let o=Object.assign(new Error("did not encounter expected EOF"),{path:this.absolute,syscall:"read",code:"EOF"});return this[xk](()=>this.emit("error",o))}if(!this.buf)throw new Error("should have created buffer prior to reading");if(e===this.remain)for(let o=e;o<this.length&&e<this.blockRemain;o++)this.buf[o+this.offset]=0,e++,this.remain++;let t=this.offset===0&&e===this.buf.length?this.buf:this.buf.subarray(this.offset,this.offset+e);this.write(t)?this[JYe]():this[ize](()=>this[JYe]())}[ize](e){this.once("drain",e)}write(e,t,n){if(typeof t=="function"&&(n=t,t=void 0),typeof e=="string"&&(e=Buffer.from(e,typeof t=="string"?t:"utf8")),this.blockRemain<e.length){let o=Object.assign(new Error("writing more data than expected"),{path:this.absolute});return this.emit("error",o)}return this.remain-=e.length,this.blockRemain-=e.length,this.pos+=e.length,this.offset+=e.length,super.write(e,null,n)}[JYe](){if(!this.remain)return this.blockRemain&&super.write(Buffer.alloc(this.blockRemain)),this[xk](e=>e?this.emit("error",e):this.end());if(!this.buf)throw new Error("buffer lost somehow in ONDRAIN");this.offset>=this.length&&(this.buf=Buffer.allocUnsafe(Math.min(this.blockRemain,this.buf.length)),this.offset=0),this.length=this.buf.length-this.offset,this[xCe]()}},PCe=class extends ure{sync=!0;[eze](){this[RCe](JA.default.lstatSync(this.absolute))}[ZYe](){this[rze](JA.default.readlinkSync(this.absolute))}[nze](){this[oze](JA.default.openSync(this.absolute,"r"))}[xCe](){let e=!0;try{let{fd:t,buf:n,offset:o,length:s,pos:a}=this;if(t===void 0||n===void 0)throw new Error("fd and buf must be set in READ method");let l=JA.default.readSync(t,n,o,s,a);this[tze](l),e=!1}finally{if(e)try{this[xk](()=>{})}catch{}}}[ize](e){e()}[xk](e=()=>{}){this.fd!==void 0&&JA.default.closeSync(this.fd),e()}},kCe=class extends iy{blockLen=0;blockRemain=0;buf=0;pos=0;remain=0;length=0;preservePaths;portable;strict;noPax;noMtime;readEntry;type;prefix;path;mode;uid;gid;uname;gname;header;mtime;atime;ctime;linkpath;size;onWriteEntry;warn(e,t,n={}){return VO(this,e,t,n)}constructor(e,t={}){let n=ere(t);super(),this.preservePaths=!!n.preservePaths,this.portable=!!n.portable,this.strict=!!n.strict,this.noPax=!!n.noPax,this.noMtime=!!n.noMtime,this.onWriteEntry=n.onWriteEntry,this.readEntry=e;let{type:o}=e;if(o==="Unsupported")throw new Error("writing entry that should be ignored");this.type=o,this.type==="Directory"&&this.portable&&(this.noMtime=!0),this.prefix=n.prefix,this.path=jn(e.path),this.mode=e.mode!==void 0?this[wCe](e.mode):void 0,this.uid=this.portable?void 0:e.uid,this.gid=this.portable?void 0:e.gid,this.uname=this.portable?void 0:e.uname,this.gname=this.portable?void 0:e.gname,this.size=e.size,this.mtime=this.noMtime?void 0:n.mtime||e.mtime,this.atime=this.portable?void 0:e.atime,this.ctime=this.portable?void 0:e.ctime,this.linkpath=e.linkpath!==void 0?jn(e.linkpath):void 0,typeof n.onwarn=="function"&&this.on("warn",n.onwarn);let s=!1;if(!this.preservePaths){let[l,c]=lre(this.path);l&&typeof c=="string"&&(this.path=c,s=l)}this.remain=e.size,this.blockRemain=e.startBlockSize,this.onWriteEntry?.(this),this.header=new jg({path:this[i_](this.path),linkpath:this.type==="Link"&&this.linkpath!==void 0?this[i_](this.linkpath):this.linkpath,mode:this.mode,uid:this.portable?void 0:this.uid,gid:this.portable?void 0:this.gid,size:this.size,mtime:this.noMtime?void 0:this.mtime,type:this.type,uname:this.portable?void 0:this.uname,atime:this.portable?void 0:this.atime,ctime:this.portable?void 0:this.ctime}),s&&this.warn("TAR_ENTRY_INFO",`stripping ${s} from absolute path`,{entry:this,path:s+this.path}),this.header.encode()&&!this.noPax&&super.write(new _k({atime:this.portable?void 0:this.atime,ctime:this.portable?void 0:this.ctime,gid:this.portable?void 0:this.gid,mtime:this.noMtime?void 0:this.mtime,path:this[i_](this.path),linkpath:this.type==="Link"&&this.linkpath!==void 0?this[i_](this.linkpath):this.linkpath,size:this.size,uid:this.portable?void 0:this.uid,uname:this.portable?void 0:this.uname,dev:this.portable?void 0:this.readEntry.dev,ino:this.portable?void 0:this.readEntry.ino,nlink:this.portable?void 0:this.readEntry.nlink}).encode());let a=this.header?.block;if(!a)throw new Error("failed to encode header");super.write(a),e.pipe(this)}[i_](e){return tZt(e,this.prefix)}[wCe](e){return YYe(e,this.type==="Directory",this.portable)}write(e,t,n){typeof t=="function"&&(n=t,t=void 0),typeof e=="string"&&(e=Buffer.from(e,typeof t=="string"?t:"utf8"));let o=e.length;if(o>this.blockRemain)throw new Error("writing more to entry than is appropriate");return this.blockRemain-=o,super.write(e,n)}end(e,t,n){return this.blockRemain&&super.write(Buffer.alloc(this.blockRemain)),typeof e=="function"&&(n=e,t=void 0,e=void 0),typeof t=="function"&&(n=t,t=void 0),typeof e=="string"&&(e=Buffer.from(e,t??"utf8")),n&&this.once("finish",n),e?super.end(e,n):super.end(n),this}},Z_n=r=>r.isFile()?"File":r.isDirectory()?"Directory":r.isSymbolicLink()?"SymbolicLink":"Unsupported";var dze=z(require("path"),1);var BCe=class{path;absolute;entry;stat;readdir;pending=!1;ignore=!1;piped=!1;constructor(e,t){this.path=e||"./",this.absolute=t}},rZt=Buffer.alloc(1024),DCe=Symbol("onStat"),dre=Symbol("ended"),XA=Symbol("queue"),Wq=Symbol("current"),YO=Symbol("process"),pre=Symbol("processing"),nZt=Symbol("processJob"),ZA=Symbol("jobs"),sze=Symbol("jobDone"),NCe=Symbol("addFSEntry"),oZt=Symbol("addTarEntry"),cze=Symbol("stat"),uze=Symbol("readdir"),LCe=Symbol("onreaddir"),MCe=Symbol("pipe"),iZt=Symbol("entry"),aze=Symbol("entryOpt"),OCe=Symbol("writeEntryClass"),sZt=Symbol("write"),lze=Symbol("ondrain"),Rk=class extends iy{opt;cwd;maxReadSize;preservePaths;strict;noPax;prefix;linkCache;statCache;file;portable;zip;readdirCache;noDirRecurse;follow;noMtime;mtime;filter;jobs;[OCe];onWriteEntry;[XA];[ZA]=0;[pre]=!1;[dre]=!1;constructor(e={}){if(super(),this.opt=e,this.file=e.file||"",this.cwd=e.cwd||process.cwd(),this.maxReadSize=e.maxReadSize,this.preservePaths=!!e.preservePaths,this.strict=!!e.strict,this.noPax=!!e.noPax,this.prefix=jn(e.prefix||""),this.linkCache=e.linkCache||new Map,this.statCache=e.statCache||new Map,this.readdirCache=e.readdirCache||new Map,this.onWriteEntry=e.onWriteEntry,this[OCe]=ure,typeof e.onwarn=="function"&&this.on("warn",e.onwarn),this.portable=!!e.portable,e.gzip||e.brotli){if(e.gzip&&e.brotli)throw new TypeError("gzip and brotli are mutually exclusive");if(e.gzip&&(typeof e.gzip!="object"&&(e.gzip={}),this.portable&&(e.gzip.portable=!0),this.zip=new pCe(e.gzip)),e.brotli&&(typeof e.brotli!="object"&&(e.brotli={}),this.zip=new hCe(e.brotli)),!this.zip)throw new Error("impossible");let t=this.zip;t.on("data",n=>super.write(n)),t.on("end",()=>super.end()),t.on("drain",()=>this[lze]()),this.on("resume",()=>t.resume())}else this.on("drain",this[lze]);this.noDirRecurse=!!e.noDirRecurse,this.follow=!!e.follow,this.noMtime=!!e.noMtime,e.mtime&&(this.mtime=e.mtime),this.filter=typeof e.filter=="function"?e.filter:()=>!0,this[XA]=new Vq,this[ZA]=0,this.jobs=Number(e.jobs)||4,this[pre]=!1,this[dre]=!1}[sZt](e){return super.write(e)}add(e){return this.write(e),this}end(e,t,n){return typeof e=="function"&&(n=e,e=void 0),typeof t=="function"&&(n=t,t=void 0),e&&this.add(e),this[dre]=!0,this[YO](),n&&n(),this}write(e){if(this[dre])throw new Error("write after end");return e instanceof Hq?this[oZt](e):this[NCe](e),this.flowing}[oZt](e){let t=jn(dze.default.resolve(this.cwd,e.path));if(!this.filter(e.path,e))e.resume();else{let n=new BCe(e.path,t);n.entry=new kCe(e,this[aze](n)),n.entry.on("end",()=>this[sze](n)),this[ZA]+=1,this[XA].push(n)}this[YO]()}[NCe](e){let t=jn(dze.default.resolve(this.cwd,e));this[XA].push(new BCe(e,t)),this[YO]()}[cze](e){e.pending=!0,this[ZA]+=1;let t=this.follow?"stat":"lstat";fre.default[t](e.absolute,(n,o)=>{e.pending=!1,this[ZA]-=1,n?this.emit("error",n):this[DCe](e,o)})}[DCe](e,t){this.statCache.set(e.absolute,t),e.stat=t,this.filter(e.path,t)||(e.ignore=!0),this[YO]()}[uze](e){e.pending=!0,this[ZA]+=1,fre.default.readdir(e.absolute,(t,n)=>{if(e.pending=!1,this[ZA]-=1,t)return this.emit("error",t);this[LCe](e,n)})}[LCe](e,t){this.readdirCache.set(e.absolute,t),e.readdir=t,this[YO]()}[YO](){if(!this[pre]){this[pre]=!0;for(let e=this[XA].head;e&&this[ZA]<this.jobs;e=e.next)if(this[nZt](e.value),e.value.ignore){let t=e.next;this[XA].removeNode(e),e.next=t}this[pre]=!1,this[dre]&&!this[XA].length&&this[ZA]===0&&(this.zip?this.zip.end(rZt):(super.write(rZt),super.end()))}}get[Wq](){return this[XA]&&this[XA].head&&this[XA].head.value}[sze](e){this[XA].shift(),this[ZA]-=1,this[YO]()}[nZt](e){if(!e.pending){if(e.entry){e===this[Wq]&&!e.piped&&this[MCe](e);return}if(!e.stat){let t=this.statCache.get(e.absolute);t?this[DCe](e,t):this[cze](e)}if(e.stat&&!e.ignore){if(!this.noDirRecurse&&e.stat.isDirectory()&&!e.readdir){let t=this.readdirCache.get(e.absolute);if(t?this[LCe](e,t):this[uze](e),!e.readdir)return}if(e.entry=this[iZt](e),!e.entry){e.ignore=!0;return}e===this[Wq]&&!e.piped&&this[MCe](e)}}}[aze](e){return{onwarn:(t,n,o)=>this.warn(t,n,o),noPax:this.noPax,cwd:this.cwd,absolute:e.absolute,preservePaths:this.preservePaths,maxReadSize:this.maxReadSize,strict:this.strict,portable:this.portable,linkCache:this.linkCache,statCache:this.statCache,noMtime:this.noMtime,mtime:this.mtime,prefix:this.prefix,onWriteEntry:this.onWriteEntry}}[iZt](e){this[ZA]+=1;try{return new this[OCe](e.path,this[aze](e)).on("end",()=>this[sze](e)).on("error",n=>this.emit("error",n))}catch(t){this.emit("error",t)}}[lze](){this[Wq]&&this[Wq].entry&&this[Wq].entry.resume()}[MCe](e){e.piped=!0,e.readdir&&e.readdir.forEach(o=>{let s=e.path,a=s==="./"?"":s.replace(/\/*$/,"/");this[NCe](a+o)});let t=e.entry,n=this.zip;if(!t)throw new Error("cannot pipe without source");n?t.on("data",o=>{n.write(o)||t.pause()}):t.on("data",o=>{super.write(o)||t.pause()})}pause(){return this.zip&&this.zip.pause(),super.pause()}warn(e,t,n={}){VO(this,e,t,n)}},zO=class extends Rk{sync=!0;constructor(e){super(e),this[OCe]=PCe}pause(){}resume(){}[cze](e){let t=this.follow?"statSync":"lstatSync";this[DCe](e,fre.default[t](e.absolute))}[uze](e){this[LCe](e,fre.default.readdirSync(e.absolute))}[MCe](e){let t=e.entry,n=this.zip;if(e.readdir&&e.readdir.forEach(o=>{let s=e.path,a=s==="./"?"":s.replace(/\/*$/,"/");this[NCe](a+o)}),!t)throw new Error("Cannot pipe without source");n?t.on("data",o=>{n.write(o)}):t.on("data",o=>{super[sZt](o)})}};var eCn=(r,e)=>{let t=new zO(r),n=new Fq(r.file,{mode:r.mode||438});t.pipe(n),aZt(t,e)},tCn=(r,e)=>{let t=new Rk(r),n=new XI(r.file,{mode:r.mode||438});t.pipe(n);let o=new Promise((s,a)=>{n.on("error",a),n.on("close",s),t.on("error",a)});return lZt(t,e),o},aZt=(r,e)=>{e.forEach(t=>{t.charAt(0)==="@"?$O({file:pze.default.resolve(r.cwd,t.slice(1)),sync:!0,noResume:!0,onReadEntry:n=>r.add(n)}):r.add(t)}),r.end()},lZt=async(r,e)=>{for(let t=0;t<e.length;t++){let n=String(e[t]);n.charAt(0)==="@"?await $O({file:pze.default.resolve(String(r.cwd),n.slice(1)),noResume:!0,onReadEntry:o=>{r.add(o)}}):r.add(n)}r.end()},rCn=(r,e)=>{let t=new zO(r);return aZt(t,e),t},nCn=(r,e)=>{let t=new Rk(r);return lZt(t,e),t},fze=t_(eCn,tCn,rCn,nCn,(r,e)=>{if(!e?.length)throw new TypeError("no paths specified to add to archive")});var Oze=z(require("node:fs"),1);var CZt=z(require("node:assert"),1),Mze=require("node:crypto"),Ri=z(require("node:fs"),1),a_=z(require("node:path"),1);var mze=z(require("fs"),1),oCn=process.env.__FAKE_PLATFORM__||process.platform,iCn=oCn==="win32",{O_CREAT:sCn,O_TRUNC:aCn,O_WRONLY:lCn}=mze.default.constants,cZt=Number(process.env.__FAKE_FS_O_FILENAME__)||mze.default.constants.UV_FS_O_FILEMAP||0,cCn=iCn&&!!cZt,uCn=512*1024,dCn=cZt|aCn|sCn|lCn,hze=cCn?r=>r<uCn?dCn:"w":()=>"w";var mre=z(require("node:fs"),1),jq=z(require("node:path"),1),gze=(r,e,t)=>{try{return mre.default.lchownSync(r,e,t)}catch(n){if(n?.code!=="ENOENT")throw n}},FCe=(r,e,t,n)=>{mre.default.lchown(r,e,t,o=>{n(o&&o?.code!=="ENOENT"?o:null)})},pCn=(r,e,t,n,o)=>{if(e.isDirectory())vze(jq.default.resolve(r,e.name),t,n,s=>{if(s)return o(s);let a=jq.default.resolve(r,e.name);FCe(a,t,n,o)});else{let s=jq.default.resolve(r,e.name);FCe(s,t,n,o)}},vze=(r,e,t,n)=>{mre.default.readdir(r,{withFileTypes:!0},(o,s)=>{if(o){if(o.code==="ENOENT")return n();if(o.code!=="ENOTDIR"&&o.code!=="ENOTSUP")return n(o)}if(o||!s.length)return FCe(r,e,t,n);let a=s.length,l=null,c=u=>{if(!l){if(u)return n(l=u);if(--a===0)return FCe(r,e,t,n)}};for(let u of s)pCn(r,u,e,t,c)})},fCn=(r,e,t,n)=>{e.isDirectory()&&yze(jq.default.resolve(r,e.name),t,n),gze(jq.default.resolve(r,e.name),t,n)},yze=(r,e,t)=>{let n;try{n=mre.default.readdirSync(r,{withFileTypes:!0})}catch(o){let s=o;if(s?.code==="ENOENT")return;if(s?.code==="ENOTDIR"||s?.code==="ENOTSUP")return gze(r,e,t);throw s}for(let o of n)fCn(r,o,e,t);return gze(r,e,t)};var $g=z(require("fs"),1);var Aze=require("path");var wk=require("fs"),ay=r=>{if(!r)r={mode:511};else if(typeof r=="object")r={mode:511,...r};else if(typeof r=="number")r={mode:r};else if(typeof r=="string")r={mode:parseInt(r,8)};else throw new TypeError("invalid options argument");let e=r,t=r.fs||{};return r.mkdir=r.mkdir||t.mkdir||wk.mkdir,r.mkdirAsync=r.mkdirAsync?r.mkdirAsync:async(n,o)=>new Promise((s,a)=>e.mkdir(n,o,(l,c)=>l?a(l):s(c))),r.stat=r.stat||t.stat||wk.stat,r.statAsync=r.statAsync?r.statAsync:async n=>new Promise((o,s)=>e.stat(n,(a,l)=>a?s(a):o(l))),r.statSync=r.statSync||t.statSync||wk.statSync,r.mkdirSync=r.mkdirSync||t.mkdirSync||wk.mkdirSync,e};var s_=(r,e,t)=>{let n=(0,Aze.dirname)(r),o={...ay(e),recursive:!1};if(n===r)try{return o.mkdirSync(r,o)}catch(s){let a=s;if(a&&a.code!=="EISDIR")throw s;return}try{return o.mkdirSync(r,o),t||r}catch(s){let a=s;if(a&&a.code==="ENOENT")return s_(r,o,s_(n,o,t));if(a&&a.code!=="EEXIST"&&a&&a.code!=="EROFS")throw s;try{if(!o.statSync(r).isDirectory())throw s}catch{throw s}}},sx=Object.assign(async(r,e,t)=>{let n=ay(e);n.recursive=!1;let o=(0,Aze.dirname)(r);return o===r?n.mkdirAsync(r,n).catch(s=>{let a=s;if(a&&a.code!=="EISDIR")throw s}):n.mkdirAsync(r,n).then(()=>t||r,async s=>{let a=s;if(a&&a.code==="ENOENT")return sx(o,n).then(l=>sx(r,n,l));if(a&&a.code!=="EEXIST"&&a.code!=="EROFS")throw s;return n.statAsync(r).then(l=>{if(l.isDirectory())return t;throw s},()=>{throw s})})},{sync:s_});var _ze=require("path");var bze=require("path"),Eze=async(r,e,t)=>{if(t!==e)return r.statAsync(e).then(n=>n.isDirectory()?t:void 0,n=>{let o=n;return o&&o.code==="ENOENT"?Eze(r,(0,bze.dirname)(e),e):void 0})},Sze=(r,e,t)=>{if(t!==e)try{return r.statSync(e).isDirectory()?t:void 0}catch(n){let o=n;return o&&o.code==="ENOENT"?Sze(r,(0,bze.dirname)(e),e):void 0}};var $q=(r,e)=>{let t=ay(e);if(t.recursive=!0,(0,_ze.dirname)(r)===r)return t.mkdirSync(r,t);let o=Sze(t,r);try{return t.mkdirSync(r,t),o}catch(s){let a=s;if(a&&a.code==="ENOENT")return s_(r,t);throw s}},hre=Object.assign(async(r,e)=>{let t={...ay(e),recursive:!0};return(0,_ze.dirname)(r)===r?await t.mkdirAsync(r,t):Eze(t,r).then(o=>t.mkdirAsync(r,t).then(s=>o||s).catch(s=>{let a=s;if(a&&a.code==="ENOENT")return sx(r,t);throw s}))},{sync:$q});var UCe=require("path"),mCn=process.env.__TESTING_MKDIRP_PLATFORM__||process.platform,Cze=r=>{if(/\0/.test(r))throw Object.assign(new TypeError("path must be a string without null bytes"),{path:r,code:"ERR_INVALID_ARG_VALUE"});if(r=(0,UCe.resolve)(r),mCn==="win32"){let e=/[*|"<>?:]/,{root:t}=(0,UCe.parse)(r);if(e.test(r.substring(t.length)))throw Object.assign(new Error("Illegal characters in path."),{path:r,code:"EINVAL"})}return r};var QCe=require("fs");var hCn=process.env.__TESTING_MKDIRP_NODE_VERSION__||process.version,Tze=hCn.replace(/^v/,"").split("."),uZt=+Tze[0]>10||+Tze[0]==10&&+Tze[1]>=12,gre=uZt?r=>ay(r).mkdirSync===QCe.mkdirSync:()=>!1,qCe=Object.assign(uZt?r=>ay(r).mkdir===QCe.mkdir:()=>!1,{sync:gre});var VCe=(r,e)=>{r=Cze(r);let t=ay(e);return gre(t)?$q(r,t):s_(r,t)};var dZt=Object.assign(async(r,e)=>{r=Cze(r);let t=ay(e);return qCe(t)?hre(r,t):sx(r,t)},{mkdirpSync:VCe,mkdirpNative:hre,mkdirpNativeSync:$q,mkdirpManual:sx,mkdirpManualSync:s_,sync:VCe,native:hre,nativeSync:$q,manual:sx,manualSync:s_,useNative:qCe,useNativeSync:gre});var bre=z(require("node:path"),1);var vre=class extends Error{path;code;syscall="chdir";constructor(e,t){super(`${t}: Cannot cd into '${e}'`),this.path=e,this.code=t}get name(){return"CwdError"}};var yre=class extends Error{path;symlink;syscall="symlink";code="TAR_SYMLINK_ERROR";constructor(e,t){super("TAR_SYMLINK_ERROR: Cannot extract through symbolic link"),this.symlink=e,this.path=t}get name(){return"SymlinkError"}};var HCe=(r,e)=>r.get(jn(e)),Are=(r,e,t)=>r.set(jn(e),t),gCn=(r,e)=>{$g.default.stat(r,(t,n)=>{(t||!n.isDirectory())&&(t=new vre(r,t?.code||"ENOTDIR")),e(t)})},pZt=(r,e,t)=>{r=jn(r);let n=e.umask??18,o=e.mode|448,s=(o&n)!==0,a=e.uid,l=e.gid,c=typeof a=="number"&&typeof l=="number"&&(a!==e.processUid||l!==e.processGid),u=e.preserve,d=e.unlink,p=e.cache,f=jn(e.cwd),m=(y,A)=>{y?t(y):(Are(p,r,!0),A&&c?vze(A,a,l,b=>m(b)):s?$g.default.chmod(r,o,t):t())};if(p&&HCe(p,r)===!0)return m();if(r===f)return gCn(r,m);if(u)return dZt(r,{mode:o}).then(y=>m(null,y??void 0),m);let g=jn(bre.default.relative(f,r)).split("/");GCe(f,g,o,p,d,f,void 0,m)},GCe=(r,e,t,n,o,s,a,l)=>{if(!e.length)return l(null,a);let c=e.shift(),u=jn(bre.default.resolve(r+"/"+c));if(HCe(n,u))return GCe(u,e,t,n,o,s,a,l);$g.default.mkdir(u,t,fZt(u,e,t,n,o,s,a,l))},fZt=(r,e,t,n,o,s,a,l)=>c=>{c?$g.default.lstat(r,(u,d)=>{if(u)u.path=u.path&&jn(u.path),l(u);else if(d.isDirectory())GCe(r,e,t,n,o,s,a,l);else if(o)$g.default.unlink(r,p=>{if(p)return l(p);$g.default.mkdir(r,t,fZt(r,e,t,n,o,s,a,l))});else{if(d.isSymbolicLink())return l(new yre(r,r+"/"+e.join("/")));l(c)}}):(a=a||r,GCe(r,e,t,n,o,s,a,l))},vCn=r=>{let e=!1,t;try{e=$g.default.statSync(r).isDirectory()}catch(n){t=n?.code}finally{if(!e)throw new vre(r,t??"ENOTDIR")}},mZt=(r,e)=>{r=jn(r);let t=e.umask??18,n=e.mode|448,o=(n&t)!==0,s=e.uid,a=e.gid,l=typeof s=="number"&&typeof a=="number"&&(s!==e.processUid||a!==e.processGid),c=e.preserve,u=e.unlink,d=e.cache,p=jn(e.cwd),f=y=>{Are(d,r,!0),y&&l&&yze(y,s,a),o&&$g.default.chmodSync(r,n)};if(d&&HCe(d,r)===!0)return f();if(r===p)return vCn(p),f();if(c)return f(VCe(r,n)??void 0);let h=jn(bre.default.relative(p,r)).split("/"),g;for(let y=h.shift(),A=p;y&&(A+="/"+y);y=h.shift())if(A=jn(bre.default.resolve(A)),!HCe(d,A))try{$g.default.mkdirSync(A,n),g=g||A,Are(d,A,!0)}catch{let E=$g.default.lstatSync(A);if(E.isDirectory()){Are(d,A,!0);continue}else if(u){$g.default.unlinkSync(A),$g.default.mkdirSync(A,n),g=g||A,Are(d,A,!0);continue}else if(E.isSymbolicLink())return new yre(A,A+"/"+h.join("/"))}return f(g)};var Ize=Object.create(null),{hasOwnProperty:yCn}=Object.prototype,WCe=r=>(yCn.call(Ize,r)||(Ize[r]=r.normalize("NFD")),Ize[r]);var xze=require("node:path");var ACn=process.env.TESTING_TAR_FAKE_PLATFORM||process.platform,bCn=ACn==="win32",ECn=r=>r.split("/").slice(0,-1).reduce((t,n)=>{let o=t[t.length-1];return o!==void 0&&(n=(0,xze.join)(o,n)),t.push(n||"/"),t},[]),jCe=class{#e=new Map;#t=new Map;#r=new Set;reserve(e,t){e=bCn?["win32 parallelization disabled"]:e.map(o=>o_((0,xze.join)(WCe(o))).toLowerCase());let n=new Set(e.map(o=>ECn(o)).reduce((o,s)=>o.concat(s)));this.#t.set(t,{dirs:n,paths:e});for(let o of e){let s=this.#e.get(o);s?s.push(t):this.#e.set(o,[t])}for(let o of n){let s=this.#e.get(o);if(!s)this.#e.set(o,[new Set([t])]);else{let a=s[s.length-1];a instanceof Set?a.add(t):s.push(new Set([t]))}}return this.#i(t)}#n(e){let t=this.#t.get(e);if(!t)throw new Error("function does not have any path reservations");return{paths:t.paths.map(n=>this.#e.get(n)),dirs:[...t.dirs].map(n=>this.#e.get(n))}}check(e){let{paths:t,dirs:n}=this.#n(e);return t.every(o=>o&&o[0]===e)&&n.every(o=>o&&o[0]instanceof Set&&o[0].has(e))}#i(e){return this.#r.has(e)||!this.check(e)?!1:(this.#r.add(e),e(()=>this.#o(e)),!0)}#o(e){if(!this.#r.has(e))return!1;let t=this.#t.get(e);if(!t)throw new Error("invalid reservation");let{paths:n,dirs:o}=t,s=new Set;for(let a of n){let l=this.#e.get(a);if(!l||l?.[0]!==e)continue;let c=l[1];if(!c){this.#e.delete(a);continue}if(l.shift(),typeof c=="function")s.add(c);else for(let u of c)s.add(u)}for(let a of o){let l=this.#e.get(a),c=l?.[0];if(!(!l||!(c instanceof Set)))if(c.size===1&&l.length===1){this.#e.delete(a);continue}else if(c.size===1){l.shift();let u=l[0];typeof u=="function"&&s.add(u)}else c.delete(e)}return this.#r.delete(e),s.forEach(a=>this.#i(a)),!0}};var hZt=Symbol("onEntry"),Pze=Symbol("checkFs"),gZt=Symbol("checkFs2"),zCe=Symbol("pruneCache"),kze=Symbol("isReusable"),ly=Symbol("makeFs"),Dze=Symbol("file"),Nze=Symbol("directory"),KCe=Symbol("link"),vZt=Symbol("symlink"),yZt=Symbol("hardlink"),AZt=Symbol("unsupported"),bZt=Symbol("checkPath"),Pk=Symbol("mkdir"),Mp=Symbol("onError"),$Ce=Symbol("pending"),EZt=Symbol("pend"),Yq=Symbol("unpend"),Rze=Symbol("ended"),wze=Symbol("maybeClose"),Lze=Symbol("skip"),Ere=Symbol("doChown"),Sre=Symbol("uid"),_re=Symbol("gid"),Cre=Symbol("checkedCwd"),SCn=process.env.TESTING_TAR_FAKE_PLATFORM||process.platform,Tre=SCn==="win32",_Cn=1024,CCn=(r,e)=>{if(!Tre)return Ri.default.unlink(r,e);let t=r+".DELETE."+(0,Mze.randomBytes)(16).toString("hex");Ri.default.rename(r,t,n=>{if(n)return e(n);Ri.default.unlink(t,e)})},TCn=r=>{if(!Tre)return Ri.default.unlinkSync(r);let e=r+".DELETE."+(0,Mze.randomBytes)(16).toString("hex");Ri.default.renameSync(r,e),Ri.default.unlinkSync(e)},SZt=(r,e,t)=>r!==void 0&&r===r>>>0?r:e!==void 0&&e===e>>>0?e:t,_Zt=r=>o_(jn(WCe(r))).toLowerCase(),ICn=(r,e)=>{e=_Zt(e);for(let t of r.keys()){let n=_Zt(t);(n===e||n.indexOf(e+"/")===0)&&r.delete(t)}},xCn=r=>{for(let e of r.keys())r.delete(e)},zq=class extends ix{[Rze]=!1;[Cre]=!1;[$Ce]=0;reservations=new jCe;transform;writable=!0;readable=!1;dirCache;uid;gid;setOwner;preserveOwner;processGid;processUid;maxDepth;forceChown;win32;newer;keep;noMtime;preservePaths;unlink;cwd;strip;processUmask;umask;dmode;fmode;chmod;constructor(e={}){if(e.ondone=()=>{this[Rze]=!0,this[wze]()},super(e),this.transform=e.transform,this.dirCache=e.dirCache||new Map,this.chmod=!!e.chmod,typeof e.uid=="number"||typeof e.gid=="number"){if(typeof e.uid!="number"||typeof e.gid!="number")throw new TypeError("cannot set owner without number uid and gid");if(e.preserveOwner)throw new TypeError("cannot preserve owner in archive and also set owner explicitly");this.uid=e.uid,this.gid=e.gid,this.setOwner=!0}else this.uid=void 0,this.gid=void 0,this.setOwner=!1;e.preserveOwner===void 0&&typeof e.uid!="number"?this.preserveOwner=!!(process.getuid&&process.getuid()===0):this.preserveOwner=!!e.preserveOwner,this.processUid=(this.preserveOwner||this.setOwner)&&process.getuid?process.getuid():void 0,this.processGid=(this.preserveOwner||this.setOwner)&&process.getgid?process.getgid():void 0,this.maxDepth=typeof e.maxDepth=="number"?e.maxDepth:_Cn,this.forceChown=e.forceChown===!0,this.win32=!!e.win32||Tre,this.newer=!!e.newer,this.keep=!!e.keep,this.noMtime=!!e.noMtime,this.preservePaths=!!e.preservePaths,this.unlink=!!e.unlink,this.cwd=jn(a_.default.resolve(e.cwd||process.cwd())),this.strip=Number(e.strip)||0,this.processUmask=this.chmod?typeof e.processUmask=="number"?e.processUmask:process.umask():0,this.umask=typeof e.umask=="number"?e.umask:this.processUmask,this.dmode=e.dmode||511&~this.umask,this.fmode=e.fmode||438&~this.umask,this.on("entry",t=>this[hZt](t))}warn(e,t,n={}){return(e==="TAR_BAD_ARCHIVE"||e==="TAR_ABORT")&&(n.recoverable=!1),super.warn(e,t,n)}[wze](){this[Rze]&&this[$Ce]===0&&(this.emit("prefinish"),this.emit("finish"),this.emit("end"))}[bZt](e){let t=jn(e.path),n=t.split("/");if(this.strip){if(n.length<this.strip)return!1;if(e.type==="Link"){let o=jn(String(e.linkpath)).split("/");if(o.length>=this.strip)e.linkpath=o.slice(this.strip).join("/");else return!1}n.splice(0,this.strip),e.path=n.join("/")}if(isFinite(this.maxDepth)&&n.length>this.maxDepth)return this.warn("TAR_ENTRY_ERROR","path excessively deep",{entry:e,path:t,depth:n.length,maxDepth:this.maxDepth}),!1;if(!this.preservePaths){if(n.includes("..")||Tre&&/^[a-z]:\.\.$/i.test(n[0]??""))return this.warn("TAR_ENTRY_ERROR","path contains '..'",{entry:e,path:t}),!1;let[o,s]=lre(t);o&&(e.path=String(s),this.warn("TAR_ENTRY_INFO",`stripping ${o} from absolute path`,{entry:e,path:t}))}if(a_.default.isAbsolute(e.path)?e.absolute=jn(a_.default.resolve(e.path)):e.absolute=jn(a_.default.resolve(this.cwd,e.path)),!this.preservePaths&&typeof e.absolute=="string"&&e.absolute.indexOf(this.cwd+"/")!==0&&e.absolute!==this.cwd)return this.warn("TAR_ENTRY_ERROR","path escaped extraction target",{entry:e,path:jn(e.path),resolvedPath:e.absolute,cwd:this.cwd}),!1;if(e.absolute===this.cwd&&e.type!=="Directory"&&e.type!=="GNUDumpDir")return!1;if(this.win32){let{root:o}=a_.default.win32.parse(String(e.absolute));e.absolute=o+KYe(String(e.absolute).slice(o.length));let{root:s}=a_.default.win32.parse(e.path);e.path=s+KYe(e.path.slice(s.length))}return!0}[hZt](e){if(!this[bZt](e))return e.resume();switch(CZt.default.equal(typeof e.absolute,"string"),e.type){case"Directory":case"GNUDumpDir":e.mode&&(e.mode=e.mode|448);case"File":case"OldFile":case"ContiguousFile":case"Link":case"SymbolicLink":return this[Pze](e);case"CharacterDevice":case"BlockDevice":case"FIFO":default:return this[AZt](e)}}[Mp](e,t){e.name==="CwdError"?this.emit("error",e):(this.warn("TAR_ENTRY_ERROR",e,{entry:t}),this[Yq](),t.resume())}[Pk](e,t,n){pZt(jn(e),{uid:this.uid,gid:this.gid,processUid:this.processUid,processGid:this.processGid,umask:this.processUmask,preserve:this.preservePaths,unlink:this.unlink,cache:this.dirCache,cwd:this.cwd,mode:t},n)}[Ere](e){return this.forceChown||this.preserveOwner&&(typeof e.uid=="number"&&e.uid!==this.processUid||typeof e.gid=="number"&&e.gid!==this.processGid)||typeof this.uid=="number"&&this.uid!==this.processUid||typeof this.gid=="number"&&this.gid!==this.processGid}[Sre](e){return SZt(this.uid,e.uid,this.processUid)}[_re](e){return SZt(this.gid,e.gid,this.processGid)}[Dze](e,t){let n=typeof e.mode=="number"?e.mode&4095:this.fmode,o=new XI(String(e.absolute),{flags:hze(e.size),mode:n,autoClose:!1});o.on("error",c=>{o.fd&&Ri.default.close(o.fd,()=>{}),o.write=()=>!0,this[Mp](c,e),t()});let s=1,a=c=>{if(c){o.fd&&Ri.default.close(o.fd,()=>{}),this[Mp](c,e),t();return}--s===0&&o.fd!==void 0&&Ri.default.close(o.fd,u=>{u?this[Mp](u,e):this[Yq](),t()})};o.on("finish",()=>{let c=String(e.absolute),u=o.fd;if(typeof u=="number"&&e.mtime&&!this.noMtime){s++;let d=e.atime||new Date,p=e.mtime;Ri.default.futimes(u,d,p,f=>f?Ri.default.utimes(c,d,p,m=>a(m&&f)):a())}if(typeof u=="number"&&this[Ere](e)){s++;let d=this[Sre](e),p=this[_re](e);typeof d=="number"&&typeof p=="number"&&Ri.default.fchown(u,d,p,f=>f?Ri.default.chown(c,d,p,m=>a(m&&f)):a())}a()});let l=this.transform&&this.transform(e)||e;l!==e&&(l.on("error",c=>{this[Mp](c,e),t()}),e.pipe(l)),l.pipe(o)}[Nze](e,t){let n=typeof e.mode=="number"?e.mode&4095:this.dmode;this[Pk](String(e.absolute),n,o=>{if(o){this[Mp](o,e),t();return}let s=1,a=()=>{--s===0&&(t(),this[Yq](),e.resume())};e.mtime&&!this.noMtime&&(s++,Ri.default.utimes(String(e.absolute),e.atime||new Date,e.mtime,a)),this[Ere](e)&&(s++,Ri.default.chown(String(e.absolute),Number(this[Sre](e)),Number(this[_re](e)),a)),a()})}[AZt](e){e.unsupported=!0,this.warn("TAR_ENTRY_UNSUPPORTED",`unsupported entry type: ${e.type}`,{entry:e}),e.resume()}[vZt](e,t){this[KCe](e,String(e.linkpath),"symlink",t)}[yZt](e,t){let n=jn(a_.default.resolve(this.cwd,String(e.linkpath)));this[KCe](e,n,"link",t)}[EZt](){this[$Ce]++}[Yq](){this[$Ce]--,this[wze]()}[Lze](e){this[Yq](),e.resume()}[kze](e,t){return e.type==="File"&&!this.unlink&&t.isFile()&&t.nlink<=1&&!Tre}[Pze](e){this[EZt]();let t=[e.path];e.linkpath&&t.push(e.linkpath),this.reservations.reserve(t,n=>this[gZt](e,n))}[zCe](e){e.type==="SymbolicLink"?xCn(this.dirCache):e.type!=="Directory"&&ICn(this.dirCache,String(e.absolute))}[gZt](e,t){this[zCe](e);let n=l=>{this[zCe](e),t(l)},o=()=>{this[Pk](this.cwd,this.dmode,l=>{if(l){this[Mp](l,e),n();return}this[Cre]=!0,s()})},s=()=>{if(e.absolute!==this.cwd){let l=jn(a_.default.dirname(String(e.absolute)));if(l!==this.cwd)return this[Pk](l,this.dmode,c=>{if(c){this[Mp](c,e),n();return}a()})}a()},a=()=>{Ri.default.lstat(String(e.absolute),(l,c)=>{if(c&&(this.keep||this.newer&&c.mtime>(e.mtime??c.mtime))){this[Lze](e),n();return}if(l||this[kze](e,c))return this[ly](null,e,n);if(c.isDirectory()){if(e.type==="Directory"){let u=this.chmod&&e.mode&&(c.mode&4095)!==e.mode,d=p=>this[ly](p??null,e,n);return u?Ri.default.chmod(String(e.absolute),Number(e.mode),d):d()}if(e.absolute!==this.cwd)return Ri.default.rmdir(String(e.absolute),u=>this[ly](u??null,e,n))}if(e.absolute===this.cwd)return this[ly](null,e,n);CCn(String(e.absolute),u=>this[ly](u??null,e,n))})};this[Cre]?s():o()}[ly](e,t,n){if(e){this[Mp](e,t),n();return}switch(t.type){case"File":case"OldFile":case"ContiguousFile":return this[Dze](t,n);case"Link":return this[yZt](t,n);case"SymbolicLink":return this[vZt](t,n);case"Directory":case"GNUDumpDir":return this[Nze](t,n)}}[KCe](e,t,n,o){Ri.default[n](t,String(e.absolute),s=>{s?this[Mp](s,e):(this[Yq](),e.resume()),o()})}},YCe=r=>{try{return[null,r()]}catch(e){return[e,null]}},Ire=class extends zq{sync=!0;[ly](e,t){return super[ly](e,t,()=>{})}[Pze](e){if(this[zCe](e),!this[Cre]){let s=this[Pk](this.cwd,this.dmode);if(s)return this[Mp](s,e);this[Cre]=!0}if(e.absolute!==this.cwd){let s=jn(a_.default.dirname(String(e.absolute)));if(s!==this.cwd){let a=this[Pk](s,this.dmode);if(a)return this[Mp](a,e)}}let[t,n]=YCe(()=>Ri.default.lstatSync(String(e.absolute)));if(n&&(this.keep||this.newer&&n.mtime>(e.mtime??n.mtime)))return this[Lze](e);if(t||this[kze](e,n))return this[ly](null,e);if(n.isDirectory()){if(e.type==="Directory"){let a=this.chmod&&e.mode&&(n.mode&4095)!==e.mode,[l]=a?YCe(()=>{Ri.default.chmodSync(String(e.absolute),Number(e.mode))}):[];return this[ly](l,e)}let[s]=YCe(()=>Ri.default.rmdirSync(String(e.absolute)));this[ly](s,e)}let[o]=e.absolute===this.cwd?[]:YCe(()=>TCn(String(e.absolute)));this[ly](o,e)}[Dze](e,t){let n=typeof e.mode=="number"?e.mode&4095:this.fmode,o=l=>{let c;try{Ri.default.closeSync(s)}catch(u){c=u}(l||c)&&this[Mp](l||c,e),t()},s;try{s=Ri.default.openSync(String(e.absolute),hze(e.size),n)}catch(l){return o(l)}let a=this.transform&&this.transform(e)||e;a!==e&&(a.on("error",l=>this[Mp](l,e)),e.pipe(a)),a.on("data",l=>{try{Ri.default.writeSync(s,l,0,l.length)}catch(c){o(c)}}),a.on("end",()=>{let l=null;if(e.mtime&&!this.noMtime){let c=e.atime||new Date,u=e.mtime;try{Ri.default.futimesSync(s,c,u)}catch(d){try{Ri.default.utimesSync(String(e.absolute),c,u)}catch{l=d}}}if(this[Ere](e)){let c=this[Sre](e),u=this[_re](e);try{Ri.default.fchownSync(s,Number(c),Number(u))}catch(d){try{Ri.default.chownSync(String(e.absolute),Number(c),Number(u))}catch{l=l||d}}}o(l)})}[Nze](e,t){let n=typeof e.mode=="number"?e.mode&4095:this.dmode,o=this[Pk](String(e.absolute),n);if(o){this[Mp](o,e),t();return}if(e.mtime&&!this.noMtime)try{Ri.default.utimesSync(String(e.absolute),e.atime||new Date,e.mtime)}catch{}if(this[Ere](e))try{Ri.default.chownSync(String(e.absolute),Number(this[Sre](e)),Number(this[_re](e)))}catch{}t(),e.resume()}[Pk](e,t){try{return mZt(jn(e),{uid:this.uid,gid:this.gid,processUid:this.processUid,processGid:this.processGid,umask:this.processUmask,preserve:this.preservePaths,unlink:this.unlink,cache:this.dirCache,cwd:this.cwd,mode:t})}catch(n){return n}}[KCe](e,t,n,o){let s=`${n}Sync`;try{Ri.default[s](t,String(e.absolute)),o(),e.resume()}catch(a){return this[Mp](a,e)}}};var RCn=r=>{let e=new Ire(r),t=r.file,n=Oze.default.statSync(t),o=r.maxReadSize||16*1024*1024;new tCe(t,{readSize:o,size:n.size}).pipe(e)},wCn=(r,e)=>{let t=new zq(r),n=r.maxReadSize||16*1024*1024,o=r.file;return new Promise((a,l)=>{t.on("error",l),t.on("close",a),Oze.default.stat(o,(c,u)=>{if(c)l(c);else{let d=new OO(o,{readSize:n,size:u.size});d.on("error",l),d.pipe(t)}})})},PCn=t_(RCn,wCn,r=>new Ire(r),r=>new zq(r),(r,e)=>{e?.length&&$Ye(r,e)});var yh=z(require("node:fs"),1),Bze=z(require("node:path"),1);var kCn=(r,e)=>{let t=new zO(r),n=!0,o,s;try{try{o=yh.default.openSync(r.file,"r+")}catch(c){if(c?.code==="ENOENT")o=yh.default.openSync(r.file,"w+");else throw c}let a=yh.default.fstatSync(o),l=Buffer.alloc(512);e:for(s=0;s<a.size;s+=512){for(let d=0,p=0;d<512;d+=p){if(p=yh.default.readSync(o,l,d,l.length-d,s+d),s===0&&l[0]===31&&l[1]===139)throw new Error("cannot append to compressed archives");if(!p)break e}let c=new jg(l);if(!c.cksumValid)break;let u=512*Math.ceil((c.size||0)/512);if(s+u+512>a.size)break;s+=u,r.mtimeCache&&c.mtime&&r.mtimeCache.set(String(c.path),c.mtime)}n=!1,DCn(r,t,s,o,e)}finally{if(n)try{yh.default.closeSync(o)}catch{}}},DCn=(r,e,t,n,o)=>{let s=new Fq(r.file,{fd:n,start:t});e.pipe(s),LCn(e,o)},NCn=(r,e)=>{e=Array.from(e);let t=new Rk(r),n=(s,a,l)=>{let c=(m,h)=>{m?yh.default.close(s,g=>l(m)):l(null,h)},u=0;if(a===0)return c(null,0);let d=0,p=Buffer.alloc(512),f=(m,h)=>{if(m||typeof h>"u")return c(m);if(d+=h,d<512&&h)return yh.default.read(s,p,d,p.length-d,u+d,f);if(u===0&&p[0]===31&&p[1]===139)return c(new Error("cannot append to compressed archives"));if(d<512)return c(null,u);let g=new jg(p);if(!g.cksumValid)return c(null,u);let y=512*Math.ceil((g.size??0)/512);if(u+y+512>a||(u+=y+512,u>=a))return c(null,u);r.mtimeCache&&g.mtime&&r.mtimeCache.set(String(g.path),g.mtime),d=0,yh.default.read(s,p,0,512,u,f)};yh.default.read(s,p,0,512,u,f)};return new Promise((s,a)=>{t.on("error",a);let l="r+",c=(u,d)=>{if(u&&u.code==="ENOENT"&&l==="r+")return l="w+",yh.default.open(r.file,l,c);if(u||!d)return a(u);yh.default.fstat(d,(p,f)=>{if(p)return yh.default.close(d,()=>a(p));n(d,f.size,(m,h)=>{if(m)return a(m);let g=new XI(r.file,{fd:d,start:h});t.pipe(g),g.on("error",a),g.on("close",s),MCn(t,e)})})};yh.default.open(r.file,l,c)})},LCn=(r,e)=>{e.forEach(t=>{t.charAt(0)==="@"?$O({file:Bze.default.resolve(r.cwd,t.slice(1)),sync:!0,noResume:!0,onReadEntry:n=>r.add(n)}):r.add(t)}),r.end()},MCn=async(r,e)=>{for(let t=0;t<e.length;t++){let n=String(e[t]);n.charAt(0)==="@"?await $O({file:Bze.default.resolve(String(r.cwd),n.slice(1)),noResume:!0,onReadEntry:o=>r.add(o)}):r.add(n)}r.end()},KO=t_(kCn,NCn,()=>{throw new TypeError("file is required")},()=>{throw new TypeError("file is required")},(r,e)=>{if(!TXt(r))throw new TypeError("file is required");if(r.gzip||r.brotli||r.file.endsWith(".br")||r.file.endsWith(".tbr"))throw new TypeError("cannot append to compressed archives");if(!e?.length)throw new TypeError("no paths specified to add/replace")});var OCn=t_(KO.syncFile,KO.asyncFile,KO.syncNoFile,KO.asyncNoFile,(r,e=[])=>{KO.validate?.(r,e),BCn(r)}),BCn=r=>{let e=r.filter;r.mtimeCache||(r.mtimeCache=new Map),r.filter=e?(t,n)=>e(t,n)&&!((r.mtimeCache?.get(t)??n.mtime??0)>(n.mtime??0)):(t,n)=>!((r.mtimeCache?.get(t)??n.mtime??0)>(n.mtime??0))};var kt=z(require("vscode"));var kk=require("vscode"),UCn,Fze="GitHub Copilot Chat",JCe=class{constructor(e){this._outputChannel=kk.window.createOutputChannel(Fze,{log:!0});UCn=this._outputChannel,e.subscriptions.push(this._outputChannel)}logIt(e,t,...n){switch(e){case kk.LogLevel.Trace:this._outputChannel.trace(t);break;case kk.LogLevel.Debug:this._outputChannel.debug(t);break;case kk.LogLevel.Info:this._outputChannel.info(t);break;case kk.LogLevel.Warning:this._outputChannel.warn(t);break;case kk.LogLevel.Error:this._outputChannel.error(t);break}}show(e){this._outputChannel.show(e)}};var IZt="vscode.copilot.chat.showRequestHtmlItem",QCn="github.copilot.chat.debug.exportLogItem",qCn="github.copilot.chat.debug.exportPromptArchive",VCn="github.copilot.chat.debug.exportPromptLogsAsJson",HCn="github.copilot.chat.debug.exportAllPromptLogsAsJson",GCn="github.copilot.chat.debug.saveCurrentMarkdown",WCn="github.copilot.chat.debug.showRawRequestBody",Kq=class extends _e{constructor(t,n){super();this.id="requestLogTree";this.chatRequestProvider=this._register(t.createInstance(xre)),this._register(kt.window.registerTreeDataProvider("copilot-chat",this.chatRequestProvider));let o,s=l=>!l||!l.children?[]:l.children.map(u=>{if(u instanceof Zq||u instanceof Jq||u instanceof Xq)return u.info}).filter(ns),a=async l=>{let c=s(l);if(c.length===0)return;let u=[];for(let d of c)try{u.push(await d.toJSON())}catch(p){u.push({id:d.id,kind:"error",error:p?.toString()||"Unknown error",timestamp:new Date().toISOString()})}return{prompt:l.request.prompt,promptId:l.id,hasSeen:l.hasSeen,logCount:u.length,logs:u}};this._register(kt.commands.registerCommand(IZt,async l=>{o||(o=this._register(new Uze));let c=n.getRequests().find(d=>d.kind===0&&d.id===l);if(!c)return;let u=await o.addRouter(c);await kt.commands.executeCommand("simpleBrowser.show",u)})),this._register(kt.commands.registerCommand(QCn,async l=>{if(!l||!l.id)return;let c;if(l instanceof Nk){kt.window.showWarningMessage("Cannot export chat prompt item. Please select a specific request, tool call, or element.");return}else if(l instanceof Zq||l instanceof Jq||l instanceof Xq)c=l.info;else{kt.window.showErrorMessage("Unable to determine log entry ID for this item.");return}if(c.kind===0){kt.window.showWarningMessage("Element entries cannot be exported as markdown. They contain HTML content that can be viewed in the browser.");return}let u;switch(c.kind){case 1:{u=`${c.entry.debugName.replace(/\W/g,"_")}_${c.id}.copilotmd`;break}case 2:{u=`tool_${c.name.replace(/\W/g,"_")}_${c.id}.copilotmd`;break}}if(!u)return;let d=await kt.window.showSaveDialog({defaultUri:kt.Uri.file(l_.join(Dk.homedir(),u)),filters:{"Copilot Markdown":["copilotmd"],Markdown:["md"],"All Files":["*"]},title:"Export Log Entry"});if(d)try{let p=kt.Uri.parse(sd.buildUri({kind:"request",id:c.id})),m=(await kt.workspace.openTextDocument(p)).getText();await kt.workspace.fs.writeFile(d,Buffer.from(m,"utf8"));let h="Open File";await kt.window.showInformationMessage(`Successfully exported to ${d.fsPath}`,h)===h&&await kt.commands.executeCommand("vscode.open",d)}catch(p){kt.window.showErrorMessage(`Failed to export log entry: ${p}`)}})),this._register(kt.commands.registerCommand(GCn,async(...l)=>{let c,u=l?.[0];if(u instanceof kt.Uri)c=u;else if(u&&typeof u=="object"){let h=u.resource;h instanceof kt.Uri&&(c=h)}if(c??=kt.window.activeTextEditor?.document.uri,!c){kt.window.showWarningMessage("No document is active to save.");return}if(c.scheme!==sd.chatRequestScheme){kt.window.showWarningMessage("This command only works for Copilot request documents.");return}let d=sd.parseUri(c.toString()),f=`${d&&d.data.kind==="request"?d.data.id:"latestrequest"}.md`,m=await kt.window.showSaveDialog({defaultUri:kt.Uri.file(l_.join(Dk.homedir(),f)),filters:{Markdown:["md"],"Copilot Markdown":["copilotmd"],"All Files":["*"]},title:"Save Markdown As"});if(m)try{let h=await kt.workspace.openTextDocument(c);await kt.workspace.fs.writeFile(m,Buffer.from(h.getText(),"utf8"));let g="Open File";await kt.window.showInformationMessage(`Successfully saved to ${m.fsPath}`,g)===g&&await kt.commands.executeCommand("vscode.open",m)}catch(h){kt.window.showErrorMessage(`Failed to save markdown: ${h}`)}})),this._register(kt.commands.registerCommand(qCn,async l=>{let c=s(l);if(c.length===0){kt.window.showInformationMessage("No exportable entries found in this prompt.");return}let d=`${l.request.prompt.replace(/\W/g,"_").substring(0,50)}_exports.tar.gz`,p=await kt.window.showSaveDialog({defaultUri:kt.Uri.file(l_.join(Dk.homedir(),d)),filters:{"Tar Archive":["tar.gz","tgz"],"All Files":["*"]},title:"Export Prompt Archive"});if(p)try{let f=l_.join(Dk.tmpdir(),`vscode-copilot-export-${Date.now()}-${Math.random().toString(36).substring(2,10)}`);await kt.workspace.fs.createDirectory(kt.Uri.file(f));let m=[];for(let h of c){let g;switch(h.kind){case 1:{g=`${h.entry.debugName.replace(/\W/g,"_")}_${h.id}.copilotmd`;break}case 2:{g=`tool_${h.name.replace(/\W/g,"_")}_${h.id}.copilotmd`;break}default:continue}let y=kt.Uri.parse(sd.buildUri({kind:"request",id:h.id})),b=(await kt.workspace.openTextDocument(y)).getText(),E=l_.join(f,g);await kt.workspace.fs.writeFile(kt.Uri.file(E),Buffer.from(b,"utf8")),m.push(E)}if(m.length>0){await fze({gzip:!0,file:p.fsPath,cwd:f},m.map(y=>l_.basename(y)));for(let y of m)await kt.workspace.fs.delete(kt.Uri.file(y));await kt.workspace.fs.delete(kt.Uri.file(f));let h="Reveal in Explorer";await kt.window.showInformationMessage(`Successfully exported ${m.length} entries to ${p.fsPath}`,h)===h&&await kt.commands.executeCommand("revealFileInOS",p)}else kt.window.showWarningMessage("No valid entries could be exported.")}catch(f){kt.window.showErrorMessage(`Failed to export prompt archive: ${f}`)}})),this._register(kt.commands.registerCommand(VCn,async l=>{let c=await a(l);if(!c){kt.window.showWarningMessage("No exportable entries found for this prompt.");return}let d=`${l.request.prompt.replace(/\W/g,"_").substring(0,50)}_logs.chatreplay.json`,p=await kt.window.showSaveDialog({defaultUri:kt.Uri.file(l_.join(Dk.homedir(),d)),filters:{JSON:["json"],"All Files":["*"]},title:"Export Prompt Logs as JSON"});if(p)try{let f=JSON.stringify(c,null,2);await kt.workspace.fs.writeFile(p,Buffer.from(f,"utf8"));let m="Reveal in Explorer",h="Open File",g=await kt.window.showInformationMessage(`Successfully exported prompt with ${c.logCount} log entries to ${p.fsPath}`,m,h);g===m?await kt.commands.executeCommand("revealFileInOS",p):g===h&&await kt.commands.executeCommand("vscode.open",p)}catch(f){kt.window.showErrorMessage(`Failed to export prompt logs as JSON: ${f}`)}})),this._register(kt.commands.registerCommand(HCn,async l=>{let c=await this.chatRequestProvider.getChildren();if(!c||c.length===0){kt.window.showInformationMessage("No chat prompts found to export.");return}let u=c.filter(p=>p instanceof Nk);if(u.length===0){kt.window.showInformationMessage("No chat prompts found to export.");return}let d;if(l&&typeof l=="string")d=kt.Uri.file(l);else{let f=`copilot_all_prompts_${new Date().toISOString().replace(/[:.]/g,"-").substring(0,19)}.chatreplay.json`,m=await kt.window.showSaveDialog({defaultUri:kt.Uri.file(l_.join(Dk.homedir(),f)),filters:{JSON:["json"],"All Files":["*"]},title:"Export All Prompt Logs as JSON"});if(!m)return;d=m}try{let p=[],f=0;for(let A of u){let b=await a(A);b&&(p.push(b),f+=b.logCount)}let m=JSON.stringify({exportedAt:new Date().toISOString(),totalPrompts:p.length,totalLogEntries:f,prompts:p},null,2);await kt.workspace.fs.writeFile(d,Buffer.from(m,"utf8"));let h="Reveal in Explorer",g="Open File",y=await kt.window.showInformationMessage(`Successfully exported ${p.length} prompts with ${f} log entries to ${d.fsPath}`,h,g);y===h?await kt.commands.executeCommand("revealFileInOS",d):y===g&&await kt.commands.executeCommand("vscode.open",d)}catch(p){kt.window.showErrorMessage(`Failed to export all prompt logs as JSON: ${p}`)}})),this._register(kt.commands.registerCommand(WCn,async l=>{let c=l?.id;c&&await kt.commands.executeCommand("vscode.open",kt.Uri.parse(sd.buildUri({kind:"request",id:c},"rawrequest")))})),this._register(kt.commands.registerCommand("github.copilot.debug.showOutputChannel",async()=>{await kt.commands.executeCommand(`workbench.action.output.show.GitHub.copilot-chat.${Fze}`)}))}};Kq=T([v(0,K),v(1,Ko)],Kq);var Uze=class extends _e{constructor(){super();this.routers=new Ua(10);let t=(0,TZt.createServer)((n,o)=>{for(let[s,a]of this.routers)if(a.route(n,o)){this.routers.get(s);return}o.statusCode=404,o.end("Not Found")});this.port=new Promise((n,o)=>{t.listen(0,"127.0.0.1",()=>n(t.address().port)).on("error",o)}),this._register(rn(()=>t.close()))}async addRouter(t){let n=this.routers.get(t.id);if(n)return n.address;let o=await this.port,s=t.trace.serveRouter(`http://127.0.0.1:${o}`);return this.routers.set(t.id,s),s.address}},xre=class extends _e{constructor(t,n){super();this.requestLogger=t;this._onDidChangeTreeData=new kt.EventEmitter;this.onDidChangeTreeData=this._onDidChangeTreeData.event;this.filters=this._register(n.createInstance(Rre)),this._register(new Qze(this.filters)),this._register(this.requestLogger.onDidChangeRequests(()=>this._onDidChangeTreeData.fire())),this._register(this.filters.onDidChangeFilters(()=>this._onDidChangeTreeData.fire()))}getTreeItem(t){return t}getChildren(t){if(t instanceof Nk)return t.children;if(t)return[];{let n,o=[],s=new Set;for(let a of this.requestLogger.getRequests()){let l=this.logToTreeItem(a);a.chatRequest!==n?.request&&(n&&o.push(n),n=a.chatRequest?Nk.create(a,a.chatRequest,s.has(a.chatRequest)):void 0,s.add(a.chatRequest)),n?(n.children.find(c=>c.id===l.id)||n.children.push(l),n.children.find(c=>c.id===l.id)||n.children.push(l)):o.push(l)}return n&&o.push(n),o.map(a=>a instanceof Nk?a.withFilteredChildren(l=>this.filters.itemIncluded(l)):a).filter(a=>this.filters.itemIncluded(a))}}logToTreeItem(t){switch(t.kind){case 1:return new Zq(t);case 0:return new Xq(t);case 2:return new Jq(t);default:pu(t)}}};xre=T([v(0,Ko),v(1,K)],xre);var Nk=class r extends kt.TreeItem{constructor(t,n){super(t.prompt,kt.TreeItemCollapsibleState.Expanded);this.request=t;this.hasSeen=n;this.contextValue="chatprompt";this.children=[];this.iconPath=new kt.ThemeIcon("comment"),n&&(this.description="(Continued...)")}static{this.ids=new WeakMap}static create(t,n,o){let s=r.ids.get(t);if(s)return s;let a=new r(n,o);return a.id=t.id+"-prompt",r.ids.set(t,a),a}withFilteredChildren(t){let n=new r(this.request,this.hasSeen);return n.children=this.children.filter(t),n}},Jq=class extends kt.TreeItem{constructor(t){super(t.name,kt.TreeItemCollapsibleState.None);this.info=t;this.contextValue="toolcall";this.id=`${t.id}_${t.time}`,this.description=t.args===void 0?"":typeof t.args=="string"?t.args:JSON.stringify(t.args),this.command={command:"vscode.open",title:"",arguments:[kt.Uri.parse(sd.buildUri({kind:"request",id:t.id}))]},this.iconPath=new kt.ThemeIcon("tools")}},Xq=class extends kt.TreeItem{constructor(t){super(`<${t.name}/>`,kt.TreeItemCollapsibleState.None);this.info=t;this.id=t.id,this.description=`${t.tokens} tokens`,this.command={command:IZt,title:"",arguments:[t.id]},this.iconPath=new kt.ThemeIcon("code")}},Zq=class extends kt.TreeItem{constructor(t){super(t.entry.debugName,kt.TreeItemCollapsibleState.None);this.info=t;this.contextValue="request";if(this.id=t.id,t.entry.type==="MarkdownContentRequest"){this.iconPath=t.entry.icon===void 0?void 0:new kt.ThemeIcon(t.entry.icon.id);let n=new Date(t.entry.startTimeMs).toLocaleTimeString([],{hour:"2-digit",minute:"2-digit"});this.description=n}else{let o=`${(t.entry.endTime.getTime()-t.entry.startTime.getTime()).toLocaleString("en-US")}ms`,s=t.entry.startTime.toLocaleTimeString([],{hour:"2-digit",minute:"2-digit"}),a=t.entry.type==="ChatMLSuccess"&&t.entry.usage?`${t.entry.usage.prompt_tokens.toLocaleString("en-US")}tks`:"",l=a?`[${a}] `:"";this.description=`${l}[${o}] [${s}]`,this.iconPath=t.entry.type==="ChatMLSuccess"||t.entry.type==="CompletionSuccess"?void 0:new kt.ThemeIcon("error"),this.tooltip=`${t.entry.type==="ChatMLCancelation"?"cancelled":t.entry.result.type}
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/dist/extension.js:1718:	${a}`)}this.command={command:"vscode.open",title:"",arguments:[kt.Uri.parse(sd.buildUri({kind:"request",id:t.id}))]},this.iconPath??=new kt.ThemeIcon("copilot")}},Rre=class extends _e{constructor(t){super();this.vscodeExtensionContext=t;this._elementsShown=!0;this._toolsShown=!0;this._nesRequestsShown=!0;this._onDidChangeFilters=new kt.EventEmitter;this.onDidChangeFilters=this._onDidChangeFilters.event;this.setElementsShown(!t.workspaceState.get(this.getStorageKey("elements"))),this.setToolsShown(!t.workspaceState.get(this.getStorageKey("tools"))),this.setNesRequestsShown(!t.workspaceState.get(this.getStorageKey("nesRequests")))}getStorageKey(t){return`github.copilot.chat.debug.${t}Hidden`}setElementsShown(t){this._elementsShown=t,this.setShown("elements",this._elementsShown)}setToolsShown(t){this._toolsShown=t,this.setShown("tools",this._toolsShown)}setNesRequestsShown(t){this._nesRequestsShown=t,this.setShown("nesRequests",this._nesRequestsShown)}itemIncluded(t){return t instanceof Nk?!0:t instanceof Xq?this._elementsShown:t instanceof Jq?this._toolsShown:t instanceof Zq&&this.isNesRequest(t)?this._nesRequestsShown:!0}isNesRequest(t){let n=t.info.entry.debugName.toLowerCase();return n.startsWith("nes |")||n==="xtabprovider"}setShown(t,n){kt.commands.executeCommand("setContext",`github.copilot.chat.debug.${t}Hidden`,!n),this.vscodeExtensionContext.workspaceState.update(this.getStorageKey(t),!n),this._onDidChangeFilters.fire()}};Rre=T([v(0,ar)],Rre);var Qze=class extends _e{constructor(e){super(),this._register(kt.commands.registerCommand("github.copilot.chat.debug.showElements",()=>e.setElementsShown(!0))),this._register(kt.commands.registerCommand("github.copilot.chat.debug.hideElements",()=>e.setElementsShown(!1))),this._register(kt.commands.registerCommand("github.copilot.chat.debug.showTools",()=>e.setToolsShown(!0))),this._register(kt.commands.registerCommand("github.copilot.chat.debug.hideTools",()=>e.setToolsShown(!1))),this._register(kt.commands.registerCommand("github.copilot.chat.debug.showNesRequests",()=>e.setNesRequestsShown(!0))),this._register(kt.commands.registerCommand("github.copilot.chat.debug.hideNesRequests",()=>e.setNesRequestsShown(!1)))}};var cx=z(require("vscode"));var Lk=z(Xe());var ax=z(require("vscode"));var XCe=class{constructor(e){this._inputBarrier=e;this._isDisposed=!1;this.picks=[];this._inputBarrier.then(()=>{!this._inner&&!this._isDisposed&&(this.getPick().show(),this.reset())})}async pick(){await this._inputBarrier;let e=this.getPick();return e.busy=!1,e}async input(){await this._inputBarrier;let e=this.getInput();return e.busy=!1,e}reset(){this._inner&&(this._inner.type==="pick"?this._inner.value.items=[]:this._inner.value.value="",this._inner.value.title="\u{1F914}",this._inner.value.placeholder="Thinking...",this._inner.value.busy=!0)}dispose(){this._inner?.value.dispose(),this._isDisposed=!0}getInput(){if(this._inner?.type!=="input"){this._inner?.value.dispose();let e=ax.window.createInputBox();e.ignoreFocusOut=!0,this._inner={type:"input",value:e}}return this._inner.value}getPick(){if(this._inner?.type!=="pick"){this._inner?.value.dispose();let e=ax.window.createQuickPick();e.ignoreFocusOut=!0,this._inner={type:"pick",value:e}}return this._inner.value}},Ah=class{static{this.ID="getInput"}static{this.description="Prompts the user for a short string input."}static{this.schema={type:"object",properties:{id:{type:"string",description:"An alphanumeric identifier for the input."},title:{type:"string",description:"The title of the input box."},placeholder:{type:"string",description:"The placeholder text for the input box."},value:{type:"string",description:"The default value of the input box."}},required:["title","id"]}}static async invoke(e,t){let n=await e.input();n.title=t.title,n.placeholder=t.placeholder,t.value&&(n.value=t.value),n.ignoreFocusOut=!0;let o=await new Promise(s=>{n.onDidAccept(()=>{let a=n.value;s(a)}),n.onDidHide(()=>{s(void 0)}),n.show()});if(e.reset(),o===void 0)throw new Hr;return e.picks.push({id:t.id,title:t.title,choice:o}),new ax.LanguageModelToolResult([new ax.LanguageModelTextPart(`${t.title}: ${o}`)])}},lx=class{static{this.ID="getChoice"}static{this.description="Prompts the user to select from a list of choices. It returns the label or labels of the choices that were selected"}static{this.schema={type:"object",properties:{title:{type:"string",description:"The title of the pick box."},placeholder:{type:"string",description:"The placeholder text for the pick box."},canPickMany:{type:"boolean",description:"If true, the user can select multiple choices."},choices:{type:"array",items:{type:"object",properties:{label:{type:"string",description:"The primary label of the choice of the choice."},description:{type:"string",description:"A brief extra description."}}},minItems:1}},required:["title","choices"]}}static async invoke(e,t){let n=await e.pick();n.title=t.title,n.placeholder=t.placeholder,n.items=t.choices,n.canSelectMany=t.canPickMany??!1,n.ignoreFocusOut=!0;let o=await new Promise(s=>{n.onDidAccept(()=>{let a=t.canPickMany?n.selectedItems.map(l=>l.label):n.selectedItems[0]?.label;s(a)}),n.onDidHide(()=>{s(void 0)}),n.show()});if(e.reset(),o===void 0)throw new Hr;return Array.isArray(o)&&(o="- "+o.join(`
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/dist/extension.js:1814:stderr: ${s.stderr}`),!1):!0}async readServerManifest(e,t,n,o){let s=PZt.default.join(e,t.toLowerCase(),n.toLowerCase(),".mcp","server.json");try{await c_.access(s,c_.constants.R_OK)}catch{o.info(`No server.json found at ${s}. Proceeding without server.json for ${t}@${n}.`);return}let a=await c_.readFile(s,"utf8"),l=JSON.parse(a);if(l?.packages)for(let c of l.packages)c?.registry_name==="nuget"&&(c.name.toUpperCase()!==t.toUpperCase()&&o.warn(`Package ID mismatch in NuGet.mcp / server.json: expected ${t}, found ${c.name}.`),c.version.toUpperCase()!==n.toUpperCase()&&o.warn(`Package version mismatch in NuGet.mcp / server.json: expected ${n}, found ${c.version}.`),c.name=t,c.version=n);return l}};var Ok=class extends _e{constructor(t,n,o,s){super();this.telemetryService=t;this.logService=n;this.fetcherService=o;this.instantiationService=s;this._register(rn(()=>this.pendingSetup?.cts.dispose(!0))),this._register(cx.commands.registerCommand("github.copilot.chat.mcp.setup.flow",async a=>{let l="Failed",c;try{if(this.pendingSetup?.pendingArgs.name.toUpperCase()!==a.name.toUpperCase()){l="NameMismatch",cx.window.showErrorMessage(Po("mcp.setup.nameMismatch","Failed to generate MCP server configuration with a matching package name. Expected '{0}' but got '{1}' from generated configuration.",a.name,this.pendingSetup?.pendingArgs.name));return}return this.pendingSetup.canPrompt.complete(void 0),c=await this.pendingSetup.done,l="Done",c}finally{this.telemetryService.sendMSFTTelemetryEvent("mcp.setup.flow",{finalState:l,configurationType:c?.type,packageType:this.pendingSetup?.validateArgs.type,packageName:await this.lowerHash(this.pendingSetup?.pendingArgs.name||a.name),packageVersion:this.pendingSetup?.pendingArgs.version},{durationMs:this.pendingSetup?.stopwatch.elapsed()??-1})}})),this._register(cx.commands.registerCommand("github.copilot.chat.mcp.setup.validatePackage",async a=>{let l=new Vo,c=await Ok.validatePackageRegistry(a,this.logService,this.fetcherService);return c.state==="ok"&&this.enqueuePendingSetup(a,c,l),this.telemetryService.sendMSFTTelemetryEvent("mcp.setup.validatePackage",c.state==="ok"?{state:c.state,packageType:a.type,packageName:await this.lowerHash(c.name||a.name),packageVersion:c.version}:{state:c.state,packageType:a.type,packageName:await this.lowerHash(a.name),errorType:c.errorType},{durationMs:l.elapsed()}),c.state==="ok"?{state:"ok",publisher:c.publisher,name:c.name,version:c.version}:{state:"error",error:c.error,helpUri:c.helpUri,helpUriLabel:c.helpUriLabel,errorType:c.errorType}})),this._register(cx.commands.registerCommand("github.copilot.chat.mcp.setup.check",()=>1))}async lowerHash(t){return t?await rf(t.toLowerCase()):void 0}async enqueuePendingSetup(t,n,o){let s=new Do,a=new ro,l=new XCe(Qc(a.p,s.token)),c=(async()=>{if(n.getServerManifest){let A;try{A=await n.getServerManifest(a.p)}catch(b){this.logService.warn(`Unable to fetch server manifest for ${t.type} package ${n.name}@${n.version}. Configuration will be generated from the package README.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/dist/extension.js:1815:Error: ${b}`)}if(A)return{type:"server.json",name:n.name,server:A}}let u=`Generate an MCP configuration for ${t.name}`,p=await this.instantiationService.createInstance(Mk,{toolCallLimit:100,conversation:new P0(wt(),[new Zh(void 0,{type:"user",message:u})]),request:{attempt:0,enableCommandDetection:!1,isParticipantDetected:!1,location:Fy.Panel,command:void 0,location2:void 0,model:(await cx.lm.selectChatModels())[0],prompt:u,references:[],toolInvocationToken:wt(),toolReferences:[],tools:new Map,id:"1",sessionId:""},props:{targetSchema:t.targetConfig,packageName:n.name,packageVersion:n.version,packageType:t.type,pickRef:l,packageReadme:n.readme||"<empty>"}}).run(void 0,s.token);if(p.response.type!=="success"){cx.window.showErrorMessage(Po("mcp.setup.failed","Failed to generate MCP configuration for {0}: {1}",t.name,p.response.reason));return}let{name:f,...m}=Zf(Yc(p.response.value),A=>{try{let b=JSON.parse(A.code);if(b&&typeof b=="object"&&b.hasOwnProperty("mcpServers")){let[E,S]=Object.entries(b.mcpServers)[0];return{...S,name:E}}return b}catch{return}}),h=[],g,y=o5(m,A=>{if(typeof A=="string"){let b=l.picks.find(E=>E.choice===A);if(b){h.push({id:b.id,type:"promptString",description:b.title}),g??={};let E="${input:"+b.id+"}";return g[E]=A,E}}});return{type:"vscode",name:f,server:y,inputs:h,inputValues:g}})().finally(()=>{s.dispose(),l.dispose()});this.pendingSetup?.cts.dispose(!0),this.pendingSetup={cts:s,canPrompt:a,done:c,validateArgs:t,pendingArgs:n,stopwatch:o}}static async validatePackageRegistry(t,n,o){try{if(t.type==="npm"){let s=await o.fetch(`https://registry.npmjs.org/${encodeURIComponent(t.name)}`,{method:"GET"});if(!s.ok)return{state:"error",errorType:"NotFound",error:Po("mcp.setup.npmPackageNotFound","Package {0} not found in npm registry",t.name)};let a=await s.json(),l=a["dist-tags"]?.latest;return{state:"ok",publisher:a.maintainers?.[0]?.name||"unknown",name:t.name,version:l,readme:a.readme}}else if(t.type==="pip"){let s=await o.fetch(`https://pypi.org/pypi/${encodeURIComponent(t.name)}/json`,{method:"GET"});if(!s.ok)return{state:"error",errorType:"NotFound",error:Po("mcp.setup.pythonPackageNotFound","Package {0} not found in PyPI registry",t.name)};let a=await s.json(),l=a.info?.author||a.info?.author_email||"unknown",c=a.info?.name||t.name,u=a.info?.version;return{state:"ok",publisher:l,name:c,version:u,readme:a.info?.description}}else{if(t.type==="nuget")return await new tTe(n,o).getNuGetPackageMetadata(t.name);if(t.type==="docker"){let[s,a]=t.name.includes("/")?t.name.split("/",2):["library",t.name],l=await o.fetch(`https://hub.docker.com/v2/repositories/${encodeURIComponent(s)}/${encodeURIComponent(a)}`,{method:"GET"});if(!l.ok)return{state:"error",errorType:"NotFound",error:Po("mcp.setup.dockerRepositoryNotFound","Docker image {0} not found in Docker Hub registry",t.name)};let c=await l.json();return{state:"ok",publisher:c.namespace||c.user||"unknown",name:t.name,readme:c.full_description||c.description}}}return{state:"error",error:Po("mcp.setup.unknownPackageType","Unsupported package type: {0}",t.type),errorType:"UnknownPackageType"}}catch(s){return{state:"error",error:Po("mcp.setup.errorQueryingPackage","Error querying package: {0}",s.message),errorType:"UnhandledError"}}}};Ok=T([v(0,De),v(1,ue),v(2,rr),v(3,K)],Ok);var nTe=z(require("vscode"));var KCn="github.copilot.notebookFollowInSessionEnabled",eV=class extends _e{constructor(t,n){super();this._configurationService=t;this._notebookService=n;this.followSettingEnabled=this._configurationService.getConfig(ae.NotebookFollowCellExecution),this.updateFollowContext(this.followSettingEnabled),this._register(_o.runAndSubscribe(this._configurationService.onDidChangeConfiguration,o=>{(!o||o.affectsConfiguration(ae.NotebookFollowCellExecution.fullyQualifiedId))&&(this.followSettingEnabled=this._configurationService.getConfig(ae.NotebookFollowCellExecution),this.updateFollowContext(this.followSettingEnabled))})),this._register(nTe.commands.registerCommand("github.copilot.chat.notebook.enableFollowCellExecution",()=>{this.updateFollowContext(!0)})),this._register(nTe.commands.registerCommand("github.copilot.chat.notebook.disableFollowCellExecution",()=>{this.updateFollowContext(!1)}))}updateFollowContext(t){nTe.commands.executeCommand("setContext",KCn,t),this._notebookService.setFollowState(t)}};eV=T([v(0,Pe),v(1,dn)],eV);var JO=z(Ht()),Uk=require("fs"),HZt=require("net"),rl=z(require("vscode"));var kZt=z(Ht());var oTe=()=>kZt.t`The model asked to run a build task, which requires a workspace folder. Please open a folder and retry.`,Bk=Me("ILaunchConfigService");var di=z(Xe());var iTe=(r,e)=>{let t=Yc(r),n=t?t.map(a=>a.code):[r],o=DZt(n,a=>{if(a&&"configurations"in a&&Array.isArray(a.configurations))return a.configurations=a.configurations.map(l=>NZt(l,e)),a;if(a&&"type"in a&&"request"in a)return{configurations:[NZt(a,e)]}}),s=DZt(n,a=>{if(a&&"tasks"in a&&Array.isArray(a.tasks))return a;if(a&&"type"in a&&"label"in a)return{tasks:[a]}});return o&&s?{...o,...s}:o};function DZt(r,e){for(let t of r)try{let n=R0(t),o=e(n);if(o)return o}catch{}}var JCn=["name","type","request","debugServer","preLaunchTask","postDebugTask","presentation","internalConsoleOptions","suppressMultipleSessionWarning"];function NZt(r,e){"type"in r&&r.type==="python"&&(r.type="debugpy");let t=XCn(r.type,e);if(!t)return r;for(let n of Object.keys(r))JCn.includes(n)||n in t||delete r[n];return r}function LZt(r,e){for(let t of e.allAcrossExtensionHosts){let n=t.packageJSON?.contributes?.debuggers;if(!n)continue;let o=n.filter(a=>a.type===r&&!a.deprecated);if(!Array.isArray(o)||o.length===0)continue;let s=o.filter(a=>!!a.configurationAttributes.launch||!!a.configurationAttributes.attach).map(a=>{let l=[a.configurationAttributes.launch?.properties,a.configurationAttributes.attach?.properties].filter(c=>c!==void 0).flat();return Object.entries(l).map(c=>Object.entries(c[1]).map(u=>`${u[0]}: ${u[1].description||u[1].markdownDescription}`).flat()).flat()}).flat();if(s.length)return s}}function XCn(r,e){for(let t of e.allAcrossExtensionHosts){let n=t.packageJSON?.contributes?.debuggers;if(!n)continue;let o=n.filter(s=>s.type===r&&!s.deprecated);if(!(!Array.isArray(o)||o.length===0))return o.flatMap(s=>[s.configurationAttributes.launch?.properties,s.configurationAttributes.attach?.properties]).filter(s=>s!==void 0).reduce((s,a)=>({...s,...a}),{})}}function ZCn(r,e){let t={configurations:[{type:"node",request:"launch",name:"Launch Program",program:"${workspaceFolder}/app/index.js",args:["--serve"]}]},n={configurations:[{type:"cppvsdbg",request:"launch",name:"Launch Program",program:"${workspaceFolder}/${input:executableName}.exe",stopAtEntry:!0}],inputs:[{type:"promptString",id:"executableName",description:"Name of your executable"}]},o=s=>e===1?JSON.stringify(s):`\`\`\`json
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/dist/extension.js:1864:`))))}};async function eTn(r,e){for(;;){let t=await e(r);if(t!==void 0)return t;let n=du(r);if(n===r)return;r=n}}var sTe=Me("IDebugCommandToConfigConverter"),nV=class{constructor(e,t,n,o,s){this.endpointProvider=e;this.instantiationService=t;this.workspace=n;this.telemetry=o;this.extensionsService=s}async convert(e,t,n){let o=rTn(e,this.workspace),s=await this.endpointProvider.getChatEndpoint("gpt-4.1"),l=await It.create(this.instantiationService,s,Fk,{input:{type:1,relativeCwd:o?.path,absoluteCwd:e,args:t},history:[]}).render(void 0,n),c=await s.makeChatRequest("debugCommandToConfig",l.messages,void 0,n,6);if(c.type!=="success")return{ok:!1,config:void 0,text:c.reason,workspaceFolder:o?.folder};let u=iTe(c.value,this.extensionsService);return this.telemetry.sendMSFTTelemetryEvent("onboardDebug.configGenerated",{configType:u?.configurations[0].type},{ok:u?1:0}),{ok:!0,config:u,text:c.value,workspaceFolder:o?.folder}}};nV=T([v(0,Je),v(1,K),v(2,Oe),v(3,De),v(4,yl)],nV);function rTn(r,e){let t;for(let n of e.getWorkspaceFolders()){let o=ki(n.fsPath,r),s=Bh(o)?1/0:Py(o,"..");(!t||s<t.distance||s===t.distance&&o.length<t.rel.length)&&(t={rel:Qn("${workspaceFolder}",o).replaceAll("\\","/"),distance:s,folder:n})}return t&&{folder:t.folder,path:t.rel}}var MZt="copilot-chat.terminalToDebugging.configs",oTn=30,iTn={"73687c45-cancelled":{kind:3},"73687c45-extension":{kind:2,debugType:"node"},"73687c45-noconfig":{kind:0,text:"No config generated"},"73687c45-ok":{kind:1,folder:void 0,config:{type:"node",name:"Generated Node Launch",request:"launch",program:"${workspaceFolder}/app.js"}}},oV=class{constructor(e,t,n,o,s,a,l){this.interactor=e;this.telemetry=t;this.context=n;this.commandToConfig=o;this.extensionsService=s;this.workspaceService=a;this.launchConfigService=l}async start({args:e,cwd:t,forceNew:n,printOnly:o,save:s},a){this.telemetry.sendMSFTTelemetryEvent("onboardDebug.commandExecuted",{binary:e[0]});for(let[p,f]of Object.entries(iTn))if(e.includes(p))return f;let l=this.tryMatchExistingConfig(t,e);if(!l||n){this.interactor.isGenerating();let p=await this.commandToConfig.convert(t,e,a);if(!p.ok)return{kind:0,text:p.text};l={args:e,cwd:t,folder:p.workspaceFolder,inputs:[],config:p.config},this.telemetry.sendMSFTTelemetryEvent("onboardDebug.configGenerated",{binary:e[0],debugType:l.config.configurations[0].type})}let c=l.config.configurations[0],u=l.folder&&this.workspaceService.getWorkspaceFolder(Fe.revive(l.folder));if(!o&&l.config.tasks?.length&&!await this.interactor.ensureTask(u,l.config.tasks[0])&&!s)return{kind:3};if(o||s)return this.saveConfigInLRU(l),s&&await this.save(l.config,u),{kind:1,folder:u,config:c};if(!this.hasMatchingExtension(c))return{kind:2,debugType:c.type};let d=await this.launchConfigService.resolveConfigurationInputs(l.config,new Map(l.inputs),this.interactor);return d?(l.inputs=[...d.inputs],this.saveConfigInLRU(l),{kind:1,folder:u,config:d.config}):{kind:3}}async save(e,t){await this.launchConfigService.add(t,e),t&&await this.launchConfigService.show(t,e.configurations[0].name)}hasMatchingExtension(e){for(let t of this.extensionsService.allAcrossExtensionHosts){let n=t.packageJSON?.contributes?.debuggers;if(Array.isArray(n)&&n.some(o=>o&&o.type===e.type))return!0}return!1}tryMatchExistingConfig(e,t){let n=this.readStoredConfigs(),o=n.findIndex(s=>s.cwd===e&&ac(s.args,t));if(o!==-1)return n[o]}readStoredConfigs(){return this.context.workspaceState.get(MZt,[])}saveConfigInLRU(e){let t=this.readStoredConfigs().slice(),n=t.indexOf(e);for(n>=1&&t.splice(n,1),t.unshift(e);t.length>oTn;)t.pop();this.context.workspaceState.update(MZt,t)}};oV=T([v(1,De),v(2,ar),v(3,sTe),v(4,yl),v(5,Oe),v(6,Bk)],oV);var OZt=require("stream"),aTe=class extends OZt.Transform{constructor(t){super();this.prefix=[];this.splitSuffix=Buffer.alloc(0);if(typeof t=="string"&&t.length===1)this.splitter=t.charCodeAt(0);else if(typeof t=="number")this.splitter=t;else throw new Error("not implemented here")}_transform(t,n,o){let s=0;for(;s<t.length;){let a=t.indexOf(this.splitter,s);if(a===-1)break;let l=t.subarray(s,a),c=this.prefix.length||this.splitSuffix.length?Buffer.concat([...this.prefix,l,this.splitSuffix]):l;this.push(c),this.prefix.length=0,s=a+1}s<t.length&&this.prefix.push(t.subarray(s)),o()}_flush(t){this.prefix.length&&this.push(Buffer.concat([...this.prefix,this.splitSuffix])),t()}};var BZt=process.platform==="win32"?`\r
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/dist/extension.js:2018:`;var VZt="copilot-chat.terminalToDebugging.registered",sV="PATH",XO="copilot-debug",Yze="copilotDebugCommand.js",aV=class extends _e{constructor(t,n,o,s,a,l,c,u){super();this.context=t;this.logService=n;this.instantiationService=o;this.configurationService=s;this.launchConfigService=a;this.authService=l;this.telemetryService=c;this.tasksService=u;this._register(rl.window.registerUriHandler(this)),this._register(this.configurationService.onDidChangeConfiguration(d=>{d.affectsConfiguration(ae.TerminalToDebuggerEnabled.fullyQualifiedId)&&(this.registerSerializer=this.registerSerializer.then(()=>this.registerEnvironment()))})),this._register(rl.commands.registerCommand("github.copilot.chat.startCopilotDebugCommand",async()=>{let d=rl.window.createTerminal();d.show(!1),d.sendText("copilot-debug <your command here>",!1)})),this.registerSerializer=this.registerEnvironment()}async ensureTask(t,n,o){return t?this.tasksService.hasTask(t,n)?!0:(o.printJson(n),await o.confirm(JO.t`The model indicates the above task should be run before debugging. Do you want to save+run it?`,!0)?(n.presentation??={},n.presentation.reveal="silent",await this.tasksService.ensureTask(t,n),!0):!1):(o.printLabel("red",oTe()),!1)}handleUri(t){let n=process.platform==="win32"?"\\\\.\\pipe\\"+t.path.slice(1):t.path,o=new Do,a=new URLSearchParams(t.query).get("referrer");this.telemetryService.sendMSFTTelemetryEvent("uriHandler",{referrer:a||"unknown"});let l=(0,HZt.connect)(n,()=>{this.logService.info(`Got a debug connection on ${n}`);let c=new lTe(l),u=new iV(c),{launchConfigService:d,authService:p}=this,f=(h,g)=>u.exit(h,g),m=this.instantiationService.createInstance(oV,{ensureTask:(h,g)=>this.ensureTask(h||rl.workspace.workspaceFolders?.[0].uri,g,u),isGenerating:()=>u.printLabel("blue",JO.t("Generating debug configuration...")),prompt:async(h,g)=>u.question(h,g).then(y=>y||g)});c.registerMethod("start",async function h(g){p.copilotToken||await p.getAnyGitHubSession({createIfNone:!0});let y=await m.start(g,o.token);switch(y.kind){case 0:await u.printLabel("red",JO.t`Could not create a launch configuration: ${y.text}`),await f(1);break;case 1:g.printOnly?(await u.output("stdout",JSON.stringify(y.config,void 0,2).replaceAll(`
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/dist/extension.js:2026: -`))))}};var pTe=Me("IDebuggableCommandIdentifier"),cV=class extends _e{constructor(t,n,o,s,a){super();this.configurationService=t;this.context=n;this.languageToolsProvider=s;this.fileSystemService=a;this.recentlySeenLanguages=new Set;this._register(o.onDidOpenTextDocument(l=>{pTn.includes(l.languageId)||this.recentlySeenLanguages.add(l.languageId)}))}async isDebuggable(t,n,o){if(!this.isGloballyEnabled())return!1;let s=uTn(n).toLowerCase();return this.getSpecificTreatment(s)??this.isWellKnownCommand(s)??await this.isWorkspaceLocal(t,s)??await this.isModelSuggestedCommand(s,o)??!1}isGloballyEnabled(){return this.configurationService.getConfig(ae.TerminalToDebuggerEnabled)}async isWorkspaceLocal(t,n){let o=Bh(n)?Fe.file(n):t&&Fe.joinPath(t,n);if(o)try{return await this.fileSystemService.stat(o),!0}catch{}}async isModelSuggestedCommand(t,n){let o=this.loadModelKnownCommands();for(let c of o.languages)this.recentlySeenLanguages.delete(c);if(o.commands.some(c=>this.commandIncludes(t,c)))return!0;if(!this.recentlySeenLanguages.size)return!1;let s=[...this.recentlySeenLanguages];this.recentlySeenLanguages.clear();let{commands:a,ok:l}=await this.languageToolsProvider.getToolsForLanguages(s,n);return l&&this.storeModelKnownCommands({languages:o.languages.concat(s),commands:Ont(o.commands.concat(a))}),a.some(c=>this.commandIncludes(t,c))}isWellKnownCommand(t){return dTn.some(n=>this.commandIncludes(t,n))||void 0}getSpecificTreatment(t){let n=this.configurationService.getConfig(ae.Internal.TerminalToDebuggerPatterns);for(let o of n){if(o.startsWith("!")&&this.commandIncludes(t,o))return!1;if(this.commandIncludes(t,o))return!0}}commandIncludes(t,n){let o=t.indexOf(n);return o>=0&&(o===0||t[o-1]===" ")&&(o+n.length===t.length||t[o+n.length]===" ")}loadModelKnownCommands(){return this.context.globalState.get(GZt,{languages:[],commands:[]})}storeModelKnownCommands(t){return this.context.globalState.update(GZt,t)}};cV=T([v(0,Pe),v(1,ar),v(2,Oe),v(3,dTe),v(4,cr)],cV);var GZt="chat.debuggableCommands";function uTn(r){let t=/\s*([^\s]+)/.exec(r);return t?t[1]:r}var dTn=["abap","ant","automake","autotools","ava","babel","bcp","behat","behave","biber","bibtex","bmake","boot","broccoli-sass","browserify","build_runner","bundler","busted","cabal","cargo","cargo-bench","cargo-fuzz","cargo-make","cargo-run","cargo-test","cargo-watch","carthage","carton","clang","clippy-driver","clj","clojure","cmake","cocoapods","codeception","common_test","composer","conan","coverage","cpan","cpanm","csc","ct_run","ctest","cucumber","cuda-gdb","cuda-memcheck","cypress","dart","dart-sass","dart2js","dartanalyzer","dartdevc","db2cli","ddemangle","devenv","devtools","dfix","dialyzer","dmd","doctest","dotnet","dotnet-script","dotnet-test-nunit","dotnet-test-xunit","dpp","dscanner","dsymutil","dub","dune","dustmite","dvilualatex","dvipdf","dvipdfmx","dvips","erl","erlang","erlc","esbuild","escript","eunit","eyeglass","fastlane","fennel","flutter","forever","fpc","fsharpc","fsi","g","gaiden","gcc","gcov","gdb","gdc","ghc","ghcid","gmake","gmaven","go","gpars","gradle","grape","griffon","grinder","grip","groovy","groovyc","grunt","grunt-sass","gulp","gulp-sass","hdevtools","hlint","hspec","irb","isql","jasmine","java","javac","jazzy","jdeps","jest","jlink","julia","junit","kaocha","karma","kobalt","kotest","kotlin-dsl","kotlinc","kscript","latexmk","lazbuild","lcov","ld","ldc2","ldoc","leiningen","lldb","lua","luacheck","luajit","lualatex","luarocks","luaunit","make","markdown","markdown-it","markdown-pdf","marked","matlab","maven","mbuild","mcc","md2pdf","mdbook","merlin","mex","midje","minitest","mlint","mmake","mocha","mockk","mono","moonscript","msbuild","mssql-cli","mstest","multimarkdown","mysql","ncu","ninja","nmake","node","node-sass","nose","npm","npx","nrepl","nsight","nsys","nunit-console","nvcc","ocamlbuild","ocamlc","ocamldebug","ocamlfind","ocamlopt","ocamlrun","opam","otest","otool","paket","panda","pandoc","parcel","pdflatex","perl","perl6","perlbrew","pgbench","phing","php","php-cs-fixer","phpcs","phpdbg","phpstan","phpunit","pip","pipenv","plackup","playwright","pm2","pmake","powershell","ppc386","ppcrossarm","ppcrossavr","ppcrossmips","ppcrossppc","ppcrosssparc","ppcrosswin32","ppcrossx64","protractor","prove","pry","psql","psysh","pub","pwsh","pytest","python","qmake","quickcheck","rails","rake","rakudo","rdmd","react-scripts","rebar3","relx","remake","rollup","rspec","rubocop","ruby","runghc","rustc","rustup","sass","sassc","scons","showdown","sinatra","speclj","spek","spock","spring-boot","sqlcmd","sqlite3","sqsh","stack","svelte-kit","swift","swiftc","test","test-runner","testng","testthat","tools","torch","tox","ts-node","tsc","unittest","utop","valgrind","vbc","virtualenv","vite","vstest","vue-cli-service","vue-test-utils","webdev","webpack","x","xcodebuild","xctest","xelatex","xunit","yarn","zef","zig"],pTn=["abap","bat","bibtex","c","clojure","code-refactoring","coffeescript","cpp","csharp","css","cuda-cpp","d","dart","diff","dockercompose","dockerfile","erlang","fsharp","git-commit","git-rebase","github-issues","go","graphql","groovy","haml","handlebars","haskell","html","ini","jade","java","javascript","javascriptreact","json","jsonc","julia","kotlin","latex","less","log","lua","makefile","markdown","matlab","objective-c","objective-cpp","ocaml","pascal","perl","perl6","php","pip-requirements","plaintext","powershell","pug","python","r","razor","ruby","rust","sass","scss","shaderlab","shellscript","slim","snippets","sql","stylus","svelte","swift","tex","text","toml","typescript","typescriptreact","vb","vue","vue-html","xml","xsl","yaml","zig"];var fTn="copilot-chat.terminalToDebugging",mTn="copilot-chat.terminalToDebuggingSuccess",uV=class extends _e{constructor(t){super();this.debuggableCommandIdentifier=t;this.lastExecutionFor=new Map;this._register(dx.window.registerTerminalQuickFixProvider(fTn,this)),this._register(dx.window.registerTerminalQuickFixProvider(mTn,this)),this._register(dx.window.onDidCloseTerminal(n=>{this.lastExecutionFor.delete(n)})),this._register(dx.window.onDidStartTerminalShellExecution(n=>{this.lastExecutionFor.set(n.terminal,n)})),this._register(dx.commands.registerCommand("github.copilot.chat.rerunWithCopilotDebug",()=>{let n=dx.window.activeTerminal,o=n&&this.lastExecutionFor.get(n);o&&n.sendText(`${XO} ${o.execution.commandLine.value}`,!0)}))}async provideTerminalQuickFixes(t,n){let s=dx.window.activeTerminal?.shellIntegration?.cwd;if(await this.debuggableCommandIdentifier.isDebuggable(s,t.commandLine,n))return{terminalCommand:`${XO} ${t.commandLine}`,shouldExecute:!1}}};uV=T([v(0,pTe)],uV);var Rc=z(require("vscode"));var dV=class extends _e{constructor(t,n,o,s){super();this._conversationStore=t;this.launchConfigService=n;this.feedbackReporter=o;this.tasksService=s;this._register(Rc.commands.registerCommand("github.copilot.debug.generateSTest",async()=>{if(!this.feedbackReporter.canReport)return;let l=this._conversationStore.lastConversation?.getLatestTurn();if(l){let c=await HHe(l);c&&(Rc.env.clipboard.writeText(c.join(`
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/dist/extension.js:2033:`).forEach((c,u)=>{if(a<s.length){let d=s[a];d.kind==="userQuery"?c.match(`"prompt": "${d.query.trim()}`)&&(d.line=u+1,a++):c.match(`"id": "${d.id}"`)&&(d.line=u+1,a++)}}),s}};async function kTn(){await ITe.commands.executeCommand("workbench.panel.chat.view.copilot.focus"),await ITe.commands.executeCommand("type",{text:"@chatReplay"}),await ITe.commands.executeCommand("workbench.action.chat.submit")}var EV=class extends _e{constructor(t){super();this._instantiationService=t;let n=new DKe;this._register(ju.debug.registerDebugConfigurationProvider("vscode-chat-replay",n));let o=new kKe;this._register(ju.debug.registerDebugAdapterDescriptorFactory("vscode-chat-replay",o)),this.registerStartReplayCommand(),this.registerEnableWorkspaceEditTracingCommand(),this.registerDisableWorkspaceEditTracingCommand(),ju.commands.executeCommand("setContext","github.copilot.chat.replay.workspaceEditTracing",!1)}registerStartReplayCommand(){this._register(ju.commands.registerCommand("github.copilot.chat.replay",async()=>{let t=ju.window.activeTextEditor;if(!t||t.document.languageId!=="chatReplay"){ju.window.showInformationMessage("Open a chat replay file to debug.");return}let n={type:"vscode-chat-replay",name:"Debug Chat Replay",request:"launch",program:t.document.uri.fsPath,stopOnEntry:!0};await ju.debug.startDebugging(void 0,n)}))}registerEnableWorkspaceEditTracingCommand(){this._register(ju.commands.registerCommand("github.copilot.chat.replay.enableWorkspaceEditTracing",async()=>{this._instantiationService.invokeFunction(n=>n.get(Ko)).enableWorkspaceEditTracing(),await ju.commands.executeCommand("setContext","github.copilot.chat.replay.workspaceEditTracing",!0)}))}registerDisableWorkspaceEditTracingCommand(){this._register(ju.commands.registerCommand("github.copilot.chat.replay.disableWorkspaceEditTracing",async()=>{this._instantiationService.invokeFunction(n=>n.get(Ko)).disableWorkspaceEditTracing(),await ju.commands.executeCommand("setContext","github.copilot.chat.replay.workspaceEditTracing",!1)}))}};EV=T([v(0,K)],EV);var kKe=class{createDebugAdapterDescriptor(e){return new ju.DebugAdapterInlineImplementation(new xTe(e.workspaceFolder))}},DKe=class{resolveDebugConfiguration(e,t,n){if(!t.type&&!t.request&&!t.name){let o=ju.window.activeTextEditor;o&&o.document.languageId==="chatReplay"&&(t.type="vscode-chat-replay",t.name="Launch",t.request="launch",t.program="${file}",t.stopOnEntry=!0)}return t.program?t:ju.window.showInformationMessage("Cannot find a program to debug").then(o=>{})}};var SV=z(require("vscode"));var _V=class extends _e{constructor(t,n){super();this.telemetryService=t;this.feedbackReporter=n;this._register(SV.commands.registerCommand("github.copilot.search.markHelpful",()=>{this.sendFeedback("helpful")})),this._register(SV.commands.registerCommand("github.copilot.search.markUnhelpful",()=>{this.sendFeedback("unhelpful")})),this._register(SV.commands.registerCommand("github.copilot.search.feedback",()=>{this.sendFeedback("feedback"),SV.commands.executeCommand("github.copilot.report",`Copilot search feedback: "${An.latestQuery}"`)}))}sendFeedback(t){this.feedbackReporter.reportSearch(t),SV.commands.executeCommand("setContext",An.feedBackSentKey,!0)}};_V=T([v(0,De),v(1,kS)],_V);var cer=require("vscode");var Hk=require("vscode");var CV=class r extends _e{constructor(t){super();this.scheme=t;this._documents=new Map;this._didChangeEmitter=new Hk.EventEmitter;this._register(Hk.workspace.registerTextDocumentContentProvider(t,{provideTextDocumentContent:(n,o)=>{let s=this._documents.get(n.toString());return s?s.content:"(document not found)"},onDidChange:this._didChangeEmitter.event}))}static{this.id=0}clear(){this._documents.clear()}createDocument(t="",n="txt"){let o=Hk.Uri.parse(`${this.scheme}:///virtual-text-document/${r.id++}.${n}`),s=new RTe(o,()=>this._didChangeEmitter.fire(o));return s.setContent(t),this._documents.set(o.toString(),s),s}createUriForData(t,n="txt"){return this.createDocument(t,n).uri}createDocumentForUri(t){if(t.scheme!==this.scheme)throw new Error(`Invalid scheme: ${t.scheme}`);let n=new RTe(t,()=>this._didChangeEmitter.fire(t));return this._documents.set(t.toString(),n),n}openUri(t){Hk.commands.executeCommand("vscode.open",t)}},RTe=class{constructor(e,t){this.uri=e;this._handleChanged=t;this._content=""}get content(){return this._content}setContent(e){this._content=e,this._handleChanged()}};var TV=class extends _e{constructor(t){super();this._authenticationService=t;this._copilotToken=fi(this,this._authenticationService.onDidAuthenticationChange,()=>this._authenticationService.copilotToken);this._isInternal=this._copilotToken.map(t=>!!t?.isInternal);this._register(My((n,o)=>{let a=o.add(new CV("ccsettings")).createDocumentForUri(cer.Uri.parse("ccsettings://root/schema.json")),l=this._getSchema(n);a.setContent(JSON.stringify(l))}))}_getSchema(t){let n={};if(this._isInternal.read(t)){for(let s of Nj.configs.values())n[s.fullyQualifiedId]={description:`Recognized Advanced Setting.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/dist/extension.js:2257:`),u=c!==-1?o.length-c-1:o.length,d=n.end.character-(n.end.line>n.start.line?0:n.start.character),p=u-d;l+=p}return new wr.Range(t.start,new wr.Position(a,l))}applyTextContentChangeEventToOutsideRanges(e,t){if(t.length===0)return t;let n=e.range,o=e.text,s=t[t.length-1];if(n.start.isAfter(s.end))return t;let a=(o.match(/\n/g)||[]).length-(n.end.line-n.start.line),l=[];for(let c of t)if(c.end.isBefore(n.start))l.push(c);else if(c.start.isAfter(n.end))a===0?l.push(c):l.push(new wr.Range(new wr.Position(c.start.line+a,c.start.character),new wr.Position(c.end.line+a,c.end.character)));else return;return l}},KTe;(e=>{function r(t){return t.uri.scheme==="file"&&(t.languageId==="typescript"||t.languageId==="typescriptreact")}e.consider=r})(KTe||={});var SJe=class{constructor(){this.disposables=new yt,this.order=new qTe({max:32}),this.disposables.add(wr.window.onDidChangeActiveTextEditor(t=>{if(t===void 0)return;let n=t.document;KTe.consider(n)&&this.order.set(n.uri.toString(),n.uri.fsPath)})),this.disposables.add(wr.workspace.onDidCloseTextDocument(t=>{this.order.delete(t.uri.toString())})),this.disposables.add(wr.window.tabGroups.onDidChangeTabs(t=>{for(let n of t.closed)n.input instanceof wr.TabInputText&&this.order.delete(n.input.uri.toString())}));let e=new Set;for(let t of wr.workspace.textDocuments)KTe.consider(t)&&e.add(t.uri.toString());for(let t of wr.window.tabGroups.all)for(let n of t.tabs)n.input instanceof wr.TabInputText&&e.has(n.input.uri.toString())&&this.order.set(n.input.uri.toString(),n.input.uri.fsPath);if(wr.window.activeTextEditor!==void 0){let t=wr.window.activeTextEditor.document;KTe.consider(t)&&this.order.set(t.uri.toString(),t.uri.fsPath)}}getNeighborFiles(e){let t=[],n=e.uri.toString();for(let[o,s]of this.order.entries())if(o!==n&&(t.push(s),t.length>=10))break;return t}dispose(){this.disposables.dispose()}},Rer;(e=>{function r(t,n,o,s,a,l,c,u,d){return{file:wr.Uri.file(t.fileName),line:n.line+1,offset:n.character+1,startTime:s,timeBudget:a,primaryCharacterBudget:(o.tokenBudget??7*1024)*4,secondaryCharacterBudget:xJe*4,includeDocumentation:d,neighborFiles:c!==void 0&&c.length>0?c:void 0,clientSideRunnableResults:u,$traceId:l?o.requestId:void 0}}e.create=r})(Rer||={});var _Je=class{constructor(e,t,n){this.document=e.uri.toString(),this.version=e.version,this.position=t,this.context=n}},CJe=class{constructor(e,t,n,o,s){this.document=e.uri.toString(),this.position=t,this.requestId=n.requestId,this.source=n.source??"unknown",this.tokenSource=o,this.serverPromise=s}matches(e,t){return this.document===e.uri.toString()&&this.position.isEqual(t)}matchesDocument(e){return this.document===e.uri.toString()}cancel(){this.tokenSource.cancel()}},TJe=class{constructor(e,t){this.runnableResults=[];this.document=e.uri.toString(),this.version=e.version,this.position=t}addRunnableResult(e){this.runnableResults.push(e)}addRunnableResults(e){this.runnableResults.push(...e)}matches(e,t){return this.document===e.uri.toString()&&this.version===e.version&&this.position.isEqual(t)}},XTe=(o=>(o.minimal="minimal",o.double="double",o.fillHalf="fillHalf",o.fill="fill",o))(XTe||{});(e=>{function r(t){switch(t){case"minimal":return"minimal";case"double":return"double";case"fillHalf":return"fillHalf";case"fill":return"fill";default:return"minimal"}}e.fromString=r})(XTe||={});var aB=class r{constructor(e,t){this.overall=e,this.mandatory=e,this.optional=t,this.start={mandatory:e,optional:t}}spend(e){this.mandatory-=e,this.optional-=e}isExhausted(){return this.mandatory<=0}isOptionalExhausted(){return this.optional<=0}fresh(){return new r(this.start.mandatory,this.start.optional)}},Kg=class{constructor(e,t,n,o){this.configurationService=e;this.experimentationService=t;this.telemetryService=n;this.logService=o;this.isDebugging=process.execArgv.some(s=>/^--(?:inspect|debug)(?:-brk)?(?:=\d+)?$/i.test(s)),this.telemetrySender=new JTe(n,o),this.runnableResultManager=new EJe,this.neighborFileModel=new SJe,this.pendingRequest=void 0,this.inflightCachePopulationRequest=void 0,this.onTimeoutData=void 0,this.cachePopulationTimeout=this.getCachePopulationBudget(),this.usageMode=this.getUsageMode(),this.includeDocumentation=this.getIncludeDocumentation(),this.disposables=new yt,this.disposables.add(this.configurationService.onDidChangeConfiguration(s=>{s.affectsConfiguration(ae.TypeScriptLanguageContextMode.fullyQualifiedId)?this.usageMode=this.getUsageMode():s.affectsConfiguration(ae.TypeScriptLanguageContextCacheTimeout.fullyQualifiedId)?this.cachePopulationTimeout=this.getCachePopulationBudget():s.affectsConfiguration(ae.TypeScriptLanguageContextIncludeDocumentation.fullyQualifiedId)&&(this.includeDocumentation=this.getIncludeDocumentation())})),this._onCachePopulated=this.disposables.add(new wr.EventEmitter),this.onCachePopulated=this._onCachePopulated.event,this._onContextComputed=this.disposables.add(new wr.EventEmitter),this.onContextComputed=this._onContextComputed.event,this._onContextComputedOnTimeout=this.disposables.add(new wr.EventEmitter),this.onContextComputedOnTimeout=this._onContextComputedOnTimeout.event}static{this.defaultCachePopulationBudget=500}static{this.defaultCachePopulationRaceTimeout=20}static{this.ExecConfig={executionTarget:0}}dispose(){this.runnableResultManager.dispose(),this.neighborFileModel.dispose(),this.inflightCachePopulationRequest=void 0}async isActivated(e){let t=typeof e=="string"?e:e.languageId;return t!=="typescript"&&t!=="typescriptreact"?!1:(this._isActivated===void 0&&(this._isActivated=this.doIsTypeScriptActivated(t)),this._isActivated)}async doIsTypeScriptActivated(e){let t=!1;try{let n=wr.extensions.getExtension("vscode.typescript-language-features");if(n===void 0)return!1;await n.activate();let o=await wr.commands.executeCommand("typescript.tsserverRequest","_.copilot.ping",Kg.ExecConfig,new wr.CancellationTokenSource().token);this.telemetrySender.sendActivationTelemetry(o,void 0),o!==void 0?o.body?.kind==="ok"?(this.logService.info("TypeScript server plugin activated."),t=!0):this.logService.error("TypeScript server plugin not activated:",o.body?.message??"Message not provided."):this.logService.error("TypeScript server plugin not activated:","No ping response received.")}catch(n){this.telemetrySender.sendActivationTelemetry(void 0,n),this.logService.error("Error pinging TypeScript server plugin:",n)}return t}async populateCache(e,t,n){if(e.languageId!=="typescript"&&e.languageId!=="typescriptreact")return;if(this.inflightCachePopulationRequest!==void 0){this.inflightCachePopulationRequest.matches(e,t)||(this.pendingRequest=new _Je(e,t,n));return}let o=Date.now(),s=this.runnableResultManager.getContextRequestState(e,t);if(s!==void 0&&s.server.length===0)return;let a=this.neighborFileModel.getNeighborFiles(e),l=this.cachePopulationTimeout,c=this.telemetrySender.willLogRequestTelemetry(n),u=Rer.create(e,t,n,o,l,c,a,s?.server,this.includeDocumentation);try{let d=this.isDebugging,p=d?[]:void 0,f=new wr.CancellationTokenSource,m=f.token,h=e.version,g=this.runnableResultManager.getCacheState(),y,A;try{let E=wr.commands.executeCommand("typescript.tsserverRequest","_.copilot.context",u,Kg.ExecConfig,m);A=new CJe(e,t,n,f,E),this.inflightCachePopulationRequest=A,y=await E}finally{this.inflightCachePopulationRequest===A&&(this.inflightCachePopulationRequest=void 0),f.dispose()}let b=Date.now()-o;if(wne.isCancelled(y))this.telemetrySender.sendRequestCancelledTelemetry(n,b);else if(wne.isOk(y)){let E=y.body,S=new Lne(b),{resolved:_,cached:x,referenced:I,serverComputed:P}=this.runnableResultManager.update(e,h,t,n,E,s);if(S.cachedItems+=x,S.referencedItems+=I,S.serverComputed=P,_.length>0)for(let N of _)for(let k of S.update(N))p?.push(k.item);S.updateResponse(E,m),this.telemetrySender.sendRequestTelemetry(e,t,n,S,b,{before:g,after:this.runnableResultManager.getCacheState()},void 0),d&&p?.length,this._onCachePopulated.fire({document:e,position:t,source:n.source,items:_,summary:S})}else wne.isError(y)&&(this.telemetrySender.sendRequestFailureTelemetry(n,y.body),console.error("Error populating cache:",y.body.message,y.body.stack))}catch(d){this.logService.error(d,`Error populating cache for document: ${e.uri.toString()} at position: ${t.line+1}:${t.character+1}`)}if(this.pendingRequest!==void 0){let d=this.pendingRequest;this.pendingRequest=void 0;let p=wr.window.activeTextEditor;if(p!==void 0){let f=p.document;f.uri.toString()===d.document&&f.version===d.version&&f.validatePosition(d.position).isEqual(d.position)&&this.populateCache(f,d.position,d.context).catch(()=>{})}}}async*getContext(e,t,n,o){if(this.onTimeoutData=void 0,e.languageId!=="typescript"&&e.languageId!=="typescriptreact")return;let s=Date.now(),a="none",l=this.inflightCachePopulationRequest!==void 0&&this.inflightCachePopulationRequest.matchesDocument(e);if(l&&(this.onTimeoutData=new TJe(e,t),a="inflight"),o.isCancellationRequested){this.telemetrySender.sendRequestCancelledTelemetry(n,Date.now()-s);return}let c=this.isDebugging,u=c?[]:void 0,d=new Lne(Date.now()-s);this.onTimeoutData!==void 0&&(this.onTimeoutData.resultBuilder=d);let p=this.getCharacterBudget(n,e),f=[],{mandatory:m,optional:h,onTimeout:g}=this.getRunnables(e,t,l);this.onTimeoutData!==void 0&&this.onTimeoutData.addRunnableResults(g);e:for(let A of m)for(let{item:b,size:E}of d.update(A,!0)){if(u?.push(b),p.spend(E),p.isExhausted())break e;f.push(b)}if(!p.isOptionalExhausted())e:for(let A of h)for(let{item:b,size:E}of d.update(A,!0)){if(u?.push(b),p.spend(E),p.isOptionalExhausted())break e;f.push(b)}if(o.isCancellationRequested)this.onTimeoutData=void 0;else{for(let A of f){if(o.isCancellationRequested){this.onTimeoutData=void 0;break}yield A}if(this.inflightCachePopulationRequest!==void 0&&this.inflightCachePopulationRequest.matchesDocument(e)){a="inflight";let A=Math.max(0,Math.min(n.timeBudget??Kg.defaultCachePopulationRaceTimeout,Kg.defaultCachePopulationRaceTimeout));if(await Promise.race([this.inflightCachePopulationRequest.serverPromise,new Promise(E=>setTimeout(E,A)).then(()=>"timedOut")])!=="timedOut"&&(this.inflightCachePopulationRequest=void 0,this.onTimeoutData!==void 0)){this.onTimeoutData=void 0;let E=this.runnableResultManager.getCachedRunnableResults(e,t,"clientBasedOnTimeout");for(let S of E)for(let{item:_}of d.update(S))u?.push(_),yield _;a="awaited"}}}if(n.proposedEdits!==void 0)this.telemetrySender.sendSpeculativeRequestTelemetry(n,this.runnableResultManager.getRequestId()??"unknown",d.stats.yielded);else{let A=this.runnableResultManager.getCacheState();d.path=this.runnableResultManager.getNodePath(),d.cancelled=o.isCancellationRequested,d.serverTime=0,d.contextComputeTime=0,d.fromCache=!0,this.telemetrySender.sendRequestTelemetry(e,t,n,d,Date.now()-s,{before:A,after:A},a),c&&u?.length,this._onContextComputed.fire({document:e,position:t,source:n.source,items:f,summary:d})}}getRunnables(e,t,n){let o=[],s=[],a=[];for(let l of this.runnableResultManager.getCachedRunnableResults(e,t))if(n&&l.cache?.emitMode==="clientBasedOnTimeout")a.push(l);else{let c=l.priority;c===1||c===.9||c===.8||c===.7?o.push(l):s.push(l)}return{mandatory:o,optional:s,onTimeout:a}}getContextOnTimeout(e,t,n){try{if(this.onTimeoutData===void 0)return[];if(!this.onTimeoutData.matches(e,t)||this.onTimeoutData.resultBuilder===void 0)return[];let o=[],s=this.onTimeoutData.resultBuilder;for(let a of this.onTimeoutData.runnableResults)for(let{item:l}of s.update(a,!0))o.push(l);return o}finally{this.onTimeoutData=void 0}}getCachePopulationBudget(){return this.configurationService.getExperimentBasedConfig(ae.TypeScriptLanguageContextCacheTimeout,this.experimentationService)??Kg.defaultCachePopulationBudget}getUsageMode(){let e=this.configurationService.getExperimentBasedConfig(ae.TypeScriptLanguageContextMode,this.experimentationService);return XTe.fromString(e)}getIncludeDocumentation(){return this.configurationService.getExperimentBasedConfig(ae.TypeScriptLanguageContextIncludeDocumentation,this.experimentationService)}getCharacterBudget(e,t){let n=(e.tokenBudget??xJe)*4;switch(this.usageMode){case"minimal":return new aB(n,0);case"double":return new aB(n,Math.min(n,t.getText().length));case"fillHalf":return new aB(n,Math.floor(n/2));case"fill":return new aB(n,n);default:return new aB(n,n)}}};Kg=T([v(0,Pe),v(1,nt),v(2,De),v(3,ue)],Kg);var IJe=class{constructor(e,t){this.languageContextService=e,this.tokenBudgetProvider=t,this.disposables=new yt,this.lastDocumentChange=void 0,this.selectionChangeDebouncer=this.disposables.add(new YTe),this.disposables.add(wr.workspace.onDidChangeTextDocument(n=>{this.didChangeTextDocument(n)})),this.disposables.add(wr.window.onDidChangeActiveTextEditor(n=>{this.didChangeActiveTextEditor(n)})),this.disposables.add(wr.window.onDidChangeTextEditorSelection(async n=>{this.didChangeTextEditorSelection(n)})),this.disposables.add(wr.languages.registerInlineCompletionItemProvider([{scheme:"file",language:"typescript"},{scheme:"file",language:"typescriptreact"}],{provideInlineCompletionItems:async(n,o,s,a)=>{this.onInlineCompletion(n,o,s)}},{debounceDelayMs:0,groupId:"contextService"}))}dispose(){this.disposables.dispose()}didChangeTextDocument(e){let t=Date.now();this.lastDocumentChange=void 0;let n=e.document;if(n.languageId!=="typescript"&&n.languageId!=="typescriptreact"||e.contentChanges.length===0)return;let o=wr.window.activeTextEditor;o===void 0||o.document.uri.toString()!==n.uri.toString()||(this.lastDocumentChange={document:n.uri.toString(),time:t})}didChangeActiveTextEditor(e){if(this.lastDocumentChange===void 0)return;if(e===void 0){this.lastDocumentChange=void 0;return}let t=e.document;this.lastDocumentChange.document!==t.uri.toString()&&(this.lastDocumentChange=void 0)}didChangeTextEditorSelection(e){let t=e.textEditor.document,n=this.tokenBudgetProvider.getTokenBudget(t);if(n<=0)return;let o=this.getPosition(e);if(o===void 0){this.selectionChangeDebouncer.cancel();return}try{(e.kind===wr.TextEditorSelectionChangeKind.Command||e.kind===wr.TextEditorSelectionChangeKind.Mouse)&&(this.selectionChangeDebouncer.cancel(),this.populateCache(t,o,n,void 0,"selection",!1)),this.selectionChangeDebouncer.trigger(()=>{this.populateCache(t,o,n,void 0,"selection",!0)})}catch(s){console.error(s)}}onInlineCompletion(e,t,n){let o=this.tokenBudgetProvider.getTokenBudget(e);o<=0||this.populateCache(e,t,o,n.requestUuid,"completion",!1)}getPosition(e){let t=Date.now(),n=wr.window.activeTextEditor;if(e.textEditor!==n)return;let o=e.textEditor.document;if(o.languageId!=="typescript"&&o.languageId!=="typescriptreact"||e.selections.length!==1)return;let s=e.selections[0];if(!s.isEmpty)return;let a=o.lineAt(s.start.line),l=a.text.substring(s.start.character);if(!(a.text.trim().length!==0&&l.length>0)&&!(this.lastDocumentChange!==void 0&&this.lastDocumentChange.document===o.uri.toString()&&t-this.lastDocumentChange.time<500))return s.start}populateCache(e,t,n,o,s,a){if(a){let c=wr.window.activeTextEditor;if(c===void 0||c.document.uri.toString()!==e.uri.toString())return;let u=c.selections;if(u===void 0||u.length!==1)return;let d=u[0];if(!d.isEmpty||d.start.line!==t.line||d.start.character!==t.character)return}let l={requestId:o??wt(),timeBudget:50,tokenBudget:n,source:"populateCache",trigger:s,proposedEdits:void 0};this.languageContextService.populateCache(e,t,l).catch(()=>{})}};async function*tIn(r,e){for await(let t of r){let n=e(t);n!==void 0&&(yield n)}}var rIn="github.copilot.chat.showContextInspectorView",YV=class{constructor(e,t,n,o,s,a){this.configurationService=e;this.experimentationService=t;this.logService=n;this.telemetryService=o;this.languageContextService=s;this.languageContextProviderService=a;if(this.registrations=void 0,this.telemetrySender=new JTe(o,n),this.registrationQueue=new YF,this.disposables=new yt,s instanceof Kg&&(this.disposables.add(wr.commands.registerCommand("github.copilot.debug.showContextInspectorView",async()=>{await wr.commands.executeCommand("setContext",rIn,!0),await wr.commands.executeCommand("context-inspector.focus")})),this.disposables.add(wr.window.registerTreeDataProvider("context-inspector",new $Te(s)))),wr.workspace.textDocuments.some(c=>c.languageId==="typescript"||c.languageId==="typescriptreact"))this.typeScriptFileOpen();else{let c=wr.workspace.onDidOpenTextDocument(u=>{(u.languageId==="typescript"||u.languageId==="typescriptreact")&&(c.dispose(),this.typeScriptFileOpen())})}}dispose(){this.registrations?.dispose(),this.disposables.dispose(),this.registrationQueue.dispose()}typeScriptFileOpen(){this.checkRegistration(),this.disposables.add(this.configurationService.onDidChangeConfiguration(e=>{e.affectsConfiguration(ae.TypeScriptLanguageContext.fullyQualifiedId)&&this.checkRegistration()}))}checkRegistration(){this.registrationQueue.queue(async()=>{this.getConfig()==="on"?await this.register():this.unregister()}).catch(e=>this.logService.error("Error checking TypeScript context provider registration:",e))}async register(){if(!await this.isTypeScriptRunning())return;let e=this.languageContextService,t=this.logService;try{if(!await e.isActivated("typescript"))return;let n=await this.getCopilotApi();if(n===void 0){t.warn("Copilot API is undefined, unable to register context provider.");return}this.registrations!==void 0&&(this.registrations.dispose(),this.registrations=void 0),this.registrations=new yt,this.registrations.add(new IJe(this.languageContextService,this));let o=this.telemetrySender,s=this,a={resolve(c,u){let d=c.documentContext.proposedEdits!==void 0,[p,f]=s.getDocumentAndPosition(c,u);if(p===void 0||f===void 0)return Promise.resolve([]);let m=s.getTokenBudget(p);if(m<=0)return o.sendRequestTelemetry(p,f,{requestId:c.completionId,source:"completion"},bJe.DefaultExhausted,0,void 0,void 0),Promise.resolve([]);let h={requestId:c.completionId,opportunityId:c.opportunityId,timeBudget:c.timeBudget,tokenBudget:m,source:c.source==="nes"?"nes":"completion",trigger:"completion",proposedEdits:d?[]:void 0,sampleTelemetry:s.getSampleTelemetry(c.activeExperiments)},g=e.getContext(p,f,h,u);if(Array.isArray(g)){let y=[];for(let A of g){let b=s.convertItem(A);b!==void 0&&y.push(b)}return Promise.resolve(y)}else return typeof g[Symbol.asyncIterator]=="function"?tIn(g,y=>s.convertItem(y)):g instanceof Promise?g.then(y=>{let A=[];for(let b of y){let E=s.convertItem(b);E!==void 0&&A.push(E)}return A}):Promise.resolve([])}};typeof e.getContextOnTimeout=="function"&&(a.resolveOnTimeout=c=>{if(typeof e.getContextOnTimeout!="function")return;let[u,d]=s.getDocumentAndPosition(c);if(u===void 0||d===void 0)return;let p={requestId:c.completionId,source:"completion"},f=e.getContextOnTimeout(u,d,p);if(f===void 0)return;let m=[];for(let h of f){let g=s.convertItem(h);g!==void 0&&m.push(g)}return m});let l={id:"typescript-ai-context-provider",selector:{scheme:"file",language:"typescript"},resolver:a};this.registrations.add(n.registerContextProvider(l)),this.registrations.add(this.languageContextProviderService.registerContextProvider(l)),this.telemetrySender.sendInlineCompletionProviderTelemetry("completion",!0),t.info("Registered TypeScript context provider with Copilot inline completions.")}catch(n){t.error("Error checking if server plugin is installed:",n)}}async isTypeScriptRunning(){let e=wr.extensions.getExtension("vscode.typescript-language-features");if(e===void 0)return this.telemetrySender.sendActivationFailedTelemetry("client","typescript-plugin","TypeScript extension not found",void 0),this.logService.error("TypeScript extension not found"),!1;try{return await e.activate(),!0}catch(t){return t instanceof Error?(this.telemetrySender.sendActivationFailedTelemetry("client","typescript-plugin",t.message,t.stack),this.logService.error("Error checking if TypeScript plugin is installed:",t.message)):(this.telemetrySender.sendActivationFailedTelemetry("client","typescript-plugin","Unknown error",void 0),this.logService.error("Error checking if TypeScript plugin is installed: Unknown error")),!1}}getDocumentAndPosition(e,t){let n;if(wr.window.activeTextEditor?.document.uri.toString()===e.documentContext.uri?n=wr.window.activeTextEditor.document:n=wr.workspace.textDocuments.find(a=>a.uri.toString()===e.documentContext.uri),n===void 0)return this.telemetrySender.sendIntegrationTelemetry(e.completionId,e.documentContext.uri),[void 0,void 0];let o=e.documentContext.position,s=o!==void 0?new wr.Position(o.line,o.character):n.positionAt(e.documentContext.offset);return n.version>e.documentContext.version?(t?.isCancellationRequested||this.telemetrySender.sendIntegrationTelemetry(e.completionId,e.documentContext.uri,`Version mismatch: ${n.version} !== ${e.documentContext.version}`),[void 0,void 0]):n.version<e.documentContext.version?(this.telemetrySender.sendIntegrationTelemetry(e.completionId,e.documentContext.uri,`Version mismatch: ${n.version} !== ${e.documentContext.version}`),[void 0,void 0]):[n,s]}convertItem(e){if(e.kind==="snippet"){let t={importance:e.priority*100,uri:e.uri.toString(),value:e.value};return e.additionalUris!==void 0&&(t.additionalUris=e.additionalUris.map(n=>n.toString())),t}else if(e.kind==="trait")return{importance:e.priority*100,name:e.name,value:e.value}}async getCopilotApi(){let e=wr.extensions.getExtension("GitHub.copilot");if(e===void 0){this.telemetrySender.sendActivationFailedTelemetry("client","copilot-extension","Copilot extension not found",void 0),this.logService.error("Copilot extension not found");return}try{return(await e.activate()).getContextProviderAPI("v1")}catch(t){t instanceof Error?(this.telemetrySender.sendActivationFailedTelemetry("client","copilot-extension",t.message,t.stack),this.logService.error("Error activating Copilot extension:",t.message)):(this.telemetrySender.sendActivationFailedTelemetry("client","copilot-extension","Unknown error",void 0),this.logService.error("Error activating Copilot extension: Unknown error."));return}}unregister(){this.registrations!==void 0&&(this.registrations.dispose(),this.registrations=void 0),this.telemetrySender.sendInlineCompletionProviderTelemetry("completion",!1)}getConfig(){return this.configurationService.getExperimentBasedConfig(ae.TypeScriptLanguageContext,this.experimentationService)===!0?"on":"off"}getTokenBudget(e){return Math.trunc(xJe-e.getText().length/4-256)}getSampleTelemetry(e){let t=e.get("sampleTelemetry");return t==null||t===!1?1:t===!0?10:typeof t=="number"?Math.max(1,Math.min(100,t)):1}};YV=T([v(0,Pe),v(1,nt),v(2,ue),v(3,De),v(4,W6),v(5,rm)],YV);var RJe={};sl(RJe,{create:()=>nIn});function nIn(r){let e=r.get(ue);r.get(Oe).ensureWorkspaceIsFullyLoaded().catch(t=>e.error(t))}var DJe={};sl(DJe,{create:()=>sIn});var lB=z(Ht()),$u=z(require("vscode"));var wJe="github.copilot.buildLocalWorkspaceIndex",PJe="github.copilot.buildRemoteWorkspaceIndex";function Per(r){let e=r.get(Lv),t=r.get(Ou),n=new yt;return n.add($u.commands.registerCommand(wJe,wer(async()=>{await $u.window.withProgress({location:$u.ProgressLocation.Window,title:lB.t`Updating local workspace index...`},async()=>{let o=await e.triggerLocalIndexing("manual",new To("BuildLocalIndexCommand"));o.isError()&&$u.window.showWarningMessage(lB.t`Could not build local workspace index.`+` 
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/dist/extension.js:2267:`)}})})),n}async function ZTe(r,e){await r.edit(t=>{t.insert(r.document.lineAt(r.document.lineCount-1).range.end,e)})}function wer(r){let e;return async()=>{if(e)return e;let t=r();e=t;try{return await t}finally{e=void 0}}}var Ea=z(Ht()),Mne=z(require("vscode"));var kJe="_copilot.workspaceIndex.signInAgain",iIn="_copilot.workspaceIndex.signInToAnything";var ker="$(loading~spin)",Der=Ea.t`Workspace Index`,zV=class extends _e{constructor(t,n,o){super();this._codeSearchAuthService=n;this._logService=o;this.minOutdatedFileCountToShow=20;this.currentUpdateRequestId=0;this._statusReporter=t,this._statusItem=this._register(Mne.window.createChatStatusItem("copilot.workspaceIndexStatus")),this._statusItem.title=Der,this._register(this._statusReporter.onDidChangeIndexState(()=>this._updateStatusItem())),this._register(this.registerCommands()),this._writeStatusItem({title:{title:Ea.t`Checking index status`,learnMoreLink:"https://aka.ms/copilot-chat-workspace-remote-index",busy:!0},details:void 0}),this._updateStatusItem()}async _updateStatusItem(){let t=++this.currentUpdateRequestId;this._logService.trace(`ChatStatusWorkspaceIndexingStatus::updateStatusItem(id=${t}): starting`);let n=await this._statusReporter.getIndexState();if(t!==this.currentUpdateRequestId){this._logService.trace(`ChatStatusWorkspaceIndexingStatus::updateStatusItem(id=${t}): skipping`);return}let o=Object.freeze({title:(0,Ea.t)("Remotely indexed"),learnMoreLink:"https://aka.ms/vscode-copilot-workspace-remote-index"});switch(n.remoteIndexState.status){case"initializing":return this._writeStatusItem({title:{title:(0,Ea.t)("Remote index"),learnMoreLink:"https://aka.ms/vscode-copilot-workspace-remote-index"},details:{message:(0,Ea.t)("Discovering repos"),busy:!0}});case"loaded":{if(n.remoteIndexState.repos.length>0){if(n.remoteIndexState.repos.every(c=>c.status==="NotIndexable"))break;if(n.remoteIndexState.repos.every(c=>c.status==="Ready"))return this._writeStatusItem({title:o,details:void 0});if(n.remoteIndexState.repos.some(c=>c.status==="CheckingStatus"||c.status==="Initializing"))return this._writeStatusItem({title:{title:(0,Ea.t)("Remote index"),learnMoreLink:"https://aka.ms/vscode-copilot-workspace-remote-index"},details:{message:(0,Ea.t)("Checking status"),busy:!0}});if(n.remoteIndexState.repos.some(c=>c.status==="BuildingIndex"))return this._writeStatusItem({title:o,details:{message:(0,Ea.t)("Building"),busy:!0}});if(n.remoteIndexState.repos.some(c=>c.status==="NotYetIndexed")){let c=await this.getLocalIndexStatusItem(n);return t!==this.currentUpdateRequestId?void 0:this._writeStatusItem({title:c?c.title:{title:n.remoteIndexState.repos.every(u=>u.status==="NotYetIndexed")?(0,Ea.t)("Remote index not yet built"):(0,Ea.t)("Remote index not yet built for a repo in the workspace"),learnMoreLink:"https://aka.ms/vscode-copilot-workspace-remote-index"},details:{message:(c?.details?.message?c?.details?.message+" ":"")+`[${Ea.t`Build remote index`}](command:${PJe} "${(0,Ea.t)("Build Remote Workspace Index")}")`,busy:c?.details?.busy??!1}})}let a=n.remoteIndexState.repos.filter(c=>c.status==="Ready"),l=n.remoteIndexState.repos.filter(c=>c.status==="CouldNotCheckIndexStatus"||c.status==="NotAuthorized");if(l.length>0){let c=l[0];return this._writeStatusItem({title:{title:a.length?(0,Ea.t)("{0} repos with remote indexes",a.length):(0,Ea.t)("Remote index unavailable"),learnMoreLink:"https://aka.ms/vscode-copilot-workspace-remote-index"},details:{message:a.length?(0,Ea.t)(`[Try re-authenticating for {0} additional repos](${UZ(kJe,[c])} "${(0,Ea.t)("Try signing in again to access the remote workspace index")}")`,l.length):(0,Ea.t)(`[Try re-authenticating](${UZ(kJe,[c])} "${(0,Ea.t)("Try signing in again to access the remote workspace index ")}")`),busy:!1}})}}break}}let s=await this.getLocalIndexStatusItem(n);t===this.currentUpdateRequestId&&this._writeStatusItem(s)}async getLocalIndexStatusItem(t){let n=async()=>{let o=await t.localIndexState.getState();if(o){let s=o.totalFileCount-o.indexedFileCount;if(s>this.minOutdatedFileCountToShow)return{message:Ea.t`${s} files to index`,busy:!0}}};switch(t.localIndexState.status){case"ready":case"updatingIndex":return{title:{title:(0,Ea.t)("Locally indexed"),learnMoreLink:"https://aka.ms/vscode-copilot-workspace-local-index"},details:await n()};case"tooManyFilesForAutomaticIndexing":return{title:{title:Ea.t`Basic index`,learnMoreLink:"https://aka.ms/vscode-copilot-workspace-basic-index"},details:{message:`[${Ea.t`Build local index`}](command:${wJe} "${(0,Ea.t)("Try to build a more advanced local index of the workspace.")}")`,busy:!1}};case"disabled":return;case"tooManyFilesForAnyIndexing":default:return{title:{title:Ea.t`Basic index`,learnMoreLink:"https://aka.ms/vscode-copilot-workspace-basic-index"},details:void 0}}}_writeStatusItem(t){if(this._logService.trace("ChatStatusWorkspaceIndexingStatus::_writeStatusItem()"),!t){this._statusItem.hide();return}this._statusItem.show(),this._statusItem.title={label:Der,link:t.title.learnMoreLink},this._statusItem.description=Gr([t.title.title,t.title.busy?ker:void 0]).join(" "),t.details?this._statusItem.detail=Gr([t.details.message,t.details.busy?ker:void 0]).join(" "):this._statusItem.detail=""}registerCommands(){let t=new yt;return t.add(Mne.commands.registerCommand(iIn,async n=>{if(n)return this._codeSearchAuthService.tryAuthenticating(n)})),t.add(Mne.commands.registerCommand(kJe,async n=>{if(n)return this._codeSearchAuthService.tryReauthenticating(n)})),t}};zV=T([v(0,Lv),v(1,dP),v(2,ue)],zV);function sIn(r){let e=r.get(K),t=new yt;return t.add(e.createInstance(zV)),t.add(Per(r)),t}var iIe=require("fs/promises"),Ma=z(require("vscode")),Ber=require("vscode");var eIe=class{static parse(e){let t=[],n=e.split(`
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/dist/extension.js:2271:`));g.isTrusted=!0,g.supportThemeIcons=!0,m.tooltip=g,m.color="yellow",m.show(),m.command={command:l,title:"Add bookmark"}})),this._register(Ma.workspace.onDidOpenTextDocument(p=>{let f=One(p),m=this.getWorkspaceRecorder(f);m&&m.handleOnDidOpenTextDocument(f,p.getText(),p.version)})),this._register(Ma.workspace.onDidOpenNotebookDocument(async p=>{let f=p.uri.toString(),m=this.getWorkspaceRecorder(f);m&&(m.handleOnDidOpenTextDocument(f,vlt(p,{cell_uri_fragment:!0}),p.version),m.handleDocumentEvent(f,Date.now(),p.version))})),this._register(this.workspaceListenerService.onStructuredData(p=>{if("modelUri"in p){let f=p.modelUri.toString(),m=this.getWorkspaceRecorder(f);m&&m.handleDocumentEvent(f,p.time,{...p,time:void 0,modelUri:void 0,modelVersion:void 0,v:p.modelVersion})}else{let f=this.recorders.values().next().value;f&&f.handleEvent(p.time,{...p,time:void 0})}})),this._register(Ma.workspace.onDidChangeTextDocument(p=>{let f=One(p.document),m=this.getWorkspaceRecorder(f);if(m){let h=FQ(p.contentChanges);m.handleOnDidChangeTextDocument(f,h,p.document.version)}})),this._register(Ma.workspace.onDidCloseTextDocument(p=>{let f=One(p);this.getWorkspaceRecorder(f)?.handleOnDidCloseTextDocument(f)}));for(let p of Ma.workspace.textDocuments){let f=One(p),m=this.getWorkspaceRecorder(f);m&&m.handleOnDidOpenTextDocument(f,p.getText(),p.version)}let d=new rIe;this._register(My((p,f)=>{let m=d.activeTextEditor.read(p);if(!m)return;let h=One(m.editor.document),g=this.getWorkspaceRecorder(h);g&&(g.handleOnDidFocusedDocumentChange(h),f.add(pi(y=>{let b=m.selection.read(y).map(E=>Ner(E,m.editor.document));g.handleOnDidSelectionChange(h,b)})))}))}getWorkspaceRepository(t){return process.platform==="win32"?this.gitApi.repositories.find(n=>pj(t,n.rootUri.toString())):this.gitApi.repositories.find(n=>t.startsWith(n.rootUri.toString()))}getWorkspaceRecorder(t){let n=this.getWorkspaceRepository(t),o=n?.rootUri.toString();if(!o)return;let s=o.toLowerCase(),a=this.recorders.get(s);if(!a){let l=this.workspacesIndexFile.value.workspaceIdxByRoot,c=l[s];c===void 0&&(c=Object.entries(l).length,l={...l,[s]:c},this.workspacesIndexFile.setValue({workspaceIdxByRoot:l}));let u=new CQ(async f=>{let m=await n.checkIgnore(f);return f.map(h=>m.has(h))},1e3),d=new Wp(async f=>{let m=Ber.Uri.parse(f).fsPath;return await u.request(m)}),p=aIn(Nr(s))+"-"+c;a=new nIe(o,Qn(this.recordingDirPath,p),{isIgnoredDocument:f=>d.get(f)}),this._register(a),this.recorders.set(s,a),this.recordersChangedSignal.trigger(void 0)}return a}};function aIn(r){return r.replaceAll(/[^a-zA-Z0-9_.-]/g,"")}function One(r){if(r.uri.scheme===Et.vscodeNotebookCell){let e=Eo(r.uri,Ma.workspace.notebookDocuments);if(!e)throw new Error("No notebook document found for cell");return e.uri.with({fragment:r.uri.fragment}).toString()}return r.uri.toString()}var XV=class{constructor(e,t,n){let o=t.getConfig(ae.Shared.Enable),s="*"in o?o["*"]:!0,a=t.isConfigured(ae.Shared.Enable),l=t.getExperimentBasedConfig(ae.InlineEditsEnabled,n),c=t.isConfigured(ae.InlineEditsEnabled);e.sendMSFTTelemetryEvent("nesStatusOnActivation",{},{isCompletionsEnabled:sIe(s),isCompletionsUserConfigured:sIe(a),isNesEnabled:sIe(l),isNesUserConfigured:sIe(c)})}};XV=T([v(0,De),v(1,Pe),v(2,nt)],XV);function sIe(r){return r?1:0}var OJe={};sl(OJe,{create:()=>lIn});var cB=require("vscode");function lIn(r){let e=new yt;return e.add(cIn(r)),e}function cIn(r){return cB.Disposable.from(cB.commands.registerCommand("github.copilot.chat.attachFile",()=>cB.commands.executeCommand("workbench.action.chat.attachFile")),cB.commands.registerCommand("github.copilot.chat.attachSelection",()=>cB.commands.executeCommand("workbench.action.chat.attachSelection")))}var ZV=class{constructor(e){this.telemetryService=e;e.sendGHTelemetryEvent("extension.activate")}dispose(){this.telemetryService.sendGHTelemetryEvent("extension.deactivate")}};ZV=T([v(0,De)],ZV);var Fer=require("vscode");var eH=class extends _e{constructor(t){super();this._telemetryService=t;let n=Fer.env.getDataChannel("editTelemetry");this._register(n.onDidReceiveData(o=>{if(!uIn(o.data.eventName,o.data.data))return;let s=dIn(o.data.eventName,o.data.data),{properties:a,measurements:l}=fIn(s);this._telemetryService.sendGHTelemetryEvent("vscode."+o.data.eventName,a,l)}))}};eH=T([v(0,De)],eH);function uIn(r,e){if(r==="inlineCompletion.endOfLife"&&"extensionId"in e){let t=e.extensionId;if(typeof t=="string"&&t!=="github.copilot"&&t!=="github.copilot-chat")return!1}return!0}function dIn(r,e){let t={...e};for(let[n,o]of Object.entries(e)){let s=pIn(r,n,o);s&&(t[s.key]=s.value,delete t[n])}return t}function pIn(r,e,t){if(r==="inlineCompletion.endOfLife")switch(e){case"id":return{key:"opportunityId",value:t}}}function fIn(r){let e={},t={};for(let[n,o]of Object.entries(r))typeof o=="number"?t[n]=o:typeof o=="boolean"?t[n]=o?1:0:typeof o=="string"&&(e[n]=o);return{properties:e,measurements:t}}var mIn=[no(ZV),no(XV),no(eH),OJe],Uer=mIn;var Qer=[...Uer,no(U7),RJe,no(u5),PMe,no(kq),no(r9),no(aV),no(dV),no(DU),no(ZAe),no(qQ),no(TV),no(JV),no(IV),no(Q7),no(YV),no(_V),no(BU),no(eV),no(hV),no(EV),no(X8),no(J8),DJe,no(e4)],yQt=[no(F0e),no(HQ),no(Kq),no(K7),no(uV),no(HV),no(j7),no(O9),no(mV),no(V7),no(RV),no(VQ),no(z7),no(yV),no(OU),no(Ok),Fqe];var t1e=require("vscode");var tH=class extends SR{get githubToken(){return this._githubToken||(this._githubToken=this.tokenProvider()),this._githubToken}constructor(e,t,n,o,s){super(t,n,o,s),this.tokenProvider=e;let a=this;this._anyGitHubSession={get id(){return a.githubToken},get accessToken(){return a.githubToken},scopes:Lj,account:{id:"user",label:"User"}},this._permissiveGitHubSession={get id(){return a.githubToken},get accessToken(){return a.githubToken},scopes:c5,account:{id:"user",label:"User"}}}getAnyGitHubSession(e){return Promise.resolve(this._anyGitHubSession)}getPermissiveGitHubSession(e){if(this.isMinimalMode){if(e.createIfNone||e.forceNewSession)throw new l5;return Promise.resolve(void 0)}return Promise.resolve(this._permissiveGitHubSession)}async getCopilotToken(e){return await super.getCopilotToken(e)}setCopilotToken(e){this._tokenStore.copilotToken=e,this._onDidAuthenticationChange.fire()}getAnyAdoSession(e){return Promise.resolve(void 0)}getAdoAccessTokenBase64(e){return Promise.resolve(void 0)}};tH=T([v(1,ue),v(2,fl),v(3,cC),v(4,Pe)],tH);var BJe=require("vscode");var rH=class extends SR{constructor(t,n,o,s,a){super(o,s,a,t);this._domainService=n;this._taskSingler=new Qb;this._register(BJe.authentication.onDidChangeSessions(l=>{(l.provider.id===Q0e(t)||l.provider.id==="microsoft")&&(this._logService.debug("Handling onDidChangeSession."),this._handleAuthChangeEvent())})),this._register(this._domainService.onDidChangeDomains(l=>{l.dotcomUrlChanged&&(this._logService.debug("Handling onDidChangeDomains."),this._handleAuthChangeEvent())})),this._handleAuthChangeEvent()}async getAnyGitHubSession(t){let n=()=>q0e(this._configurationService,t),o=t?.createIfNone||t?.forceNewSession?await n():await this._taskSingler.getOrCreate("any",n);return this._anyGitHubSession=o,o}async getPermissiveGitHubSession(t){let n=()=>N3t(this._configurationService,t),o=t?.createIfNone||t?.forceNewSession?await n():await this._taskSingler.getOrCreate("permissive",n);return this._permissiveGitHubSession=o,o}async getAnyAdoSession(t){let n="microsoft",o=["499b84ac-1321-427f-aa17-267ca6975798/.default","offline_access"],s=async()=>await BJe.authentication.getSession(n,o,t),a=t?.createIfNone||t?.forceNewSession?await s():await this._taskSingler.getOrCreate("ado",s);return this._anyAdoSession=a,a}async getAdoAccessTokenBase64(t){let n=await this.getAnyAdoSession(t);return n?Buffer.from(`PAT:${n.accessToken}`,"utf8").toString("base64"):void 0}};rH=T([v(0,Pe),v(1,Xi),v(2,ue),v(3,fl),v(4,cC)],rH);var qer=Me("INaiveChunkingService"),nH=class{constructor(e){this.tokenizerProvider=e;this.naiveChunkers=new Map}async chunkFile(e,t,n,o,s){let a=o?.maxTokenLength??_X,l=await this.getNaiveChunker(e).chunkFile(t,n,{maxTokenLength:a},s);return o?.validateChunkLengths&&await this.validateChunkLengths(l,a,e),l.filter(c=>c.text)}getNaiveChunker(e){let t=this.naiveChunkers.get(e.tokenizer);if(t)return t;let n=new Q9(e,this.tokenizerProvider);return this.naiveChunkers.set(e.tokenizer,n),n}async validateChunkLengths(e,t,n){for(let o of e){let s=await this.tokenizerProvider.acquireTokenizer(n).tokenLength(o.text);s>t*1.2&&console.warn("Produced chunk that is over length limit",{file:o.file+"",range:o.range,chunkTokenLength:s,maxLength:t})}}};nH=T([v(0,Ki)],nH);var Ger=require("fs");async function Ver(r,e,t){return hIn(r,e,t)}function hIn(r,e,t){let n=r.split(/\r\n|\r|\n/),o=e.split(/\r\n|\r|\n/),a=new gQ().computeDiff(n,o,t),l=a.changes.length>0?!1:r===e;function c(u){return u.map(d=>[d.original.startLineNumber,d.original.endLineNumberExclusive,d.modified.startLineNumber,d.modified.endLineNumberExclusive,d.innerChanges?.map(p=>[p.originalRange.startLineNumber,p.originalRange.startColumn,p.originalRange.endLineNumber,p.originalRange.endColumn,p.modifiedRange.startLineNumber,p.modifiedRange.startColumn,p.modifiedRange.endLineNumber,p.modifiedRange.endColumn])])}return{identical:l,quitEarly:a.hitTimeout,changes:c(a.changes),moves:a.moves.map(u=>[u.lineRangeMapping.original.startLineNumber,u.lineRangeMapping.original.endLineNumberExclusive,u.lineRangeMapping.modified.startLineNumber,u.lineRangeMapping.modified.endLineNumberExclusive,c(u.changes)])}}var aIe=class{constructor(e=!0){this._useWorker=e;this._worker=new Kr(()=>{let t=vIn([Qn(__dirname,"diffWorker.js"),Qn(__dirname,"../../../../dist/diffWorker.js")]);if(t===void 0)throw new Error("DiffServiceImpl: worker file not found");return new qb(t,{name:"Diff worker"})})}dispose(){this._worker.rawValue?.terminate()}async computeDiff(e,t,n){let o=this._useWorker?await this._worker.value.proxy.computeDiff(e,t,n):await Ver(e,t,n);return{identical:o.identical,quitEarly:o.quitEarly,changes:Her(o.changes),moves:o.moves.map(a=>new dQ(new jv(new Xr(a[0],a[1]),new Xr(a[2],a[3])),Her(a[4])))}}};function Her(r){return r.map(e=>new YP(new Xr(e[0],e[1]),new Xr(e[2],e[3]),e[4]?.map(t=>new dh(new jt(t[0],t[1],t[2],t[3]),new jt(t[4],t[5],t[6],t[7])))))}function vIn(r){for(let e of r)if((0,Ger.existsSync)(e))return e}var Wer="github-enterprise.uri",oH=class extends _e{constructor(t,n,o){super();this._configurationService=t;this._tokenStore=n;this._capiClientService=o;this._onDidChangeDomains=this._register(new Vt);this.onDidChangeDomains=this._onDidChangeDomains.event;this._register(this._configurationService.onDidChangeConfiguration(s=>this._onDidConfigChangeHandler(s))),this._processCopilotToken(this._tokenStore.copilotToken),this._register(this._tokenStore.onDidStoreUpdate(()=>this._processCopilotToken(this._tokenStore.copilotToken)))}_onDidConfigChangeHandler(t){(t.affectsConfiguration(`${E0}.advanced`)||t.affectsConfiguration(Wer))&&this._processCAPIModuleChange(this._tokenStore.copilotToken)}_processCAPIModuleChange(t){let n=this._configurationService.getConfig(ae.Shared.DebugOverrideCAPIUrl);n&&n.endsWith("/")&&(n=n.slice(0,-1));let o=this._configurationService.getConfig(ae.Shared.DebugOverrideProxyUrl);o&&(o=o.replace(/\/$/,""));let s=this._configurationService.getConfig(ae.Shared.AuthProvider)==="github-enterprise"?this._configurationService.getNonExtensionConfig(Wer):void 0,a={endpoints:{api:n||t?.endpoints?.api,proxy:o||t?.endpoints?.proxy,telemetry:t?.endpoints?.telemetry,"origin-tracker":t?.endpoints?.["origin-tracker"]},sku:t?.sku||"unknown"},l=this._capiClientService.updateDomains(a,s);(l.capiUrlChanged||l.proxyUrlChanged||l.telemetryUrlChanged||l.dotcomUrlChanged)&&this._onDidChangeDomains.fire({capiUrlChanged:l.capiUrlChanged,telemetryUrlChanged:l.telemetryUrlChanged,proxyUrlChanged:l.proxyUrlChanged,dotcomUrlChanged:l.dotcomUrlChanged})}_processCopilotToken(t){this._processCAPIModuleChange(t)}};oH=T([v(0,Pe),v(1,fl),v(2,Or)],oH);var iH=class{constructor(e,t,n,o){this._fetcherService=e;this._authenticationService=t;this._logService=n;this._telemetryService=o;this.githubRepositoryInfoCache=new Map}async _doGetRepositoryInfo(e,t){let n=this._authenticationService.permissiveGitHubSession?.accessToken??this._authenticationService.anyGitHubSession?.accessToken;return Z8(this._fetcherService,this._logService,this._telemetryService,"https://api.github.com",`repos/${e}/${t}`,"GET",n)}async getRepositoryInfo(e,t){let n=this.githubRepositoryInfoCache.get(`${e}/${t}`);if(n)return n;let o=await this._doGetRepositoryInfo(e,t);if(o)return this.githubRepositoryInfoCache.set(`${e}/${t}`,o),o;throw new Error(`Failed to fetch repository info for ${e}/${t}`)}async isAvailable(e,t){try{return await this._doGetRepositoryInfo(e,t)!==void 0}catch{return!1}}async getRepositoryItems(e,t,n){let o=[];try{let s=this._authenticationService.permissiveGitHubSession?.accessToken,a=n.split("/").map(c=>encodeURIComponent(c)).join("/"),l=await Z8(this._fetcherService,this._logService,this._telemetryService,"https://api.github.com",`repos/${e}/${t}/contents/${a}`,"GET",s);if(l.ok){let c=await l.json();if(Array.isArray(c))for(let u of c)"name"in u&&"path"in u&&"type"in u&&"html_url"in u&&(o.push({name:u.name,path:u.path,type:u.type,html_url:u.html_url}),u.type==="dir"&&o.push(...await this.getRepositoryItems(e,t,u.path)))}else return console.error(`Failed to fetch contents from ${e}:${t}:${n}`),[]}catch{return console.error(`Failed to fetch contents from ${e}:${t}:${n}`),[]}return o}async getRepositoryItemContent(e,t,n){try{let o=this._authenticationService.permissiveGitHubSession?.accessToken,s=n.split("/").map(l=>encodeURIComponent(l)).join("/"),a=await Z8(this._fetcherService,this._logService,this._telemetryService,"https://api.github.com",`repos/${e}/${t}/contents/${s}`,"GET",o);if(a.ok){let l=await a.json();if("content"in l){let c=Buffer.from(l.content,"base64");return new Uint8Array(c)}throw new Error("Unexpected data from GitHub")}}catch{console.error(`Failed to contents from ${e}:${t}:${n}`)}}};iH=T([v(0,rr),v(1,ft),v(2,ue),v(3,De)],iH);var yx=require("vscode");var rb=z(require("vscode"));var sH=class{async stat(e){return rb.workspace.fs.stat(e)}async readDirectory(e){return rb.workspace.fs.readDirectory(e)}async createDirectory(e){return rb.workspace.fs.createDirectory(e)}async readFile(e,t){return await $De(this,e,t),rb.workspace.fs.readFile(e)}async writeFile(e,t){return rb.workspace.fs.writeFile(e,t)}async delete(e,t){return rb.workspace.fs.delete(e,t)}async rename(e,t,n){return rb.workspace.fs.rename(e,t,n)}async copy(e,t,n){return rb.workspace.fs.copy(e,t,n)}isWritableFileSystem(e){return!!rb.workspace.fs.isWritableFileSystem(e)}createFileSystemWatcher(e){return rb.workspace.createFileSystemWatcher(e)}};var lIe=z(require("vscode"));var aH=class extends Oye{async findTextInFiles(e,t,n,o){return await lIe.workspace.findTextInFiles(e,t,s=>n.report(s),o)}findTextInFiles2(e,t,n){return lIe.workspace.findTextInFiles2(e,t,n)}findFiles(e,t,n){let o=Array.isArray(e)?e:[e];return lIe.workspace.findFiles2(o,t,n)}};function jer(r){if(typeof r!="string")throw new TypeError("Argument must be a string.");if(!r)return r;let e=r.startsWith("!"),t=e?r.slice(1):r,n=t,o=!1;switch(t[0]==="/"&&(o=!0,n=t.slice(1)),n[0]){case"*":t[1]!=="*"&&(n="**/"+n);break;default:if((!o&&!n.includes("/")||n.endsWith("/"))&&(n="**/"+n),n.endsWith("*")||n.endsWith("?"))break;/\.[a-z\d_-]+$/.test(n)||(n.endsWith("/")||(n+="/"),n+="**")}return e?"!"+n:n}var ntr=z(ttr());var pIe=class{constructor(){this._ignoreMap=new Map;this._ignoreCache=new Map;this._searchRankCache=null}setIgnoreFile(e,t,n){let o="";e&&(o=ki(e.fsPath,du(t.fsPath)),o.startsWith("..")&&(o="")),this._ignoreMap.set(t.fsPath,{ignore:(0,ntr.default)().add(n),patterns:Gd(n).filter(s=>s.trim()&&!s.startsWith("#")).map(jer).map(s=>o?sn.join(o,s):s)}),this._searchRankCache=null,this._ignoreCache.clear()}removeIgnoreFile(e){this._ignoreMap.delete(e.fsPath),this._searchRankCache=null,this._ignoreCache.clear()}removeWorkspace(e){let t=0;for(let n of this._ignoreMap.keys())rtr(e.fsPath,n)&&(this._ignoreMap.delete(n),t+=1);t>0&&(this._searchRankCache=null,this._ignoreCache.clear())}asMinimatchPatterns(){return[...this._ignoreMap.values()].flatMap(e=>e.patterns)}isIgnored(e){if(this._ignoreMap.size===0)return!1;let t=e.fsPath;if(this._ignoreCache.has(t))return this._ignoreCache.get(t);let n=0,o={ignored:!1,unignored:!1};try{let s=this._searchRank;for(let a of s){n+=1;let l=du(a),c=ki(l,t);if(!c.startsWith("..")&&l!==t&&rtr(l,t)){let u=this._ignoreMap.get(a);if(!u)throw new Error(`No ignore patterns found for ${a}`);if(o=u.ignore.test(c),o.ignored||o.unignored)break}}return this._ignoreCache.set(t,o.ignored),o.ignored}catch{return!1}}get _searchRank(){if(this._searchRankCache!==null)return this._searchRankCache;let e={},t=n=>n.split(Ra).length;return this._searchRankCache=[...this._ignoreMap.keys()].sort((n,o)=>(e[o]||=t(o))-(e[n]||=t(n)))}};function rtr(r,e){return r===e?!0:(r.charAt(r.length-1)!==Ra&&(r+=Ra),uR(e).startsWith(uR(r)))}var fIe=z(require("fs"));async function otr(r,e,t,n){let o=e.textDocuments.find(s=>fn(s.uri,t));if(o)return o.getText();try{if(FIn(t),n!==void 0){let s=await fIe.promises.open(t.fsPath,"r");try{let a=Buffer.alloc(n),{bytesRead:l}=await s.read(a,0,n,0);return a.subarray(0,l)}finally{await s.close()}}return r.readFile(t)}catch{let s=await r.readFile(t);return n?s.subarray(0,n):s}}function FIn(r){if(r.scheme!=="file")throw new Error(`URI must be of file scheme, received ${r.scheme}`)}var itr="non-git-file",mIe=class{constructor(e,t,n,o,s,a){this._gitService=e;this._logService=t;this._authService=n;this._capiClientService=o;this._fileSystemService=s;this._workspaceService=a;this._contentExclusionCache=new Map;this._contentExclusionFetchPromise=null;this._ignoreGlobResultCache=new Qr;this._ignoreRegexResultCache=new Map;this._lastRuleFetch=0;this._disposables=[];this._contentExclusionCache.set(itr,{patterns:[],ifAnyMatch:[],ifNoneMatch:[]}),this._disposables.push(this._gitService.onDidCloseRepository(l=>{let c=this.getRepositoryInfo(l);if(c)for(let u of c.fetchUrls)this._contentExclusionCache.delete(u)})),this._fileReadLimiter=new Dy(10),this._disposables.push(this._fileReadLimiter)}async isIgnored(e,t=dr.None){if(this._ignoreGlobResultCache.has(e)&&!this.isRegexContextExclusionsEnabled||this._ignoreGlobResultCache.get(e))return this._ignoreGlobResultCache.get(e)??!1;this._contentExclusionFetchPromise&&await Ut(this._contentExclusionFetchPromise,t);let n=await Ut(this._gitService.getRepositoryFetchUrls(e),t),o=this.getRepositoryInfo(n);o||(o={repoRootPath:"",fetchUrls:[itr]});let s=e.path.toLowerCase().replace(o.repoRootPath.toLowerCase(),"");(this.shouldFetchContentExclusionRules(o)||Date.now()-this._lastRuleFetch>30*60*1e3)&&await Ut(this.makeContentExclusionRequest(),t);let a={nocase:!0,matchBase:!0,nonegate:!0,dot:!0};for(let{patterns:u}of this._contentExclusionCache.values())for(let d of u)if(bc(s,d,a)||bc(e.path,d,a))return this._logService.debug(`File ${e.path} is ignored by content exclusion rule ${d}`),this._ignoreGlobResultCache.set(e,!0),!0;let l="",c="";for(let u of o.fetchUrls){let{ifAnyMatch:d,ifNoneMatch:p}=this._contentExclusionCache.get(u)??{ifAnyMatch:[],ifNoneMatch:[]};if((d.length>0||p.length>0)&&!l)try{let f=await this._fileReadLimiter.queue(()=>otr(this._fileSystemService,this._workspaceService,e,1024));if(l=typeof f=="string"?f:new TextDecoder().decode(f),c=await rf(l),this._ignoreRegexResultCache.has(c))return this._ignoreRegexResultCache.get(c)??!1}catch{return!0}if(d.length>0&&l&&d.some(f=>f.test(l)))return this._logService.debug(`File ${e.path} is ignored by content exclusion rule ifAnyMatch`),this._ignoreRegexResultCache.set(c,!0),!0;if(p.length>0&&l&&!p.some(f=>f.test(l)))return this._logService.debug(`File ${e.path} is ignored by content exclusion rule ifNoneMatch`),this._ignoreRegexResultCache.set(c,!0),!0}return this._ignoreGlobResultCache.set(e,!1),this._ignoreRegexResultCache.set(c,!1),!1}get isRegexContextExclusionsEnabled(){return[...this._contentExclusionCache.values()].some(({ifAnyMatch:e,ifNoneMatch:t})=>e.length>0||t.length>0)}async loadRepos(e){(await Promise.all(e.map(o=>this._gitService.getRepositoryFetchUrls(o)))).map(o=>this.shouldFetchContentExclusionRules(this.getRepositoryInfo(o))).some(o=>o)&&await this.makeContentExclusionRequest()}async asMinimatchPatterns(){return await this._contentExclusionFetchPromise,Array.from(this._contentExclusionCache.values()).flatMap(({patterns:t})=>t)}dispose(){this._disposables.forEach(e=>e.dispose()),this._disposables=[],this._contentExclusionCache.clear()}shouldFetchContentExclusionRules(e){if(!e)return!1;let t=!1;for(let n of e?.fetchUrls??[])this._contentExclusionCache.has(n)||(t=!0,this._contentExclusionCache.set(n,{patterns:[],ifAnyMatch:[],ifNoneMatch:[]}));return t}async makeContentExclusionRequest(){this._contentExclusionFetchPromise&&await this._contentExclusionFetchPromise;try{this._contentExclusionFetchPromise=this._contentExclusionRequest(),await this._contentExclusionFetchPromise,this._contentExclusionFetchPromise=null}catch{this._contentExclusionFetchPromise=null}}async _contentExclusionRequest(){this._ignoreGlobResultCache.clear();let e=Date.now(),t=this._capiClientService,n=(await this._authService.getAnyGitHubSession({silent:!0}))?.accessToken,o=Array.from(this._contentExclusionCache.keys()),s=async a=>{let l=await t.makeRequest({headers:{Authorization:`token ${n}`}},{type:Zr.ContentExclusion,repos:a});if(!l.ok){this._logService.error(`Failed to fetch content exclusion rules: ${l?.statusText}`);return}let c=await l.json();for(let u=0;u<c.length;u++){let d=c[u].rules.map(g=>g.paths).flat(),p=Gr(c[u].rules.map(g=>g.ifAnyMatch).flat()).map(g=>str(g)),f=Gr(c[u].rules.map(g=>g.ifNoneMatch).flat()).map(g=>str(g)),m=a[u],h={patterns:d,ifAnyMatch:p,ifNoneMatch:f};this._contentExclusionCache.set(m,h),this._logService.trace(`Fetched content exclusion rules for ${m}: ${JSON.stringify(h)}`)}};o.length===0&&await s([]);for(let a=0;a<o.length;a+=10){let l=o.slice(a,a+10);await s(l)}this._lastRuleFetch=Date.now(),this._logService.info(`Fetched content exclusion rules in ${Date.now()-e}ms`)}getRepositoryInfo(e){if(!e||!e.remoteFetchUrls)return;let t=Gr(e.remoteFetchUrls.map(n=>{if(n)try{return Jde(n)}catch{return}}));return{repoRootPath:e.rootUri.path,fetchUrls:t}}};function str(r){if(!r.startsWith("/")&&!r.endsWith("/"))return new RegExp(r);let e=r.slice(1,r.lastIndexOf("/")),t=r.slice(r.lastIndexOf("/")+1);return new RegExp(e,t)}var hIe=".copilotignore",gIe=class{constructor(e,t,n,o,s,a,l){this._gitService=e;this._logService=t;this._authService=n;this._workspaceService=o;this._capiClientService=s;this.searchService=a;this.fs=l;this._copilotIgnoreFiles=new pIe;this._copilotIgnoreEnabled=!1;this._onDidChangeCopilotIgnoreEnablement=new Vt;this._disposables=[];this.onDidChangeCopilotIgnoreEnablement=this._onDidChangeCopilotIgnoreEnablement.event;this._disposables.push(this._onDidChangeCopilotIgnoreEnablement),this._disposables.push(this._authService.onDidAuthenticationChange(()=>{let c=this._authService.copilotToken?.isCopilotIgnoreEnabled()??!1;this._copilotIgnoreEnabled!==c&&this._onDidChangeCopilotIgnoreEnablement.fire(c),this._copilotIgnoreEnabled=c,this._copilotIgnoreEnabled===!1&&this._remoteContentExclusions&&(this._remoteContentExclusions.dispose(),this._remoteContentExclusions=void 0),this._copilotIgnoreEnabled===!0&&!this._remoteContentExclusions&&(this._remoteContentExclusions=new mIe(this._gitService,this._logService,this._authService,this._capiClientService,this.fs,this._workspaceService))}))}dispose(){this._disposables.forEach(e=>e.dispose()),this._remoteContentExclusions&&(this._remoteContentExclusions.dispose(),this._remoteContentExclusions=void 0),this._disposables=[]}get isEnabled(){return this._copilotIgnoreEnabled}get isRegexExclusionsEnabled(){return this._remoteContentExclusions?.isRegexContextExclusionsEnabled??!1}async isCopilotIgnored(e,t){let n=!1;return this._copilotIgnoreEnabled&&(n=this._copilotIgnoreFiles.isIgnored(e)||await(this._remoteContentExclusions?.isIgnored(e,t)??!1)),n}async asMinimatchPattern(){if(!this._copilotIgnoreEnabled)return;let e=[],t=(await this.searchService.findFiles("**/.git/HEAD",{useExcludeSettings:L5.None})).map(o=>Fe.joinPath(o,"..",".."));await this._remoteContentExclusions?.loadRepos(t),e.push(await this._remoteContentExclusions?.asMinimatchPatterns()??[]),e.push(this._copilotIgnoreFiles.asMinimatchPatterns());let n=e.flat();if(n.length!==0)return n.length===1?n[0]:`{${n.join(",")}}`}init(){return this._init??=(async()=>{for(let e of this._workspaceService.getWorkspaceFolders())await this.addWorkspace(e)})(),this._init}trackIgnoreFile(e,t,n){t.path.endsWith(hIe)&&this._copilotIgnoreFiles.setIgnoreFile(e,t,n)}removeIgnoreFile(e){e.path.endsWith(hIe)&&this._copilotIgnoreFiles.removeIgnoreFile(e)}removeWorkspace(e){this._copilotIgnoreFiles.removeWorkspace(e)}isIgnoreFile(e){return!!e.path.endsWith(hIe)}async addWorkspace(e){if(e.scheme!=="file")return;let t=await this.searchService.findFilesWithDefaultExcludes(new ud(e,`${hIe}`),void 0,dr.None);for(let n of t){let o=(await this.fs.readFile(n)).toString();this.trackIgnoreFile(e,n,o)}}};var uH=class extends gIe{constructor(e,t,n,o,s,a){super(e,n,o,s,a,new aH,new sH),this.installListeners()}installListeners(){this._disposables.push(yx.workspace.onDidChangeWorkspaceFolders(e=>{for(let t of e.removed)this.removeWorkspace(t.uri);for(let t of e.added)this.addWorkspace(t.uri)})),this._disposables.push(yx.workspace.onDidSaveTextDocument(async e=>{if(this.isIgnoreFile(e.uri)){let t=(await yx.workspace.fs.readFile(e.uri)).toString(),n=yx.workspace.getWorkspaceFolder(e.uri);this.trackIgnoreFile(n?.uri,e.uri,t)}}),yx.workspace.onDidDeleteFiles(e=>{for(let t of e.files)this.removeIgnoreFile(t)}),yx.workspace.onDidRenameFiles(async e=>{for(let t of e.files)if(this.isIgnoreFile(t.newUri)){let n=(await yx.workspace.fs.readFile(t.newUri)).toString();this.removeIgnoreFile(t.oldUri);let o=yx.workspace.getWorkspaceFolder(t.newUri);this.trackIgnoreFile(o?.uri,t.newUri,n)}}))}};uH=T([v(0,bl),v(1,Oi),v(2,ue),v(3,ft),v(4,Oe),v(5,Or)],uH);var dH=class{constructor(e){this.capiClient=e}async uploadChatImageAttachment(e,t,n,o){if(!n||!o)throw new Error("Missing required mimeType or token for image upload");let a=t.replace(/[^a-zA-Z0-9._-]/g,""),c=n.toLowerCase().match(/^[^\/]+\/([^+;]+)/)?.[1];c&&!a.toLowerCase().endsWith(`.${c}`)&&(a=`${a}.${c}`);try{let u=await this.capiClient.makeRequest({method:"POST",body:e,headers:{"Content-Type":"application/octet-stream",Authorization:`Bearer ${o}`}},{type:Zr.ChatAttachmentUpload,uploadName:a,mimeType:n});if(!u.ok)throw new Error(`Image upload failed: ${u.status} ${u.statusText}`);let d=await u.json();return Fe.parse(d.url)}catch(u){throw new Error(`Error uploading image: ${u}`)}}};dH=T([v(0,Or)],dH);var yIe=require("stream"),ctr=z(require("stream/consumers"));var vIe=class r{constructor(e){let t=new ro;this.aggregatedStream=t.p,this.response=this.aggregatedStream.then(n=>{if(n.isError())return n;try{return pt.ok(r.aggregateCompletionsStream(n.val))}catch(o){return pt.error(o)}}),this.stream=new _n(async n=>{let o=[],s;try{for await(let a of e)o.push(a),n.emitOne(a)}catch(a){a instanceof Error?s=a:s=new Error(aC(a)),n.reject(a)}finally{t.complete(s?pt.error(s):pt.ok(o))}})}static aggregateCompletionsStream(e){let t="",n=null,o=null,s;for(let u of e){let d=u.choices[0];t+=d.text??"",d.logprobs&&(o===null?o={tokens:[...d.logprobs.tokens],token_logprobs:[...d.logprobs.token_logprobs],text_offset:[...d.logprobs.text_offset],top_logprobs:[...d.logprobs.top_logprobs]}:(o.tokens.push(...d.logprobs.tokens),o.token_logprobs.push(...d.logprobs.token_logprobs),o.text_offset.push(...d.logprobs.text_offset),o.top_logprobs.push(...d.logprobs.top_logprobs))),u.usage&&(s===void 0?s={completion_tokens:u.usage.completion_tokens,prompt_tokens:u.usage.prompt_tokens,total_tokens:u.usage.total_tokens,completion_tokens_details:{audio_tokens:u.usage.completion_tokens_details.audio_tokens,reasoning_tokens:u.usage.completion_tokens_details.reasoning_tokens},prompt_tokens_details:{audio_tokens:u.usage.prompt_tokens_details.audio_tokens,reasoning_tokens:u.usage.prompt_tokens_details.reasoning_tokens}}:(s.completion_tokens+=u.usage.completion_tokens,s.prompt_tokens+=u.usage.prompt_tokens,s.total_tokens+=u.usage.total_tokens,s.completion_tokens_details.audio_tokens+=u.usage.completion_tokens_details.audio_tokens,s.completion_tokens_details.reasoning_tokens+=u.usage.completion_tokens_details.reasoning_tokens,s.prompt_tokens_details.audio_tokens+=u.usage.prompt_tokens_details.audio_tokens,s.prompt_tokens_details.reasoning_tokens+=u.usage.prompt_tokens_details.reasoning_tokens)),d.finish_reason&&(oa(n===null,"cannot already have finishReason if just seeing choice.finish_reason"),n=d.finish_reason)}if(e.length===0)throw new Error("Response is empty!");let a=e[0];return{choices:[{index:0,finish_reason:n,logprobs:o,text:t}],system_fingerprint:a.system_fingerprint,object:a.object,usage:s}}};function atr(r){return new _n(async e=>{let t="";for await(let n of r){t+=n;do{let o=t.indexOf(`
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/dist/extension.js:2927:`)}`})),u)}async postCodeOrDocsSearchRequest(e,t,n,o,s,a){let l=Math.min(s.limit??Exn,Sxn),c=s.similarity??_xn,u={urlOrRequestMetadata:e,tokenizer:"o200k_base",acquireTokenizer(){throw new Error("Method not implemented.")},family:"Code Or Doc Search",name:"Code Or Doc Search",version:"2023-12-12-preview",modelMaxPromptTokens:0,getExtraHeaders(){return{Accept:"application/json","X-GitHub-Api-Version":"2023-12-12-preview"}}},d=await nf(this._fetcherService,this._telemetryService,this._capiClientService,u,t??"",await fc(process.env.HMAC_SECRET),"codesearch",wt(),{query:n,scopingQuery:Gtr(o),similarity:c,limit:l},void 0,a),p=await d.text();if(d.status===404||d.status===400&&p.includes("unknown integration"))throw this._logService.debug(`${this.slug} search endpoint not available for this user.`),iXe({error:"ERROR_TYPE_NO_ACCESS_TO_ENDPOINT",message:`${this.slug}: ${p}`});let f;try{f=JSON.parse(p)}catch{throw new EIe(d.status,p)}return f}};T([Xa(e=>e._logService,"CodeOrDocsSearchClientImpl::search")],dB.prototype,"search",1),dB=T([v(0,Or),v(1,De),v(2,ft),v(3,rr),v(4,ue)],dB);var Hne=require("vscode");function zk(r){return Object.assign(r,{apply:function(...t){if(t.length===0)return Reflect.construct(r,[]);{let n=t.length===1?[]:t[1];return Reflect.construct(r,n,t[0].constructor)}},call:function(...t){if(t.length===0)return Reflect.construct(r,[]);{let[n,...o]=t;return Reflect.construct(r,o,n.constructor)}}})}var xs=class{static Min(...e){if(e.length===0)throw new TypeError;let t=e[0];for(let n=1;n<e.length;n++){let o=e[n];o.isBefore(t)&&(t=o)}return t}static Max(...e){if(e.length===0)throw new TypeError;let t=e[0];for(let n=1;n<e.length;n++){let o=e[n];o.isAfter(t)&&(t=o)}return t}static isPosition(e){if(!e)return!1;if(e instanceof xs)return!0;let{line:t,character:n}=e;return typeof t=="number"&&typeof n=="number"}static of(e){if(e instanceof xs)return e;if(this.isPosition(e))return new xs(e.line,e.character);throw new Error("Invalid argument, is NOT a position-like object")}get line(){return this._line}get character(){return this._character}constructor(e,t){if(e<0)throw On("line must be non-negative");if(t<0)throw On("character must be non-negative");this._line=e,this._character=t}isBefore(e){return this._line<e._line?!0:e._line<this._line?!1:this._character<e._character}isBeforeOrEqual(e){return this._line<e._line?!0:e._line<this._line?!1:this._character<=e._character}isAfter(e){return!this.isBeforeOrEqual(e)}isAfterOrEqual(e){return!this.isBefore(e)}isEqual(e){return this._line===e._line&&this._character===e._character}compareTo(e){return this._line<e._line?-1:this._line>e.line?1:this._character<e._character?-1:this._character>e._character?1:0}translate(e,t=0){if(e===null||t===null)throw On();let n;return typeof e>"u"?n=0:typeof e=="number"?n=e:(n=typeof e.lineDelta=="number"?e.lineDelta:0,t=typeof e.characterDelta=="number"?e.characterDelta:0),n===0&&t===0?this:new xs(this.line+n,this.character+t)}with(e,t=this.character){if(e===null||t===null)throw On();let n;return typeof e>"u"?n=this.line:typeof e=="number"?n=e:(n=typeof e.line=="number"?e.line:this.line,t=typeof e.character=="number"?e.character:this.character),n===this.line&&t===this.character?this:new xs(n,t)}toJSON(){return{line:this.line,character:this.character}}[Symbol.for("debug.description")](){return`(${this.line}:${this.character})`}};xs=T([zk],xs);var ru=class{static isRange(e){return e instanceof ru?!0:e?xs.isPosition(e.start)&&xs.isPosition(e.end):!1}static of(e){if(e instanceof ru)return e;if(this.isRange(e))return new ru(e.start,e.end);throw new Error("Invalid argument, is NOT a range-like object")}get start(){return this._start}get end(){return this._end}constructor(e,t,n,o){let s,a;if(typeof e=="number"&&typeof t=="number"&&typeof n=="number"&&typeof o=="number"?(s=new xs(e,t),a=new xs(n,o)):xs.isPosition(e)&&xs.isPosition(t)&&(s=xs.of(e),a=xs.of(t)),!s||!a)throw new Error("Invalid arguments");s.isBefore(a)?(this._start=s,this._end=a):(this._start=a,this._end=s)}contains(e){return ru.isRange(e)?this.contains(e.start)&&this.contains(e.end):xs.isPosition(e)?!(xs.of(e).isBefore(this._start)||this._end.isBefore(e)):!1}isEqual(e){return this._start.isEqual(e._start)&&this._end.isEqual(e._end)}intersection(e){let t=xs.Max(e.start,this._start),n=xs.Min(e.end,this._end);if(!t.isAfter(n))return new ru(t,n)}union(e){if(this.contains(e))return this;if(e.contains(this))return e;let t=xs.Min(e.start,this._start),n=xs.Max(e.end,this.end);return new ru(t,n)}get isEmpty(){return this._start.isEqual(this._end)}get isSingleLine(){return this._start.line===this._end.line}with(e,t=this.end){if(e===null||t===null)throw On();let n;return e?xs.isPosition(e)?n=e:(n=e.start||this.start,t=e.end||this.end):n=this.start,n.isEqual(this._start)&&t.isEqual(this.end)?this:new ru(n,t)}toJSON(){return[this.start,this.end]}[Symbol.for("debug.description")](){return Cxn(this)}};ru=T([zk],ru);function Cxn(r){return r.isEmpty?`[${r.start.line}:${r.start.character})`:`[${r.start.line}:${r.start.character} -> ${r.end.line}:${r.end.character})`}var Ax=class{static isLocation(e){return e instanceof Ax?!0:e?ru.isRange(e.range)&&Fe.isUri(e.uri):!1}constructor(e,t){if(this.uri=e,t)if(ru.isRange(t))this.range=ru.of(t);else if(xs.isPosition(t))this.range=new ru(t,t);else throw new Error("Illegal argument")}toJSON(){return{uri:this.uri,range:this.range}}};Ax=T([zk],Ax);var sXe=(k=>(k[k.File=0]="File",k[k.Module=1]="Module",k[k.Namespace=2]="Namespace",k[k.Package=3]="Package",k[k.Class=4]="Class",k[k.Method=5]="Method",k[k.Property=6]="Property",k[k.Field=7]="Field",k[k.Constructor=8]="Constructor",k[k.Enum=9]="Enum",k[k.Interface=10]="Interface",k[k.Function=11]="Function",k[k.Variable=12]="Variable",k[k.Constant=13]="Constant",k[k.String=14]="String",k[k.Number=15]="Number",k[k.Boolean=16]="Boolean",k[k.Array=17]="Array",k[k.Object=18]="Object",k[k.Key=19]="Key",k[k.Null=20]="Null",k[k.EnumMember=21]="EnumMember",k[k.Struct=22]="Struct",k[k.Event=23]="Event",k[k.Operator=24]="Operator",k[k.TypeParameter=25]="TypeParameter",k))(sXe||{});var gH=class{static validate(e){if(!e.name)throw new Error("name must not be falsy")}constructor(e,t,n,o,s){this.name=e,this.kind=t,this.containerName=s,typeof n=="string"&&(this.containerName=n),o instanceof Ax?this.location=o:n instanceof ru&&(this.location=new Ax(o,n)),gH.validate(this)}toJSON(){return{name:this.name,kind:sXe[this.kind],location:this.location,containerName:this.containerName}}};gH=T([zk],gH);var vH=class{constructor(e,t,n){this.parserService=e;this.languageFeaturesService=t;this.dialogService=n}async findEnclosingBlocks(e,t){let n=this.parserService.getTreeSitterAST(e);if(n===void 0)return;let o=mc(t,e);return(await n.getFineScopes(o))?.map(a=>{let l=Sm(e,a);return{kind:"code",name:e.lineAt(l.start).text.trim(),range:l}})}findEnclosingSymbols(e,t){for(let n of e)if(n.range.contains(t)){let o=this.findEnclosingSymbols(n.children,t);return o?[n,...o]:[n]}}async selectEnclosingScope(e,t){let n=await this.languageFeaturesService.getDocumentSymbols(e.document.uri);if(!n||n.length>0&&!n[0].hasOwnProperty("children"))return;let o=e.selection;if(!o.isEmpty)return;let s=this.findEnclosingSymbols(n,e.selection.active);if(t?.includeBlocks&&s?.push(...await this.findEnclosingBlocks(vr.create(e.document),e.selection)??[]),s||(s=n),s?.length===1){let a=s[0];e.selection=new Hne.Selection(a.range.start,a.range.end)}else if(s&&s.length>1||!s&&n.length>1){let a=s.sort((c,u)=>u.range.start.line-c.range.start.line).map(c=>({label:`$(${c.kind==="code"?"code":Wtr.toIcon(c.kind).id}) ${c.name}`,description:`:${c.range.start.line+1}-${c.range.end.line+1}`,symbol:c}));if(!await this.dialogService.showQuickPick(a,{placeHolder:t?.reason??Hne.l10n.t("Select an enclosing range"),onDidSelectItem(c){let u=c.symbol;u&&(e.selection=new Hne.Selection(u.range.start,u.range.end),e.revealRange(u.range))}}))throw e.selection=o,new Hr}return e.selection}};vH=T([v(0,Lr),v(1,Ec),v(2,NV)],vH);var Wtr;(t=>{let r=new Map;r.set(0,Mi.symbolFile),r.set(1,Mi.symbolModule),r.set(2,Mi.symbolNamespace),r.set(3,Mi.symbolPackage),r.set(4,Mi.symbolClass),r.set(5,Mi.symbolMethod),r.set(6,Mi.symbolProperty),r.set(7,Mi.symbolField),r.set(8,Mi.symbolConstructor),r.set(9,Mi.symbolEnum),r.set(10,Mi.symbolInterface),r.set(11,Mi.symbolFunction),r.set(12,Mi.symbolVariable),r.set(13,Mi.symbolConstant),r.set(14,Mi.symbolString),r.set(15,Mi.symbolNumber),r.set(16,Mi.symbolBoolean),r.set(17,Mi.symbolArray),r.set(18,Mi.symbolObject),r.set(19,Mi.symbolKey),r.set(20,Mi.symbolNull),r.set(21,Mi.symbolEnumMember),r.set(22,Mi.symbolStruct),r.set(23,Mi.symbolEvent),r.set(24,Mi.symbolOperator),r.set(25,Mi.symbolTypeParameter);function e(n){let o=r.get(n);return o||(console.info("No codicon found for SymbolKind "+n),o=Mi.symbolProperty),o}t.toIcon=e})(Wtr||={});var pB=class extends aH{constructor(t,n){super();this._ignoreService=t;this._logService=n}async findFilesWithDefaultExcludes(t,n,o){let s=await this._ignoreService.asMinimatchPattern(),a=await this._findFilesWithDefaultExcludesAndExcludes(t,s,n,o);return!this._ignoreService.isRegexExclusionsEnabled||!a?a:Array.isArray(a)?await K1e(this._ignoreService,a):await this._ignoreService.isCopilotIgnored(a)?void 0:a}async findFiles(t,n,o){let s=await this._ignoreService.asMinimatchPattern();n?.exclude?n={...n,exclude:s?n.exclude.map(l=>q6t(l,s)):n.exclude}:n={...n,exclude:s?[s]:n?.exclude};let a=await super.findFiles(t,n,o);return this._ignoreService.isRegexExclusionsEnabled?await K1e(this._ignoreService,a):a}async findTextInFiles(t,n,o,s){let a=[],l={report:async u=>{a.push((async()=>{await this._ignoreService.isCopilotIgnored(u.uri)||o.report(u)})())}},c=await super.findTextInFiles(t,n,l,s);return await Promise.all(a),c}};T([Xa(t=>t._logService,"SearchServiceImpl::findFiles")],pB.prototype,"findFiles",1),pB=T([v(0,At),v(1,ue)],pB);var jtr="7d7048df-6dd0-4048-bb23-b716c1461f8f",$tr="3fdd7f28-937a-48c8-9a21-ba337db23bd1";var jne=z(require("vscode")),Wne=z(drr());var SXe=class r extends _e{constructor(t,n){super();this.context=t;this._onDidChangeUserInfo=this._register(new Vt);this.onDidChangeUserInfo=this._onDidChangeUserInfo.event;if(n){let o=()=>{if(n.copilotToken?.isGitHubInternal)return"github";if(n.copilotToken?.isMicrosoftInternal)return"microsoft"};if(n.onDidStoreUpdate(()=>{this.updateUserInfo(o(),n.copilotToken?.sku)}),n.copilotToken)this.updateUserInfo(o(),n.copilotToken.sku);else{let s=this.context.globalState.get(r.INTERNAL_ORG_STORAGE_KEY),a=this.context.globalState.get(r.SKU_STORAGE_KEY);this.updateUserInfo(s,a)}}}static{this.INTERNAL_ORG_STORAGE_KEY="exp.github.copilot.internalOrg"}static{this.SKU_STORAGE_KEY="exp.github.copilot.sku"}get internalOrg(){return this._internalOrg}get sku(){return this._sku}updateUserInfo(t,n){this._internalOrg===t&&this._sku===n||(this._internalOrg=t,this._sku=n,this.context.globalState.update(r.INTERNAL_ORG_STORAGE_KEY,this._internalOrg),this.context.globalState.update(r.SKU_STORAGE_KEY,this._sku),this._onDidChangeUserInfo.fire())}},EH=class extends _e{constructor(t,n,o,s,a){super();this._configurationService=s;this._logService=a;this._refreshTimer=this._register(new Ny);this._previouslyReadTreatments=new Map;this._onDidTreatmentsChange=this._register(new Vt);this.onDidTreatmentsChange=this._onDidTreatmentsChange.event;this._signalTreatmentsChangeEvent=()=>{let t=[];for(let[n,o]of this._previouslyReadTreatments){let s=this._delegate.getTreatmentVariable("vscode",n);s!==o&&(this._logService.trace(`[BaseExperimentationService] Treatment changed: ${n} from ${o} to ${s}`),this._previouslyReadTreatments.set(n,s),t.push(n))}t.length>0&&(this._onDidTreatmentsChange.fire({affectedTreatmentVariables:t}),this._configurationService.updateExperimentBasedConfiguration(t))};this._completionsFilters=new Map;this._userInfoStore=new SXe(n,o),this._register(this._userInfoStore.onDidChangeUserInfo(async()=>{await this._delegate.getTreatmentVariableAsync("vscode","refresh"),this._logService.trace("[BaseExperimentationService] User info changed, refreshed treatments"),this._signalTreatmentsChangeEvent()})),this._refreshTimer.cancelAndSet(async()=>{await this._delegate.getTreatmentVariableAsync("vscode","refresh"),this._logService.trace("[BaseExperimentationService] Refreshed treatments on timer"),this._signalTreatmentsChangeEvent()},60*60*1e3),this._delegate=t(n.globalState,this._userInfoStore),this._delegate.initialFetch.then(()=>{this._logService.trace("[BaseExperimentationService] Initial fetch completed")})}async hasTreatments(){return await this._delegate.initializePromise,this._delegate.initialFetch}getTreatmentVariable(t){let n=this._delegate.getTreatmentVariable("vscode",t);return this._previouslyReadTreatments.set(t,n),n}async setCompletionsFilters(t){if(!Wxn(this._completionsFilters,t)){this._completionsFilters.clear();for(let[n,o]of t)this._completionsFilters.set(n,o);await this._delegate.initialFetch,await this._delegate.getTreatmentVariableAsync("vscode","refresh"),this._signalTreatmentsChangeEvent()}}getCompletionsFilters(){return this._completionsFilters}};EH=T([v(1,ar),v(2,fl),v(3,Pe),v(4,ue)],EH);function Wxn(r,e){if(r.size!==e.size)return!1;for(let[t,n]of r)if(e.get(t)!==n)return!1;return!0}function jxn(r){return r?Wne.TargetPopulation.Insiders:Wne.TargetPopulation.Public}function $xn(r){return r.split("-")[0]}var Jg="X-Copilot-RelatedPluginVersion-",NIe=(f=>(f.CopilotRelatedPluginVersionCppTools=Jg+"msvscodecpptools",f.CopilotRelatedPluginVersionCMakeTools=Jg+"msvscodecmaketools",f.CopilotRelatedPluginVersionMakefileTools=Jg+"msvscodemakefiletools",f.CopilotRelatedPluginVersionCSharpDevKit=Jg+"msdotnettoolscsdevkit",f.CopilotRelatedPluginVersionPython=Jg+"mspythonpython",f.CopilotRelatedPluginVersionPylance=Jg+"mspythonvscodepylance",f.CopilotRelatedPluginVersionJavaPack=Jg+"vscjavavscodejavapack",f.CopilotRelatedPluginVersionTypescript=Jg+"vscodetypescriptlanguagefeatures",f.CopilotRelatedPluginVersionTypescriptNext=Jg+"msvscodevscodetypescriptnext",f.CopilotRelatedPluginVersionCSharp=Jg+"msdotnettoolscsharp",f.CopilotRelatedPluginVersionCopilot=Jg+"githubcopilot",f.CopilotRelatedPluginVersionCopilotChat=Jg+"githubcopilotchat",f))(NIe||{}),_Xe=class{constructor(e){this._logService=e}_getRelatedExtensions(){return["ms-vscode.cpptools","ms-vscode.cmake-tools","ms-vscode.makefile-tools","ms-dotnettools.csdevkit","ms-python.python","ms-python.vscode-pylance","vscjava.vscode-java-pack","vscode.typescript-language-features","ms-vscode.vscode-typescript-next","ms-dotnettools.csharp"].map(e=>{let t=jne.extensions.getExtension(e)?.packageJSON;if(t&&typeof t=="object"&&"version"in t&&typeof t.version=="string")return{name:e,version:t.version}}).filter(e=>e!==void 0)}getFilters(){this._logService.trace("[RelatedExtensionsFilterProvider]::getFilters looking up related extensions");let e=new Map;for(let t of this._getRelatedExtensions()){let n=Jg+t.name.replace(/[^A-Za-z]/g,"").toLowerCase();if(!Object.values(NIe).includes(n)){this._logService.warn(`[RelatedExtensionsFilterProvider]::getFilters A filter could not be registered for the unrecognized related plugin "${t.name}".`);continue}e.set(n,$xn(t.version))}return this._logService.trace(`[RelatedExtensionsFilterProvider]::getFilters Filters: ${JSON.stringify(Array.from(e.entries()))}`),e}},CXe=class{constructor(e){this._logService=e}getFilters(){let e=jne.extensions.getExtension("github.copilot")?.packageJSON.version,t=Qa.version,n=Qa.completionsCoreVersion;this._logService.trace(`[CopilotExtensionsFilterProvider]::getFilters Copilot Extension Version: ${e}, Copilot Chat Extension Version: ${t}, Completions Core Version: ${n}`);let o=new Map;return o.set(NIe.CopilotRelatedPluginVersionCopilot,e),o.set(NIe.CopilotRelatedPluginVersionCopilotChat,t),o.set("X-VSCode-CompletionsInChatExtensionVersion",n),o}},TXe=class{constructor(e,t){this._getCompletionsFilters=e;this._logService=t}getFilters(){let e=new Map;for(let[t,n]of this._getCompletionsFilters())n!==""&&e.set(t,n);return this._logService.trace(`[CopilotCompletionsFilterProvider]::getFilters Filters: ${JSON.stringify(Array.from(e.entries()))}`),e}},IXe=class{constructor(e,t){this._userInfoStore=e;this._logService=t}getFilters(){this._logService.trace(`[GithubAccountFilterProvider]::getFilters SKU: ${this._userInfoStore.sku}, Internal Org: ${this._userInfoStore.internalOrg}`);let e=new Map;return e.set("X-GitHub-Copilot-SKU",this._userInfoStore.sku),e.set("X-Microsoft-Internal-Org",this._userInfoStore.internalOrg),e}},xXe=class{constructor(e){this._devDeviceId=e}getFilters(){let e=new Map;return e.set("X-VSCode-DevDeviceId",this._devDeviceId),e}},SH=class extends EH{constructor(e,t,n,o,s,a,l){let c=t.extension.id,u=t.extension.packageJSON.version,d=jxn(n.isPreRelease()),p,f=(m,h)=>{let g=new Gne(m,n);return(0,Wne.getExperimentationService)(c,u,d,e,g,new IXe(h,l),new _Xe(l),new CXe(l),new TXe(()=>p?.getCompletionsFilters()??new Map,l),new xXe(jne.env.devDeviceId))};super(f,t,o,s,l),p=this,a instanceof XS&&a.setExperimentationService(this)}};SH=T([v(0,De),v(1,ar),v(2,Mt),v(3,fl),v(4,Pe),v(5,rr),v(6,ue)],SH);var Gne=class{constructor(e,t){this._actual=e;this._envService=t}keys(){return this._actual.keys()}get(e,t){let n=this._actual.get(e,t);if(!Yxn(n)||n.extensionVersion!==this._envService.getVersion())return t;let o=new Date().getTime()-new Date(n.savedDateTime).getTime(),s=1e3*60*60*24*3;return o>s?t:n.value}update(e,t){let n={$$$isWrappedExpValue:!0,savedDateTime:new Date().toISOString(),extensionVersion:this._envService.getVersion(),value:t};return this._actual.update(e,n)}};Gne=T([v(1,Mt)],Gne);function Yxn(r){return nd(r)&&"$$$isWrappedExpValue"in r}var LIe=class{constructor(e,t,n){this._tokenStore=e;this._microsoftTelemetrySender=t;this._ghTelemetrySender=n;this._sharedProperties={};this._additionalExpAssignments=[];this._disposables=[];this._disposables.push(this._microsoftTelemetrySender,this._ghTelemetrySender),this._disposables.push(e.onDidStoreUpdate(()=>{let o=e.copilotToken;o&&this.sendMSFTTelemetryEvent("token",void 0,{chatEnabled:o.isChatEnabled()?1:0,snippyEnabled:o.isPublicSuggestionsEnabled()?1:0,telemetryEnabled:o.isTelemetryEnabled()?1:0,mcpEnabled:o.isMcpEnabled()?1:0,previewEnabled:o.isEditorPreviewFeaturesEnabled()?1:0,reviewEnabled:o.isCopilotCodeReviewEnabled?1:0})}))}dispose(){this._disposables.forEach(e=>e.dispose())}sendMSFTTelemetryEvent(e,t,n){this.sendTelemetryEvent(e,{github:!1,microsoft:!0},t,n)}sendMSFTTelemetryErrorEvent(e,t,n){this.sendTelemetryErrorEvent(e,{github:!1,microsoft:!0},t,n)}sendGHTelemetryEvent(e,t,n){let o=this._tokenStore.copilotToken?.sku,s={...t,sku:o??""};this.sendTelemetryEvent(e,{github:!0,microsoft:!1},s,n)}sendGHTelemetryErrorEvent(e,t,n){this.sendTelemetryErrorEvent(e,{github:!0,microsoft:!1},t,n)}sendGHTelemetryException(e,t){this._ghTelemetrySender.sendExceptionTelemetry(e,t)}sendEnhancedGHTelemetryEvent(e,t,n){t={...t,...this._sharedProperties},this._ghTelemetrySender.sendEnhancedTelemetryEvent(e,t,n)}sendEnhancedGHTelemetryErrorEvent(e,t,n){t={...t,...this._sharedProperties},this._ghTelemetrySender.sendEnhancedTelemetryErrorEvent(e,t,n)}sendInternalMSFTTelemetryEvent(e,t,n){t={...t,...this._sharedProperties},this._microsoftTelemetrySender.sendInternalTelemetryEvent(e,t,n)}_getEventName(e,t){let n="";return typeof t=="object"&&(n=t.eventNamePrefix),n+e}sendTelemetryEvent(e,t,n,o){n={...n,...this._sharedProperties},t.github&&this._ghTelemetrySender.sendTelemetryEvent(this._getEventName(e,t.github),n,o),t.microsoft&&this._microsoftTelemetrySender.sendTelemetryEvent(e,n,o)}sendTelemetryErrorEvent(e,t,n,o){n={...n,...this._sharedProperties},t.github&&this._ghTelemetrySender.sendTelemetryErrorEvent(this._getEventName(e,t.github),n,o),t.microsoft&&this._microsoftTelemetrySender.sendTelemetryErrorEvent(e,n,o)}_setOriginalExpAssignments(e){this._originalExpAssignments=e,this._updateExpAssignmentsSharedProperty()}setAdditionalExpAssignments(e){this._additionalExpAssignments=e,this._updateExpAssignmentsSharedProperty()}_updateExpAssignmentsSharedProperty(){let e=this._originalExpAssignments||"";for(let t of this._additionalExpAssignments)e.includes(t)||(e+=`;${t}`);this._sharedProperties["abexp.assignmentcontext"]=e}setSharedProperty(e,t){if(e==="abexp.assignmentcontext"){this._setOriginalExpAssignments(t);return}this._sharedProperties[e]=t}postEvent(e,t){for(let[n,o]of Object.entries(this._sharedProperties))t.set(n,o);this._microsoftTelemetrySender.postEvent(e,t)}};var RXe=require("vscode");function prr(r){return r.replace(/([\s|(]|file:\/\/)(\/[^\s]+)/g,"$1[redacted]").replace(/([\s|(]|file:\/\/)([a-zA-Z]:[(\\|/){1,2}][^\s]+)/gi,"$1[redacted]").replace(/([\s|(]|file:\/\/)(\\[^\s]+)/gi,"$1[redacted]")}var MIe=class{constructor(e,t,n,o,s,a){this._createTelemetryLogger=t;this._configService=n;this._telemetryConfig=o;this._envService=s;this._domainService=a;this._disposables=new yt;this._processToken(e.copilotToken),this._standardTelemetryLogger=this._createTelemetryLogger(!1),this._disposables.add(e.onDidStoreUpdate(()=>{let l=e.copilotToken;this._processToken(l)})),this._disposables.add(this._domainService.onDidChangeDomains(()=>{this._standardTelemetryLogger.dispose(),this._standardTelemetryLogger=this._createTelemetryLogger(!1),this._enhancedTelemetryLogger&&(this._enhancedTelemetryLogger.dispose(),this._enhancedTelemetryLogger=this._createTelemetryLogger(!0))}))}_processToken(e){e||this._enhancedTelemetryLogger&&(this._enhancedTelemetryLogger.dispose(),this._enhancedTelemetryLogger=void 0),e?.getTokenValue("rt")==="1"?this._enhancedTelemetryLogger=this._createTelemetryLogger(!0):(this._enhancedTelemetryLogger&&this._enhancedTelemetryLogger.dispose(),this._enhancedTelemetryLogger=void 0)}sendTelemetryEvent(e,t,n){this._standardTelemetryLogger.logUsage(e,this.markAsIssuedAndMakeReadyForSending(t,n))}sendTelemetryErrorEvent(e,t,n){this._standardTelemetryLogger.logError(e,this.markAsIssuedAndMakeReadyForSending(t,n))}sendEnhancedTelemetryEvent(e,t,n){this._enhancedTelemetryLogger&&this._enhancedTelemetryLogger?.logUsage(e,this.markAsIssuedAndMakeReadyForSending(t,n))}sendEnhancedTelemetryErrorEvent(e,t,n){this._enhancedTelemetryLogger&&this._enhancedTelemetryLogger?.logError(e,this.markAsIssuedAndMakeReadyForSending(t,n))}sendExceptionTelemetry(e,t){let n=e instanceof Error?e:new Error("Non-error thrown: "+e),o=is.createAndMarkAsIssued({origin:prr(t),reason:this._enhancedTelemetryLogger?"Exception logged to enhanced telemetry":"Exception, not logged due to opt-out"});if(o.makeReadyForSending(this._configService,this._envService,this._telemetryConfig),this.sendTelemetryEvent("exception",o.properties,o.measurements),!this._enhancedTelemetryLogger)return;let s=is.createAndMarkAsIssued({origin:t});s.makeReadyForSending(this._configService,this._envService,this._telemetryConfig),this._enhancedTelemetryLogger.logError(n,s)}markAsIssuedAndMakeReadyForSending(e,t){let n=is.createAndMarkAsIssued(Hdt(e),t);n.makeReadyForSending(this._configService,this._envService,this._telemetryConfig);let o={};for(let s in n.properties)o[s]=new Ule(n.properties[s]);return{properties:o,measurements:n.measurements}}dispose(){this._standardTelemetryLogger.dispose(),this._disposables.dispose(),this._enhancedTelemetryLogger&&this._enhancedTelemetryLogger.dispose()}};var OIe=class extends MIe{constructor(e,t,n,o,s,a,l,c,u){let d=p=>p?RXe.env.createTelemetryLogger(new H8(s,t,u,a,c),{ignoreBuiltInCommonProperties:!0,ignoreUnhandledErrors:!0}):RXe.env.createTelemetryLogger(new H8(s,t,u,a,l),{ignoreBuiltInCommonProperties:!0,ignoreUnhandledErrors:!0});super(u,d,e,n,t,o)}};var Ksr=z(require("https")),LG=z(require("os")),Cie=z(require("vscode"));var O1n=async(r,e,t)=>{let n=await Promise.resolve().then(()=>(WB(),$or)),o=await Promise.resolve().then(()=>(kir(),Pir)),s=new n.AppInsightsCore,a=new o.PostChannel,l={instrumentationKey:r,endpointUrl:"https://mobile.events.data.microsoft.com/OneCollector/1.0",loggingLevelTelemetry:0,loggingLevelConsole:0,disableCookiesUsage:!0,disableDbgExt:!0,disableInstrumentationKeyValidation:!0,channels:[[a]]};if(t){l.extensionConfig={};let d={alwaysUseXhrOverride:!0,httpXHROverride:t};l.extensionConfig[a.identifier]=d}let u=e.workspace.getConfiguration("telemetry").get("internalTesting");return s.initialize(l,[]),s.addTelemetryInitializer(d=>{d.ext=d.ext??{},d.ext.web=d.ext.web??{},d.ext.web.consentDetails='{"GPC_DataSharingOptIn":false}',u&&(d.ext.utc=d.ext.utc??{},d.ext.utc.flags=8462029)}),s},Dir=async(r,e,t)=>{let n=await O1n(r,e,t);return{logEvent:(a,l)=>{try{n?.track({name:a,baseData:{name:a,properties:l?.properties,measurements:l?.measurements}})}catch(c){throw new Error(`Failed to log event to app insights!
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/dist/extension.js:3002:`)}function LPn(r,e){r.push(MPn(e)),r.length>40&&r.shift()}var srt=class{constructor(e){this.session=e}onWillStartSession(){}onWillReceiveMessage(e){}onDidSendMessage(e){if(lrt.debug.activeDebugSession!==this.session)return;let t=this.extractOutput(e);t&&LPn(far,t)}extractOutput(e){if(e.event==="output"&&(e.body.category==="stdout"||e.body.category==="stderr"))return e.body.output}onWillStopSession(){}onError(e){}onExit(e,t){}};function MPn(r){let e=/(:?\x1b\[|\x9B)[=?>!]?[\d;:]*["$#'* ]?[a-zA-Z@^`{}|~]/g;return r&&(r=r.replace(e,"")),r}function har(){return[lrt.debug.registerDebugAdapterTrackerFactory("*",new art)]}var art=class{createDebugAdapterTracker(e){return new srt(e)}};var xwe=class extends _e{constructor(){super();for(let e of har())this._register(e)}get consoleOutput(){return mar()}};var crt=z(require("vscode")),Rwe=class{showQuickPick(e,t,n){return crt.window.showQuickPick(e,t,n)}showOpenDialog(e){return crt.window.showOpenDialog(e).then(t=>t)}};var sW=class{constructor(e,t,n,o,s,a,l){this._authService=e;this._capiClientService=t;this._envService=n;this._fetcherService=o;this._logService=s;this._telemetryService=a;this._endpointProvider=l;this.batchSize=100}async computeEmbeddings(e,t,n,o,s){return ti(this._logService,"RemoteEmbeddingsComputer::computeEmbeddings",async()=>{if((await this._authService.getCopilotToken()).isNoAuthUser)return await this.computeCAPIEmbeddings(t,n,s)??{type:e,values:[]};let l=(await this._authService.getAnyGitHubSession({silent:!0}))?.accessToken;if(!l)throw new Error("No authentication token available");let c=[];for(let u=0;u<t.length;u+=this.batchSize){let d=t.slice(u,u+this.batchSize);if(!d.length)break;let p={inputs:d,input_type:n?.inputType??"document",embedding_model:e.id},f=await nf(this._fetcherService,this._telemetryService,this._capiClientService,{type:Zr.DotcomEmbeddings},l,await fc(Vd.HMAC_SECRET),"copilot-panel",wt(),p,mS(o?.callTracker??new fm,this._envService),s);if(!f.ok)throw this._telemetryService.sendMSFTTelemetryEvent("remoteEmbeddingsComputer.computeEmbeddings.error",{source:o?.callTracker.toString(),correlationId:o?.correlationId,embeddingType:e.id},{totalInputLength:t.length,batchInputLength:d.length,statusCode:f.status}),new Error(`Error fetching embeddings: ${f.status}`);let m=await f.json(),h=new vn(m.embedding_model);if(!h.equals(e))throw new Error(`Unexpected embedding model. Got: ${h}. Expected: ${e}`);if(d.length!==m.embeddings.length)throw new Error(`Mismatched embedding result count. Expected: ${d.length}. Got: ${m.embeddings.length}`);c.push(...m.embeddings.map(g=>({type:h,value:g.embedding})))}return{type:e,values:c}})}async computeCAPIEmbeddings(e,t,n){let o=xC(vn.text3small_512);if(!o)throw new Error(`Embeddings type info not found: ${vn.text3small_512}`);let s=await this._endpointProvider.getEmbeddingsEndpoint("text3small"),a=s.maxBatchSize,l=s.modelMaxPromptTokens-1;return this.fetchResponseWithBatches(o,s,e,n,l,a)}async fetchResponseWithBatches(e,t,n,o,s,a,l=1){for(let p of n)if(await t.acquireTokenizer().tokenLength(p)>s)return;let c=[],u=[],d=new Dy(l);try{for(let p=0;p<n.length;p+=a){let f=n.slice(p,p+a);u.push(d.queue(async()=>{if(o?.isCancellationRequested)return;let m=await this.rawEmbeddingsFetchWithTelemetry(e,t,wt(),f,o);if(m.type==="failed")throw new Error("Embeddings request failed "+m.reason);return m}))}c=(await Promise.all(u)).flatMap(p=>p?.embeddings??[])}catch{return}finally{d.dispose()}if(!o?.isCancellationRequested&&c.length!==0)return{type:vn.text3small_512,values:c.map(p=>({type:vn.text3small_512,value:p}))}}async rawEmbeddingsFetchWithTelemetry(e,t,n,o,s){let a=Date.now(),l=await this.rawEmbeddingsFetch(e,t,n,o,s);if(l.type==="failed")return this._telemetryService.sendMSFTTelemetryErrorEvent("embedding.error",{type:l.type,reason:l.reason}),l;let c=t.acquireTokenizer(),d=(await Promise.all(o.map(p=>c.tokenLength(p)))).reduce((p,f)=>p+f,0);return this._telemetryService.sendMSFTTelemetryEvent("embedding.success",{},{batchSize:o.length,inputTokenCount:d,timeToComplete:Date.now()-a}),l}async rawEmbeddingsFetch(e,t,n,o,s){try{let a=await this._authService.getCopilotToken(),l={input:o,model:e.model,dimensions:e.dimensions};t.interceptBody?.(l);let c=await nf(this._fetcherService,this._telemetryService,this._capiClientService,t,a.token,await fc(Vd.HMAC_SECRET),"copilot-panel",n,l,void 0,s),u=c.status===200?await c.json():await c.text();return c.status===200&&u.data?{type:"success",embeddings:u.data.map(d=>d.embedding)}:{type:"failed",reason:u.error}}catch(a){let l=a?.message??"Unknown error";return l.match(/Unexpected.*JSON/i)&&(l="timeout"),{type:"failed",reason:l}}}};sW=T([v(0,ft),v(1,Or),v(2,Mt),v(3,rr),v(4,ue),v(5,De),v(6,Je)],sW);var Zu=z(require("vscode"));var aW=class{get extensionId(){return`${Qa.publisher}.${Qa.name}`.toLowerCase()}get sessionId(){return Zu.env.sessionId}get machineId(){return Zu.env.machineId}get vscodeVersion(){return Zu.version}get remoteName(){return Zu.env.remoteName}get uiKind(){switch(Zu.env.uiKind){case Zu.UIKind.Desktop:return"desktop";case Zu.UIKind.Web:return"web"}}get isActive(){return Zu.window.state.active}get OS(){switch(ynt){case 3:return"Windows";case 1:return"Mac";case 2:return"Linux";default:return"Linux"}}get language(){return Zu.env.language}get uriScheme(){return Zu.env.uriScheme}get appRoot(){return Zu.env.appRoot}get shell(){return Zu.env.shell}isProduction(){return KF}isPreRelease(){return qh}isSimulation(){return!1}getBuildType(){return Qa.buildType}getVersion(){return Qa.version}getBuild(){return Qa.build}getName(){return Qa.name}getEditorInfo(){return new Sj("vscode",Zu.version)}getEditorPluginInfo(){return new Sj("copilot-chat",Qa.version)}openExternal(e){return new Promise((t,n)=>Zu.env.openExternal(e).then(t,n))}};var Rie=z(require("vscode")),wwe=class{get all(){return Rie.extensions.all}get allAcrossExtensionHosts(){return Rie.extensions.allAcrossExtensionHosts}get onDidChange(){return Rie.extensions.onDidChange}get getExtension(){return Rie.extensions.getExtension}};var VD=z(require("vscode"));var lW=class{constructor(e){this._logService=e;this._onDidChange=new VD.EventEmitter;this.onDidChange=this._onDidChange.event;this._extensionEnablement=void 0;this._disposables=[];this._logService.info("[GitExtensionServiceImpl] Initializing Git extension service."),this._disposables.push(...this._initializeExtensionApi())}getExtensionApi(){return this._api}get extensionAvailable(){return this._extensionEnablement===void 0?!!VD.extensions.getExtension("vscode.git"):this._extensionEnablement}_initializeExtensionApi(){let e=[],t=VD.extensions.getExtension("vscode.git"),n=async()=>{let o;try{o=await t.activate(),this._logService.info("[GitExtensionServiceImpl] Successfully activated the vscode.git extension.")}catch(a){this._logService.error(a,"[GitExtensionServiceImpl] Failed to activate the vscode.git extension.");return}let s=a=>{this._logService.info(`[GitExtensionServiceImpl] Enablement state of the vscode.git extension: ${a}.`),this._extensionEnablement=a,a?(this._api=o.getAPI(1),this._onDidChange.fire({enabled:!0}),this._logService.info("[GitExtensionServiceImpl] Successfully registered Git commit message provider.")):(this._api=void 0,this._onDidChange.fire({enabled:!1}))};e.push(o.onDidChangeEnablement(s)),s(o.enabled)};if(t)n();else{this._logService.info("[GitExtensionServiceImpl] vscode.git extension is not yet activated.");let o=VD.extensions.onDidChange(()=>{!t&&VD.extensions.getExtension("vscode.git")&&(t=VD.extensions.getExtension("vscode.git"),n(),o.dispose())})}return e}};lW=T([v(0,ue)],lW);var HD=z(require("vscode")),yar=require("vscode");var urt=class r{static{this._lineSeparator=/\r?\n/}static{this._propertyRegex=/^\s*(\w+)\s*=\s*"?([^"]+)"?$/}static{this._sectionRegex=/^\s*\[\s*([^\]]+?)\s*(\"[^"]+\")*\]\s*$/}static parse(e){let t={sections:[]},n={name:"DEFAULT",properties:{}},o=s=>{s&&t.sections.push(s)};for(let s of e.split(r._lineSeparator)){let a=s.match(r._sectionRegex);if(a?.length===3){o(n),n={name:a[1],subSectionName:a[2]?.replaceAll('"',""),properties:{}};continue}let l=s.match(r._propertyRegex);l?.length===3&&!Object.keys(n.properties).includes(l[1])&&(n.properties[l[1]]=l[2])}return o(n),t.sections}};function gar(r){let e=[];for(let t of urt.parse(r).filter(n=>n.name==="remote"))t.subSectionName&&e.push({name:t.subSectionName,fetchUrl:t.properties.url,pushUrl:t.properties.pushurl??t.properties.url,isReadOnly:!1});return e}function cW(r,e,t={}){let n={path:r.fsPath,ref:e};t.submoduleOf&&(n.submoduleOf=t.submoduleOf);let o=r.path;return t.replaceFileExtension?o=`${o}.git`:t.submoduleOf&&(o=`${o}.diff`),r.with({scheme:t.scheme??"git",path:o,query:JSON.stringify(n)})}var u0=class extends _e{constructor(t,n){super();this.gitExtensionService=t;this.logService=n;this.activeRepository=Si(this,void 0);this._onDidOpenRepository=new Vt;this.onDidOpenRepository=this._onDidOpenRepository.event;this._onDidCloseRepository=new Vt;this.onDidCloseRepository=this._onDidCloseRepository.event;this._onDidFinishInitialRepositoryDiscovery=new Vt;this.onDidFinishInitialization=this._onDidFinishInitialRepositoryDiscovery.event;this._isInitialized=Si(this,!1);this._register(this._onDidOpenRepository),this._register(this._onDidCloseRepository),this._register(this._onDidFinishInitialRepositoryDiscovery);let o=this.gitExtensionService.getExtensionApi();o?this.registerGitAPIListeners(o):this._register(this.gitExtensionService.onDidChange(s=>{if(s.enabled){let a=this.gitExtensionService.getExtensionApi();if(a){this.registerGitAPIListeners(a);return}}this._onDidFinishInitialRepositoryDiscovery.fire()}))}registerGitAPIListeners(t){this._register(t.onDidOpenRepository(o=>this.doOpenRepository(o))),this._register(t.onDidCloseRepository(o=>this.doCloseRepository(o)));for(let o of t.repositories)this.doOpenRepository(o);let n=fi(this,t.onDidChangeState,()=>t.state);this._register(pi(async o=>{n.read(o)==="initialized"&&(await Promise.all(t.repositories.map(a=>{let l=fi(this,a.state.onDidChange,()=>a.state.HEAD);return v0(l,c=>c!==void 0,void 0,Z_(this._store))})),this._isInitialized.set(!0,void 0),this._onDidFinishInitialRepositoryDiscovery.fire(),this.logService.trace(`[GitServiceImpl] Initial repository discovery finished: ${this.repositories.length} repositories found.`))}))}get isInitialized(){return this._isInitialized.get()}async getRepository(t){let n=this.gitExtensionService.getExtensionApi();if(!n)return;t instanceof HD.Uri||(t=HD.Uri.parse(t.toString()));let o=n.getRepository(t);if(o)return await this.waitForRepositoryState(o),u0.repoToRepoContext(o);if(o=await n.openRepository(t),!!o)return await this.waitForRepositoryState(o),u0.repoToRepoContext(o)}async getRepositoryFetchUrls(t){this.logService.trace(`[GitServiceImpl][getRepositoryFetchUrls] URI: ${t.toString()}`);let n=this.gitExtensionService.getExtensionApi();if(!n)return;let o=n.getRepository(t);if(o){await this.waitForRepositoryState(o);let s={rootUri:o.rootUri,remoteFetchUrls:o.state.remotes.map(a=>a.fetchUrl)};return this.logService.trace(`[GitServiceImpl][getRepositoryFetchUrls] Remotes (open repository): ${JSON.stringify(s)}`),s}try{(await HD.workspace.fs.stat(t)).type!==HD.FileType.Directory&&(t=Fe.file(du(t.fsPath)));let a=await n.getRepositoryRoot(t);if(!a){this.logService.trace("[GitServiceImpl][getRepositoryFetchUrls] No repository root found");return}this.logService.trace(`[GitServiceImpl][getRepositoryFetchUrls] Repository root: ${a.toString()}`);let l=await HD.workspace.fs.readFile(Fe.file(Qn(a.fsPath,".git","config"))),c={rootUri:a,remoteFetchUrls:gar(l.toString()).map(u=>u.fetchUrl)};return this.logService.trace(`[GitServiceImpl][getRepositoryFetchUrls] Remotes (.git/config): ${JSON.stringify(c)}`),c}catch(s){this.logService.error(`[GitServiceImpl][getRepositoryFetchUrls] Failed to read remotes from .git/config: ${s.message}`);return}}async log(t,n){let o=this.gitExtensionService.getExtensionApi();if(!o)return;let s=o.getRepository(t);if(s)return s.log(n)}async diffBetween(t,n,o){return this.gitExtensionService.getExtensionApi()?.getRepository(t)?.diffBetween(n,o)}async diffWith(t,n){return this.gitExtensionService.getExtensionApi()?.getRepository(t)?.diffWith(n)}async fetch(t,n,o,s){return this.gitExtensionService.getExtensionApi()?.getRepository(t)?.fetch(n,o,s)}async getMergeBase(t,n,o){return this.gitExtensionService.getExtensionApi()?.getRepository(t)?.getMergeBase(n,o)}async initialize(){this._isInitialized.get()||await v0(this._isInitialized,t=>t,void 0,Z_(this._store))}async doOpenRepository(t){this.logService.trace(`[GitServiceImpl][doOpenRepository] Repository: ${t.rootUri.toString()}`);let n=fi(this,t.state.onDidChange,()=>t.state.HEAD);await v0(n,l=>l!==void 0,void 0,Z_(this._store)),this.logService.trace(`[GitServiceImpl][doOpenRepository] Repository initialized: ${JSON.stringify(n.get())}`);let o=fi(this,t.ui.onDidChange,()=>t.ui.selected),s=zse(this,t.state.onDidChange);this._register(pi(l=>{s.read(l);let c=o.read(l);if(this.activeRepository.get()&&!c)return;let d=u0.repoToRepoContext(t);this.logService.trace(`[GitServiceImpl][doOpenRepository] Active repository: ${JSON.stringify(d)}`),this.activeRepository.set(d,void 0)}));let a=u0.repoToRepoContext(t);a&&this._onDidOpenRepository.fire(a)}doCloseRepository(t){this.logService.trace(`[GitServiceImpl][doCloseRepository] Repository: ${t.rootUri.toString()}`);let n=u0.repoToRepoContext(t);n&&this._onDidCloseRepository.fire(n)}async waitForRepositoryState(t){if(t.state.HEAD)return;let n=fi(this,t.state.onDidChange,()=>t.state.HEAD);await v0(n,o=>o!==void 0,void 0,Z_(this._store))}static repoToRepoContext(t){if(t)return new drt(t)}get repositories(){let t=this.gitExtensionService.getExtensionApi();return t?Gr(t.repositories.filter(n=>n.state.HEAD!==void 0).map(n=>u0.repoToRepoContext(n))):[]}};u0=T([v(0,Oi),v(1,ue)],u0);var drt=class{constructor(e){this._repo=e;this.rootUri=this._repo.rootUri;this.headBranchName=this._repo.state.HEAD?.name;this.headCommitHash=this._repo.state.HEAD?.commit;this.upstreamBranchName=this._repo.state.HEAD?.upstream?.name;this.upstreamRemote=this._repo.state.HEAD?.upstream?.remote;this.isRebasing=this._repo.state.rebaseCommit!==null;this.remotes=this._repo.state.remotes.map(e=>e.name);this.remoteFetchUrls=this._repo.state.remotes.map(e=>e.fetchUrl);this.changes={mergeChanges:this._repo.state.mergeChanges,indexChanges:this._repo.state.indexChanges,workingTree:this._repo.state.workingTreeChanges,untrackedChanges:this._repo.state.untrackedChanges};this._onDidChangeSignal=zse(this,this._repo.state.onDidChange);this.headBranchNameObs=this._onDidChangeSignal.map(()=>this._repo.state.HEAD?.name);this.headCommitHashObs=this._onDidChangeSignal.map(()=>this._repo.state.HEAD?.commit);this.upstreamBranchNameObs=this._onDidChangeSignal.map(()=>this._repo.state.HEAD?.upstream?.name);this.upstreamRemoteObs=this._onDidChangeSignal.map(()=>this._repo.state.HEAD?.upstream?.remote);this.isRebasingObs=this._onDidChangeSignal.map(()=>this._repo.state.rebaseCommit!==null);this._checkIsIgnored=new CQ(async e=>{let t=await this._repo.checkIgnore(e);return e.map(n=>t.has(n))},1e3);this._isIgnored=new Wp(async e=>{let t=yar.Uri.parse(e).fsPath;return await this._checkIsIgnored.request(t)})}isIgnored(e){return this._isIgnored.get(e.toString())}};var uW=class extends b1{constructor(t,n,o,s,a){super(n,o,s,a);this._authService=t}async getCurrentAuthedUser(){let t=(await this._authService.getAnyGitHubSession())?.accessToken;if(t)return await this.getCurrentAuthedUserWithToken(t)}async getTeamMembership(t){let n=await this._authService.getAnyGitHubSession(),o=n?.accessToken,s=n?.account.label;if(!(!o||!s))return await this.getTeamMembershipWithToken(t,o,s)}};uW=T([v(0,ft),v(1,Or),v(2,rr),v(3,ue),v(4,De)],uW);var ed=z(require("vscode"));var dW=class{constructor(e,t,n){this._ignoreService=e;this._gitExtensionService=t;this._store=new yt;this._entries=new Ua(30);this._store.add(ed.commands.registerCommand("github.copilot.chat.clearTemporalContext",()=>{this._entries.clear(),ed.window.showInformationMessage("Temporal Context Cleared",{modal:!0})}));let o=n.createFileSystemWatcher("**/*");this._store.add(o),this._store.add(o.onDidDelete(c=>{for(let[u]of Array.from(this._entries))fn(u.uri,c)&&this._entries.delete(u)})),this._store.add(ed.workspace.onDidOpenTextDocument(c=>{for(let[u,d]of Array.from(this._entries))u.isClosed&&u.uri.toString()===c.uri.toString()&&(this._entries.delete(u),this._entries.set(c,d))})),this._store.add(ed.workspace.onDidCloseTextDocument(c=>{ed.workspace.fs.isWritableFileSystem(c.uri.scheme)===void 0&&this._entries.delete(c)})),this._store.add(ed.workspace.onDidChangeTextDocument(c=>{if(c.contentChanges.length===0)return;let u=this._entries.get(c.document);if(u)for(let d of c.contentChanges){let p=d.text.length-d.rangeLength;for(let f=0;f<u.length;f++){let m=u[f];m.offset>d.rangeOffset&&(u[f]=m.adjust(p))}}}));let s=["markdown","plaintext",{scheme:"git"},{pattern:"**/settings.json"},{pattern:"**/keybindings.json"},{pattern:"**/.vscode/**"},{pattern:"**/*.prompt.md"}],a=async(c,u)=>{if(ed.languages.match(s,c.document)||ed.workspace.fs.isWritableFileSystem(c.document.uri.scheme)===void 0)return;let d=c.document,p=this._entries.get(d);p||(p=[],this._entries.set(d,p));for(let f of u)p.push(new _j(d.offsetAt(f.start),Date.now())),f.isEmpty||p.push(new _j(d.offsetAt(f.end),Date.now()));p.length>100&&p.splice(0,33)},l=this._store.add(new Ry);this._store.add(ed.window.onDidChangeTextEditorVisibleRanges(c=>{l.value=bot(()=>{ed.window.activeTextEditor&&a(ed.window.activeTextEditor,ed.window.activeTextEditor.visibleRanges)},3e3)})),this._store.add(ed.window.onDidChangeTextEditorSelection(c=>{a(c.textEditor,c.selections)})),this._store.add(ed.window.onDidChangeActiveTextEditor(c=>{c&&a(c,c.selections)}))}dispose(){this._store.dispose(),this._entries.clear()}async getEntries(){let e=new Map;for(let[n,o]of this._entries.entries())await this._ignoreService.isCopilotIgnored(n.uri)||e.set(n,o);let t=this._gitExtensionService.getExtensionApi();if(t){let n=new Qr;for(let[o]of e){if(o.uri.scheme!==Et.file)continue;let s=t.getRepository(o.uri);if(!s)continue;let a=n.get(s.rootUri);a||(a={repo:s,docs:[]},n.set(s.rootUri,a)),a.docs.push(o)}for(let{repo:o,docs:s}of n.values()){let a=await o.checkIgnore(s.map(l=>l.uri.fsPath));for(let l of s)a.has(l.uri.path)&&e.delete(l)}}return e}};dW=T([v(0,At),v(1,Oi),v(2,cr)],dW);var Aar=require("vscode"),Pwe=class{transferActiveChat(e){Aar.interactive.transferActiveChat(e)}};var kwe=z(require("vscode"));var Dwe=class r extends pAe{constructor(){super(...arguments);this.onDidChangeDiagnostics=kwe.languages.onDidChangeDiagnostics}static{this.ignoredSchemes=new Set(["git","chat-editing-snapshot-text-model","chat-editing-text-model"])}getDiagnostics(t){return kwe.languages.getDiagnostics(t)}getAllDiagnostics(){return kwe.languages.getDiagnostics().filter(([t])=>!r.ignoredSchemes.has(t.scheme))}};var GD=z(require("vscode")),Nwe=class{constructor(){}async getDefinitions(e,t){return await GD.commands.executeCommand("vscode.executeDefinitionProvider",e,t)}async getImplementations(e,t){return await GD.commands.executeCommand("vscode.executeImplementationProvider",e,t)}async getReferences(e,t){return await GD.commands.executeCommand("vscode.executeReferenceProvider",e,t)}async getWorkspaceSymbols(e){return await GD.commands.executeCommand("vscode.executeWorkspaceSymbolProvider",e)}async getDocumentSymbols(e){return await GD.commands.executeCommand("vscode.executeDocumentSymbolProvider",e)}getDiagnostics(e){return GD.languages.getDiagnostics(e)}};var qp=require("vscode");var bar=require("vscode");var Lwe=class{constructor(){this._onDidChangeNotebookCellExecutionStateEmitter=new Vt;this.onDidChangeNotebookCellExecutionState=this._onDidChangeNotebookCellExecutionStateEmitter.event;this._disposables=[];this._cellExecution=new WeakMap;this._disposables.push(bar.workspace.onDidChangeNotebookDocument(e=>{for(let t of e.cellChanges)t.executionSummary&&(t.executionSummary.success===void 0?this._cellExecution.has(t.cell)||(this._cellExecution.set(t.cell,!0),this._onDidChangeNotebookCellExecutionStateEmitter.fire({cell:t.cell,state:2})):(this._cellExecution.delete(t.cell),this._onDidChangeNotebookCellExecutionStateEmitter.fire({cell:t.cell,state:1})))}))}dispose(){this._disposables.forEach(e=>e.dispose())}};var OPn="github.copilot.notebookAgentModeUsage",pW=class{constructor(e,t,n){this._configurationService=e;this._experimentationService=t;this._workspaceService=n;this._cellExecution=new Map;this._cellSymbols=new WeakMap;this._executionService=new Lwe;this._disposables=[];this._isVariableFilteringEnabled=!1;this._notebookEditorContribInitFlag=!1;this._notebookEditorContributions=[];this.followExecutionState=!1;this._isVariableFilteringEnabled=this._experimentationService.getTreatmentVariable("copilotchat.notebookVariableFiltering")||this._configurationService.getConfig(ae.Internal.NotebookVariableFilteringEnabled),this._registerExecutionListener()}get isVariableFilteringEnabled(){return this._isVariableFilteringEnabled}_hasJupyterExtension(){return qp.extensions.getExtension("ms-toolsai.jupyter")?.isActive}trackAgentUsage(){qp.commands.executeCommand("setContext",OPn,!0)}setFollowState(e){this.followExecutionState=e}getFollowState(){return this.followExecutionState}async getVariables(e){if(!this._hasJupyterExtension())try{let t=await qp.commands.executeCommand("vscode.executeNotebookVariableProvider",e);if(t&&Array.isArray(t)){let n=t.map(this._convertResult);return this._filterVariables(e,n)}return[]}catch{return[]}try{let t=await qp.commands.executeCommand("jupyter.listVariables",e);if(t&&Array.isArray(t)){let n=t.map(this._convertResult);return this._filterVariables(e,n)}return[]}catch{return[]}}_convertResult(e){return"variable"in e?e:{variable:e,hasNamedChildren:!1,indexedChildrenCount:0}}_filterVariables(e,t){if(!this.isVariableFilteringEnabled)return t;let n=new Set;return Eo(e,qp.workspace.notebookDocuments)?.getCells().forEach(o=>{let s=this._cellSymbols.get(o);s&&s.forEach(a=>n.add(a.name))}),t.filter(o=>n.has(o.variable.name))}async getPipPackages(e){if(!this._hasJupyterExtension())return[];try{return await qp.commands.executeCommand("jupyter.listPipPackages",e)}catch{return[]}}setVariables(e,t){}populateNotebookEditorContributions(){let e=[],t=qp.extensions.all;for(let n of t){let o=n.packageJSON.contributes?.notebooks;Array.isArray(o)&&e.push(...o)}for(let n of e)ylt(n)&&this._notebookEditorContributions.push(n)}hasSupportedNotebooks(e){this._notebookEditorContribInitFlag||(this.populateNotebookEditorContributions(),this._notebookEditorContribInitFlag=!0);let t=this._configurationService.getNonExtensionConfig("workbench.editorAssociations"),n=Alt(t??{});return blt(e,this._workspaceService.notebookDocuments,this._notebookEditorContributions,n)}_registerExecutionListener(){this._disposables.push(this._executionService.onDidChangeNotebookCellExecutionState(e=>{let t=e.cell,o=t.notebook.uri.toString(),s=this._cellExecution.get(o);s||(s=[],this._cellExecution.set(o,s));let a=s.findIndex(l=>l.cell===t);a!==-1&&s.splice(a,1),s.push({cell:t,executionCount:t.executionSummary?.executionOrder})})),this._disposables.push(qp.workspace.onDidChangeNotebookDocument(e=>{if(this.isVariableFilteringEnabled){for(let t of e.cellChanges)t.executionSummary&&t.executionSummary.success&&qp.commands.executeCommand("vscode.executeDocumentSymbolProvider",t.cell.document.uri).then(o=>{this._cellSymbols.set(t.cell,o||[])}),t.document&&this._cellSymbols.delete(t.cell);for(let t of e.contentChanges)t.removedCells.forEach(n=>{this._cellSymbols.delete(n)})}}))}getCellExecutions(e){return this._cellExecution.get(e.toString())?.map(t=>t.cell)||[]}async runCells(e,t,n){await qp.commands.executeCommand("notebook.cell.execute",{ranges:[t],document:e,autoReveal:n})}async ensureKernelSelected(e){qp.window.visibleNotebookEditors.find(t=>t.notebook.uri.toString()===e.toString())&&await qp.commands.executeCommand("notebook.selectKernel",{notebookUri:e,skipIfAlreadySelected:!0})}dispose(){this._disposables.forEach(e=>e.dispose())}};pW=T([v(0,Pe),v(1,nt),v(2,Oe)],pW);var fW=class extends yt{constructor(t,n){super();this.workspaceService=t;this.trackedNotebooks=new WeakSet;this.notebooksWithChanges=new WeakSet;n.subscriptions.push(this),this.add(this.workspaceService.onDidChangeNotebookDocument(o=>{this.trackedNotebooks.has(o.notebook)&&(o.contentChanges.length&&this.notebooksWithChanges.add(o.notebook),o.cellChanges.some(s=>s.executionSummary)&&this.notebooksWithChanges.add(o.notebook))}))}trackNotebook(t){this.trackedNotebooks.add(t)}clearState(t){this.notebooksWithChanges.delete(t)}listNotebooksWithChanges(){return this.workspaceService.notebookDocuments.filter(t=>this.notebooksWithChanges.has(t))}};fW=T([v(0,Oe),v(1,ar)],fW);var CF=require("vscode"),Mwe=class{async showInformationMessage(e,t,...n){return typeof t=="object"&&t!==null&&!Array.isArray(t)?CF.window.showInformationMessage(e,t,...n):CF.window.showInformationMessage(e,t,...n)}async withProgress(e,t){return CF.window.withProgress(e,t)}async showWarningMessage(e,...t){return CF.window.showWarningMessage(e,...t)}async showQuotaExceededDialog(e){return CF.commands.executeCommand(e.isNoAuthUser?"workbench.action.chat.triggerSetup":"workbench.action.chat.openQuotaExceededDialog")}};var Ear=Me("IUrlOpener"),Owe=class{constructor(){this.openedUrls=[]}open(e){this.openedUrls.push(e)}};var Fwe=z(require("vscode")),Bwe=class{async open(e){await Fwe.commands.executeCommand("vscode.open",Fwe.Uri.parse(e))}};var Uwe=Me("releaseNotesService");var WD=class{constructor(e,t){this.envService=e;this.fetcherService=t}static{this.BASE_URL="https://code.visualstudio.com/raw"}async fetchLatestReleaseNotes(){let e=this.getUrl();return e?await(await this.fetcherService.fetch(e,{method:"GET"})).text():void 0}async fetchReleaseNotesForVersion(e){let t=this.getUrl(e);return t?await(await this.fetcherService.fetch(t,{method:"GET"})).text():void 0}getUrl(e){let t=e&&e.trim().length>0?e.trim():this.envService.getEditorInfo().version,n,o;if(/^\d+\.\d+(?:\.\d+)?$/.test(t)){let s=Pg(t),a=/^(\d+)\.(\d+)$/.exec(s);if(!a)return;n=a[1],o=a[2]}else return;return`${WD.BASE_URL}/v${n}_${o}.md`}};WD=T([v(0,Mt),v(1,rr)],WD);var Qwe=require("vscode");var Vwe=Me("IRemoteRepositoriesService"),qwe=class{async loadWorkspaceContents(e){return await(await this.getApi()).loadWorkspaceContents?.(e)??!1}getApi(){return this.getRemoteExtension().activate()}getRemoteExtension(){if(this._remoteHub!==void 0)return this._remoteHub;if(this._remoteHub=Qwe.extensions.getExtension("ms-vscode.remote-repositories")??Qwe.extensions.getExtension("GitHub.remoteHub")??Qwe.extensions.getExtension("GitHub.remoteHub-insiders"),this._remoteHub===void 0)throw new Error("No Remote repository extension found.");return this._remoteHub}};var Ta=z(require("vscode")),mW=require("vscode");var Sar="github.copilot.chat.reviewDiff.enabled",BPn="github.copilot.chat.reviewDiff.enabledRootUris",prt="github.copilot.chat.review.numberOfComments",hW=class{constructor(e,t,n,o){this._configurationService=e;this._authenticationService=t;this._contextService=n;this._gitExtensionService=o;this._disposables=new yt;this._repositoryDisposables=new yt;this._commentController=Ta.comments.createCommentController("github-copilot-review","Code Review");this._comments=[];this._disposables.add(Ta.workspace.onDidChangeConfiguration(s=>{s.affectsConfiguration(ae.CodeFeedback.fullyQualifiedId)&&Ta.commands.executeCommand("setContext",ae.CodeFeedback.fullyQualifiedId,this.isCodeFeedbackEnabled()),(s.affectsConfiguration("github.copilot.advanced")||s.affectsConfiguration("github.copilot.advanced.review.intent"))&&Ta.commands.executeCommand("setContext",ae.Internal.ReviewIntent.fullyQualifiedId,this.isIntentEnabled())})),this._disposables.add(this._authenticationService.onDidAuthenticationChange(()=>{Ta.commands.executeCommand("setContext",Sar,this.isReviewDiffEnabled())})),this._disposables.add(this._repositoryDisposables),this._disposables.add(this._gitExtensionService.onDidChange(()=>{this.updateRepositoryListeners()})),this.updateRepositoryListeners(),this.updateContextValues(),Ta.commands.executeCommand("setContext",prt,0)}updateRepositoryListeners(){this._repositoryDisposables.clear();let e=this._gitExtensionService.getExtensionApi();e&&(this._repositoryDisposables.add(e.onDidOpenRepository(()=>{this.updateRepositoryListeners()})),this._repositoryDisposables.add(e.onDidCloseRepository(()=>{this.updateRepositoryListeners()})),e.repositories.forEach(t=>{this._repositoryDisposables.add(t.state.onDidChange(()=>{this.updateReviewDiffReposContext()}))})),this.updateReviewDiffReposContext()}updateReviewDiffReposContext(){let e=this.getRepositoriesWithUncommitedChanges(),t=e.map(n=>n.toString()).sort().join(",");t!==this._reviewDiffReposString&&(this._reviewDiffReposString=t,Ta.commands.executeCommand("setContext",BPn,e))}getRepositoriesWithUncommitedChanges(){return this._gitExtensionService.getExtensionApi()?.repositories.filter(({state:t})=>t.workingTreeChanges.length||t.indexChanges.length||t.untrackedChanges.length||t.mergeChanges.length).map(t=>t.rootUri)||[]}updateContextValues(){Ta.commands.executeCommand("setContext",ae.CodeFeedback.fullyQualifiedId,this.isCodeFeedbackEnabled()),Ta.commands.executeCommand("setContext",Sar,this.isReviewDiffEnabled()),Ta.commands.executeCommand("setContext",ae.Internal.ReviewIntent.fullyQualifiedId,this.isIntentEnabled())}isCodeFeedbackEnabled(){let e=this._configurationService.inspectConfig(ae.CodeFeedback);return e?.workspaceFolderValue??e?.workspaceValue??e?.globalValue??this._configurationService.getDefaultValue(ae.CodeFeedback)}isReviewDiffEnabled(){return this._configurationService.getConfig(ae.ReviewAgent)&&this._authenticationService.copilotToken?.isCopilotCodeReviewEnabled||!1}isIntentEnabled(){return this._configurationService.getConfig(ae.Internal.ReviewIntent)}getDiagnosticCollection(){return this._diagnosticCollection||this._disposables.add(this._diagnosticCollection=Ta.languages.createDiagnosticCollection("github.copilot.chat.review"))}getReviewComments(){return this._comments.map(({comment:e})=>e)}addReviewComments(e){for(let t of e){let n=this._commentController.createCommentThread(t.uri,t.range,this.createUIComments(t));n.contextValue="hasNoSuggestion",n.canReply=!1,this._comments.find(o=>o.comment.uri.toString()===t.uri.toString())||(n.collapsibleState=Ta.CommentThreadCollapsibleState.Expanded),this._comments.push({comment:t,thread:n}),this.updateThreadLabels(),this._comments.length===1&&(Ta.commands.executeCommand("github.copilot.chat.review.next"),this._monitorActiveThread=setInterval(()=>{let o=this._commentController.activeCommentThread,s=o&&this._comments.find(a=>a.thread.label===o.label)?.thread;s!==this._activeThread&&(this._activeThread=s,s&&Ta.commands.executeCommand("github.copilot.chat.review.current",s))},500))}Ta.commands.executeCommand("setContext",prt,this._comments.length)}updateReviewComment(e){let t=this.findCommentThread(e);t&&(t.comments=this.createUIComments(e))}createUIComments(e){let t="",n=e.suggestion?"edits"in e.suggestion?e.suggestion.edits.length?`
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/dist/extension.js:3016:`)}`}var wie=new RegExp("[_\\p{L}\\p{Nd}]+|====+|----+|####+|////+|\\*\\*\\*\\*+|[\\p{P}\\p{S}]","gu"),Hwe=65;function UPn(r){let e=0,t;wie.lastIndex=0;do if(t=wie.exec(r),t&&(e+=1),e>=Hwe)break;while(t);return e}function QPn(r,e){let t=0,n;wie.lastIndex=0;do if(n=wie.exec(r),n&&(t+=1,t>=e))return wie.lastIndex;while(n);return r.length}function _ar(r,e){let t=r.split("").reverse().join(""),n=QPn(t,e);return t.length-n}function frt(r){return UPn(r)>=Hwe}var Car;(e=>{function r(t){return typeof t=="object"&&t!==null&&typeof t.matched_source=="string"&&typeof t.occurrences=="string"&&typeof t.capped=="boolean"&&typeof t.cursor=="string"&&typeof t.github_url=="string"}e.is=r})(Car||={});var mrt;(e=>{function r(t){return typeof t=="object"&&t!==null&&typeof t.kind=="string"&&typeof t.reason=="string"&&typeof t.code=="number"&&typeof t.msg=="string"}e.is=r})(mrt||={});var Tar;(e=>{function r(t){return typeof t=="object"&&t!==null&&"snippets"in t&&Array.isArray(t.snippets)&&t.snippets.every(Car.is)}e.is=r})(Tar||={});var hrt;(e=>{function r(t){if(mrt.is(t))return pt.error(t);if(Tar.is(t))return pt.ok(t)}e.to=r})(hrt||={});var Iar;(e=>{function r(t){return typeof t=="object"&&t!==null&&typeof t.commit_id=="string"&&typeof t.license=="string"&&typeof t.nwo=="string"&&typeof t.path=="string"&&typeof t.url=="string"}e.is=r})(Iar||={});var xar;(e=>{function r(t){return typeof t=="object"&&t!==null&&typeof t.has_next_page=="boolean"&&typeof t.cursor=="string"}e.is=r})(xar||={});var Rar;(e=>{function r(t){return typeof t=="object"&&t!==null&&typeof t.count=="object"&&Object.values(t.count).every(n=>typeof n=="string")}e.is=r})(Rar||={});var war;(e=>{function r(t){return typeof t=="object"&&t!==null&&"file_matches"in t&&Array.isArray(t.file_matches)&&t.file_matches.every(Iar.is)&&"page_info"in t&&xar.is(t.page_info)&&"license_stats"in t&&Rar.is(t.license_stats)}e.is=r})(war||={});var grt;(e=>{function r(t){if(mrt.is(t))return pt.error(t);if(war.is(t))return pt.ok(t)}e.to=r})(grt||={});var gW=class{constructor(e,t,n){this.fetcherService=e;this.capiClientService=t;this.authService=n}async fetchMatch(e,t){let n={source:e};return this.fetch({type:Zr.SnippyMatch},n,hrt.to,t)}async fetchFilesForMatch(e,t){let n={cursor:e};return this.fetch({type:Zr.SnippyFilesForMatch},n,grt.to,t)}async fetch(e,t,n,o){let s=this.fetcherService.makeAbortController(),a=o.onCancellationRequested(()=>{s.abort()}),l=s.signal,u={method:"POST",headers:await this.getHeaders(),json:t,signal:l},d;try{d=await this.capiClientService.makeRequest(u,e)}catch(f){throw this.fetcherService.isAbortError(f)?new Hr:f}finally{a.dispose()}if(d.status!==200)throw new Error(`Failed with status ${d.status} and body: ${await d.text()}`);let p=await d.json();return n(p)}async getHeaders(){return{authorization:`Bearer ${(await this.authService.getCopilotToken()).token}`}}};gW=T([v(0,rr),v(1,Or),v(2,ft)],gW);var Nh=class{constructor(e,t,n,o){this.notificationService=e;this.context=t;this.logService=n;this.envService=o}static{this.matchCodeMessage="We found a reference to public code in a recent suggestion. To learn more about public code references, review the [documentation](https://aka.ms/github-copilot-match-public-code)."}static{this.MatchAction="View Reference"}static{this.SettingAction="Change Setting"}static{this.CodeReferenceKey="copilot.chat.codeReference.notified"}notify(){if(this.context.globalState.get(Nh.CodeReferenceKey))return;let t=[Nh.MatchAction,Nh.SettingAction];this.notificationService.showInformationMessage(Nh.matchCodeMessage,...t).then(n=>{switch(n){case Nh.MatchAction:{this.logService.show(!0);break}case Nh.SettingAction:{this.envService.openExternal(Fe.parse("https://aka.ms/github-copilot-settings"));break}case void 0:break}}),this.context.globalState.update(Nh.CodeReferenceKey,!0)}};Nh=T([v(0,Km),v(1,ar),v(2,ue),v(3,Mt)],Nh);var vW=class{constructor(e,t){this.instantiationService=e;this.logService=t;this.notifier=this.instantiationService.createInstance(Nh),this.fetcher=this.instantiationService.createInstance(gW)}async handlePostInsertion(e,t,n){let o=this.computeSourceToCheck(t,n);if(!o)return;let s;try{s=await this.fetcher.fetchMatch(o.source,dr.None)}catch(d){throw d}if(!s)throw new Error(`Failed to parse match response: ${s}`);if(s.isError())throw new Error(`Failed to match: ${s.err}`);if(s.val.snippets.length===0)return;let{snippets:a}=s.val,l=a.map(async d=>{let p=await this.fetcher.fetchFilesForMatch(d.cursor,dr.None);if(!p||p.isError())return;let{file_matches:f,license_stats:m}=p.val;return{match:d,files:f,licenseStats:m}});this.notifier.notify();let u=(await Promise.all(l)).filter(d=>!!d);if(u.length!==0)for(let d of u){let p=new Set(Object.keys(d.licenseStats?.count??{}));p.delete("NOASSERTION")&&p.add("unknown");let f=Array.from(p).sort(),m=`[Ln ${o.startPosition.lineNumber}, Col ${o.startPosition.column}]`,h=`${d.match.matched_source.slice(0,100).replace(/[\r\n\t]+|^[ \t]+/gm," ").trim()}...`;this.logService.info(["[CODE REFERENCING]",e,`Similar code with ${HPn(f.length,"license type")}`,`[${f.join(", ")}]`,`${d.match.github_url.replace(/,\s*$/,"")}&editor=vscode`,m,h].join(" "))}}computeSourceToCheck(e,t){if(t.newText==="")return;let n=Jt.single(t),s=n.getNewRanges().reduce((p,f)=>p.join(f)),a=n.applyOnText(e),l=s.start,c=a.value.substring(s.start,s.endExclusive);if(!frt(c)){let p=a.value.slice(0,s.start),f=_ar(p,Hwe);l=f,c=a.value.slice(f,s.start+t.newText.length)}if(!frt(c))return;let d=a.getTransformer().getPosition(l);return{source:c,startPosition:d}}};vW=T([v(0,K),v(1,ue)],vW);var HPn=(r,e,t="s")=>`${r} ${e}${r!==1?t:""}`;var Gwe=z(require("vscode")),Pie=require("vscode");var GPn="https://aka.ms/vscode-gh-copilot",Par="survey.usage",kar="survey.nextSurveyDate",vrt=14*24*60*60*1e3,WPn=7,jPn=90,$Pn=3*60*1e3,YPn=5*60*1e3,zPn=2,KPn=2,JPn=20,XPn=1,yW=class{constructor(e,t,n,o,s){this.telemetryService=e;this.vscodeExtensionContext=t;this.envService=n;this.experimentationService=o;this.authenticationService=s;this.debounceTimeout=null;this.lastSource=null;this.lastLanguageId=null;this.surveyUri=bn.parse(GPn),this.sessionSeed=Math.random(),setTimeout(async()=>{await this.updateUsageData(!1),await this.checkInactiveUserHeuristic()&&this.promptSurvey("churn")},YPn)}async signalUsage(e,t){await this.updateUsageData(!0),this.lastSource=e,t&&(this.lastLanguageId=t),this.debounceTimeout||(this.debounceTimeout=setTimeout(async()=>{await this.checkEligibility()&&this.promptSurvey("usage"),this.debounceTimeout=null},$Pn))}async checkInactiveUserHeuristic(){let e=await this.getUsageData(),t=await this.getNextSurveyDate(),n=Date.now(),o=e.activeDays.length,s=e.firstActive>0&&e.firstActive<n-vrt,a=!t||t<n;if(o===0&&s&&a){let u=this.experimentationService.getTreatmentVariable("copilotchat.feedback.sessionProbability.inactive")??XPn;return this.sessionSeed<u/100}return!1}async checkEligibility(){let e=await this.getUsageData(),t=await this.getNextSurveyDate(),n=Date.now(),o=e.activeDays.length,s=e.firstActive<n-vrt,a=!t||t<n;if(o>=zPn&&s&&a){let u=this.experimentationService.getTreatmentVariable("copilotchat.feedback.sessionProbability")??KPn;if(this.sessionSeed<u/100){let d=this.experimentationService.getTreatmentVariable("copilotchat.feedback.notificationProbability")??JPn;return Math.random()<d/100}}return!1}async getUsageData(){let e=this.vscodeExtensionContext.globalState.get(Par);return e||{firstActive:0,activeDays:[]}}async getNextSurveyDate(){return this.vscodeExtensionContext.globalState.get(kar)??null}async updateUsageData(e){let t=await this.getUsageData(),n=Date.now();if(e){t.firstActive||(t.firstActive=n);let o=new Date().setHours(0,0,0,0);t.activeDays.includes(o)||t.activeDays.push(o)}t.activeDays=t.activeDays.filter(o=>o>=n-vrt),await this.vscodeExtensionContext.globalState.update(Par,t)}async updateNextSurveyDate(e){await this.vscodeExtensionContext.globalState.update(kar,Date.now()+e*24*60*60*1e3)}async promptSurvey(e){let t=await this.getUsageData(),n=this.lastSource||"",o=this.lastLanguageId||"",s=Math.floor((Date.now()-t.firstActive)/(1e3*60*60*24));this.telemetryService.sendMSFTTelemetryEvent("survey.show",{source:n,language:o,surveyType:e},{activeDays:t.activeDays.length,firstActive:s}),await this.updateNextSurveyDate(jPn);let a=Pie.l10n.t("Give Feedback"),l=Pie.l10n.t("Later"),c=Pie.l10n.t("Skip");Gwe.window.showInformationMessage(Pie.l10n.t("Got a minute? Help us make GitHub Copilot better."),a,l,c).then(async u=>{let d=u===a,p=u===l;if(this.telemetryService.sendMSFTTelemetryEvent("survey.action",{source:n,language:o,selection:d?"accepted":p?"postponed":"skipped",surveyType:e}),d){let f=await this.authenticationService.getCopilotToken(),m={m:this.envService.machineId,s:this.envService.sessionId,k:f.sku??"",d:t.activeDays.length.toString(),f:s.toString(),v:this.envService.getVersion(),l:o,src:n,type:e},h=this.surveyUri.with({query:new URLSearchParams(m).toString()});Gwe.env.openExternal(h)}else p&&await this.updateNextSurveyDate(WPn)})}};yW=T([v(0,De),v(1,ar),v(2,Mt),v(3,nt),v(4,ft)],yW);var cu=z(require("vscode"));var Wwe=class{constructor(){this._store=new yt;this._tabGroupsUseInfo=new Map;this._tabClock=0;this.onDidChangeActiveTextEditor=cu.window.onDidChangeActiveTextEditor;this._onDidChangeTabs=this._store.add(new Vt);this.onDidChangeTabs=this._onDidChangeTabs.event;let e=()=>this._tabGroupsUseInfo.set(cu.window.tabGroups.activeTabGroup,this._tabClock++);e(),this._store.add(cu.window.tabGroups.onDidChangeTabGroups(t=>{t.closed.forEach(n=>this._tabGroupsUseInfo.delete(n)),e()})),this._store.add(cu.window.tabGroups.onDidChangeTabs(t=>{this._onDidChangeTabs.fire({changed:t.changed.map(n=>this._asTabInfo(n)),closed:t.closed.map(n=>this._asTabInfo(n)),opened:t.opened.map(n=>this._asTabInfo(n))})}))}dispose(){this._store.dispose()}get activeTextEditor(){let e=cu.window.activeTextEditor;if(e&&e.document.uri.scheme!=="output")return e;let t=new Qr;cu.window.visibleTextEditors.forEach(o=>t.set(o.document.uri,o));let n=[...this._tabGroupsUseInfo];n.sort((o,s)=>s[1]-o[1]);for(let[o]of n)if(o.activeTab){let s=this._asTabInfo(o.activeTab);if(s.uri&&t.has(s.uri))return t.get(s.uri)}}get visibleTextEditors(){return cu.window.visibleTextEditors}get activeNotebookEditor(){return cu.window.activeNotebookEditor}get visibleNotebookEditors(){return cu.window.visibleNotebookEditors}get tabs(){return cu.window.tabGroups.all.flatMap(e=>e.tabs).map(this._asTabInfo,this)}_asTabInfo(e){let t;return e.input instanceof cu.TabInputText||e.input instanceof cu.TabInputNotebook?t=e.input.uri:(e.input instanceof cu.TabInputTextDiff||e.input instanceof cu.TabInputNotebookDiff)&&(t=e.input.modified),{tab:e,uri:t}}};var sc=z(require("vscode"));var AW=class extends yt{constructor(t,n,o,s){super();this.workspaceService=t;this.fileSystemService=n;this.languageDiagnosticsService=o;this.logService=s;this.latestTerminalForTaskDefinition=new Map;this.add(sc.tasks.onDidStartTask(a=>{let l=a.execution.terminal;if(!l)return;this.latestTerminalForTaskDefinition.set(a.execution.task.definition,l);let c=sc.window.onDidCloseTerminal(d=>{d===l&&this.latestTerminalForTaskDefinition.has(a.execution.task.definition)&&(this.latestTerminalForTaskDefinition.delete(a.execution.task.definition),c.dispose())});this.add(c);let u=sc.tasks.onDidEndTask(d=>{d.execution.task.definition===a.execution.task.definition&&(c.dispose(),u.dispose())});this.add(u)}))}getTasksFromConfig(t){return sc.workspace.getConfiguration("tasks",t).get("tasks")||[]}matchesTask(t,n){return t.type===n.type&&t.label===n.label}hasTask(t,n){return this.getTasksFromConfig(t).some(s=>this.matchesTask(s,n))}getTerminalForTask(t){for(let[n,o]of this.latestTerminalForTaskDefinition.entries()){if(n.id&&this._getTaskId(t)===n.id||t.type===n.type&&(n.label||n.script||n.command)&&(!n.label||t.label===n.label)&&(!n.script||t.script===n.script)&&(!n.command||t.command===n.command))return o;this.logService.debug(`getTerminalForTask: no terminal found for task definition: ${JSON.stringify(t)} matching ${JSON.stringify(n)}`),this.logService.debug(`getTerminalForTask: current stored terminals: ${[...this.latestTerminalForTaskDefinition.values()].map(s=>s.name).join(", ")}`)}}_getTaskId(t){if(!(!t.type||t.command===void 0&&t.script===void 0))return t.type+","+(t.command??t.script)+","}async getTaskConfigPosition(t,n){let o=this.getTasksFromConfig(t).findIndex(d=>this.matchesTask(d,n));if(o===-1)return;let s=Fe.joinPath(t,".vscode","tasks.json"),a;try{let d=await this.fileSystemService.readFile(s);a=new TextDecoder().decode(d)}catch{return}let l=Mlt(a);if(!l)return;let c=Olt(l,["tasks",o]);if(!c)return;let u=new If(a);return{uri:s,range:jt.fromPositions(u.offsetToPosition(c.offset),u.offsetToPosition(c.offset+c.length))}}async ensureTask(t,n,o){let s=this.getTasksFromConfig(t);if(s.some(l=>this.matchesTask(l,n)))return;await sc.workspace.getConfiguration("tasks",t).update("tasks",o?[n]:[...s,n],sc.ConfigurationTarget.WorkspaceFolder)}isTaskActive(t){let n=sc.tasks.taskExecutions;for(let o of n)if(o.task.definition.type===t.type&&o.task.name===t.label)return!0;return!1}getTasks(t){return t?this.getTasksFromConfig(t):this.workspaceService.getWorkspaceFolders().map(n=>[n,this.getTasksFromConfig(n)]).filter(([,n])=>n.length>0)}async getBestMatchingContributedTask(t){let n=await sc.tasks.fetchTasks({type:t?.type}),o,s=-1;return n.forEach(a=>{let l=0;for(let[c,u]of Object.entries(a.definition)){if(!AR(t[c],u))return;l++}l>s&&(o=a,s=l)}),o}async executeTask(t,n,o){let s=new yt;try{let a=await this.getBestMatchingContributedTask(t);if(n.isCancellationRequested)throw new Hr;return await new Promise(l=>{let c;s.add(sc.tasks.onDidEndTaskProcess(f=>{f.execution.task===a&&(c=f.exitCode)})),s.add(sc.tasks.onDidEndTask(f=>{f.execution.task===a&&l(c!==void 0&&c!==0?{status:"error",error:new Error(`Task exited with code ${c}`)}:{status:"finished"})}));let u=!1,d;function p(){l({status:"error",error:new Hr}),!u&&d&&d.terminate()}if(t.isBackground||s.add(n.onCancellationRequested(p)),a){let f=sc.tasks.taskExecutions.find(m=>AR(m.task.definition,a.definition));u=!!f,Promise.resolve(f||sc.tasks.executeTask(a)).then(m=>{if(d=m,n.isCancellationRequested)p();else if(a.isBackground){let h=!1;s.add(sc.tasks.onDidEndTaskProblemMatchers(async g=>{if(h=!0,g.execution.task===a)if(g.hasErrors){let y=[];o&&(y=this.languageDiagnosticsService.getAllDiagnostics().map(A=>A[0]+" "+A[1].map(b=>b.message).join(", "))),l({status:"error",error:new Error("Task exited with errors in the following files: "+y.join(", "))})}else l({status:"finished"})})),setTimeout(()=>{h||l({status:"started"})},a?.isBackground&&a.problemMatchers.length?1e4:0)}else l({status:"started"})},m=>l({status:"error",error:m}))}else sc.commands.executeCommand("workbench.action.tasks.runTask",t.label||t),s.add(sc.tasks.onDidStartTask(f=>{a=f.execution.task,l({status:"started"})})),s.add(sc.tasks.onDidEndTask(f=>{f.execution.task.name===t.label&&l(c!==void 0&&c!==0?{status:"error",error:new Error(`Task exited with code ${c}`)}:{status:"finished"})}))})}finally{s.dispose()}}};AW=T([v(0,Oe),v(1,cr),v(2,Cs),v(3,ue)],AW);var TF=require("vscode");var Eb=require("vscode");var kie=new Map,jwe=new Map;function Nar(){let r=Eb.window.activeTerminal;return r===void 0?"":kie.get(r)?.join("")||""}function Lar(r,e=16e3){if(!r)return"";let t=kie.get(r);if(!t)return"";let n=t.join(""),o=Math.max(0,n.length-e);return n.slice(o)}function Mar(r){return jwe.get(r)?.at(-1)}function Oar(){let r=Eb.window.activeTerminal;if(r!==void 0)return jwe.get(r)?.at(-1)}function Bar(){try{return Eb.window.activeTerminal?.selection??""}catch{return""}}var Die;function Far(){let r=Eb.window.activeTerminal;if(r?.state.shell)return r.state.shell;if(r&&"shellPath"in r.creationOptions){let e=r.creationOptions.shellPath;if(e){let t,n=Nr(e);if(n==="bash.exe")t="Git Bash";else{let o=n.replace(/\..+/,"");switch(o){case"pwsh":case"powershell":t="powershell";break;case"":break;default:t=o}}if(t)return Die=t,t}}return Die||(dse==="win32"?"powershell":"bash")}function Dar(r,e){r.push(e),r.length>40&&r.shift()}function Uar(){return[Eb.window.onDidChangeTerminalState(r=>{if(Eb.window.activeTerminal&&r.processId===Eb.window.activeTerminal.processId){let e=r.state.shell;e&&e!==Die&&(Die=e)}}),Eb.window.onDidWriteTerminalData(r=>{let e=kie.get(r.terminal);e||(e=[],kie.set(r.terminal,e)),Dar(e,wse(r.data))}),Eb.window.onDidExecuteTerminalCommand(r=>{let e=jwe.get(r.terminal);e||(e=[],jwe.set(r.terminal,e)),Dar(e,r)}),Eb.window.onDidCloseTerminal(r=>{kie.delete(r)})]}var $we=class extends _e{constructor(){super();for(let e of Uar())this._register(e)}get terminals(){return TF.window.terminals}get onDidChangeTerminalShellIntegration(){return TF.window.onDidChangeTerminalShellIntegration}get onDidEndTerminalShellExecution(){return TF.window.onDidEndTerminalShellExecution}get onDidCloseTerminal(){return TF.window.onDidCloseTerminal}get onDidWriteTerminalData(){return TF.window.onDidWriteTerminalData}createTerminal(e,t,n){return TF.window.createTerminal(e,t,n)}getBufferForTerminal(e,t){return Lar(e,t)}async getBufferWithPid(e,t){let n;for(let o of this.terminals)if(await o.processId===e){n=o;break}return n?this.getBufferForTerminal(n,t):""}getLastCommandForTerminal(e){return Mar(e)}get terminalBuffer(){return Nar()}get terminalLastCommand(){return Oar()}get terminalSelection(){return Bar()}get terminalShellType(){return Far()}};var Uc=z(require("vscode"));var Ywe=class extends _e{constructor(){super();this.resultsDocs=new Qr;this._register(Uc.tests.onDidChangeTestResults(()=>this.setHasFailureContextKey())),this.setHasFailureContextKey()}setHasFailureContextKey(){Uc.commands.executeCommand("setContext","github.copilot.chat.fixTestFailures.hasFailure",!!ko.first(this.getAllFailures()))}get onDidChangeResults(){return Uc.tests.onDidChangeTestResults}get lastResultsFrom(){return Uc.tests.testResults.find(t=>t.completedAt&&t.results.length)?.completedAt}getAllFailures(){let t=Uc.tests.testResults.find(n=>n.results.length);return t?this.dfsFailures(t.results):ko.empty()}getLastFailureFor(t){let n=[];for(let o=t;o;o=o.parent)n.push(o.id);n.reverse();for(let o of Uc.tests.testResults)for(let s of o.results){let a=s;for(let c of n)if(a=a.children.find(u=>u.id===c),!a)break;let l=a?.taskStates.find(c=>c.state===Uc.TestResultState.Failed||c.state===Uc.TestResultState.Errored);if(l&&a)return{snapshot:a,task:l}}}getFailureAtPosition(t,n){let o=Uc.tests.testResults.find(l=>l.results.length);if(this.resultsDocsAreForTestRun!==o&&this.makeResultsDocs(o),!o)return;let s=this.resultsDocs.get(t)||[],a=Uh(s,l=>!!l.range&&l.range.start.line<=n.line);if(a){for(let l of a.taskStates)if(l.state===Uc.TestResultState.Failed||l.state===Uc.TestResultState.Errored)return{snapshot:a,task:l}}}async hasAnyTests(){return!!(await Uc.commands.executeCommand("vscode.testing.getControllersWithTests")).length}async hasTestsInUri(t){try{return!!(await Uc.commands.executeCommand("vscode.testing.getTestsInFile",t)).length}catch{return!1}}*dfsFailures(t){for(let n of t){yield*this.dfsFailures(n.children);for(let o of n.taskStates)(o.state===Uc.TestResultState.Failed||o.state===Uc.TestResultState.Errored)&&(yield{snapshot:n,task:o})}}makeResultsDocs(t){if(this.resultsDocs.clear(),this.resultsDocsAreForTestRun=t,!t)return;let n=[t.results];for(;n.length;)for(let s of n.pop()){if(n.push(s.children),!s.uri)continue;let a=this.resultsDocs.get(s.uri);a?a.push(s):this.resultsDocs.set(s.uri,[s])}let o=new Uc.Range(0,0,0,0);for(let s of this.resultsDocs.values())s.sort((a,l)=>(a.range||o).start.compareTo((l.range||o).start)||ZPn(a.taskStates,l.taskStates))}},ZPn=(r,e)=>{let t=0,n=0;for(let o of r)t=Math.max(t,o.state);for(let o of e)n=Math.max(n,o.state);return t-n};var Nie=z(require("vscode")),zwe=class{getAllExtensions(){return Nie.extensions.all}async getAllCommands(e){return Nie.commands.executeCommand("_getAllCommands",e)}async getAllSettings(){return Nie.commands.executeCommand("_getAllSettings")}};var il=require("vscode");var bW=class extends mce{constructor(t,n){super();this._logService=t;this._remoteRepositoriesService=n;this.onDidOpenTextDocument=il.workspace.onDidOpenTextDocument;this.onDidChangeTextDocument=il.workspace.onDidChangeTextDocument;this.onDidOpenNotebookDocument=il.workspace.onDidOpenNotebookDocument;this.onDidCloseNotebookDocument=il.workspace.onDidCloseNotebookDocument;this.onDidCloseTextDocument=il.workspace.onDidCloseTextDocument;this.onDidChangeWorkspaceFolders=il.workspace.onDidChangeWorkspaceFolders;this.onDidChangeNotebookDocument=il.workspace.onDidChangeNotebookDocument;this.onDidChangeTextEditorSelection=il.window.onDidChangeTextEditorSelection}get textDocuments(){return il.workspace.textDocuments}async openTextDocument(t){return await il.workspace.openTextDocument(t)}get fs(){return il.workspace.fs}async showTextDocument(t){await il.window.showTextDocument(t)}async openNotebookDocument(t,n){return typeof t=="string"?await il.workspace.openNotebookDocument(t,n):Eo(t,il.workspace.notebookDocuments)||await il.workspace.openNotebookDocument(t)}get notebookDocuments(){return il.workspace.notebookDocuments}getWorkspaceFolders(){return il.workspace.workspaceFolders?.map(t=>t.uri)??[]}getWorkspaceFolderName(t){let n=il.workspace.getWorkspaceFolder(t);return n?n.name:""}asRelativePath(t,n){return il.workspace.asRelativePath(t,n)}applyEdit(t){return il.workspace.applyEdit(t)}ensureWorkspaceIsFullyLoaded(){return this._fullyLoadedPromise??=(async()=>{for(let t of this.getWorkspaceFolders())if(lZ(t)){this._logService.debug(`Preloading virtual workspace contents for ${t}`);try{let n=await this._remoteRepositoriesService.loadWorkspaceContents(t);this._logService.info(`loading virtual workspace contents resulted in ${n} for: ${t}`)}catch(n){this._logService.error(`Error loading virtual workspace contents for ${t}: ${n}`)}}})(),this._fullyLoadedPromise}async showWorkspaceFolderPicker(){if(this.getWorkspaceFolders())return il.window.showWorkspaceFolderPick()}};bW=T([v(0,ue),v(1,Vwe)],bW);var Kwe=z(require("vscode"));var j_=z(require("vscode")),yrt="<<<<<<<",Qar="|||||||",ekn="=======",Art=">>>>>>>",Lie=class r{static scanDocument(e){let t=null,n=[];for(let o=0;o<e.lineCount;o++){let s=e.lineAt(o);if(!(!s||s.isEmptyOrWhitespace)){if(s.text.startsWith(yrt)){if(t!==null){t=null;break}t={startHeader:s,commonAncestors:[]}}else if(t&&!t.splitter&&s.text.startsWith(Qar))t.commonAncestors.push(s);else if(t&&!t.splitter&&s.text===ekn)t.splitter=s;else if(t&&s.text.startsWith(Art)){t.endFooter=s;let a=r.scanItemToMergeConflictDescriptor(e,t);a!==null&&n.push(a),t=null}}}return n.filter(Boolean)}static containsConflict(e){if(!e)return!1;let t=e.getText();return t.includes(yrt)&&t.includes(Art)}static scanItemToMergeConflictDescriptor(e,t){if(!t.startHeader||!t.splitter||!t.endFooter)return null;let n=t.commonAncestors[0]||t.splitter;return{current:{header:t.startHeader.range,decoratorContent:new j_.Range(t.startHeader.rangeIncludingLineBreak.end,r.shiftBackOneCharacter(e,n.range.start,t.startHeader.rangeIncludingLineBreak.end)),content:new j_.Range(t.startHeader.rangeIncludingLineBreak.end,n.range.start),name:t.startHeader.text.substring(yrt.length+1)},commonAncestors:t.commonAncestors.map((o,s,a)=>{let l=a[s+1]||t.splitter;return{header:o.range,decoratorContent:new j_.Range(o.rangeIncludingLineBreak.end,r.shiftBackOneCharacter(e,l.range.start,o.rangeIncludingLineBreak.end)),content:new j_.Range(o.rangeIncludingLineBreak.end,l.range.start),name:o.text.substring(Qar.length+1)}}),splitter:t.splitter.range,incoming:{header:t.endFooter.range,decoratorContent:new j_.Range(t.splitter.rangeIncludingLineBreak.end,r.shiftBackOneCharacter(e,t.endFooter.range.start,t.splitter.rangeIncludingLineBreak.end)),content:new j_.Range(t.splitter.rangeIncludingLineBreak.end,t.endFooter.range.start),name:t.endFooter.text.substring(Art.length+1)},range:new j_.Range(t.startHeader.range.start,t.endFooter.rangeIncludingLineBreak.end)}}static shiftBackOneCharacter(e,t,n){if(t.isEqual(n))return t;let o=t.line,s=t.character-1;return s<0&&(o--,s=e.lineAt(o).range.end.character),new j_.Position(o,s)}};var EW=class extends _e{constructor(t,n){super();this.gitService=t;this.ignoreService=n}async resolveMergeConflicts(t,n){if(n?.isCancellationRequested)return;let o=[],s=[],a=[];for(let l of t){if(await this.ignoreService.isCopilotIgnored(l,n))continue;let c=await Kwe.workspace.openTextDocument(l);if(!Lie.containsConflict(c))continue;let u=Lie.scanDocument(c);if(u.length===0)continue;o.push(l);let d=u[0].current.name,p=u[0].incoming.name,f=await this.gitService.getMergeBase(l,d,p);f&&(s.push({uri:cW(l,f),historyItemId:f}),a.push({start:{uri:cW(l,f),historyItemId:f},end:{uri:cW(l,d),historyItemId:d}}),a.push({start:{uri:cW(l,f),historyItemId:f},end:{uri:cW(l,p),historyItemId:p}}))}n?.isCancellationRequested||o.length>0&&await Kwe.commands.executeCommand("workbench.action.chat.open",{mode:"agent",attachFiles:o,attachHistoryItemChanges:s,attachHistoryItemChangeRanges:a,query:"Resolve all merge conflicts"})}};EW=T([v(0,bl),v(1,At)],EW);var d0=z(require("vscode"));var Jwe=class{async add(e,t){let n=d0.workspace.getConfiguration("launch",e),o=n.get("configurations");t.configurations.length&&await n.update("configurations",[...t.configurations,...o||[]],d0.ConfigurationTarget.WorkspaceFolder);let s=n.get("inputs");t.inputs?.length&&await n.update("inputs",[...t.inputs,...s||[]],d0.ConfigurationTarget.WorkspaceFolder)}async show(e,t){let n=Fe.joinPath(e,".vscode","launch.json"),o;try{o=await d0.workspace.openTextDocument(n)}catch{return}let s;if(t)try{let a=o.getText(),l=[],c=!1;nce(a,{onObjectBegin(u){l.push(u)},onObjectEnd(u,d){let p=l.pop();if(c){c=!1;let f=new If(a),m=f.offsetToPosition(p),h=f.offsetToPosition(u+d);s=new d0.Range(m.lineNumber-1,m.column-1,h.lineNumber-1,h.column-1)}},onLiteralValue(u,d,p,f,m,h){if(u===t){let g=h();g[g.length-1]==="name"&&(c=!0)}}})}catch{}await d0.window.showTextDocument(o,{selection:s})}async launch(e){let t="configurations"in e&&e.configurations.length?e.configurations[0]:e;t&&await d0.debug.startDebugging(void 0,t)}async resolveConfigurationInputs(e,t,n){n||(n={isGenerating:()=>{},ensureTask:()=>Promise.resolve(!0),prompt:async(a,l)=>await d0.window.showInputBox({prompt:a,value:l,ignoreFocusOut:!0})});let o=new Map;for(let a of e.inputs||[]){let l=`\${input:${a.id}}`,c=await n.prompt(a.description,t?.get(l));if(c===void 0)return;o.set(l,c)}return{config:o5(e.configurations[0],a=>{if(typeof a=="string"){for(let[l,c]of o)a=a.replaceAll(l,c);return a}}),inputs:o}}};var brt=vn.text3small_512,Mie=class{constructor(e,t,n){this._logService=e;let o=Pg(n.getEditorInfo().version);this.cache=t.createInstance(zm,1,"toolEmbeddings",o,brt,"tools")}get embeddingType(){return this.cache.embeddingType}async getEmbeddings(){return this.embeddingsMap||(this.embeddingsMap=await this.loadEmbeddings()),this.embeddingsMap}async loadEmbeddings(){try{let e=await this.cache.getCache(),t=new Map;if(e)for(let[n,o]of Object.entries(e)){if(o===void 0){this._logService.warn(`Tool embedding missing for key: ${n}`);continue}t.set(n,{type:this.embeddingType,value:o.embedding})}return t}catch(e){return this._logService.error("Failed to load pre-computed tool embeddings",e),new Map}}};Mie=T([v(0,ue),v(1,K),v(2,Mt)],Mie);var SW=class{constructor(e,t,n){this.embeddingsComputer=e;this._logService=t;this.embeddingsStore=new Map;this.isInitialized=!1;this.embeddingsCache=n.createInstance(Mie)}async retrieveSimilarEmbeddingsForAvailableTools(e,t,n,o){if(await this.ensureInitialized(),await this.ensureToolEmbeddings(t,o),o.isCancellationRequested)return[];let s=this.getAvailableToolEmbeddings(t);return s.length===0?[]:this.rankEmbeddings(e,s,n).map(l=>l.value)}rankEmbeddings(e,t,n){return Kh(e,t,n)}async ensureInitialized(){if(this.isInitialized)return;let e=await this.embeddingsCache.getEmbeddings();for(let[t,n]of e)this.embeddingsStore.set(t,n);this.isInitialized=!0}async ensureToolEmbeddings(e,t){if(t.isCancellationRequested)return;let n=[...e].filter(o=>!this.embeddingsStore.has(o));await this.computeMissingEmbeddings(n,t)}async computeMissingEmbeddings(e,t){if(!(t.isCancellationRequested||e.length===0))try{let n=await this.computeEmbeddingsForTools(e,t);if(n)for(let[o,s]of n)this.embeddingsStore.set(o,s)}catch(n){this._logService.error("Failed to compute embeddings for tools",n)}}async computeEmbeddingsForTools(e,t){if(t.isCancellationRequested)return;let n=await this.embeddingsComputer.computeEmbeddings(this.embeddingsCache.embeddingType,e,{},new To("ToolEmbeddingsComputer::computeEmbeddingsForTools"),t);if(!(n?.values.length===0||n?.values.length!==e.length))return e.map((o,s)=>[o,n.values[s]])}getAvailableToolEmbeddings(e){let t=[];for(let n of e){let o=this.embeddingsStore.get(n);o&&t.push([n,o])}return t}};SW=T([v(0,ca),v(1,ue),v(2,K)],SW);var td=z(Xe());var Ert=om/2,qar=Ert,Var=om*3/4,Har=om/8,Gar=2,War=3,Xwe="uncategorized_tools",jar="Tools that could not be automatically categorized into existing groups.";function Yar(r){return r.replace(/[^a-zA-Z0-9_]/g,"_").toLowerCase()}function zar(r,e=new Set){return r.filter(t=>{let n=e.has(t.name);return e.add(t.name),!n})}function Kar(r,e){if(!Array.isArray(r))throw new n7(`Invalid response from ${e}: ${JSON.stringify(r)}`);if(!r.every(t=>typeof t.name=="string"&&typeof t.summary=="string"))throw new n7(`Invalid response from ${e}: ${JSON.stringify(r)}`)}function Jar(r,e){if(Kar(r,e),!r.every(t=>Array.isArray(t.tools)&&t.tools.every(n=>typeof n=="string")))throw new n7(`Invalid response from ${e}: ${JSON.stringify(r)}`)}function Xar(r,e){let t=r.map(n=>({name:n.name,summary:n.summary,tools:n.tools.map(o=>e.get(o)).filter(ns)}));return tkn(t)}function tkn(r){let e=new Map;for(let t of r){let n=Yar(t.name),o=e.get(n);o?(t.summary&&t.summary!==o.summary&&(o.summary=`${o.summary}
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:19:**Setting**: `github.copilot.chat.customOAIModels`
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:23:If you're [using OpenAI-compatible models](https://code.visualstudio.com/docs/copilot/customization/language-models#_use-an-openaicompatible-model), you can also explicitly configure the list of edit tools with the `github.copilot.chat.customOAIModels` setting.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:294:[Tool sets](https://code.visualstudio.com/docs/copilot/chat/chat-agent-mode#_define-tool-sets) are a convenient way to group related tools together and VS Code has several built-in tool sets like `edit` or `search`.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:393:Learn more about [terminal auto approve](https://code.visualstudio.com/docs/copilot/chat/chat-agent-mode#_autoapprove-terminal-commands) in our documentation.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:530:**Setting**: `github.copilot.chat.notebook.enhancedNextEditSuggestions.enabled`
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:532:We are experimenting with improving the quality of next edit suggestions for notebooks. Currently, the language model has access to the contents of the active cell when generating suggestions. With the `github.copilot.chat.notebook.enhancedNextEditSuggestions.enabled` setting enabled, the language model has access to the entire notebook, enabling it to generate more accurate and higher-quality next edit suggestions.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:570:**Setting**: `github.copilot.chat.virtualTools.threshold`
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:576:This behavior, including the threshold, is configurable via the setting `github.copilot.chat.virtualTools.threshold`.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:582:Early terminal auto-approve settings were introduced last month. This release, the feature got many improvements. Learn more about [terminal auto-approval](https://code.visualstudio.com/docs/copilot/chat/chat-agent-mode#_autoapprove-terminal-commands-experimental) in our documentation.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:615:The [`#codebase` tool](https://code.visualstudio.com/docs/copilot/chat/copilot-chat-context#_perform-a-codebase-search) now supports remote indexes for workspaces that are linked to Azure DevOps repos. This enables `#codebase` to search for relevant snippets almost instantly without any initialization. This even works for larger repos with tens of thousands of indexable files. Previously, this feature only worked with GitHub linked repos.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:706:**Setting**: `github.copilot.chat.newWorkspace.useContext7`
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:724:Learn more about [using MCP servers in VS Code](https://code.visualstudio.com/docs/copilot/chat/mcp-servers) in our documentation.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:795:#### Copilot Chat is open source
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:797:We're excited to announce that we've open sourced the GitHub Copilot Chat extension! The source code is now available at [`microsoft/vscode-copilot-chat`](https://github.com/microsoft/vscode-copilot-chat) under the MIT license.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:806:You can explore the repository to see how features like [agent mode](https://github.com/microsoft/vscode-copilot-chat/blob/e1222084830244174e6aa64683286561fa7e7607/src/extension/prompts/node/agent/agentPrompt.tsx), [inline chat](https://github.com/microsoft/vscode-copilot-chat/blob/e1222084830244174e6aa64683286561fa7e7607/src/extension/prompts/node/inline/inlineChatEditCodePrompt.tsx), and [MCP integration](https://github.com/microsoft/vscode-copilot-chat/blob/e1222084830244174e6aa64683286561fa7e7607/src/extension/mcp/vscode-node/mcpToolCallingLoop.tsx) are implemented. We welcome contributions, feedback, and collaboration from the community.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:812:Last milestone, we previewed [custom chat modes](https://code.visualstudio.com/docs/copilot/chat/chat-modes#_custom-chat-modes). In addition to the built-in chat modes 'Ask', 'Edit' and 'Agent', you can define your own chat modes with specific instructions and a set of allowed tools that you want the LLM to follow when replying to a request.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:824:The editor for [chat modes](https://code.visualstudio.com/docs/copilot/chat/chat-modes), [prompts](https://code.visualstudio.com/docs/copilot/copilot-customization#_prompt-files-experimental), and [instruction files](https://code.visualstudio.com/docs/copilot/copilot-customization#_custom-instructions) now supports completions, validation, and hovers for all supported metadata properties.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:842:[Burke's GPT 4.1 Beast Mode (VS Code)](https://github.com/microsoft/vscode-copilot-chat/blob/HEAD/vscode:chat-mode/install?url=https:/gist.githubusercontent.com/burkeholland/a232b706994aa2f4b2ddd3d97b11f9a7/raw/6e497f4b4ef5e7ea36787ef38fdf4385433591c1/4.1.chatmode.md)
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:890:"github.copilot.chat.agent.terminal.allow list": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:903:"github.copilot.chat.agent.terminal.allow list": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:906:"github.copilot.chat.agent.terminal.denyList": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:968:We've reworked the UX around managing extension access to language models provided by extensions. Previously, you saw an item in the Account menu that said **AccountName (GitHub Copilot Chat)**, which had nothing to do with what account GitHub Copilot Chat was using. Rather, it allowed you to manage which extensions had access to the language models provided by Copilot Chat.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:970:To make this clearer, we've removed the **AccountName (GitHub Copilot Chat)** item and replaced it with a new item called **Manage Language Model Access...**. This item opens a Quick Pick that enables you to manage which extensions have access to the language models provided by GitHub Copilot Chat.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:982:You can get started by installing some of the [popular MCP servers from our curated list](https://code.visualstudio.com/mcp). Learn more about [using MCP servers in VS Code](https://code.visualstudio.com/docs/copilot/chat/mcp-servers) and how you can use them to extend agent mode.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:1138:Learn more about [tools sets](https://code.visualstudio.com/docs/copilot/chat/chat-agent-mode#_define-tool-sets) in our documentation.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:1228:Learn more about using [chat in VS Code](https://code.visualstudio.com/docs/copilot/chat/copilot-chat) in our documentation.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:1244:Learn more about [adding context in chat](https://code.visualstudio.com/docs/copilot/chat/copilot-chat-context) in our documentation.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:1363:We have also moved the setting from the Chat extension into VS Code core, and renamed it from `github.copilot.chat.search.keywordSuggestions` to `search.searchView.keywordSuggestions`.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:1395:**Setting**: `github.copilot.chat.notebook.followCellExecution.enabled`
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:1397:With follow mode, the Notebook view will automatically scroll to the cell that is currently being executed by the agent. Use the `github.copilot.chat.notebook.followCellExecution.enabled` setting to enable or disable follow mode for agent cell execution in Jupyter Notebooks.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:1520:Generate release notes for the features I worked in the current release and update them in the release notes file. Use [release notes writing instructions file](https://github.com/microsoft/vscode-copilot-chat/blob/HEAD/.github/instructions/release-notes-writing.instructions.md) as a guide.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:1557:If you want to ask about the repo you are currently working on, you can just use the [`#codebase` tool](https://code.visualstudio.com/docs/copilot/reference/workspace-context#_making-copilot-chat-an-expert-in-your-workspace).
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:1559:Also, the `#githubRepo` tool is only for searching for relevant code snippets. The [GitHub MCP server](https://github.com/github/github-mcp-server?tab=readme-ov-file#github-mcp-server) provides tools for working with GitHub issues and pull requests. Learn more about [adding MCP servers in VS Code](https://code.visualstudio.com/docs/copilot/chat/mcp-servers#_add-an-mcp-server).
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:1569:Last month, we introduced the `#fetch` tool, which allows you to fetch the contents of a web page right from chat to include as context for your prompt. If you missed that release note, check out [the initial release of the fetch tool](https://github.com/microsoft/vscode-copilot-chat/blob/HEAD/v1_99.md#fetch-tool) release note and examples.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:1588:The keyboard shortcut <kbd>Ctrl+Alt+I</kbd> still just opens the Chat view, but the <kbd>Ctrl+Shift+I</kbd> shortcut now opens the Chat view and switches to [agent mode](vscode://GitHub.Copilot-Chat/chat?mode=agent). If you'd like to set up keyboard shortcuts for other chat modes, there is a command for each mode:
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:1596:**Setting**: `github.copilot.chat.agent.autoFix`
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:1598:If a file edit in agent mode introduces new errors, agent mode can now detect them, and automatically propose a follow-up edit. You can disable this behavior with `github.copilot.chat.agent.autoFix`.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:1628:Learn more about [MCP support in VS Code](https://code.visualstudio.com/docs/copilot/chat/mcp-servers).
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:1684:#### Prevent installation of Copilot Chat pre-release versions in VS Code stable
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:1686:VS Code now prevents the installation of the pre-release version of the Copilot Chat extension in VS Code Stable. This helps avoid situations where you inadvertently install the Copilot Chat pre-release version and get stuck in a broken state. This means that you can only install the Copilot Chat extension pre-release version in the Insiders build of VS Code.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:1754:Additionally, a new accessibility help dialog is available in [agent mode](https://code.visualstudio.com/docs/copilot/chat/chat-agent-mode), explaining what users can expect from the feature and how to navigate it effectively.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:1816:If you have the prerelease version of the Copilot Chat extension installed in VS Code Stable, a new welcome screen will inform you that this configuration is not supported. Due to rapid development of chat features, the extension will not activate in VS Code Stable.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:1824:**Setting**: `github.copilot.chat.search.semanticTextResults:true`
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:1842:Check out the [agent mode documentation](https://code.visualstudio.com/docs/copilot/chat/chat-agent-mode) or select agent mode from the chat mode picker in the Chat view.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:1869:We're making a change to the way [edit mode in chat](https://code.visualstudio.com/docs/copilot/chat/copilot-edits) operates. The new edit mode uses the same approach as agent mode, where it lets the model call a tool to make edits to files. An upside to this alignment is that it enables you to switch seamlessly between all three modes, while providing a huge simplification to how these modes work under the hood.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:1908:You can read more about how to install and use MCP servers in [our documentation](https://code.visualstudio.com/docs/copilot/chat/mcp-servers).
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:1914:Check out the [agent mode documentation](https://code.visualstudio.com/docs/copilot/chat/chat-agent-mode) or select agent mode from the chat mode picker in the Chat view.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:1924:**Setting**: `github.copilot.chat.agent.thinkingTool:true`.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:1953:**Setting**: `github.copilot.chat.newWorkspaceCreation.enabled`
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:1955:You can now scaffold a new VS Code workspace in [agent mode](https://code.visualstudio.com/docs/copilot/chat/chat-agent-mode). Whether you’re setting up a VS Code extension, an MCP server, or other development environments, agent mode helps you to initialize, configure, and launch these projects with the necessary dependencies and settings.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:1991:- **[Ask](https://code.visualstudio.com/docs/copilot/chat/chat-ask-mode)**: This is the same as the previous Chat view. Ask questions about your workspace or coding in general, using any model. Use `@` to invoke built-in chat participants or from installed [extensions](https://marketplace.visualstudio.com/search?term=chat-participant&target=VSCode&category=All%20categories&sortBy=Relevance). Use `#` to attach any kind of context manually.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:1992:- **[Agent](https://code.visualstudio.com/docs/copilot/chat/chat-agent-mode)**: Start an agentic coding flow with a set of tools that let it autonomously collect context, run terminal commands, or take other actions to complete a task. Agent mode is enabled for all [VS Code Insiders](https://code.visualstudio.com/insiders/) users, and we are rolling it out to more and more users in VS Code Stable.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:1993:- **[Edit](https://code.visualstudio.com/docs/copilot/chat/copilot-edits)**: In Edit mode, the model can make directed edits to multiple files. Attach `#codebase` to let it find the files to edit automatically. But it won't run terminal commands or do anything else automatically.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:2125:* Agent mode can now run your build [tasks](https://code.visualstudio.com/docs/editor/tasks) automatically or when instructed to do so. Disable this functionality via the `github.copilot.chat.agent.runTasks` setting, in the event that you see the model running tasks when it should not.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:2135:> For the best notebook editing experience with Copilot, we recommend using [VS Code Insiders](https://code.visualstudio.com/insiders/) and the pre-release version of GitHub Copilot Chat, where you'll get the latest improvements to this feature as they're developed.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:2153:In preparation for unifying Copilot Edits with Copilot Chat, we've given Copilot Edits a facelift. Files that are attached and not yet sent, are now rendered as regular chat attachments. Only files that have been modified with AI are added to the changed files list, which is located above the chat input part.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:2183:### More advanced codebase search in Copilot Chat
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:2185:**Setting**: `github.copilot.chat.codesearch.enabled`
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:2187:When you add `#codebase` to your Copilot Chat query, Copilot helps you find relevant code in your workspace for your chat prompt. `#codebase` can now run tools like text search and file search to pull in additional context from your workspace.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:2189:Set `github.copilot.chat.codesearch.enabled` to enable this behavior. The full list of tools is:
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:2227:You could already change the language model for Copilot Chat and Copilot Edits, and now you can also change the model for inline suggestions.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:2237:* **GPT 4.5 (Preview)**: OpenAI’s latest model, GPT-4.5, is now available in GitHub Copilot Chat to Copilot Enterprise users. GPT-4.5 is a large language model designed with advanced capabilities in intuition, writing style, and broad knowledge. Learn more about the GPT-4.5 model availability in the [GitHub blog post](https://github.blog/changelog/2025-02-27-openai-gpt-4-5-in-github-copilot-now-available-in-public-preview).
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:2243:We're quickly rolling out end-to-end vision support in this version of Copilot Chat. This lets you attach images and interact with images in chat prompts. For example, if you encounter an error while debugging, attach a screenshot of VS Code, and ask Copilot to help you resolve the issue. You might also use it to attach some UI mockup and let Copilot provide some HTML and CSS to implement the mockup.
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:2245:![Animation that shows an attached image in a Copilot Chat prompt. Hovering over the image shows a preview of it.](https://code.visualstudio.com/assets/updates/1_97/image-attachments.gif)
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:2277:You can provide custom instructions for generating pull request title and description with the setting `github.copilot.chat.pullRequestDescriptionGeneration.instructions`.  You can point the setting to a file in your workspace, or you can provide instructions inline in your settings:
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/changelog.md:2281:  "github.copilot.chat.pullRequestDescriptionGeneration.instructions": [
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.nls.tr.json:1:{"copilot.agent.description":"Aracı modunda çalışma alanınızdaki dosyaları düzenleyin","copilot.codebase.tool.description":"Kod tabanınızdaki ilgili dosya parçalarını, sembolleri ve diğer bilgileri bulun","copilot.description":"Bağlam içinde sor veya düzenle","copilot.edits.description":"Dosyaları çalışma alanınızda düzenleyin","copilot.listCodeUsages.tool.description":"Bir simgenin başvurularını, tanımlarını ve diğer kullanımlarını bulun","copilot.terminal.description":"Komutlar hakkında soru sorun","copilot.terminal.explain.description":"Terminaldeki bir şeyi açıkla","copilot.terminal.explain.sampleRequest":"Son komutu açıkla","copilot.terminal.sampleRequest":"Dizinler dahil olmak üzere bir dizindeki tüm dosyaları nasıl görüntülerim?","copilot.terminalPanel.description":"Terminalde bir şeyin nasıl yapılacağını sorun","copilot.testFailure.tool.description":"Son birim testi hatası hakkında bilgi içerir","copilot.toolSet.editing.description":"Dosyaları çalışma alanınızda düzenleyin","copilot.toolSet.new.description":"Yeni projeleri derlemek, hata ayıklamak ve çalıştırmak için VS Code'a özgü yapılandırmalarla yeni bir çalışma alanı oluşturun.","copilot.toolSet.runCommand.description":"Terminalde komutları çalıştır","copilot.toolSet.runNotebook.description":"Not defteri hücrelerini çalıştır","copilot.toolSet.runTasks.description":"Görevleri çalışma alanınızda çalıştırın","copilot.toolSet.search.description":"Çalışma alanınızdaki dosyaları arayın ve okuyun","copilot.tools.applyPatch.description":"Çalışma alanındaki metin dosyalarını düzenle","copilot.tools.applyPatch.name":"Yama uygula","copilot.tools.changes.description":"Değiştirilen dosyaların farklarını getir","copilot.tools.createDirectory.description":"Çalışma alanınızda yeni dizinler oluşturun","copilot.tools.createDirectory.name":"Dizin Oluştur","copilot.tools.createFile.description":"Yeni dosyalar oluştur","copilot.tools.createFile.name":"Dosya oluştur","copilot.tools.editNotebook.name":"Not defterini düzenle","copilot.tools.errors.description":"Belirli bir dosyanın hatalarını kontrol et","copilot.tools.fetchWebPage.description":"Bir web sayfasından ana içeriği getir. Getirmek istediğiniz sayfanın URL’sini eklemeniz gerekir.","copilot.tools.fetchWebPage.name":"Web Sayfasını Getir","copilot.tools.findFiles.name":"Dosyaları Bul","copilot.tools.findTestFiles.description":"Kaynak kod dosyası için, testleri içeren dosyayı bulun. Test dosyası için, test kapsamındaki kodu içeren dosyayı bulun","copilot.tools.findTestFiles.name":"Test Dosyalarını bul","copilot.tools.findTextInFiles.name":"Dosyalarda Metin bul","copilot.tools.getChangedFiles.name":"Git Değişiklikleri","copilot.tools.getDocInfo.description":"Sınıf veya işlev gibi bir sembol için, nasıl belgeleyebileceğinizle ilgili bilgileri bulun","copilot.tools.getDocInfo.name":"Belge Bilgileri","copilot.tools.getErrors.name":"Sorunları Getir","copilot.tools.getNotebookCellOutput.description":"Daha önce yürütülen bir hücrenin çıkışını okuyun","copilot.tools.getNotebookCellOutput.name":"Not Defteri Hücresi Çıkışını Getir","copilot.tools.getTaskOutput.name":"Görev Çıkışını Getir","copilot.tools.getVSCodeAPI.name":"VS Code API Referanslarını Getir","copilot.tools.insertEdit.name":"Dosyayı düzenle","copilot.tools.listCodeUsages.name":"Kullanımları bul","copilot.tools.listDirectory.name":"Dizini listele","copilot.tools.multiReplaceString.name":"Dosyalar İçindeki Birden Fazla Dizgiyi Değiştir","copilot.tools.newJupyterNotebook.description":"Yeni bir Jupyter Notebook oluştur","copilot.tools.openSimpleBrowser.description":"Yerel olarak barındırılan web sitesini Basit Tarayıcıda önizleyin","copilot.tools.openSimpleBrowser.name":"Basit Tarayıcı aç","copilot.tools.readFile.name":"Dosyayı oku","copilot.tools.readProjectStructure.name":"Proje Yapısı","copilot.tools.replaceString.name":"Dosyadaki Dizeyi Değiştir","copilot.tools.runNotebookCell.description":"Not defteri dosyasındaki bir hücrenin yürütülmesini tetikle","copilot.tools.runNotebookCell.name":"Not Defteri Hücresini Çalıştır","copilot.tools.searchCodebase.name":"Codebase","copilot.tools.searchWorkspaceSymbols.name":"Çalışma Alanı Sembolleri","copilot.tools.testFailure.name":"Test Hatası","copilot.tools.think.name":"Düşün","copilot.tools.updateUserPreferences.name":"Kullanıcı Tercihlerini güncelleştir","copilot.vscode.api.description":"VS Code uzantı geliştirme hakkında soru sorun","copilot.vscode.api.sampleRequest":"Durum çubuğuna nasıl metin eklerim?","copilot.vscode.description":"VS Code hakkında soru sorun","copilot.vscode.sampleRequest":"Tümleşik terminali açma komutu nedir?","copilot.vscode.search.description":"Çalışma alanı araması için sorgu parametreleri oluştur","copilot.vscode.search.sampleRequest":"'src' dizinimin altındaki tüm dosyalarda 'foo' araması yap","copilot.vscode.setupTests.description":"Projenizde testler kurun (Deneysel)","copilot.vscode.setupTests.sampleRequest":"projeme playwright testleri ekle","copilot.vscode.startDebugging.description":"VS Code'da (Deneysel) başlatma yapılandırması oluşturma ve hata ayıklamaya başlama","copilot.vscode.startDebugging.sampleRequest":"9229 bağlantı noktasında düğüm uygulamasına ekle","copilot.vscode.tool.description":"VS Code uzantısı geliştirme ile ilgili soruları yanıtlamak için VS Code API başvurularını kullanın.","copilot.workspace.description":"Çalışma alanınız hakkında soru sorun","copilot.workspace.doc.description":"Bu sembol için belge açıklaması ekle","copilot.workspace.edit.description":"Dosyaları çalışma alanınızda düzenleyin","copilot.workspace.edit.inline.description":"Etkin düzenleyicinizin seçili kodunu düzenleyin","copilot.workspace.explain.description":"Etkin düzenleyicinizin kodunun nasıl çalıştığını açıklayın","copilot.workspace.fix.description":"Seçili koddaki sorunlar için bir düzeltme öner","copilot.workspace.fix.sampleRequest":"Bu kodda bir sorun var. Düzeltilen hatayı göstererek kodu yeniden yaz.","copilot.workspace.generate.description":"Yeni kod oluştur","copilot.workspace.new.description":"Bir çalışma alanındaki yeni bir dosya veya proje için yapı iskelesi kodu","copilot.workspace.new.sampleRequest":"Typescript kullanarak RESTful API sunucusu oluştur","copilot.workspace.newNotebook.description":"Yeni bir Jupyter Notebook oluştur","copilot.workspace.newNotebook.sampleRequest":"CVS dosyasından veri yüklemek için not defteri nasıl oluştururum?","copilot.workspace.review.description":"Etkin düzenleyicinizin seçili kodunu gözden geçirin","copilot.workspace.sampleRequest":"Bu projeyi nasıl derlerim?","copilot.workspace.semanticSearch.description":"Sorgunuzla ilgili kodları bulun","copilot.workspace.semanticSearch.sampleRequest":"Araç çubuğu kodu nerede?","copilot.workspace.tests.description":"Seçili kod için birim testleri oluştur","copilot.workspaceSymbols.tool.description":"Dil hizmetlerini kullanarak çalışma alanı sembollerini arayın.","github.copilot.badge.signUp":"GitHub Copilot'a oturum aç","github.copilot.badge.star":"GitHub'da Star Copilot","github.copilot.badge.twitter":"GitHub'ı Twitter'da takip edin","github.copilot.badge.youtube":"GitHub'a YouTube'da göz at","github.copilot.chat.attachFile":"Dosyayı Sohbete Ekle","github.copilot.chat.attachSelection":"Seçimi Sohbete Ekle","github.copilot.chat.completionContext.typescript.mode":"TypeScript Copilot bağlam sağlayıcısının yürütme modu.","github.copilot.chat.copilotDebugCommand.enabled":"Terminalde 'copilot-debug' komutunun etkinleştirilip etkinleştirilmediğini belirtir.","github.copilot.chat.editor.temporalContext.enabled":"Satır içi sohbet isteğinde copilot istekleriyle son zamanlarda görüntülenen ve düzenlenen dosyaların ekleyip eklemeyişi.","github.copilot.chat.edits.suggestRelatedFilesForTests":"Copilot Düzenlemeleri çalışma kümesi için test dosyalarından kaynak dosyaların önerilip önerilmeyeceği.","github.copilot.chat.edits.temporalContext.enabled":"Düzenleme isteğinde bulunmak için son zamanlarda görüntülenilen ve düzenlenen dosyaların Copilot istekleriyle birlikte dahil ediliyor olup olmadığını belirtir.","github.copilot.chat.languageContext.fix.typescript.enabled":"/fix komutları için TypeScript dil bağlamı sağlayıcısını etkinleştirir","github.copilot.chat.languageContext.inline.typescript.enabled":"Satır içi sohbetler için TypeScript dil bağlamı sağlayıcısını etkinleştirir (hem oluşturma hem de düzenleme için)","github.copilot.chat.languageContext.typescript.cacheTimeout":"Milisaniye cinsinden TypeScript dil bağlamı sağlayıcısı için önbellek doldurma zaman aşımı. Varsayılan değer 500 milisaniyedir.","github.copilot.chat.languageContext.typescript.enabled":"Satır içi tamamlamalar için TypeScript dil bağlamı sağlayıcısını etkinleştirir","github.copilot.chat.languageContext.typescript.includeDocumentation":"Oluşturulan kod parçacıklarına dokümantasyon yorumlarının dahil edilip edilmeyeceğini kontrol eder.","github.copilot.chat.languageContext.typescript.items":"TypeScript dil bağlam sağlayıcısına hangi tür öğelerin dahil edileceğini kontrol eder.","github.copilot.command.applyReviewSuggestion":"Uygula","github.copilot.command.applyReviewSuggestionAndNext":"Uygula ve Sonrakine Git","github.copilot.command.applySuggestionWithCopilot":"Öneriyi Uygula","github.copilot.command.buildLocalWorkspaceIndex":"Yerel Çalışma Alanı Dizini Oluştur","github.copilot.command.buildRemoteWorkspaceIndex":"Uzak Çalışma Alanı Dizini Oluştur","github.copilot.command.collectDiagnostics":"Sohbet Tanılama","github.copilot.command.collectWorkspaceIndexDiagnostics":"Çalışma Alanı Dizini Tanılama Verilerini Topla","github.copilot.command.continueReviewInChat":"Sohbet Panelinde Görüntüle","github.copilot.command.continueReviewInInlineChat":"At ve Satır İçi Sohbete Kopyala","github.copilot.command.disableEditTracing":"Sohbet Düzenleme İzlemeyi Devre Dışı Bırak","github.copilot.command.discardAllReviewSuggestion":"Tümünü at","github.copilot.command.discardReviewSuggestion":"At","github.copilot.command.discardReviewSuggestionAndNext":"At ve Sonrakine Git","github.copilot.command.enableEditTracing":"Sohbet Düzenleme İzlemeyi Etkinleştir","github.copilot.command.explainTerminalLastCommand":"Son Terminal Komutunu Açıkla","github.copilot.command.explainThis":"Açıkla","github.copilot.command.fixTestFailure":"Test Hatasını Düzelt","github.copilot.command.fixThis":"Düzelt","github.copilot.command.generateConfiguration":"Hata Ayıklama Yapılandırması Oluştur","github.copilot.command.generateDocs":"Belge Oluştur","github.copilot.command.generateSTest":"Son Sohbet İsteğinden STest Oluştur","github.copilot.command.generateTests":"Test Oluştur","github.copilot.command.generateThis":"Bunu Oluştur","github.copilot.command.gotoNextReviewSuggestion":"Sonraki Öneri","github.copilot.command.gotoPreviousReviewSuggestion":"Önceki Öneri","github.copilot.command.helpfulReviewSuggestion":"Yardımcı oldu","github.copilot.command.inlineEdit.clearCache":"Sonraki Düzenleme Önbelleğini Temizle","github.copilot.command.inlineEdit.reportNotebookNESIssue":"Rapor Not Defteri Sonraki Düzenleme Sorunu","github.copilot.command.logWorkbenchState":"Workbench Durumunu Günlüğe Kaydet","github.copilot.command.openUserPreferences":"Kullanıcı Tercihlerini Aç","github.copilot.command.openWalkthrough":"Kılavuzu Aç","github.copilot.command.refreshClaudeCodeSessions":"Claude Kod Oturumlarını Yenile","github.copilot.command.rerunWithCopilotDebug":"Son Terminal Komutunun Hatalarını Ayıkla","github.copilot.command.resetVirtualToolGroups":"Sanal Araç Gruplarını Sıfırla","github.copilot.command.reviewAndComment":"Gözden Geçir","github.copilot.command.reviewChanges":"Gözden Geçirme - Kaydedilmemiş Değişiklikler","github.copilot.command.reviewFileChange":"Değişiklikleri gözden geçir","github.copilot.command.reviewStagedChanges":"Gözden Geçirme - Hazırlanmış Değişiklikler","github.copilot.command.reviewUnstagedChanges":"Gözden Geçirme - Hazırlanmamış Değişiklikler","github.copilot.command.sendChatFeedback":"Sohbet Geri Bildirimi Gönder","github.copilot.command.showChatLogView":"Sohbet Hata Ayıklama Görünümünü Göster","github.copilot.command.showContextInspectorView":"Dil Bağlamını İnceleyin","github.copilot.command.showNotebookLog":"Sohbet Günlüğü Not Defterini Göster","github.copilot.command.showOutputChannel":"Çıkış Kanalını Göster","github.copilot.command.unhelpfulReviewSuggestion":"Yardımcı olmadı","github.copilot.config.agent.currentEditorContext.enabled":"Etkin durumdayken, Copilot aracı modu bağlamında geçerli etkin düzenleyicinin adını içerir.","github.copilot.config.agent.thinkingTool":"Aracı modunda bir yanıt oluşturmadan önce Copilot'ın isteğiniz hakkında derinlemesine düşünmesine olanak tanıyan düşünme aracını etkinleştirir.","github.copilot.config.alternateGptPrompt.enabled":"Varsayılan istem yerine GPT modelleri için deneme amaçlı alternatif bir istem etkinleştirir.","github.copilot.config.autoFix":"Düzenlenen dosyalar için tanılamaları otomatik olarak düzeltin.","github.copilot.config.byok.ollamaEndpoint":"Kendi anahtarını getir aracılığıyla erişildiğinde Ollama için kullanılacak uç nokta. Varsayılan olarak localhost değerine sahiptir.","github.copilot.config.claudeSonnet45AlternatePrompt":"Claude Sonnet 4.5 için kullanılacak deneysel alternatif istem belirtir.","github.copilot.config.codeGeneration.instruction.file":"Kod üreten Copilot isteklerine eklenecek bir dosyanın yolu. İsteğe bağlı olarak, yönerge için bir dil belirtebilirsiniz.","github.copilot.config.codeGeneration.instruction.text":"Kod üreten Copilot isteklerine eklenecek bir metin yönergesi. İsteğe bağlı olarak, yönerge için bir dil belirtebilirsiniz.","github.copilot.config.codeGeneration.instructions":"Kod üreten Copilot isteklerine eklenecek yönergeler.\nYönergelerin kaynağı: \n- çalışma alanında bir dosya: `{ \"file\": \"fileName\" }`\n- doğal dilde metin: `{ \"text\": \"Use underscore for field names.\" }`\n\nNot: Yönergelerinizin kısa ve net olduğundan emin olun. Kötü yönergeler Copilot'un kalitesini ve performansını düşürebilir.","github.copilot.config.codeGeneration.instructions.deprecated":"Bunun yerine yönergeler dosyalarını kullanın. Daha fazla bilgi için https://aka.ms/vscode-ghcp-custom-instructions adresine bakın.","github.copilot.config.codeGeneration.useInstructionFiles":"Copilot isteklerine `.github/copilot-instructions.md` öğesinden gelen kod yönergelerinin eklenip eklenmeyeceğini denetler.\n\nNot: Yönergelerinizin kısa ve net olduğundan emin olun. Yetersiz hazırlanmış yönergeler Copilot’un kalitesini ve performansını düşürebilir. Copilot’u özelleştirme hakkında [daha fazla bilgi edinin](https://aka.ms/github-copilot-custom-instructions).","github.copilot.config.codesearch.enabled":"`#codebase` kullanılırken aracılı kod aramasının etkinleştirilip etkinleştirilmeyeceği.","github.copilot.config.commitMessageGeneration.instruction.file":"İşleme iletileri oluşturan Copilot isteklerine eklenecek yönergeleri içeren dosyanın yolu.","github.copilot.config.commitMessageGeneration.instruction.text":"İşleme iletileri oluşturan Copilot isteklerine eklenecek yönergeler metin yönergeleri.","github.copilot.config.commitMessageGeneration.instructions":"İşleme iletileri oluşturan Copilot isteklerine eklenecek yönergeler kümesi.\nYönergelerin kaynağı: \n- çalışma alanında bir dosya: `{ \"file\": \"fileName\" }`\n- doğal dilde metin: `{ \"text\": \"Use conventional commit message format.\" }`\n\nNot: Yönergelerinizin kısa ve net olduğundan emin olun. Yetersiz hazırlanmış yönergeler Copilot'un kalitesini ve performansını düşürebilir.","github.copilot.config.completionsFetcher":"Satır içi tamamlamalar için kullanılan getiriciyi ayarlar.","github.copilot.config.customInstructionsInSystemMessage":"Etkinleştirildiğinde, özel talimatlar ve mod talimatları kullanıcı mesajı yerine sistem mesajına eklenir.","github.copilot.config.debugTerminalCommandPatterns":"\"Hata Ayıklama Komutu\" hızlı düzeltme eyleminin hata ayıklama terminalinde gösterilmesi gereken komutların listesi.","github.copilot.config.debugTerminalCommands":"Hata ayıklama terminali ve 'copilot-debug' komutunda hızlı düzeltme ipuçları olup olmadığını belirtir.","github.copilot.config.edits.enabled":"Copilot Düzenlemeleri özelliğinin etkinleştirilip etkinleştirilmeyeceği.","github.copilot.config.edits.suggestRelatedFilesFromGitHistory":"Copilot Düzenlemeleri çalışma kümesi için git geçmişinden ilgili dosyaların önerilip önerilmeyeceği.","github.copilot.config.editsNewNotebook.enabled":"Copilot Edits'te yeni not defteri aracının etkinleştirilip etkinleştirilmeyeceği.","github.copilot.config.enableCodeActions":"Kullanılabilir olduğunda Copilot komutlarının Kod Eylemleri olarak gösterilip gösterilmeyeceğini denetler","github.copilot.config.enableUserPreferences":"Aracı modunda kullanıcı tercihlerini anımsama etkinleştir.","github.copilot.config.executePrompt.enabled":"executePrompt aracı, aracının görevleri ayrı ve izole bir bağlamda yürütmesini sağlar.","github.copilot.config.experimental.testGeneration.instruction.file":"Testler üreten Copilot isteklerine eklenecek bir dosyanın yolu. İsteğe bağlı olarak, yönerge için bir dil belirtebilirsiniz.","github.copilot.config.experimental.testGeneration.instruction.text":"Testler üreten Copilot isteklerine eklenecek bir metin yönergesi. İsteğe bağlı olarak, yönerge için bir dil belirtebilirsiniz.","github.copilot.config.generateTests.codeLens":"Geçerli test kapsamı bilgileri dahilinde olmayan semboller için 'Test oluştur' kod lensini göster.","github.copilot.config.gpt5AlternatePrompt":"GPT-5 modelleri için kullanılacak deneysel alternatif istemleri belirtir.","github.copilot.config.gpt5CodexAlternatePrompt":"GPT-5 Codex modeli için kullanılacak deneysel bir alternatif istem belirtir.","github.copilot.config.grokCodeAlternatePrompt":"Grok Code modelleri için kullanılacak deneysel alternatif komut istemini belirtir.","github.copilot.config.imageUpload.enabled":"Sohbet isteklerinde ham base64 dizeleri yerine resim karşıya yükleme URL'lerinin kullanılmasına olanak tanır.","github.copilot.config.localeOverride":"Copilot’ın yanıt vermesini istediğiniz yerel dili belirtin, örneğin `en` veya `fr`. Varsayılan olarak, Copilot, VS Code’un görüntüleme dili için yapılandırılan yerel dili kullanarak yanıt verir.","github.copilot.config.nesFetcher":"Sonraki düzenleme önerileri için kullanılacak getiriciyi ayarlar.","github.copilot.config.newWorkspace.useContext7":"Yeni çalışma alanı oluşturmak için proje iskeletini oluşturmak üzere [Context7](command:github.copilot.mcp.viewContext7) araçlarını kullanıp kullanmayacağınız.","github.copilot.config.newWorkspaceCreation.enabled":"Yeni aracılı çalışma alanı oluşturmanın etkinleştirilip etkinleştirilmeyeceği.","github.copilot.config.notebook.enhancedNextEditSuggestions":"Not defteri hücrelerinde sonraki düzenleme önerilerini oluşturmak için gelişmiş bir yaklaşım kullanılıp kullanılmayacağını kontrol eder.","github.copilot.config.notebook.followCellExecution":"Yürütülmekte olan hücrenin Copilot'tan yürütüldüğünde görünüm alanında gösterilip gösterilmeyeceğini kontrol eder.","github.copilot.config.notebook.inlineEditAgent.enabled":"Not defteri satır içi sohbet arabirim öğesinden aracı benzeri davranışı etkinleştirin.","github.copilot.config.pullRequestDescriptionGeneration.instruction.file":"Çekme isteği başlıkları ve açıklamaları oluşturan Copilot isteklerine eklenecek yönergeleri içeren dosyanın yolu.","github.copilot.config.pullRequestDescriptionGeneration.instruction.text":"Çekme isteği başlıkları ve açıklamaları oluşturmak için Copilot isteklerine eklenecek metin yönergeleri.","github.copilot.config.pullRequestDescriptionGeneration.instructions":"Çekme isteği başlıkları ve açıklamaları oluşturan Copilot isteklerine eklenecek yönergeler kümesi.\nYönergelerin kaynağı: \n- çalışma alanındaki bir dosya: `{ \"file\": \"fileName\" }`\n- doğal dilde metin: `{ \"text\": \"Her zaman önemli değişikliklerin listesini ekle.\" }`\n\nNot: Yönergelerinizin kısa ve net olduğundan emin olun. Yetersiz hazırlanmış yönergeler Copilot’un kalitesini ve performansını düşürebilir.","github.copilot.config.renameSuggestions.triggerAutomatically":"Copilot'ın yeniden adlandırma için öneriler oluşturup oluşturmayacağını denetler","github.copilot.config.responsesApiReasoningEffort":"Yanıtlar API'si için kullanılan neden oluşturma denemesini ayarlar. `#github.copilot.chat.useResponsesApi#` gerektirir.","github.copilot.config.responsesApiReasoningSummary":"Yanıtlar API'si için kullanılan neden oluşturma özet stilini ayarlar. `#github.copilot.chat.useResponsesApi#` gerektirir.","github.copilot.config.reviewAgent.enabled":"Kod inceleme aracını etkinleştirir.","github.copilot.config.reviewSelection.enabled":"Geçerli seçimde kod gözden geçirmesini etkinleştir.","github.copilot.config.reviewSelection.instruction.file":"Geçerli seçim için kod gözden geçirmesi sağlayan Copilot isteklerine eklenecek bir dosyaya yol. İsteğe bağlı olarak, yönerge için bir dil belirtebilirsiniz.","github.copilot.config.reviewSelection.instruction.text":"Geçerli seçim için kod gözden geçirmesi sağlayan Copilot isteklerine eklenecek bir metin yönergesi. İsteğe bağlı olarak, yönerge için bir dil belirtebilirsiniz.","github.copilot.config.reviewSelection.instructions":"Geçerli seçim için kod gözden geçirmesi sağlayan Copilot isteklerine eklenecek bir yönerge kümesi.\nYönergelerin kaynağı: \n- çalışma alanında bir dosya: `{ \"file\": \"fileName\" }`\n- doğal dilde metin: `{ \"text\": \"Use underscore for field names.\" }`\n\nNot: Yönergelerinizin kısa ve net olduğundan emin olun. Kötü yönergeler Copilot'ın verimliliğini düşürebilir.","github.copilot.config.scopeSelection":"Kullanıcı `/explain` komutunu kullanıyorsa ve etkin düzenleyici seçim içermiyorsa kullanıcıdan belirli bir sembolü seçmesinin istenip istenmeyeceğini belirler.","github.copilot.config.setupTests.enabled":"“/setupTests” amacını ve “/tests” oluşturmada istemi etkinleştirir.","github.copilot.config.startDebugging.enabled":"Panel sohbetinde “/startDebugging” amacını etkinleştirir. Sorguyla (varsa), proje yapısıyla ve diğer bileşenlerle eşleştirme için başlatma yapılandırmasını oluşturur veya bulur.","github.copilot.config.summarizeAgentConversationHistory.enabled":"Bağlam penceresi doldurulduktan sonra aracı konuşma geçmişinin otomatik olarak özetlenip özetlenmeyeceğini belirtir.","github.copilot.config.terminalChatLocation":"Terminalden gelen sohbet sorgularının açılmasının gerekip gerekmediğini denetler.","github.copilot.config.terminalChatLocation.chatView":"Sohbet görünümünü açın.","github.copilot.config.terminalChatLocation.quickChat":"Hızlı sohbeti açın.","github.copilot.config.terminalChatLocation.terminal":"Terminal satır içi sohbeti aç","github.copilot.config.testGeneration.instructions":"Testler üreten Copilot isteklerine eklenecek yönergeler.\nYönergelerin kaynağı: \n- çalışma alanında bir dosya: `{ \"file\": \"fileName\" }`\n- doğal dilde metin: `{ \"text\": \"Use underscore for field names.\" }`\n\nNot: Yönergelerinizin kısa ve net olduğundan emin olun. Kötü yönergeler Copilot'un kalitesini ve performansını düşürebilir.","github.copilot.config.testGeneration.instructions.deprecated":"Bunun yerine yönergeler dosyalarını kullanın. Daha fazla bilgi için https://aka.ms/vscode-ghcp-custom-instructions adresine bakın.","github.copilot.config.useProjectTemplates":"`/new` komutunu kullanırken ilgili GitHub projelerini başlangıç projesi olarak kullan","github.copilot.config.useResponsesApi":"Desteklendiğinde Sohbet Tamamlama API'si yerine Yanıtlar API'sini kullanın. Neden oluşturmayı ve neden özetlerini etkinleştirir.\n\n**Not**: Bu, henüz tüm kullanıcılar için etkinleştirilmemiş deneme amaçlı bir özelliktir.","github.copilot.config.virtualTools.threshold":"Bu ayar, sanal araçların kullanılacağı araç sayısını tanımlar. Sanal araçlar, benzer araç gruplarını bir araya getirir ve modelin bunları isteğe bağlı olarak etkinleştirmesine olanak tanır. Bazı araç grupları iyimser bir şekilde önceden etkinleştirilecektir. Bu özelliği aktif olarak geliştiriyoruz ve eşik değere ulaşıldığında araç çağırma işleminde bir düşüş yaşayabilirsiniz.\n\nSanal araçları devre dışı bırakmak için `0` olarak ayarlanabilir.","github.copilot.devcontainer.generateDevContainerConfig":"Geliştirme Kapsayıcısı Yapılandırması Oluştur","github.copilot.git.generateCommitMessage":"İşleme İletisi Oluştur","github.copilot.git.resolveMergeConflicts":"Yapay Zeka ile Çakışmaları Çözme","github.copilot.icon":"GitHub Copilot simgesi","github.copilot.nextEditSuggestions.allowWhitespaceOnlyChanges":"Bir sonraki düzenleme önerilerinde (NES) yalnızca boşluk değişikliklerinin önerilmesine izin verilip verilmeyeceği.","github.copilot.nextEditSuggestions.enabled":"Sonraki düzenleme önerilerinin (NES) etkinleştirilip etkinleştirilmeyeceğini belirtir.\n\nNES, son değişikliklerinize göre bir sonraki düzenlemeyi önerebilir. Sonraki düzenleme önerileri hakkında [daha fazla bilgi edinin](https://aka.ms/vscode-nes).","github.copilot.nextEditSuggestions.fixes":"Sonraki düzenleme önerileri (NES) aracılığıyla tanılama için düzeltmelerin teklif edilip edilmeyeceğini belirtir.","github.copilot.resetAutomaticCommandExecutionPrompt":"Otomatik Komut Yürütme İstemini Sıfırla","github.copilot.submenu.copilot.label":"Copilot","github.copilot.submenu.reviewComment.applyAndNext.label":"Uygula ve Sonrakine Git","github.copilot.submenu.reviewComment.discard.label":"At","github.copilot.submenu.reviewComment.discardAndNext.label":"At ve Sonrakine Git","github.copilot.tools.createAndRunTask.description":"Çalışma alanında bir görev oluşturun ve çalıştırın","github.copilot.tools.createAndRunTask.name":"Görev Oluştur ve Çalıştır","github.copilot.tools.createAndRunTask.userDescription":"Çalışma alanında bir görev oluşturun ve çalıştırın","github.copilot.tools.createNewWorkspace.name":"Yeni Çalışma Alanı Oluşturma","github.copilot.tools.createNewWorkspace.userDescription":"VS Code'da yeni bir çalışma alanı oluşturun","github.copilot.tools.getProjectSetupInfo.name":"Proje Kurulum Bilgilerini Al","github.copilot.tools.githubRepo.name":"GitHub Deposunda Ara","github.copilot.tools.githubRepo.userDescription":"İlgili kaynak kod parçacıkları için bir GitHub deposunda arama yapar. `Sahip/depo` kullanarak bir depo belirtebilirsiniz","github.copilot.tools.openEmptyFolder.name":"VS Code çalışma alanı olarak boş bir klasör açın.","github.copilot.tools.searchResults.description":"Arama görünümünde sonuçlar","github.copilot.tools.searchResults.name":"Görünüm Sonuçlarında Ara","github.copilot.viewsWelcome.chatDisabled":"GitHub Copilot Sohbeti şu anda bir kuruluş yöneticisi tarafından hesabınız için devre dışı bırakıldı. Sohbeti etkinleştirmek için kuruluş yöneticisine başvurun.\n\n[Daha Fazla Bilgi](https://docs.github.com/en/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-github-copilot-features-in-your-organization/managing-policies-for-copilot-in-your-organization)","github.copilot.viewsWelcome.contactSupport":"Hesabınızla ilgili bir sorun var gibi görünüyor. Lütfen GitHub desteğine başvurun.\n\n[Desteğe Başvurun](https://support.github.com/?editor=vscode)","github.copilot.viewsWelcome.debug":"Bir [terminal komutu](command:github.copilot.chat.startCopilotDebugCommand) kullanarak veya [etkileşimli sohbet](command:workbench.action.chat.open?%7B%22query%22%3A%22%40vscode%20%2FstartDebugging%20%22%2C%22isPartialQuery%22%3Atrue%7D).","github.copilot.viewsWelcome.enterprise":"Copilot'ı etkinleştirmek için GitHub kuruluş yöneticinize başvurun.","github.copilot.viewsWelcome.individual.expired":"Copilot aboneliğinizin süresi doldu.\n\n[Copilot Ayarlarını Gözden Geçirin](https://github.com/settings/copilot?editor=vscode)","github.copilot.viewsWelcome.offline":"Şu anda çevrimdışı durumdasınız. GitHub Copilot'ı kullanmak için lütfen İnternet'e bağlanın.\n\n[Bağlantıyı Yeniden Dene](command:github.copilot.refreshToken)","github.copilot.viewsWelcome.signIn":"GitHub Copilot tarafından desteklenen özellikleri etkinleştirmek için oturum açın.\n\n[Oturum aç](command:workbench.action.chat.triggerSetupForceSignIn)","github.copilot.viewsWelcome.switchToReleaseChannel":"GitHub Copilot Chat uzantısının Yayın Öncesi sürümü şu anda VS Code'un kararlı sürümünde desteklenmiyor. Lütfen GitHub Copilot Chat için yayın sürümüne geçin veya VS Code Insiders'ı deneyin.\n\n[Yayın Sürümüne Geçiş Yap ve Yeniden Yükle](command:runCommands?%7B%22commands%22%3A%5B%7B%22command%22%3A%22workbench.extensions.action.switchToRelease%22%2C%22args%22%3A%5B%22GitHub.copilot-chat%22%5D%7D%2C%22workbench.action.reloadWindow%22%5D%7D)\n\n[VS Code Insiders'a Geçin](https://aka.ms/vscode-insiders)","github.copilot.walkthrough.description":"Daha hızlı ve daha akıllı kod yazmak için yapay zeka çifti programlayıcınız","github.copilot.walkthrough.edits.description":"Çalışmak istediğiniz dosyaları seçmek ve yapmak istediğiniz değişiklikleri açıklamak için **Copilot Düzenlemeleri** seçeneğini kullanın. Copilot bunları doğrudan dosyalarınıza uygular.\n[Copilot ile düzenle](command:workbench.action.chat.open?%7B%22mode%22%3A%22edit%22%7D)","github.copilot.walkthrough.edits.media.altText":"Video, kullanıcının dosyaları sürükleyip ikincil kenar çubuğunda yer alan Copilot Edits giriş kutusuna bırakmasını gösteriyor. Daha sonra Copilot dosyayı kullanıcının isteğine göre güncelleştiriyor.","github.copilot.walkthrough.edits.title":"Doğal bir dil kullanarak değişiklikler yapın","github.copilot.walkthrough.firstSuggest.description":"Düzenleyicide yazarken, Copilot, başlatmış olduğu işlemi tamamlamanıza yardımcı olmak için kod önerir.","github.copilot.walkthrough.firstSuggest.media.altText":"Video, Copilot’un kullanıcının kodunu tamamlamasına yardımcı olmak için kod önerdiği farklı Copilot tamamlamalarını gösteriyor.","github.copilot.walkthrough.firstSuggest.title":"Yapay zeka tarafından önerilen kod tamamlamaları","github.copilot.walkthrough.inlineChatMac.description":"Bazen, doğrudan bir dosyanın içinde yazmak istediğiniz kodu açıklamak daha kolaydır.\nİmlecinizi yerleştirin veya bir bölümü seçin ve **Satır İçi Sohbet** seçeneğini açmak için **''Cmd+I''** tuşlarını kullanın.","github.copilot.walkthrough.inlineChatMac.media.altText":"Video, kullanıcının satır içi sohbet arabirim öğesini çağırmasını ve Copilot’tan doğal dili kullanarak dosyada bir değişiklik yapmasını istemesini gösteriyor. Daha sonra Copilot istenen değişikliği yapıyor","github.copilot.walkthrough.inlineChatMac.title":"Dosyalarınızda doğal bir dil kullanın","github.copilot.walkthrough.inlineChatNotMac.description":"Bazen, doğrudan bir dosyanın içinde yazmak istediğiniz kodu açıklamak daha kolaydır.\nİmlecinizi yerleştirin veya bir bölümü seçin ve **Satır İçi Sohbet** seçeneğini açmak için **''Ctrl+I''** tuşlarını kullanın.","github.copilot.walkthrough.inlineChatNotMac.media.altText":"Düzenleyicide satır içi Sohbet görünümü. Video, kullanıcının satır içi sohbet arabirim öğesini çağırmasını ve Copilot’tan doğal dili kullanarak dosyada bir değişiklik yapmasını istemesini gösteriyor. Daha sonra Copilot istenen değişikliği yapıyor","github.copilot.walkthrough.inlineChatNotMac.title":"Dosyalarınızda doğal bir dil kullanın","github.copilot.walkthrough.panelChat.description":"**@Çalışma alanını** kullanarak Copilot’a programlama sorularını sorun veya kodunuzla ilgili yardım alın.\n Doğrudan sohbet etmek istediğiniz her biri kendi alanında uzman olan tüm uygun sohbet katılımcılarını görmek için **@** yazın.\n[Copilot ile sohbet](command:workbench.action.chat.open?%7B%22mode%22%3A%22ask%22%7D)","github.copilot.walkthrough.panelChat.media.altText":"Kullanıcı, kod tabanını anlamak için ikincil kenar çubuğundaki Sohbet panelinde @workspace komutunu çağırır. Copilot ilgili bilgileri alıyor ve dosyalara bağlantılar içeren bir yanıt sunuyor","github.copilot.walkthrough.panelChat.title":"Kodunuz hakkında sohbet edin","github.copilot.walkthrough.setup.noAction.description":"Doğal dil aracılığıyla birden çok dosyada kod oluşturmak, hataları düzeltmek, kodunuzla ilgili sorular sormak ve çok daha fazlasını yapmak için Copilot’u kullanabilirsiniz.\n Şimdi GitHub hesabınızla [Copilot’u ücretsiz olarak](https://github.com/features/copilot/plans) sunuyoruz.","github.copilot.walkthrough.setup.signIn.description":"Doğal dil aracılığıyla birden çok dosyada kod oluşturmak, hataları düzeltmek, kodunuzla ilgili sorular sormak ve çok daha fazlasını yapmak için Copilot’ı kullanabilirsiniz.\n Şimdi GitHub hesabınızla [Ücretsiz Copilot](https://github.com/features/copilot/plans) sunuyoruz.\n\n[Copilot’ı Ücretsiz Kullanın](command:workbench.action.chat.triggerSetupForceSignIn)","github.copilot.walkthrough.setup.signIn.title":"Copilot’u ücretsiz olarak kullanmak için oturum açın","github.copilot.walkthrough.setup.signUp.description":"Doğal dil aracılığıyla birden çok dosyada kod oluşturmak, hataları düzeltmek, kodunuzla ilgili sorular sormak ve çok daha fazlasını yapmak için Copilot’ı kullanabilirsiniz.\n Şimdi GitHub hesabınızla [Ücretsiz Copilot](https://github.com/features/copilot/plans) sunuyoruz.\n\n[Copilot’ı Ücretsiz Kullanın](command:workbench.action.chat.triggerSetupForceSignIn)","github.copilot.walkthrough.setup.signUp.title":"Kullanmaya başlayın Copilot ile ücretsiz olarak deneyin","github.copilot.walkthrough.signIn.description":"Copilot'ı kullanmaya başlamak için GitHub hesabınızla oturum açın.\nDoğru GitHub hesabını kullandığınızdan emin olun. Daha sonra hesap menüsünü kullanarak da oturum açabilirsiniz.\n\n[Oturum Aç](command:github.copilot.signIn)","github.copilot.walkthrough.signIn.media.altText":"Bu kılavuz veya VS Code’un hesap menüsü aracılığıyla GitHub’da oturum açın","github.copilot.walkthrough.signIn.title":"GitHub ile oturum aç","github.copilot.walkthrough.sparkle.description":"Copilot, VS Code arayüzü boyunca yapay zeka destekli akıllı eylemlerle kodlama deneyiminizi iyileştirir.\nCopilot'ın kod değişikliklerine göre işleme mesajları ve PR açıklamaları oluşturduğu [Kaynak Kontrol görünümü](command:workbench.view.scm) bölümünde olduğu gibi $(sparkle) simgelerini arayın.\n\n[İpuçları ve Püf Noktalarını Keşfet](https://code.visualstudio.com/docs/copilot/copilot-vscode-features)","github.copilot.walkthrough.sparkle.media.altText":"Video, kaynak denetimi giriş kutusunda kıvılcım simgesine tıklanmasını ve GitHub Copilot’un otomatik olarak bir işleme iletisi oluşturmasını gösteriyor.","github.copilot.walkthrough.sparkle.title":"Akıllı eylemlere göz atın","github.copilot.walkthrough.title":"GitHub Copilot"}
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.nls.json:1:{"github.copilot.badge.signUp":"Sign up for GitHub Copilot","github.copilot.badge.star":"Star Copilot on GitHub","github.copilot.badge.youtube":"Check out GitHub on Youtube","github.copilot.badge.twitter":"Follow GitHub on Twitter","github.copilot.icon":"GitHub Copilot icon","github.copilot.command.enableEditTracing":"Enable Chat Edit Tracing","github.copilot.command.disableEditTracing":"Disable Chat Edit Tracing","github.copilot.command.explainThis":"Explain","github.copilot.command.reviewAndComment":"Review","github.copilot.command.applyReviewSuggestion":"Apply","github.copilot.command.applyReviewSuggestionAndNext":"Apply and Go to Next","github.copilot.command.discardReviewSuggestion":"Discard","github.copilot.command.discardReviewSuggestionAndNext":"Discard and Go to Next","github.copilot.command.discardAllReviewSuggestion":"Discard All","github.copilot.command.reviewStagedChanges":"Code Review - Staged Changes","github.copilot.command.reviewUnstagedChanges":"Code Review - Unstaged Changes","github.copilot.command.reviewChanges":"Code Review - Uncommitted Changes","github.copilot.command.reviewFileChange":"Review Changes","github.copilot.command.gotoPreviousReviewSuggestion":"Previous Suggestion","github.copilot.command.gotoNextReviewSuggestion":"Next Suggestion","github.copilot.command.continueReviewInInlineChat":"Discard and Copy to Inline Chat","github.copilot.command.continueReviewInChat":"View in Chat Panel","github.copilot.command.helpfulReviewSuggestion":"Helpful","github.copilot.command.unhelpfulReviewSuggestion":"Unhelpful","github.copilot.command.fixThis":"Fix","github.copilot.command.generateThis":"Generate This","github.copilot.command.generateDocs":"Generate Docs","github.copilot.command.generateTests":"Generate Tests","github.copilot.command.openUserPreferences":"Open User Preferences","github.copilot.command.sendChatFeedback":"Send Chat Feedback","github.copilot.command.buildLocalWorkspaceIndex":"Build Local Workspace Index","github.copilot.command.buildRemoteWorkspaceIndex":"Build Remote Workspace Index","github.copilot.viewsWelcome.signIn":{"message":"Sign in to enable features powered by GitHub Copilot.\n\n[Sign in](command:workbench.action.chat.triggerSetupForceSignIn)","comment":["{Locked='['}","{Locked='](command:workbench.action.chat.triggerSetupForceSignIn)'}"]},"github.copilot.viewsWelcome.individual.expired":"Your Copilot subscription has expired.\n\n[Review Copilot Settings](https://github.com/settings/copilot?editor=vscode)","github.copilot.viewsWelcome.enterprise":"Contact your GitHub organization administrator to enable Copilot.","github.copilot.viewsWelcome.offline":{"message":"You are currently offline. Please connect to the internet to use GitHub Copilot.\n\n[Retry Connection](command:github.copilot.refreshToken)","comment":["{Locked='['}","{Locked='](command:github.copilot.refreshToken)'}"]},"github.copilot.viewsWelcome.contactSupport":{"message":"There seems to be a problem with your account. Please contact GitHub support.\n\n[Contact Support](https://support.github.com/?editor=vscode)","comment":["{Locked='['}","{Locked='](https://support.github.com/?editor=vscode)'}"]},"github.copilot.viewsWelcome.chatDisabled":{"message":"GitHub Copilot Chat is currently disabled for your account by an organization administrator. Contact an organization administrator to enable chat.\n\n[Learn More](https://docs.github.com/en/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-github-copilot-features-in-your-organization/managing-policies-for-copilot-in-your-organization)","comment":["{Locked='['}","{Locked='](https://docs.github.com/en/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-github-copilot-features-in-your-organization/managing-policies-for-copilot-in-your-organization)'}"]},"github.copilot.viewsWelcome.switchToReleaseChannel":{"message":"The Pre-Release version of the GitHub Copilot Chat extension is not currently supported in the stable version of VS Code. Please switch to the release version for GitHub Copilot Chat or try VS Code Insiders.\n\n[Switch to Release Version and Reload](command:runCommands?%7B%22commands%22%3A%5B%7B%22command%22%3A%22workbench.extensions.action.switchToRelease%22%2C%22args%22%3A%5B%22GitHub.copilot-chat%22%5D%7D%2C%22workbench.action.reloadWindow%22%5D%7D)\n\n[Switch to VS Code Insiders](https://aka.ms/vscode-insiders)","comment":["{Locked='['}","{Locked='](command:runCommands?%7B%22commands%22%3A%5B%7B%22command%22%3A%22workbench.extensions.action.switchToRelease%22%2C%22args%22%3A%5B%22GitHub.copilot-chat%22%5D%7D%2C%22workbench.action.reloadWindow%22%5D%7D)'}","{Locked='](https://aka.ms/vscode-insiders)'}"]},"github.copilot.viewsWelcome.debug":{"message":"Debug using a [terminal command](command:github.copilot.chat.startCopilotDebugCommand) or in an [interactive chat](command:workbench.action.chat.open?%7B%22query%22%3A%22%40vscode%20%2FstartDebugging%20%22%2C%22isPartialQuery%22%3Atrue%7D).","comment":["{Locked='['}","{Locked='](command:github.copilot.chat.startCopilotDebugCommand)'}","{Locked='](command:workbench.action.chat.open?%7B%22query%22%3A%22%40vscode%20%2FstartDebugging%20%22%2C%22isPartialQuery%22%3Atrue%7D)'}"]},"github.copilot.command.logWorkbenchState":"Log Workbench State","github.copilot.command.showChatLogView":"Show Chat Debug View","github.copilot.command.showOutputChannel":"Show Output Channel","github.copilot.command.showContextInspectorView":"Inspect Language Context","github.copilot.command.resetVirtualToolGroups":"Reset Virtual Tool Groups","github.copilot.command.applySuggestionWithCopilot":"Apply Suggestion","github.copilot.command.explainTerminalLastCommand":"Explain Last Terminal Command","github.copilot.command.collectWorkspaceIndexDiagnostics":"Collect Workspace Index Diagnostics","github.copilot.git.generateCommitMessage":"Generate Commit Message","github.copilot.git.resolveMergeConflicts":"Resolve Conflicts with AI","github.copilot.devcontainer.generateDevContainerConfig":"Generate Dev Container Configuration","github.copilot.config.enableCodeActions":"Controls if Copilot commands are shown as Code Actions when available","github.copilot.config.renameSuggestions.triggerAutomatically":"Controls whether Copilot generates suggestions for renaming","github.copilot.config.localeOverride":"Specify a locale that Copilot should respond in, e.g. `en` or `fr`. By default, Copilot will respond using VS Code's configured display language locale.","github.copilot.config.edits.enabled":"Whether to enable the Copilot Edits feature.","github.copilot.config.codesearch.enabled":"Whether to enable agentic codesearch when using `#codebase`.","github.copilot.nextEditSuggestions.enabled":"Whether to enable next edit suggestions (NES).\n\nNES can propose a next edit based on your recent changes. [Learn more](https://aka.ms/vscode-nes) about next edit suggestions.","github.copilot.nextEditSuggestions.fixes":"Whether to offer fixes for diagnostics via next edit suggestions (NES).","github.copilot.nextEditSuggestions.allowWhitespaceOnlyChanges":"Whether to allow whitespace-only changes be proposed by next edit suggestions (NES).","github.copilot.chat.copilotDebugCommand.enabled":"Whether the `copilot-debug` command is enabled in the terminal.","github.copilot.config.terminalChatLocation":"Controls where chat queries from the terminal should be opened.","github.copilot.config.terminalChatLocation.chatView":"Open the chat view.","github.copilot.config.terminalChatLocation.quickChat":"Open quick chat.","github.copilot.config.terminalChatLocation.terminal":"Open terminal inline chat","github.copilot.config.scopeSelection":"Whether to prompt the user to select a specific symbol scope if the user uses `/explain` and the active editor has no selection.","github.copilot.config.debugTerminalCommands":"Whether to quick fix hints in the debug terminal and the `copilot-debug` command.","github.copilot.config.debugTerminalCommandPatterns":"A list of commands for which the \"Debug Command\" quick fix action should be shown in the debug terminal.","github.copilot.config.edits.suggestRelatedFilesFromGitHistory":"Whether to suggest related files from git history for the Copilot Edits working set.","github.copilot.chat.edits.suggestRelatedFilesForTests":"Whether to suggest source files from test files for the Copilot Edits working set.","github.copilot.config.codeGeneration.instructions":"A set of instructions that will be added to Copilot requests that generate code.\nInstructions can come from: \n- a file in the workspace: `{ \"file\": \"fileName\" }`\n- text in natural language: `{ \"text\": \"Use underscore for field names.\" }`\n\nNote: Keep your instructions short and precise. Poor instructions can degrade Copilot's quality and performance.","github.copilot.config.codeGeneration.instructions.deprecated":"Use instructions files instead. See https://aka.ms/vscode-ghcp-custom-instructions for more information.","github.copilot.config.codeGeneration.useInstructionFiles":"Controls whether code instructions from `.github/copilot-instructions.md` are added to Copilot requests.\n\nNote: Keep your instructions short and precise. Poor instructions can degrade Copilot's quality and performance. [Learn more](https://aka.ms/github-copilot-custom-instructions) about customizing Copilot.","github.copilot.config.codeGeneration.instruction.text":"A text instruction that will be added to Copilot requests that generate code. Optionally, you can specify a language for the instruction.","github.copilot.config.codeGeneration.instruction.file":"A path to a file that will be added to Copilot requests that generate code. Optionally, you can specify a language for the instruction.","github.copilot.config.testGeneration.instructions":"A set of instructions that will be added to Copilot requests that generate tests.\nInstructions can come from: \n- a file in the workspace: `{ \"file\": \"fileName\" }`\n- text in natural language: `{ \"text\": \"Use underscore for field names.\" }`\n\nNote: Keep your instructions short and precise. Poor instructions can degrade Copilot's quality and performance.","github.copilot.config.testGeneration.instructions.deprecated":"Use instructions files instead. See https://aka.ms/vscode-ghcp-custom-instructions for more information.","github.copilot.config.experimental.testGeneration.instruction.text":"A text instruction that will be added to Copilot requests that generate tests. Optionally, you can specify a language for the instruction.","github.copilot.config.experimental.testGeneration.instruction.file":"A path to a file that will be added to Copilot requests that generate tests. Optionally, you can specify a language for the instruction.","github.copilot.config.reviewAgent.enabled":"Enables the code review agent.","github.copilot.config.reviewSelection.enabled":"Enables code review on current selection.","github.copilot.config.reviewSelection.instructions":"A set of instructions that will be added to Copilot requests that provide code review for the current selection.\nInstructions can come from: \n- a file in the workspace: `{ \"file\": \"fileName\" }`\n- text in natural language: `{ \"text\": \"Use underscore for field names.\" }`\n\nNote: Keep your instructions short and precise. Poor instructions can degrade Copilot's effectiveness.","github.copilot.config.reviewSelection.instruction.text":"A text instruction that will be added to Copilot requests that provide code review for the current selection. Optionally, you can specify a language for the instruction.","github.copilot.config.reviewSelection.instruction.file":"A path to a file that will be added to Copilot requests that provide code review for the current selection. Optionally, you can specify a language for the instruction.","github.copilot.config.commitMessageGeneration.instructions":"A set of instructions that will be added to Copilot requests that generate commit messages.\nInstructions can come from: \n- a file in the workspace: `{ \"file\": \"fileName\" }`\n- text in natural language: `{ \"text\": \"Use conventional commit message format.\" }`\n\nNote: Keep your instructions short and precise. Poor instructions can degrade Copilot's quality and performance.","github.copilot.config.commitMessageGeneration.instruction.text":"Text instructions that will be added to Copilot requests that generate commit messages.","github.copilot.config.commitMessageGeneration.instruction.file":"A path to a file with instructions that will be added to Copilot requests that generate commit messages.","github.copilot.config.pullRequestDescriptionGeneration.instructions":"A set of instructions that will be added to Copilot requests that generate pull request titles and descriptions.\nInstructions can come from: \n- a file in the workspace: `{ \"file\": \"fileName\" }`\n- text in natural language: `{ \"text\": \"Always include a list of key changes.\" }`\n\nNote: Keep your instructions short and precise. Poor instructions can degrade Copilot's quality and performance.","github.copilot.config.pullRequestDescriptionGeneration.instruction.text":"Text instructions that will be added to Copilot requests that generate pull request titles and descriptions.","github.copilot.config.pullRequestDescriptionGeneration.instruction.file":"A path to a file with instructions that will be added to Copilot requests that generate pull request titles and descriptions.","github.copilot.config.generateTests.codeLens":"Show 'Generate tests' code lens for symbols that are not covered by current test coverage information.","github.copilot.config.notebook.followCellExecution":"Controls whether the currently executing cell is revealed into the viewport upon execution from Copilot.","github.copilot.config.notebook.enhancedNextEditSuggestions":"Controls whether to use an enhanced approach for generating next edit suggestions in notebook cells.","github.copilot.chat.editor.temporalContext.enabled":"When making inline chat request whether to include recently viewed and edited files with Copilot requests.","github.copilot.config.imageUpload.enabled":"Enables the use of image upload URLs in chat requests instead of raw base64 strings.","github.copilot.chat.edits.temporalContext.enabled":"When making edits request whether to include recently viewed and edited files with Copilot requests.","github.copilot.config.startDebugging.enabled":"Enables the `/startDebugging` intent in panel chat. Generates or finds launch config to match the query (if any), project structure, and more.","github.copilot.config.agent.thinkingTool":"Enables the thinking tool that allows Copilot to think deeply about your request before generating a response in agent mode.","github.copilot.config.setupTests.enabled":"Enables the `/setupTests` intent and prompting in `/tests` generation.","github.copilot.config.byok.ollamaEndpoint":"The endpoint to use for the Ollama when accessed via bring your own key. Defaults to localhost.","github.copilot.config.virtualTools.threshold":"This setting defines the tool count over which virtual tools should be used. Virtual tools group similar sets of tools together and they allow the model to activate them on-demand. Certain tool groups will optimistically be pre-activated. We are actively developing this feature and you experience degraded tool calling once the threshold is hit.\n\nMay be set to `0` to disable virtual tools.","github.copilot.config.alternateGptPrompt.enabled":"Enables an experimental alternate prompt for GPT models instead of the default prompt.","github.copilot.config.gpt5AlternatePrompt":"Specifies an experimental alternate prompt to use for GPT-5 models.","github.copilot.config.gpt5CodexAlternatePrompt":"Specifies an experimental alternate prompt to use for the GPT-5-Codex model.","github.copilot.config.grokCodeAlternatePrompt":"Specifies an experimental alternate prompt to use for Grok Code models.","github.copilot.config.claudeSonnet45AlternatePrompt":"Specifies an experimental alternate prompt to use for Claude Sonnet 4.5.","github.copilot.command.fixTestFailure":"Fix Test Failure","copilot.description":"Ask or edit in context","copilot.edits.description":"Edit files in your workspace","copilot.agent.description":"Edit files in your workspace in agent mode","copilot.workspace.description":"Ask about your workspace","copilot.workspace.sampleRequest":"How do I build this project?","copilot.workspace.explain.description":"Explain how the code in your active editor works","copilot.workspace.edit.description":"Edit files in your workspace","copilot.workspace.review.description":"Review the selected code in your active editor","copilot.workspace.edit.inline.description":"Edit the selected code in your active editor","copilot.workspace.generate.description":"Generate new code","copilot.workspace.doc.description":"Add documentation comment for this symbol","copilot.workspace.tests.description":"Generate unit tests for the selected code","copilot.workspace.fix.description":"Propose a fix for the problems in the selected code","copilot.workspace.fix.sampleRequest":"There is a problem in this code. Rewrite the code to show it with the bug fixed.","copilot.workspace.new.description":"Scaffold code for a new file or project in a workspace","copilot.workspace.new.sampleRequest":"Create a RESTful API server using typescript","copilot.workspace.newNotebook.description":"Create a new Jupyter Notebook","copilot.workspace.newNotebook.sampleRequest":"How do I create a notebook to load data from a csv file?","copilot.workspace.semanticSearch.description":"Find relevant code to your query","copilot.workspace.semanticSearch.sampleRequest":"Where is the toolbar code?","copilot.vscode.description":"Ask questions about VS Code","copilot.workspaceSymbols.tool.description":"Search for workspace symbols using language services.","copilot.listCodeUsages.tool.description":"Find references, definitions, and other usages of a symbol","copilot.codebase.tool.description":"Find relevant file chunks, symbols, and other information in your codebase","copilot.vscode.tool.description":"Use VS Code API references to answer questions about VS Code extension development.","copilot.testFailure.tool.description":"Includes information about the last unit test failure","copilot.vscode.sampleRequest":"What is the command to open the integrated terminal?","copilot.vscode.api.description":"Ask about VS Code extension development","copilot.vscode.api.sampleRequest":"How do I add text to the status bar?","copilot.vscode.search.description":"Generate query parameters for workspace search","copilot.vscode.search.sampleRequest":"Search for 'foo' in all files under my 'src' directory","copilot.vscode.startDebugging.description":"Generate launch config and start debugging in VS Code (Experimental)","copilot.vscode.startDebugging.sampleRequest":"Attach to node app at port 9229","copilot.vscode.setupTests.description":"Set up tests in your project (Experimental)","copilot.vscode.setupTests.sampleRequest":"add playwright tests to my project","copilot.terminal.description":"Ask about commands","copilot.terminalPanel.description":"Ask how to do something in the terminal","copilot.terminal.sampleRequest":"How do I view all files within a directory including sub-directories?","copilot.terminal.explain.description":"Explain something in the terminal","copilot.terminal.explain.sampleRequest":"Explain the last command","github.copilot.submenu.copilot.label":"Copilot","github.copilot.submenu.reviewComment.applyAndNext.label":"Apply and Go to Next","github.copilot.submenu.reviewComment.discardAndNext.label":"Discard and Go to Next","github.copilot.submenu.reviewComment.discard.label":"Discard","github.copilot.config.useProjectTemplates":"Use relevant GitHub projects as starter projects when using `/new`","github.copilot.chat.attachFile":"Add File to Chat","github.copilot.chat.attachSelection":"Add Selection to Chat","github.copilot.command.collectDiagnostics":"Chat Diagnostics","github.copilot.command.inlineEdit.clearCache":"Clear Next Edit Cache","github.copilot.command.inlineEdit.reportNotebookNESIssue":"Report Notebook Next Edit Issue","github.copilot.command.showNotebookLog":"Show Chat Log Notebook","github.copilot.resetAutomaticCommandExecutionPrompt":"Reset Automatic Command Execution Prompt","github.copilot.command.generateSTest":"Generate STest From Last Chat Request","github.copilot.command.generateConfiguration":"Generate Debug Configuration","github.copilot.command.openWalkthrough":"Open Walkthrough","github.copilot.walkthrough.title":"GitHub Copilot","github.copilot.walkthrough.description":"Your AI pair programmer to write code faster and smarter","github.copilot.command.refreshClaudeCodeSessions":"Refresh Claude Code Sessions","github.copilot.walkthrough.signIn.title":"Sign in with GitHub","github.copilot.walkthrough.signIn.description":"To get started with Copilot, sign in with your GitHub account.\nMake sure you're using the correct GitHub account. You can also sign in later using the account menu.\n\n[Sign In](command:github.copilot.signIn)","github.copilot.walkthrough.signIn.media.altText":"Sign in to GitHub via this walkthrough or VS Code's account menu","github.copilot.walkthrough.setup.signIn.title":"Sign in to use Copilot for free","github.copilot.walkthrough.setup.signIn.description":"You can use Copilot to generate code across multiple files, fix errors, ask questions about your code and much more using natural language.\n We now offer [Copilot for free](https://github.com/features/copilot/plans) with your GitHub account.\n\n[Use Copilot for Free](command:workbench.action.chat.triggerSetupForceSignIn)","github.copilot.walkthrough.setup.signUp.title":"Get started with Copilot for free","github.copilot.walkthrough.setup.signUp.description":"You can use Copilot to generate code across multiple files, fix errors, ask questions about your code and much more using natural language.\n We now offer [Copilot for free](https://github.com/features/copilot/plans) with your GitHub account.\n\n[Use Copilot for Free](command:workbench.action.chat.triggerSetupForceSignIn)","github.copilot.walkthrough.setup.noAction.description":"You can use Copilot to generate code across multiple files, fix errors, ask questions about your code and much more using natural language.\n We now offer [Copilot for free](https://github.com/features/copilot/plans) with your GitHub account.","github.copilot.walkthrough.firstSuggest.title":"AI-suggested code completions","github.copilot.walkthrough.firstSuggest.description":"As you type in the editor, Copilot suggests code to help you complete what you started.","github.copilot.walkthrough.firstSuggest.media.altText":"The video shows different Copilot completions, where Copilot suggests code to help the user complete their code","github.copilot.walkthrough.panelChat.title":"Chat about your code","github.copilot.walkthrough.panelChat.description":"Ask Copilot programming questions or get help with your code using **@workspace**.\n Type **@** to see all available chat participants that you can chat with directly, each with their own expertise.\n[Chat with Copilot](command:workbench.action.chat.open?%7B%22mode%22%3A%22ask%22%7D)","github.copilot.walkthrough.panelChat.media.altText":"The user invokes @workspace in the Chat panel in the secondary sidebar to understand the code base. Copilot retrieves the relevant information and provides a response with links to the files","github.copilot.walkthrough.inlineChatNotMac.title":"Use natural language in your files","github.copilot.walkthrough.inlineChatNotMac.description":"Sometimes, it's easier to describe the code you want to write directly within a file.\nPlace your cursor or make a selection and use **``Ctrl+I``** to open **Inline Chat**.","github.copilot.walkthrough.inlineChatNotMac.media.altText":"Inline Chat view in the editor. The video shows the user invoking the inline chat widget and asking Copilot to make a change in the file using natural language. Copilot then makes the requested change","github.copilot.walkthrough.inlineChatMac.title":"Use natural language in your files","github.copilot.walkthrough.inlineChatMac.description":"Sometimes, it's easier to describe the code you want to write directly within a file.\nPlace your cursor or make a selection and use **``Cmd+I``** to open **Inline Chat**.","github.copilot.walkthrough.inlineChatMac.media.altText":"The video shows the user invoking the inline chat widget and asking Copilot to make a change in the file using natural language. Copilot then makes the requested change","github.copilot.walkthrough.edits.title":"Make changes using natural language","github.copilot.walkthrough.edits.description":"Use **Copilot Edits** to select files you want to work with and describe changes you want to make. Copilot applies them directly to your files.\n[Edit with Copilot](command:workbench.action.chat.open?%7B%22mode%22%3A%22edit%22%7D)","github.copilot.walkthrough.edits.media.altText":"The video shows the user dragging and dropping files into the Copilot Edits input box located in the secondary sidebar. Copilot then updates the file according to the user’s request","github.copilot.walkthrough.sparkle.title":"Look out for smart actions","github.copilot.walkthrough.sparkle.description":"Copilot enhances your coding experience with AI-powered smart actions throughout the VS Code interface.\nLook for $(sparkle) icons, such as in the [Source Control view](command:workbench.view.scm), where Copilot generates commit messages and PR descriptions based on code changes.\n\n[Discover Tips and Tricks](https://code.visualstudio.com/docs/copilot/copilot-vscode-features)","github.copilot.walkthrough.sparkle.media.altText":"The video shows the sparkle icon in the source control input box being clicked, triggering GitHub Copilot to generate a commit message automatically","github.copilot.chat.completionContext.typescript.mode":"The execution mode of the TypeScript Copilot context provider.","github.copilot.chat.languageContext.typescript.enabled":"Enables the TypeScript language context provider for inline completions","github.copilot.chat.languageContext.typescript.items":"Controls which kind of items are included in the TypeScript language context provider.","github.copilot.chat.languageContext.typescript.includeDocumentation":"Controls whether to include documentation comments in the generated code snippets.","github.copilot.chat.languageContext.typescript.cacheTimeout":"The cache population timeout for the TypeScript language context provider in milliseconds. The default is 500 milliseconds.","github.copilot.chat.languageContext.fix.typescript.enabled":"Enables the TypeScript language context provider for /fix commands","github.copilot.chat.languageContext.inline.typescript.enabled":"Enables the TypeScript language context provider for inline chats (both generate and edit)","github.copilot.command.rerunWithCopilotDebug":"Debug Last Terminal Command","github.copilot.config.enableUserPreferences":"Enable remembering user preferences in agent mode.","github.copilot.tools.createAndRunTask.name":"Create and Run Task","github.copilot.tools.createAndRunTask.description":"Create and run a task in the workspace","github.copilot.tools.createAndRunTask.userDescription":"Create and run a task in the workspace","github.copilot.config.newWorkspaceCreation.enabled":"Whether to enable new agentic workspace creation.","github.copilot.config.newWorkspace.useContext7":"Whether to use the [Context7](command:github.copilot.mcp.viewContext7) tools to scaffold project for new workspace creation.","github.copilot.config.editsNewNotebook.enabled":"Whether to enable the new notebook tool in Copilot Edits.","github.copilot.config.notebook.inlineEditAgent.enabled":"Enable agent-like behavior from the notebook inline chat widget.","github.copilot.config.summarizeAgentConversationHistory.enabled":"Whether to auto-summarize agent conversation history once the context window is filled.","github.copilot.tools.createNewWorkspace.name":"Create New Workspace","github.copilot.tools.openEmptyFolder.name":"Open an empty folder as VS Code workspace","github.copilot.tools.getProjectSetupInfo.name":"Get Project Setup Info","github.copilot.tools.searchResults.name":"Search View Results","github.copilot.tools.searchResults.description":"The results from the search view","github.copilot.tools.githubRepo.name":"Search GitHub Repository","github.copilot.tools.githubRepo.userDescription":"Searches a GitHub repository for relevant source code snippets. You can specify a repository using `owner/repo`","github.copilot.config.autoFix":"Automatically fix diagnostics for edited files.","github.copilot.chat.virtualTools.enabled":"Automatically group large number of language model tools to improve tool calling and avoid model limitations.","github.copilot.tools.createNewWorkspace.userDescription":"Scaffold a new workspace in VS Code","copilot.tools.errors.description":"Check errors for a particular file","copilot.tools.applyPatch.description":"Edit text files in the workspace","copilot.tools.openSimpleBrowser.description":"Preview a locally hosted website in the Simple Browser","copilot.tools.findTestFiles.description":"For a source code file, find the file that contains the tests. For a test file, find the file that contains the code under test","copilot.tools.getDocInfo.description":"For a symbol like a class or function, find the information about how to document it","copilot.tools.changes.description":"Get diffs of changed files","copilot.tools.newJupyterNotebook.description":"Create a new Jupyter Notebook","copilot.tools.runNotebookCell.description":"Trigger the execution of a cell in a notebook file","copilot.tools.getNotebookCellOutput.description":"Read the output of a previously executed cell","copilot.tools.fetchWebPage.description":"Fetch the main content from a web page. You should include the URL of the page you want to fetch.","copilot.tools.searchCodebase.name":"Codebase","copilot.tools.searchWorkspaceSymbols.name":"Workspace Symbols","copilot.tools.listCodeUsages.name":"Find Usages","copilot.tools.getVSCodeAPI.name":"Get VS Code API References","copilot.tools.think.name":"Think","copilot.tools.findFiles.name":"Find Files","copilot.tools.findTextInFiles.name":"Find Text In Files","copilot.tools.applyPatch.name":"Apply Patch","copilot.tools.readFile.name":"Read File","copilot.tools.listDirectory.name":"List Dir","copilot.tools.getTaskOutput.name":"Get Task Output","copilot.tools.getErrors.name":"Get Problems","copilot.tools.readProjectStructure.name":"Project Structure","copilot.tools.getChangedFiles.name":"Git Changes","copilot.tools.testFailure.name":"Test Failure","copilot.tools.updateUserPreferences.name":"Update User Preferences","copilot.tools.openSimpleBrowser.name":"Open Simple Browser","copilot.tools.createFile.name":"Create File","copilot.tools.createFile.description":"Create new files","copilot.tools.insertEdit.name":"Edit File","copilot.tools.replaceString.name":"Replace String in File","copilot.tools.multiReplaceString.name":"Multi-Replace String in Files","copilot.tools.editNotebook.name":"Edit Notebook","copilot.tools.runNotebookCell.name":"Run Notebook Cell","copilot.tools.getNotebookCellOutput.name":"Get Notebook Cell Output","copilot.tools.fetchWebPage.name":"Fetch Web Page","copilot.tools.findTestFiles.name":"Find Test Files","copilot.tools.getDocInfo.name":"Doc Info","copilot.tools.createDirectory.name":"Create Directory","copilot.tools.createDirectory.description":"Create new directories in your workspace","github.copilot.config.agent.currentEditorContext.enabled":"When enabled, Copilot will include the name of the current active editor in the context for agent mode.","github.copilot.config.customInstructionsInSystemMessage":"When enabled, custom instructions and mode instructions will be appended to the system message instead of a user message.","copilot.toolSet.editing.description":"Edit files in your workspace","copilot.toolSet.runCommand.description":"Run commands in the terminal","copilot.toolSet.runNotebook.description":"Run notebook cells","copilot.toolSet.search.description":"Search and read files in your workspace","copilot.toolSet.new.description":"Scaffold a new workspace with VS Code-specific configurations to compile, debug and run new projects.","copilot.toolSet.runTasks.description":"Run tasks in your workspace","github.copilot.config.useResponsesApi":"Use the Responses API instead of the Chat Completions API when supported. Enables reasoning and reasoning summaries.\n\n**Note**: This is an experimental feature that is not yet activated for all users.","github.copilot.config.responsesApiReasoningEffort":"Sets the reasoning effort used for the Responses API. Requires `#github.copilot.chat.useResponsesApi#`.","github.copilot.config.responsesApiReasoningSummary":"Sets the reasoning summary style used for the Responses API. Requires `#github.copilot.chat.useResponsesApi#`.","github.copilot.config.executePrompt.enabled":"The executePrompt tool enables the agent to execute tasks in a separate, isolated context.","github.copilot.config.completionsFetcher":"Sets the fetcher used for the inline completions.","github.copilot.config.nesFetcher":"Sets the fetcher used for the next edit suggestions."}
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.nls.pt-br.json:1:{"copilot.agent.description":"Editar arquivos no seu espaço de trabalho no modo agente","copilot.codebase.tool.description":"Encontre trechos de arquivos relevantes, símbolos e outras informações na sua base de código","copilot.description":"Perguntar ou editar no contexto","copilot.edits.description":"Editar arquivos em seu workspace","copilot.listCodeUsages.tool.description":"Localize referências, definições e outros usos de um símbolo","copilot.terminal.description":"Perguntar sobre comandos","copilot.terminal.explain.description":"Explique algo no terminal","copilot.terminal.explain.sampleRequest":"Explique o último comando","copilot.terminal.sampleRequest":"Como fazer para exibir todos os arquivos em um diretório, inclusive os subdiretórios?","copilot.terminalPanel.description":"Perguntar como fazer algo no terminal","copilot.testFailure.tool.description":"Inclui informações sobre a última falha de teste de unidade","copilot.toolSet.editing.description":"Editar arquivos em seu workspace","copilot.toolSet.new.description":"Criar a estrutura básica de um novo espaço de trabalho com configurações específicas do VS Code para compilar, depurar e executar novos projetos.","copilot.toolSet.runCommand.description":"Executar comandos no terminal","copilot.toolSet.runNotebook.description":"Executar células do notebook","copilot.toolSet.runTasks.description":"Executar tarefas em seu workspace","copilot.toolSet.search.description":"Pesquise e leia arquivos no seu espaço de trabalho","copilot.tools.applyPatch.description":"Editar arquivos de texto no workspace","copilot.tools.applyPatch.name":"Aplicar Patch","copilot.tools.changes.description":"Obter comparações de arquivos alterados","copilot.tools.createDirectory.description":"Criar novos diretórios no seu espaço de trabalho","copilot.tools.createDirectory.name":"Criar Diretório","copilot.tools.createFile.description":"Criar novos arquivos","copilot.tools.createFile.name":"Criar Arquivo","copilot.tools.editNotebook.name":"Editar Bloco de anotações","copilot.tools.errors.description":"Verificar erros de um arquivo específico","copilot.tools.fetchWebPage.description":"Buscar o conteúdo principal de uma página da Web. Você deve incluir a URL da página que deseja buscar.","copilot.tools.fetchWebPage.name":"Buscar Página da Web","copilot.tools.findFiles.name":"Localizar Arquivos","copilot.tools.findTestFiles.description":"Para um arquivo de código-fonte, localize o arquivo que contém os testes. Para um arquivo de teste, localize o arquivo que contém o código em teste","copilot.tools.findTestFiles.name":"Localizar Arquivos de Teste","copilot.tools.findTextInFiles.name":"Localizar texto em arquivos","copilot.tools.getChangedFiles.name":"Alterações do Git","copilot.tools.getDocInfo.description":"Para um símbolo como uma classe ou função, localize as informações sobre como documentá-lo","copilot.tools.getDocInfo.name":"Informações do Documento","copilot.tools.getErrors.name":"Obter Problemas","copilot.tools.getNotebookCellOutput.description":"Leia a saída de uma célula executada anteriormente","copilot.tools.getNotebookCellOutput.name":"Obter a Saída da Célula do Notebook","copilot.tools.getTaskOutput.name":"Obter Saída da Tarefa","copilot.tools.getVSCodeAPI.name":"Obter VS Code de API","copilot.tools.insertEdit.name":"Editar arquivo","copilot.tools.listCodeUsages.name":"Localizar usos","copilot.tools.listDirectory.name":"Listar Diretório","copilot.tools.multiReplaceString.name":"Substituição múltipla de cadeias de caracteres em arquivos","copilot.tools.newJupyterNotebook.description":"Criar um novo Jupyter Notebook","copilot.tools.openSimpleBrowser.description":"Visualizar um site hospedado localmente no Navegador Simples","copilot.tools.openSimpleBrowser.name":"Abrir Navegador Simples","copilot.tools.readFile.name":"Ler Arquivo","copilot.tools.readProjectStructure.name":"Estrutura do Projeto","copilot.tools.replaceString.name":"Substituir Cadeia de Caracteres no Arquivo","copilot.tools.runNotebookCell.description":"Disparar a execução de uma célula em um arquivo de notebook","copilot.tools.runNotebookCell.name":"Executar Célula do Notebook","copilot.tools.searchCodebase.name":"Base de código","copilot.tools.searchWorkspaceSymbols.name":"Símbolos do Workspace","copilot.tools.testFailure.name":"Falha de teste","copilot.tools.think.name":"Pensar","copilot.tools.updateUserPreferences.name":"Atualizar Preferências do Usuário","copilot.vscode.api.description":"Pergunte sobre o desenvolvimento de extensões do VS Code","copilot.vscode.api.sampleRequest":"Como fazer para adicionar texto à barra de status?","copilot.vscode.description":"Faça perguntas sobre o VS Code","copilot.vscode.sampleRequest":"Qual é o comando para abrir o terminal integrado?","copilot.vscode.search.description":"Gerar parâmetros de consulta para pesquisa do workspace","copilot.vscode.search.sampleRequest":"Procure por “foo” em todos os arquivos no meu diretório “src”","copilot.vscode.setupTests.description":"Configurar testes em seu projeto (Experimental)","copilot.vscode.setupTests.sampleRequest":"adicionar testes com o Playwright ao meu projeto","copilot.vscode.startDebugging.description":"Gerar configuração de inicialização e iniciar a depuração no VS Code (Experimental)","copilot.vscode.startDebugging.sampleRequest":"Anexar ao aplicativo de nó na porta 9229","copilot.vscode.tool.description":"Use as referências de API do VS Code para responder a perguntas sobre o desenvolvimento de extensões do VS Code.","copilot.workspace.description":"Perguntar sobre seu workspace","copilot.workspace.doc.description":"Adicionar comentário de documentação para este símbolo","copilot.workspace.edit.description":"Editar arquivos em seu workspace","copilot.workspace.edit.inline.description":"Edite o código selecionado no editor ativo","copilot.workspace.explain.description":"Explique como funciona o código no seu editor ativo","copilot.workspace.fix.description":"Propor uma correção para os problemas no código selecionado","copilot.workspace.fix.sampleRequest":"Há um problema neste código. Reescreva o código para mostrá-lo com o bug corrigido.","copilot.workspace.generate.description":"Gerar novo código","copilot.workspace.new.description":"Código de scaffold para um novo arquivo ou projeto em um espaço de trabalho","copilot.workspace.new.sampleRequest":"Crie um servidor API RESTful usando TypeScript","copilot.workspace.newNotebook.description":"Criar um novo Jupyter Notebook","copilot.workspace.newNotebook.sampleRequest":"Como fazer para criar um notebook para carregar dados de um arquivo csv?","copilot.workspace.review.description":"Examinar o código selecionado em seu editor ativo","copilot.workspace.sampleRequest":"Como fazer para construir este projeto?","copilot.workspace.semanticSearch.description":"Localizar código relevante para sua consulta","copilot.workspace.semanticSearch.sampleRequest":"Onde está o código da barra de ferramentas?","copilot.workspace.tests.description":"Gerar testes de unidade para o código selecionado","copilot.workspaceSymbols.tool.description":"Pesquise símbolos de workspace usando serviços de linguagem.","github.copilot.badge.signUp":"Inscreva-se no GitHub Copilot","github.copilot.badge.star":"Estrela do Copilot no GitHub","github.copilot.badge.twitter":"Seguir o GitHub no Twitter","github.copilot.badge.youtube":"Confira o GitHub no YouTube","github.copilot.chat.attachFile":"Adicionar Arquivo ao Chat","github.copilot.chat.attachSelection":"Adicionar Seleção ao Chat","github.copilot.chat.completionContext.typescript.mode":"O modo de execução do provedor de contexto do Copilot do TypeScript.","github.copilot.chat.copilotDebugCommand.enabled":"Se o comando `copilot-debug` está habilitado no terminal.","github.copilot.chat.editor.temporalContext.enabled":"Ao fazer uma solicitação de chat embutida, inclua arquivos exibidos e editados recentemente com solicitações do Copilot.","github.copilot.chat.edits.suggestRelatedFilesForTests":"Se deseja sugerir arquivos de origem dos arquivos de teste para o conjunto de trabalho de Edições do Copilot.","github.copilot.chat.edits.temporalContext.enabled":"Ao fazer edições, solicite se os arquivos exibidos e editados recentemente devem ser incluídos nas solicitações do Copilot.","github.copilot.chat.languageContext.fix.typescript.enabled":"Habilita o provedor de contexto da linguagem TypeScript para comandos /fix","github.copilot.chat.languageContext.inline.typescript.enabled":"Habilita o provedor de contexto da linguagem TypeScript para chats embutidos (gerar e editar)","github.copilot.chat.languageContext.typescript.cacheTimeout":"O tempo limite de preenchimento do cache para o provedor de contexto de linguagem TypeScript, em milissegundos. O padrão é 500 milissegundos.","github.copilot.chat.languageContext.typescript.enabled":"Habilita o provedor de contexto da linguagem TypeScript para conclusões embutidas","github.copilot.chat.languageContext.typescript.includeDocumentation":"Controla se os comentários de documentação devem ser incluídos nos snippets de código gerados.","github.copilot.chat.languageContext.typescript.items":"Controla quais variantes de itens são incluídas no provedor de contexto da linguagem de programação TypeScript.","github.copilot.command.applyReviewSuggestion":"Aplicar","github.copilot.command.applyReviewSuggestionAndNext":"Aplicar e Ir para Próximo","github.copilot.command.applySuggestionWithCopilot":"Aplicar Sugestão","github.copilot.command.buildLocalWorkspaceIndex":"Compilar Índice de Espaço de trabalho Local","github.copilot.command.buildRemoteWorkspaceIndex":"Criar o índice do espaço de trabalho remoto","github.copilot.command.collectDiagnostics":"Diagnóstico de Chat","github.copilot.command.collectWorkspaceIndexDiagnostics":"Coletar Diagnósticos de Índice do Workspace","github.copilot.command.continueReviewInChat":"Exibir no Painel de Chat","github.copilot.command.continueReviewInInlineChat":"Descartar e Copiar para Chat Embutido","github.copilot.command.disableEditTracing":"Desativar Rastreamento de Edição do Chat","github.copilot.command.discardAllReviewSuggestion":"Descartar Tudo","github.copilot.command.discardReviewSuggestion":"Descartar","github.copilot.command.discardReviewSuggestionAndNext":"Descartar e Ir para Próximo","github.copilot.command.enableEditTracing":"Ativar Rastreamento de Edição do Chat","github.copilot.command.explainTerminalLastCommand":"Explicar o Último Comando do Terminal","github.copilot.command.explainThis":"Explicar","github.copilot.command.fixTestFailure":"Corrigir Falha no Teste","github.copilot.command.fixThis":"Corrigir","github.copilot.command.generateConfiguration":"Gerar Configuração de Depuração","github.copilot.command.generateDocs":"Gerar Documentos","github.copilot.command.generateSTest":"Gerar STest da Última Solicitação de Chat","github.copilot.command.generateTests":"Gerar Testes","github.copilot.command.generateThis":"Gerar Isto","github.copilot.command.gotoNextReviewSuggestion":"Próxima Sugestão","github.copilot.command.gotoPreviousReviewSuggestion":"Sugestão Anterior","github.copilot.command.helpfulReviewSuggestion":"Útil","github.copilot.command.inlineEdit.clearCache":"Limpar Próximo Cache de Edição","github.copilot.command.inlineEdit.reportNotebookNESIssue":"Relatar Problema na Próxima Edição do Notebook","github.copilot.command.logWorkbenchState":"Registrar Estado do Workbench","github.copilot.command.openUserPreferences":"Abrir Preferências do Usuário","github.copilot.command.openWalkthrough":"Abrir Passo a passo...","github.copilot.command.refreshClaudeCodeSessions":"Atualizar sessões de código Claude","github.copilot.command.rerunWithCopilotDebug":"Depurar o Último Comando do Terminal","github.copilot.command.resetVirtualToolGroups":"Redefinir Grupos de Ferramentas Virtuais","github.copilot.command.reviewAndComment":"Examinar","github.copilot.command.reviewChanges":"Revisão de código - Alterações não confirmadas","github.copilot.command.reviewFileChange":"Revisar Alterações","github.copilot.command.reviewStagedChanges":"Revisão de código - Alterações em estágios","github.copilot.command.reviewUnstagedChanges":"Revisão de código - Alterações sem estágios","github.copilot.command.sendChatFeedback":"Enviar Comentários do Chat","github.copilot.command.showChatLogView":"Mostrar Visualização de Depuração do Chat","github.copilot.command.showContextInspectorView":"Inspecionar Contexto de Linguagem","github.copilot.command.showNotebookLog":"Mostrar Bloco de notas do Log de Chat","github.copilot.command.showOutputChannel":"Mostrar Canal de Saída","github.copilot.command.unhelpfulReviewSuggestion":"Inútil","github.copilot.config.agent.currentEditorContext.enabled":"Quando habilitado, o Copilot incluirá o nome do editor ativo atual no contexto do modo de agente.","github.copilot.config.agent.thinkingTool":"Habilita a ferramenta de raciocínio que permite que o Copilot pense profundamente sobre sua solicitação antes de gerar uma resposta no modo agente.","github.copilot.config.alternateGptPrompt.enabled":"Habilita uma solicitação alternativa experimental para modelos GPT em vez da solicitação padrão.","github.copilot.config.autoFix":"Corrija automaticamente o diagnóstico de arquivos editados.","github.copilot.config.byok.ollamaEndpoint":"O ponto de extremidade a ser usado para o Ollama quando acessado com a chave própria. Padrão para localhost.","github.copilot.config.claudeSonnet45AlternatePrompt":"Especifica um prompt alternativo experimental a ser usado para o Claude Sonnet 4.5.","github.copilot.config.codeGeneration.instruction.file":"Um caminho para um arquivo que será adicionado às solicitações do Copilot que geram código. Opcionalmente, você pode especificar um idioma para a instrução.","github.copilot.config.codeGeneration.instruction.text":"Uma instrução de texto que será adicionada às solicitações do Copilot que geram código. Opcionalmente, você pode especificar um idioma para a instrução.","github.copilot.config.codeGeneration.instructions":"Um conjunto de instruções que serão adicionadas às solicitações do Copilot que geram código.\nAs instruções podem vir de: \n— um arquivo no workspace: `{ \"file\": \"fileName\" }`\n— texto em linguagem natural: `{ \"text\": \"Use underscore for field names.\" }`\n\nObservação: mantenha suas instruções curtas e precisas. Instruções ruins podem prejudicar a qualidade e o desempenho do Copilot.","github.copilot.config.codeGeneration.instructions.deprecated":"Em vez disso, use arquivos de instruções. Consulte https://aka.ms/vscode-ghcp-custom-instructions para obter mais informações.","github.copilot.config.codeGeneration.useInstructionFiles":"Controla se as instruções de código de `.github/copilot-instructions.md` são adicionadas às solicitações do Copilot.\n\nObservação: Mantenha suas instruções curtas e precisas. Instruções inadequadas podem prejudicar a qualidade e o desempenho do Copilot. [Saiba mais](https://aka.ms/github-copilot-custom-instructions) sobre como personalizar o Copilot.","github.copilot.config.codesearch.enabled":"Se a pesquisa de códigos do agentic deve ser habilitada ao usar `#codebase`.","github.copilot.config.commitMessageGeneration.instruction.file":"Um caminho para um arquivo com instruções que serão adicionadas às solicitações do Copilot que geram mensagens de confirmação.","github.copilot.config.commitMessageGeneration.instruction.text":"Instruções de texto que serão adicionadas às solicitações do Copilot que geram mensagens de confirmação.","github.copilot.config.commitMessageGeneration.instructions":"Um conjunto de instruções que será adicionado às solicitações do Copilot que geram mensagens de confirmação.\nAs instruções podem vir de: \n- um arquivo no espaço de trabalho: `{ \"file\": \"fileName\" }`\n– texto em idioma natural: `{ \"text\": \"Use conventional commit message format.\" }`\n\nObservação: Mantenha suas instruções curtas e precisas. Más instruções podem prejudicar a qualidade e o desempenho do Copilot.","github.copilot.config.completionsFetcher":"Define o buscador usado para as conclusões embutidas.","github.copilot.config.customInstructionsInSystemMessage":"Quando habilitadas, as instruções personalizadas e instruções de modo serão acrescentadas à mensagem do sistema em vez de uma mensagem do usuário.","github.copilot.config.debugTerminalCommandPatterns":"Uma lista de comandos para os quais a ação de correção rápida do \"Comando de Depuração\" deve ser mostrada no terminal de depuração.","github.copilot.config.debugTerminalCommands":"Se as dicas de correção rápidas devem ser encontradas no terminal de depuração e no comando 'copilot-debug'.","github.copilot.config.edits.enabled":"Se habilitar o recurso Edições do Copilot.","github.copilot.config.edits.suggestRelatedFilesFromGitHistory":"Se deve sugerir arquivos relacionados do histórico do Git para o conjunto de trabalho de Edições do Copilot.","github.copilot.config.editsNewNotebook.enabled":"Se a nova ferramenta de notebook em Edições do Copilot deve ser habilitada.","github.copilot.config.enableCodeActions":"Controla se os comandos do Copilot serão mostrados como ações de código quando disponíveis","github.copilot.config.enableUserPreferences":"Habilitar a memorização de preferências do usuário no modo de agente.","github.copilot.config.executePrompt.enabled":"A ferramenta executePrompt permite que o agente execute tarefas em um contexto separado e isolado.","github.copilot.config.experimental.testGeneration.instruction.file":"Um caminho para um arquivo que será adicionado às solicitações do Copilot que geram testes. Opcionalmente, você pode especificar um idioma para a instrução.","github.copilot.config.experimental.testGeneration.instruction.text":"Uma instrução de texto que será adicionada às solicitações do Copilot que geram testes. Opcionalmente, você pode especificar um idioma para a instrução.","github.copilot.config.generateTests.codeLens":"Mostrar a lente de código 'Gerar testes' para símbolos que não são cobertos pelas informações de cobertura de teste atuais.","github.copilot.config.gpt5AlternatePrompt":"Especifica uma solicitação alternativa experimental a ser usada para modelos GPT-5.","github.copilot.config.gpt5CodexAlternatePrompt":"Especifica um prompt alternativo experimental a ser usado para o modelo GPT-5-Codex.","github.copilot.config.grokCodeAlternatePrompt":"Especifica uma solicitação alternativa experimental a ser usada para modelos Grok Code.","github.copilot.config.imageUpload.enabled":"Habilita o uso de URLs de upload de imagem em solicitações de chat em vez de cadeias de caracteres base64 brutas.","github.copilot.config.localeOverride":"Especifique uma localidade na qual o Copilot deve responder, por exemplo. `en` ou `fr`. Por padrão, o Copilot responderá usando a localidade do idioma de exibição configurada do VS Code.","github.copilot.config.nesFetcher":"Define o buscador usado para as próximas sugestões de edição.","github.copilot.config.newWorkspace.useContext7":"Se as ferramentas [Context7](command:github.copilot.mcp.viewContext7) devem ser usadas para estruturar o projeto para a criação do novo workspace.","github.copilot.config.newWorkspaceCreation.enabled":"Se deve habilitar a criação de um novo workspace agêntico.","github.copilot.config.notebook.enhancedNextEditSuggestions":"Controla se deve usar uma abordagem aprimorada para gerar as próximas sugestões de edição nas células do notebook.","github.copilot.config.notebook.followCellExecution":"Controla se a célula em execução no momento é revelada no visor após a execução do Copilot.","github.copilot.config.notebook.inlineEditAgent.enabled":"Habilitar comportamento semelhante ao de agente no widget de chat embutido do notebook.","github.copilot.config.pullRequestDescriptionGeneration.instruction.file":"Um caminho para um arquivo com instruções que serão adicionadas às solicitações do Copilot que geram títulos e descrições de pull requests.","github.copilot.config.pullRequestDescriptionGeneration.instruction.text":"Instruções de texto que serão adicionadas às solicitações do Copilot que geram títulos e descrições de solicitação pull.","github.copilot.config.pullRequestDescriptionGeneration.instructions":"Um conjunto de instruções que serão adicionadas às solicitações do Copilot que geram títulos e descrições de pull requests.\nAs instruções podem vir de: \n– um arquivo no espaço de trabalho: `{ \"file\": \"fileName\" }`\n– texto em linguagem natural: `{ \"text\": \"Sempre inclua uma lista das principais alterações\". }`\n\nObservação: mantenha suas instruções curtas e precisas. Instruções ruins podem prejudicar a qualidade e o desempenho do Copilot.","github.copilot.config.renameSuggestions.triggerAutomatically":"Controla se o Copilot gera sugestões para renomeação","github.copilot.config.responsesApiReasoningEffort":"Define o esforço de raciocínio usado para a API de Respostas. Requer `#github.copilot.chat.useResponsesApi#`.","github.copilot.config.responsesApiReasoningSummary":"Define o estilo de resumo de raciocínio usado para a API de Respostas. Requer `#github.copilot.chat.useResponsesApi#`.","github.copilot.config.reviewAgent.enabled":"Habilita o agente de revisão de código.","github.copilot.config.reviewSelection.enabled":"Habilita revisão de código na seleção atual.","github.copilot.config.reviewSelection.instruction.file":"Um caminho para um arquivo que será adicionado às solicitações do Copilot que fornecem revisão de código para a seleção atual. Opcionalmente, você pode especificar uma linguagem para a instrução.","github.copilot.config.reviewSelection.instruction.text":"Uma instrução de texto que será adicionada às solicitações do Copilot que fornecem revisão de código para a seleção atual. Opcionalmente, você pode especificar uma linguagem para a instrução.","github.copilot.config.reviewSelection.instructions":"Um conjunto de instruções que será adicionado às solicitações do Copilot que fornecem revisão de código para a seleção atual.\nAs instruções podem vir de: \n- um arquivo no espaço de trabalho: `{ \"file\": \"fileName\" }`\n- texto em linguagem natural: `{ \"text\": \"Use underscore for field names.\" }`\n\nObservação: Mantenha suas instruções curtas e precisas. Instruções ruins podem degradar a eficácia do Copilot.","github.copilot.config.scopeSelection":"Se o usuário deve ser solicitado a selecionar um escopo de símbolo específico se ele usar `/explain` e o editor ativo não tiver nenhuma seleção.","github.copilot.config.setupTests.enabled":"Habilita a intenção e o prompt '/setupTests' na geração de '/tests'.","github.copilot.config.startDebugging.enabled":"Habilita a intent '/startDebugging' no chat do painel. Gera ou localiza a configuração de inicialização para corresponder à consulta (se houver), à estrutura do projeto e muito mais.","github.copilot.config.summarizeAgentConversationHistory.enabled":"Se deseja resumir automaticamente o histórico de conversas do agente depois que a janela de contexto for preenchida.","github.copilot.config.terminalChatLocation":"Controla onde as consultas de chat do terminal devem ser abertas.","github.copilot.config.terminalChatLocation.chatView":"Abra o modo de exibição de chat.","github.copilot.config.terminalChatLocation.quickChat":"Abra o chat rápido.","github.copilot.config.terminalChatLocation.terminal":"Abrir o chat embutido do terminal","github.copilot.config.testGeneration.instructions":"Um conjunto de instruções que será adicionado às solicitações do Copilot que geram testes.\nAs instruções podem vir de: \n— um arquivo no workspace: `{ \"file\": \"fileName\" }`\n— texto em linguagem natural: `{ \"text\": \"Use underscore for field names.\" }`\n\nObservação: mantenha suas instruções curtas e precisas. Instruções ruins podem prejudicar a qualidade e o desempenho do Copilot.","github.copilot.config.testGeneration.instructions.deprecated":"Em vez disso, use arquivos de instruções. Consulte https://aka.ms/vscode-ghcp-custom-instructions para obter mais informações.","github.copilot.config.useProjectTemplates":"Usar projetos relevantes do GitHub como projetos de início ao utilizar \"/new\"","github.copilot.config.useResponsesApi":"Usar a API de Respostas em vez da API de Conclusões de Chat quando houver suporte. Habilitar raciocínio e resumos de raciocínio.\n\n**Observação**: este é um recurso experimental que ainda não está ativado para todos os usuários.","github.copilot.config.virtualTools.threshold":"Essa configuração define a quantidade de ferramentas acima da qual as ferramentas virtuais devem ser utilizadas. As ferramentas virtuais agrupam conjuntos semelhantes de ferramentas e permitem que o modelo as ative sob demanda. Determinados grupos de ferramentas serão pré-ativados de forma otimista. Estamos desenvolvendo ativamente esse recurso e você experimentará uma chamada de ferramenta degradada assim que o limite for atingido.\n\nPode ser definido como `0` para desabilitar as ferramentas virtuais.","github.copilot.devcontainer.generateDevContainerConfig":"Gerar configuração de contêiner de desenvolvimento","github.copilot.git.generateCommitMessage":"Gerar Mensagem de Confirmação","github.copilot.git.resolveMergeConflicts":"Resolver Conflitos com IA","github.copilot.icon":"Ícone do GitHub Copilot","github.copilot.nextEditSuggestions.allowWhitespaceOnlyChanges":"Se deve permitir que alterações apenas de espaço em branco sejam propostas pelas próximas sugestões de edição (NES).","github.copilot.nextEditSuggestions.enabled":"Se as sugestões de próxima edição (NES) devem ser habilitadas.\n\nO NES pode propor uma próxima edição com base em suas alterações recentes. [Saiba mais](https://aka.ms/vscode-nes) sobre próximas sugestões de edição.","github.copilot.nextEditSuggestions.fixes":"Se deseja oferecer correções para diagnóstico por meio das próximas sugestões de edição (NES).","github.copilot.resetAutomaticCommandExecutionPrompt":"Redefinir Prompt de Execução Automática de Comando","github.copilot.submenu.copilot.label":"Copilot","github.copilot.submenu.reviewComment.applyAndNext.label":"Aplicar e Ir para Próximo","github.copilot.submenu.reviewComment.discard.label":"Descartar","github.copilot.submenu.reviewComment.discardAndNext.label":"Descartar e Ir para Próximo","github.copilot.tools.createAndRunTask.description":"Criar e executar uma tarefa no espaço de trabalho","github.copilot.tools.createAndRunTask.name":"Criar e Executar Tarefa","github.copilot.tools.createAndRunTask.userDescription":"Criar e executar uma tarefa no espaço de trabalho","github.copilot.tools.createNewWorkspace.name":"Criar Novo Workspace","github.copilot.tools.createNewWorkspace.userDescription":"Crie um novo espaço de trabalho no VS Code","github.copilot.tools.getProjectSetupInfo.name":"Obter Informações de Instalação do Projeto","github.copilot.tools.githubRepo.name":"Pesquisar Repositório GitHub","github.copilot.tools.githubRepo.userDescription":"Pesquisa snippets de código-fonte relevantes em um repositório do GitHub. Você pode especificar um repositório usando \"proprietário/repositório\"","github.copilot.tools.openEmptyFolder.name":"Abra uma pasta vazia como espaço de trabalho do VS Code","github.copilot.tools.searchResults.description":"Os resultados da exibição de pesquisa","github.copilot.tools.searchResults.name":"Resultados da Exibição de Pesquisa","github.copilot.viewsWelcome.chatDisabled":"O chat do GitHub Copilot está atualmente desabilitado para sua conta por um administrador da organização. Entre em contato com um administrador da organização para habilitar o chat.\n\n[Saiba mais](https://docs.github.com/en/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-github-copilot-features-in-your-organization/managing-policies-for-copilot-in-your-organization)","github.copilot.viewsWelcome.contactSupport":"Parece haver um problema com sua conta. Entre em contato com o suporte do GitHub.\n\n[Contate o Suporte](https://support.github.com/?editor=vscode)","github.copilot.viewsWelcome.debug":"Depure usando um [comando de terminal](command:github.copilot.chat.startCopilotDebugCommand) ou em um [chat interativo](command:workbench.action.chat.open?%7B%22query%22%3A%22%40vscode%20%2FstartDebugging%20%22%2C%22isPartialQuery%22%3Atrue%7D).","github.copilot.viewsWelcome.enterprise":"Contate o administrador da organização do GitHub para habilitar o Copilot.","github.copilot.viewsWelcome.individual.expired":"Sua assinatura do Copilot expirou.\n\n[Examinar configurações do Copilot](https://github.com/settings/copilot?editor=vscode)","github.copilot.viewsWelcome.offline":"Atualmente, você está offline. Conecte-se à Internet para usar o GitHub Copilot.\n\n[Repetir Conexão](command:github.copilot.refreshToken)","github.copilot.viewsWelcome.signIn":"Entre para habilitar recursos da plataforma GitHub Copilot.\n\n[Entrar](command:workbench.action.chat.triggerSetupForceSignIn)","github.copilot.viewsWelcome.switchToReleaseChannel":"No momento, não há suporte para a versão de pré-lançamento da extensão de chat do GitHub Copilot na versão estável do VS Code. Alterne para a versão de lançamento do Chat do GitHub Copilot ou tente VS Code Insiders.\n\n[Alternar para Versão de Lançamento e Recarregar](command:runCommands?%7B%22commands%22%3A%5B%7B%22command%22%3A%22workbench.extensions.action.switchToRelease%22%2C%22args%22%3A%5B%22GitHub.copilot-chat%22%5D%7D%2C%22workbench.action.reloadWindow%22%5D%7D)\n\n[Alternar para VS Code Insiders](https://aka.ms/vscode-insiders)","github.copilot.walkthrough.description":"Seu programador de pares de IA para escrever código de forma mais rápida e inteligente","github.copilot.walkthrough.edits.description":"Use **Copilot Edits** para selecionar os arquivos com os quais você quer trabalhar e descreva as alterações que você quer fazer. O Copilot irá aplicá-las diretamente aos seus arquivos.\n[Edite com o Copilot](command:workbench.action.chat.open?%7B%22mode%22%3A%22edit%22%7D)","github.copilot.walkthrough.edits.media.altText":"O vídeo mostra o usuário arrastando e soltando arquivos na caixa de entrada Edição do Copilot localizada na barra lateral secundária. Em seguida, o Copilot atualiza o arquivo de acordo com a solicitação do usuário","github.copilot.walkthrough.edits.title":"Fazer alterações usando o idioma natural","github.copilot.walkthrough.firstSuggest.description":"Conforme você digita no editor, o Copilot sugere o código para ajudá-lo a concluir o que começou.","github.copilot.walkthrough.firstSuggest.media.altText":"O vídeo mostra diferentes Finalizações do Copilot, em que o Copilot sugere código para ajudar o usuário a concluir seu código","github.copilot.walkthrough.firstSuggest.title":"Conclusões de código sugeridas por IA","github.copilot.walkthrough.inlineChatMac.description":"Às vezes, é mais fácil descrever o código que você quer escrever diretamente em um arquivo.\nColoque o cursor ou faça uma seleção e use **''Cmd+I''** para abrir **Chat embutido**.","github.copilot.walkthrough.inlineChatMac.media.altText":"O vídeo mostra o usuário invocando o widget de chat embutido e solicitando que o Copilot faça uma alteração no arquivo usando linguagem natural. Em seguida, o Copilot faz a alteração solicitada","github.copilot.walkthrough.inlineChatMac.title":"Use linguagem natural nos seus arquivos","github.copilot.walkthrough.inlineChatNotMac.description":"Às vezes, é mais fácil descrever o código que você quer escrever diretamente em um arquivo.\nColoque o cursor ou faça uma seleção e use **'Ctrl+I''** para abrir **Chat embutido**.","github.copilot.walkthrough.inlineChatNotMac.media.altText":"Modo de exibição Chat embutido no editor. O vídeo mostra o usuário invocando o widget de chat embutido e solicitando que o Copilot faça uma alteração no arquivo usando linguagem natural. Em seguida, o Copilot faz a alteração solicitada","github.copilot.walkthrough.inlineChatNotMac.title":"Use linguagem natural nos seus arquivos","github.copilot.walkthrough.panelChat.description":"Faça perguntas sobre programação ao Copilot ou obtenha ajuda com seu código usando **@workspace**.\n Digite ''@'' para ver todos os participantes disponíveis do chat com os quais você pode conversar diretamente, cada um com sua própria especialização.\n[Converse com o Copilot](command:workbench.action.chat.open?%7B%22mode%22%3A%22ask%22%7D)","github.copilot.walkthrough.panelChat.media.altText":"O usuário invoca @workspace no painel Chat na barra lateral secundária para entender a base de código. O Copilot recupera as informações relevantes e fornece uma resposta com links para os arquivos","github.copilot.walkthrough.panelChat.title":"Converse sobre seu código","github.copilot.walkthrough.setup.noAction.description":"Você pode usar o Copilot para gerar código em vários arquivos, corrigir erros, fazer perguntas sobre seu código e muito mais usando linguagem natural.\n Agora, damos [Copilot for free](https://github.com/features/copilot/plans) com sua conta do GitHub.","github.copilot.walkthrough.setup.signIn.description":"Você pode usar o Copilot para gerar código em vários arquivos, corrigir erros, fazer perguntas sobre seu código e muito mais, tudo isso usando linguagem natural.\n Agora, oferecemos o [Copilot gratuitamente](https://github.com/features/copilot/plans) com sua conta do GitHub.\n\n[Usar o Copilot gratuitamente](command:workbench.action.chat.triggerSetupForceSignIn)","github.copilot.walkthrough.setup.signIn.title":"Entre para usar o Copilot gratuitamente","github.copilot.walkthrough.setup.signUp.description":"Você pode usar o Copilot para gerar código em vários arquivos, corrigir erros, fazer perguntas sobre seu código e muito mais, tudo isso usando linguagem natural.\n Agora, oferecemos o [Copilot gratuitamente](https://github.com/features/copilot/plans) com sua conta do GitHub.\n\n[Usar o Copilot gratuitamente](command:workbench.action.chat.triggerSetupForceSignIn)","github.copilot.walkthrough.setup.signUp.title":"Comece a usar o Copilot gratuitamente","github.copilot.walkthrough.signIn.description":"Para começar a usar o Copilot, entre com sua conta do GitHub.\nVerifique se você está usando a conta correta do GitHub. Você também pode fazer login mais tarde usando o menu da conta.\n\n[Entrar](command:github.copilot.signIn)","github.copilot.walkthrough.signIn.media.altText":"Entre no GitHub por meio deste passo a passo ou do menu de conta do VS Code","github.copilot.walkthrough.signIn.title":"Entrar com o GitHub","github.copilot.walkthrough.sparkle.description":"O Copilot aprimora sua experiência de codificação com ações inteligentes da plataforma AI em toda VS Code interface.\nProcure ícones $(sparkle), como no [Source Control view](command:workbench.view.scm), em que o Copilot gera mensagens de confirmação e descrições de PR com base em alterações de código.\n\n[Discover Tips and Tricks](https://code.visualstudio.com/docs/copilot/copilot-vscode-features)","github.copilot.walkthrough.sparkle.media.altText":"O vídeo mostra o ícone de brilho na caixa de entrada do controle do código-fonte clicando, disparando o GitHub Copilot para gerar uma mensagem de confirmação automaticamente","github.copilot.walkthrough.sparkle.title":"Procure ações inteligentes","github.copilot.walkthrough.title":"GitHub Copilot"}
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.nls.zh-cn.json:1:{"copilot.agent.description":"在代理模式下编辑工作区中的文件","copilot.codebase.tool.description":"在代码库中查找相关文件区块、符号和其他信息","copilot.description":"在上下文中询问或编辑","copilot.edits.description":"编辑工作区中的文件","copilot.listCodeUsages.tool.description":"查找符号的引用、定义和其他用法","copilot.terminal.description":"询问有关命令的问题","copilot.terminal.explain.description":"解释终端中的内容","copilot.terminal.explain.sampleRequest":"解释最后一个命令","copilot.terminal.sampleRequest":"如何查看目录(包括子目录)中的所有文件?","copilot.terminalPanel.description":"询问如何在终端中执行某项操作","copilot.testFailure.tool.description":"包括有关上次单元测试失败的信息","copilot.toolSet.editing.description":"编辑工作区中的文件","copilot.toolSet.new.description":"使用 VS Code 特定配置为新工作区搭建基架，以编译、调试和运行新项目。","copilot.toolSet.runCommand.description":"在终端中运行命令","copilot.toolSet.runNotebook.description":"运行笔记本单元格","copilot.toolSet.runTasks.description":"在工作区中运行任务","copilot.toolSet.search.description":"在工作区中搜索和读取文件","copilot.tools.applyPatch.description":"编辑工作区中的文本文件","copilot.tools.applyPatch.name":"应用修补程序","copilot.tools.changes.description":"获取已更改文件的差异","copilot.tools.createDirectory.description":"在工作区中创建新目录","copilot.tools.createDirectory.name":"创建目录","copilot.tools.createFile.description":"创建新文件","copilot.tools.createFile.name":"创建文件","copilot.tools.editNotebook.name":"编辑笔记本","copilot.tools.errors.description":"检查特定文件的错误","copilot.tools.fetchWebPage.description":"从网页中提取主要内容。应包括要提取页面的 URL。","copilot.tools.fetchWebPage.name":"提取网页","copilot.tools.findFiles.name":"查找文件","copilot.tools.findTestFiles.description":"对于源代码文件，请查找包含测试的文件。对于测试文件，请查找包含正在测试的代码的文件","copilot.tools.findTestFiles.name":"查找测试文件","copilot.tools.findTextInFiles.name":"在文件中查找文本","copilot.tools.getChangedFiles.name":"Git 更改","copilot.tools.getDocInfo.description":"对于类或函数等符号，请查找有关如何记录它的信息","copilot.tools.getDocInfo.name":"文档信息","copilot.tools.getErrors.name":"获取问题","copilot.tools.getNotebookCellOutput.description":"读取以前执行的单元格的输出","copilot.tools.getNotebookCellOutput.name":"获取笔记本单元格输出","copilot.tools.getTaskOutput.name":"获取任务输出","copilot.tools.getVSCodeAPI.name":"获取 VS Code API 引用","copilot.tools.insertEdit.name":"编辑文件","copilot.tools.listCodeUsages.name":"查找使用情况","copilot.tools.listDirectory.name":"列表目录","copilot.tools.multiReplaceString.name":"文件中的多替换字符串","copilot.tools.newJupyterNotebook.description":"创建新 Jupyter Notebook","copilot.tools.openSimpleBrowser.description":"在简易浏览器中预览本地托管的网站","copilot.tools.openSimpleBrowser.name":"打开简易浏览器","copilot.tools.readFile.name":"读取文件","copilot.tools.readProjectStructure.name":"项目结构","copilot.tools.replaceString.name":"替换文件中的字符串","copilot.tools.runNotebookCell.description":"在笔记本文件中触发单元格执行","copilot.tools.runNotebookCell.name":"运行笔记本单元格","copilot.tools.searchCodebase.name":"代码库","copilot.tools.searchWorkspaceSymbols.name":"工作区符号","copilot.tools.testFailure.name":"测试失败","copilot.tools.think.name":"思考","copilot.tools.updateUserPreferences.name":"更新用户首选项","copilot.vscode.api.description":"询问 VS Code 扩展开发","copilot.vscode.api.sampleRequest":"如何将文本添加到状态栏?","copilot.vscode.description":"询问有关 VS Code 的问题","copilot.vscode.sampleRequest":"打开集成终端的命令是什么?","copilot.vscode.search.description":"为工作区搜索生成查询参数","copilot.vscode.search.sampleRequest":"在我的“src”目录下的所有文件中搜索“foo”","copilot.vscode.setupTests.description":"在项目中设置测试(实验性)","copilot.vscode.setupTests.sampleRequest":"将 playwright 测试添加到我的项目","copilot.vscode.startDebugging.description":"生成启动配置并在 VS Code 中开始调试(实验性)","copilot.vscode.startDebugging.sampleRequest":"在端口 9229 附加到节点应用","copilot.vscode.tool.description":"使用 VS Code API 引用回答有关 VS Code 扩展开发的问题。","copilot.workspace.description":"询问工作区","copilot.workspace.doc.description":"为此符号添加文档注释","copilot.workspace.edit.description":"编辑工作区中的文件","copilot.workspace.edit.inline.description":"在活动编辑器中编辑所选代码","copilot.workspace.explain.description":"说明活动编辑器中代码的工作原理","copilot.workspace.fix.description":"对所选代码中的问题提出修复建议","copilot.workspace.fix.sampleRequest":"此代码中存在问题。重写代码以在修复 bug 时显示它。","copilot.workspace.generate.description":"生成新代码","copilot.workspace.new.description":"工作区中的新文件或项目的基架代码","copilot.workspace.new.sampleRequest":"使用 typescript 创建 RESTful API 服务器","copilot.workspace.newNotebook.description":"创建新 Jupyter Notebook","copilot.workspace.newNotebook.sampleRequest":"如何创建笔记本以从 csv 文件加载数据?","copilot.workspace.review.description":"在活动编辑器中查看所选代码","copilot.workspace.sampleRequest":"如何生成此项目?","copilot.workspace.semanticSearch.description":"查找你的查询的相关代码","copilot.workspace.semanticSearch.sampleRequest":"工具栏代码在哪里?","copilot.workspace.tests.description":"为所选代码生成单元测试","copilot.workspaceSymbols.tool.description":"使用语言服务搜索工作区符号。","github.copilot.badge.signUp":"注册 GitHub Copilot","github.copilot.badge.star":"在 GitHub 上的星标 Copilot","github.copilot.badge.twitter":"在 Twitter 上关注 GitHub","github.copilot.badge.youtube":"查看 Youtube 上的 GitHub","github.copilot.chat.attachFile":"将文件添加到聊天","github.copilot.chat.attachSelection":"将所选内容添加到聊天","github.copilot.chat.completionContext.typescript.mode":"TypeScript Copilot 上下文提供程序的执行模式。","github.copilot.chat.copilotDebugCommand.enabled":"是否在终端中启用 `copilot-debug` 命令。","github.copilot.chat.editor.temporalContext.enabled":"进行内联聊天请求时，是否将最近查看和编辑的文件与 Copilot 请求一起包含。","github.copilot.chat.edits.suggestRelatedFilesForTests":"是否从测试文件中为“Copilot 编辑”工作集建议源文件。","github.copilot.chat.edits.temporalContext.enabled":"发出编辑请求时，是否将最近查看和编辑的文件包含在 Copilot 请求中。","github.copilot.chat.languageContext.fix.typescript.enabled":"为 /fix 命令启用 TypeScript 语言上下文提供程序","github.copilot.chat.languageContext.inline.typescript.enabled":"为内联聊天(生成和编辑)启用 TypeScript 语言上下文提供程序","github.copilot.chat.languageContext.typescript.cacheTimeout":"TypeScript 语言上下文提供程序的缓存填充超时(以毫秒为单位)。默认值为 500 毫秒。","github.copilot.chat.languageContext.typescript.enabled":"为内联补全启用 TypeScript 语言上下文提供程序","github.copilot.chat.languageContext.typescript.includeDocumentation":"控制是否在生成的代码片段中包含文档注释，","github.copilot.chat.languageContext.typescript.items":"控制 TypeScript 语言上下文提供程序中包含的项的类型。","github.copilot.command.applyReviewSuggestion":"应用","github.copilot.command.applyReviewSuggestionAndNext":"应用并转到下一步","github.copilot.command.applySuggestionWithCopilot":"应用建议","github.copilot.command.buildLocalWorkspaceIndex":"生成本地工作区索引","github.copilot.command.buildRemoteWorkspaceIndex":"生成远程工作区索引","github.copilot.command.collectDiagnostics":"聊天诊断","github.copilot.command.collectWorkspaceIndexDiagnostics":"收集工作区索引诊断","github.copilot.command.continueReviewInChat":"在聊天面板中查看","github.copilot.command.continueReviewInInlineChat":"放弃并复制到内联聊天","github.copilot.command.disableEditTracing":"禁用聊天编辑跟踪","github.copilot.command.discardAllReviewSuggestion":"全部放弃","github.copilot.command.discardReviewSuggestion":"放弃","github.copilot.command.discardReviewSuggestionAndNext":"放弃并转到下一步","github.copilot.command.enableEditTracing":"启用聊天编辑跟踪","github.copilot.command.explainTerminalLastCommand":"解释最后一个终端命令","github.copilot.command.explainThis":"说明","github.copilot.command.fixTestFailure":"修复测试失败","github.copilot.command.fixThis":"修复","github.copilot.command.generateConfiguration":"生成调试配置","github.copilot.command.generateDocs":"生成文档","github.copilot.command.generateSTest":"根据上次聊天请求生成 STest","github.copilot.command.generateTests":"生成测试","github.copilot.command.generateThis":"生成此","github.copilot.command.gotoNextReviewSuggestion":"下一条建议","github.copilot.command.gotoPreviousReviewSuggestion":"上一条建议","github.copilot.command.helpfulReviewSuggestion":"有用","github.copilot.command.inlineEdit.clearCache":"清除下一个编辑缓存","github.copilot.command.inlineEdit.reportNotebookNESIssue":"报表笔记本下一次编辑问题","github.copilot.command.logWorkbenchState":"日志工作台状态","github.copilot.command.openUserPreferences":"打开用户首选项","github.copilot.command.openWalkthrough":"打开演练","github.copilot.command.refreshClaudeCodeSessions":"刷新 Claude 代码会话","github.copilot.command.rerunWithCopilotDebug":"调试上一个终端命令","github.copilot.command.resetVirtualToolGroups":"重置虚拟工具组","github.copilot.command.reviewAndComment":"审阅","github.copilot.command.reviewChanges":"代码评审 - 未提交的更改","github.copilot.command.reviewFileChange":"审阅更改","github.copilot.command.reviewStagedChanges":"代码评审 - 暂存的更改","github.copilot.command.reviewUnstagedChanges":"代码评审 - 未暂存的更改","github.copilot.command.sendChatFeedback":"发送聊天反馈","github.copilot.command.showChatLogView":"显示聊天调试视图","github.copilot.command.showContextInspectorView":"检查语言上下文","github.copilot.command.showNotebookLog":"显示聊天日志笔记本","github.copilot.command.showOutputChannel":"显示输出通道","github.copilot.command.unhelpfulReviewSuggestion":"无用","github.copilot.config.agent.currentEditorContext.enabled":"启用后，Copilot 将在智能体模式的上下文中包含当前活动编辑器的名称。","github.copilot.config.agent.thinkingTool":"启用思考工具，使 Copilot 能够在代理模式下深入思考你的请求，然后再生成响应。","github.copilot.config.alternateGptPrompt.enabled":"为 GPT 模型启用试验性替代提示，而不是默认提示。","github.copilot.config.autoFix":"自动修复已编辑文件的诊断。","github.copilot.config.byok.ollamaEndpoint":"通过“创建自己的密钥”进行访问时用于 Ollama 的终结点。默认为 localhost。","github.copilot.config.claudeSonnet45AlternatePrompt":"指定要用于 Claude Sonnet 4.5 的试验性备用提示。","github.copilot.config.codeGeneration.instruction.file":"将添加到生成代码的 Copilot 请求的文件路径。或者，可以为说明指定语言。","github.copilot.config.codeGeneration.instruction.text":"将添加到生成代码的 Copilot 请求的文件路径。或者，可以为说明指定语言。","github.copilot.config.codeGeneration.instructions":"将要添加到用于生成代码的 Copilot 请求的一组说明。\n说明可以来自:\n- 工作区中的文件: `{ \"file\": \"fileName\" }`\n- 采用自然语言的文本: `{ \"text\": \"Use underscore for field names.\" }`\n\n注意: 请保持说明简短精确。说明不佳可能会降低 Copilot 的质量和性能。","github.copilot.config.codeGeneration.instructions.deprecated":"请改用指令文件。有关详细信息，请参阅 https://aka.ms/vscode-ghcp-custom-instructions。","github.copilot.config.codeGeneration.useInstructionFiles":"控制是否将来自 `.github/copilot-instructions.md` 的代码说明添加到 Copilot 请求。\n\n注意: 请提供简短且精确的指令。指令不佳可能会降低 Copilot 的质量和效果。[详细了解](https://aka.ms/github-copilot-custom-instructions)如何自定义 Copilot。","github.copilot.config.codesearch.enabled":"使用 `#codebase` 时是否启用代理代码搜索。","github.copilot.config.commitMessageGeneration.instruction.file":"将要添加到用于生成提交消息的 Copilot 请求的指令所在文件的路径。","github.copilot.config.commitMessageGeneration.instruction.text":"将要添加到用于生成提交消息的 Copilot 请求的文本指令。","github.copilot.config.commitMessageGeneration.instructions":"将要添加到用于生成提交消息的 Copilot 请求的一组指令。\n指令可以来自:\n- 工作区中的文件: `{ \"file\": \"fileName\" }`\n- 用自然语言编写的文本: `{ \"text\": \"Use conventional commit message format.\" }`\n\n注意: 请提供简短且精确的指令。指令不佳可能会降低 Copilot 的质量和效果。","github.copilot.config.completionsFetcher":"设置用于内联补全的提取器。","github.copilot.config.customInstructionsInSystemMessage":"启用后，自定义指令和模式说明将会追加到系统消息而不是用户消息中。","github.copilot.config.debugTerminalCommandPatterns":"调试终端中应显示“调试命令”快速修复操作的命令列表。","github.copilot.config.debugTerminalCommands":"是否快速修复调试终端和 `copilot-debug` 命令中的提示。","github.copilot.config.edits.enabled":"是否启用 Copilot 编辑功能。","github.copilot.config.edits.suggestRelatedFilesFromGitHistory":"是否从 git 历史记录中为 Copilot 编辑工作集建议相关文件。","github.copilot.config.editsNewNotebook.enabled":"是否在 Copilot Edits 中启用新的笔记本工具。","github.copilot.config.enableCodeActions":"控制 Copilot 命令在可用时是否显示为代码操作","github.copilot.config.enableUserPreferences":"在代理模式下启用记住用户首选项。","github.copilot.config.executePrompt.enabled":"executePrompt 工具使智能体能够在单独、独立的上下文中执行任务。","github.copilot.config.experimental.testGeneration.instruction.file":"将要添加到生成测试的 Copilot 请求的文件路径。或者，可以指定说明的语言。","github.copilot.config.experimental.testGeneration.instruction.text":"将要添加到生成测试的 Copilot 请求的文本说明。或者，可以指定说明的语言。","github.copilot.config.generateTests.codeLens":"显示当前测试覆盖率信息未涵盖的符号的“生成测试”代码提示。","github.copilot.config.gpt5AlternatePrompt":"指定用于 GPT-5 模型的实验性备用提示。","github.copilot.config.gpt5CodexAlternatePrompt":"指定用于 GPT-5-Codex 模型的实验性备用提示。","github.copilot.config.grokCodeAlternatePrompt":"指定用于 Grok Code 模型的实验性备用提示。","github.copilot.config.imageUpload.enabled":"支持在聊天请求中使用图像上传 URL，而不是原始 base64 字符串。","github.copilot.config.localeOverride":"指定 Copilot 响应应使用的语言区域，例如“en”或“fr”。默认情况下，Copilot 将使用 VS Code 配置的显示语言区域进行响应。","github.copilot.config.nesFetcher":"设置用于下一个编辑建议的提取器。","github.copilot.config.newWorkspace.useContext7":"是否使用 [Context7](command:github.copilot.mcp.viewContext7) 工具为创建新工作区搭建项目基架。","github.copilot.config.newWorkspaceCreation.enabled":"是否启用创建新代理工作区的功能。","github.copilot.config.notebook.enhancedNextEditSuggestions":"控制是否使用增强的方法在笔记本单元格中生成下一个编辑建议。","github.copilot.config.notebook.followCellExecution":"控制从 Copilot 执行时是否将当前正在执行的单元格显示到视区中。","github.copilot.config.notebook.inlineEditAgent.enabled":"从笔记本内联聊天小组件启用类似代理的行为。","github.copilot.config.pullRequestDescriptionGeneration.instruction.file":"文件的路径，其中包含将添加到 Copilot 请求以生成拉取请求标题和说明的指令。","github.copilot.config.pullRequestDescriptionGeneration.instruction.text":"将添加到可生成拉取请求标题和说明的 Copilot 请求的文本说明。","github.copilot.config.pullRequestDescriptionGeneration.instructions":"将添加到 Copilot 请求的一组指令，用于生成拉取请求标题和说明。\n指令可以来自:\n- 工作区中的文件: `{ \"file\": \"fileName\" }`\n- 采用自然语言的文本: `{ \"text\": \"Always include a list of key changes.\" }`\n\n注意: 请提供简短且精确的指令。指令不佳可能会降低 Copilot 的质量和效果。","github.copilot.config.renameSuggestions.triggerAutomatically":"控制 Copilot 是否生成重命名建议","github.copilot.config.responsesApiReasoningEffort":"设置用于响应式 API 的推理工作量。需要 `#github.copilot.chat.useResponsesApi#`。","github.copilot.config.responsesApiReasoningSummary":"设置用于响应式 API 的推理摘要样式。需要 `#github.copilot.chat.useResponsesApi#`。","github.copilot.config.reviewAgent.enabled":"启用代码评审代理。","github.copilot.config.reviewSelection.enabled":"对当前选择内容启用代码评审。","github.copilot.config.reviewSelection.instruction.file":"将要添加到 Copilot 请求的文件的路径，该请求将为所选内容提供代码评审。可以选择指定指令的语言。","github.copilot.config.reviewSelection.instruction.text":"将要添加到为当前所选内容提供代码评审的 Copilot 请求的文本指令。可以选择指定指令的语言。","github.copilot.config.reviewSelection.instructions":"将添加到 Copilot 请求的一组指令，该请求为当前所选内容提供代码评审。\n指令可以来自:\n- 工作区中的文件: `{ \"file\": \"fileName\" }`\n- 采用自然语言的文本: `{ \"text\": \"Use underscore for field names.\" }`\n\n注意: 请提供简短且精确的指令。指令不佳可能会降低 Copilot 的效果。","github.copilot.config.scopeSelection":"如果用户使用 `/explain` 且活动编辑器没有选择，是否提示用户选择特定符号范围。","github.copilot.config.setupTests.enabled":"在 `/tests` 生成中启用 `/setupTests` 意向和提示。","github.copilot.config.startDebugging.enabled":"在面板聊天中启用 `/startDebugging` 意向。生成或查找启动配置以匹配查询(如果有)、项目结构等。","github.copilot.config.summarizeAgentConversationHistory.enabled":"填充上下文窗口后是否自动汇总智能体对话历史记录。","github.copilot.config.terminalChatLocation":"控制应从哪里打开来自终端的聊天查询。","github.copilot.config.terminalChatLocation.chatView":"打开聊天视图。","github.copilot.config.terminalChatLocation.quickChat":"打开快速聊天。","github.copilot.config.terminalChatLocation.terminal":"打开终端内联聊天","github.copilot.config.testGeneration.instructions":"将要添加到用于生成测试的 Copilot 请求的一组说明。\n说明可以来自:\n- 工作区中的文件: `{ \"file\": \"fileName\" }`\n- 采用自然语言的文本: `{ \"text\": \"Use underscore for field names.\" }`\n\n注意: 请保持说明简短精确。说明不佳可能会降低 Copilot 的质量和性能。","github.copilot.config.testGeneration.instructions.deprecated":"请改用指令文件。有关详细信息，请参阅 https://aka.ms/vscode-ghcp-custom-instructions。","github.copilot.config.useProjectTemplates":"使用 `/new` 时，将相关 GitHub 项目用作初学者项目","github.copilot.config.useResponsesApi":"如果支持，请使用响应式 API 而不是聊天完成式 API。启用推理和推理摘要。\n\n**注意**: 这是一个尚未为所有用户激活的实验性功能。","github.copilot.config.virtualTools.threshold":"此设置定义应使用哪些虚拟工具的工具计数。虚拟工具将类似的工具集组合在一起，并允许模型按需激活它们。某些工具组将乐观地预先激活。我们正在积极开发此功能，你在达到阈值后会遇到工具调用降级的情况。\n\n可以设置为 `0` 以禁用虚拟工具。","github.copilot.devcontainer.generateDevContainerConfig":"生成开发容器配置","github.copilot.git.generateCommitMessage":"生成提交消息","github.copilot.git.resolveMergeConflicts":"使用 AI 解决冲突","github.copilot.icon":"GitHub Copilot 图标","github.copilot.nextEditSuggestions.allowWhitespaceOnlyChanges":"是否允许下一个编辑建议(NES)建议仅允许空格更改。","github.copilot.nextEditSuggestions.enabled":"是否启用下一个编辑建议(NES)。\n\nNES 可以根据最近更改建议下一个编辑。[详细了解](https://aka.ms/vscode-nes)下一个编辑建议。","github.copilot.nextEditSuggestions.fixes":"是否通过下一个编辑建议(NES)提供诊断的修补程序。","github.copilot.resetAutomaticCommandExecutionPrompt":"重置自动命令执行提示","github.copilot.submenu.copilot.label":"Copilot","github.copilot.submenu.reviewComment.applyAndNext.label":"应用并转到下一步","github.copilot.submenu.reviewComment.discard.label":"放弃","github.copilot.submenu.reviewComment.discardAndNext.label":"放弃并转到下一步","github.copilot.tools.createAndRunTask.description":"在工作区中创建并运行任务","github.copilot.tools.createAndRunTask.name":"创建并运行任务","github.copilot.tools.createAndRunTask.userDescription":"在工作区中创建并运行任务","github.copilot.tools.createNewWorkspace.name":"创建新工作区","github.copilot.tools.createNewWorkspace.userDescription":"在 VS Code 中搭建新工作区的基架","github.copilot.tools.getProjectSetupInfo.name":"获取项目设置信息","github.copilot.tools.githubRepo.name":"搜索 GitHub 存储库","github.copilot.tools.githubRepo.userDescription":"在 GitHub 存储库中搜索相关的源代码片段。可以使用 `所有者/存储库` 来指定存储库","github.copilot.tools.openEmptyFolder.name":"将空文件夹作为 VS Code 工作区打开","github.copilot.tools.searchResults.description":"搜索视图中的结果","github.copilot.tools.searchResults.name":"搜索视图结果","github.copilot.viewsWelcome.chatDisabled":"组织管理员当前已为你的帐户禁用 GitHub Copilot 聊天。请与组织管理员联系以启用聊天。\n\n[了解详细信息](https://docs.github.com/en/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-github-copilot-features-in-your-organization/managing-policies-for-copilot-in-your-organization)","github.copilot.viewsWelcome.contactSupport":"你的帐户似乎存在问题。请联系 GitHub 支持人员。\n\n[联系支持人员](https://support.github.com/?editor=vscode)","github.copilot.viewsWelcome.debug":"使用 [终端命令](command:github.copilot.chat.startCopilotDebugCommand) 或在 [交互式聊天](command:workbench.action.chat.open?%7B%22query%22%3A%22%40vscode%20%2FstartDebugging%20%22%2C%22isPartialQuery%22%3Atrue%7D) 中进行调试。","github.copilot.viewsWelcome.enterprise":"请与 GitHub 组织管理员联系以启用 Copilot。","github.copilot.viewsWelcome.individual.expired":"你的 Copilot 订阅已过期。\n\n[查看 Copilot 设置](https://github.com/settings/copilot?editor=vscode)","github.copilot.viewsWelcome.offline":"你当前处于脱机状态。请连接到 Internet 以使用 GitHub Copilot。\n\n[重试连接](command:github.copilot.refreshToken)","github.copilot.viewsWelcome.signIn":"登录以启用 GitHub Copilot 支持的功能。\n\n[登录](command:workbench.action.chat.triggerSetupForceSignIn)","github.copilot.viewsWelcome.switchToReleaseChannel":"稳定版本的 VS Code 当前不支持 GitHub Copilot Chat 扩展的预发行版本。请切换到 GitHub Copilot Chat 的发行版本，或尝试 VS Code Insiders。\n\n[切换到发行版本并重新加载](command:runCommands?%7B%22commands%22%3A%5B%7B%22command%22%3A%22workbench.extensions.action.switchToRelease%22%2C%22args%22%3A%5B%22GitHub.copilot-chat%22%5D%7D%2C%22workbench.action.reloadWindow%22%5D%7D)\n\n[切换到 VS Code Insiders](https://aka.ms/vscode-insiders)","github.copilot.walkthrough.description":"你的 AI 编程伙伴，助你更快、更智能地编写代码","github.copilot.walkthrough.edits.description":"使用**Copilot 编辑**选择要使用的文件，并描述要进行的更改。Copilot 将它们直接应用到文件。\n[使用 Copilot 编辑](command:workbench.action.chat.open?%7B%22mode%22%3A%22edit%22%7D)","github.copilot.walkthrough.edits.media.altText":"视频展示了用户如何将文件拖放到位于辅助边栏的 Copilot Edits 输入框中。Copilot 随后根据用户的请求更新了文件","github.copilot.walkthrough.edits.title":"使用自然语言进行更改","github.copilot.walkthrough.firstSuggest.description":"在编辑器中键入时，Copilot 会建议代码以帮助你完成启动的操作。","github.copilot.walkthrough.firstSuggest.media.altText":"视频展示了不同的 Copilot 补全，在这些示例中，Copilot 提供代码建议，帮助用户完成其代码","github.copilot.walkthrough.firstSuggest.title":"AI 建议的代码补全","github.copilot.walkthrough.inlineChatMac.description":"有时，直接在文件中描述要编写的代码会更容易。\n放置光标或进行选择，并使用“'Cmd+I'”** 打开**内联聊天**。","github.copilot.walkthrough.inlineChatMac.media.altText":"视频展示了用户如何调用内联聊天小组件，并使用自然语言请求 Copilot 对文件进行更改。Copilot 随后执行了请求的更改","github.copilot.walkthrough.inlineChatMac.title":"在文件中使用自然语言","github.copilot.walkthrough.inlineChatNotMac.description":"有时，直接在文件中描述要编写的代码会更容易。\n放置光标或进行选择，并使用 **“Ctrl+I'”** 打开**“内联聊天”**。","github.copilot.walkthrough.inlineChatNotMac.media.altText":"编辑器中的内联聊天视图。视频展示了用户如何调用内联聊天小组件，并使用自然语言请求 Copilot 对文件进行更改。Copilot 随后执行了请求的更改","github.copilot.walkthrough.inlineChatNotMac.title":"在文件中使用自然语言","github.copilot.walkthrough.panelChat.description":"使用 **@workspace** 询问 Copilot 编程问题或获取代码方面的帮助。\n 键入 **@** 以查看你可以直接与其聊天的所有可用聊天参与者，每个参与者都有自己的专业知识。\n[与 Copilot 聊天](command:workbench.action.chat.open?%7B%22mode%22%3A%22ask%22%7D)","github.copilot.walkthrough.panelChat.media.altText":"用户在辅助边栏的聊天面板中调用 @workspace，以了解代码库。Copilot 检索相关信息，并提供包含指向相应文件的链接的响应","github.copilot.walkthrough.panelChat.title":"聊聊你的代码","github.copilot.walkthrough.setup.noAction.description":"可以使用 Copilot 跨多个文件生成代码、修复错误、询问有关代码的问题，以及使用自然语言进行更多问题。\n 我们现在使用你的 GitHub 帐户提供 [Copilot for free](https://github.com/features/copilot/plans)。","github.copilot.walkthrough.setup.signIn.description":"可以使用 Copilot 通过自然语言执行跨多个文件生成代码、修复错误、询问代码相关问题等操作。\n 我们现在通过 GitHub 帐户提供 [Copilot 免费版](https://github.com/features/copilot/plans)。\n\n[免费使用 Copilot](command:workbench.action.chat.triggerSetupForceSignIn)","github.copilot.walkthrough.setup.signIn.title":"登录以使用免费版 Copilot","github.copilot.walkthrough.setup.signUp.description":"可以使用 Copilot 通过自然语言执行跨多个文件生成代码、修复错误、询问代码相关问题等操作。\n 我们现在通过 GitHub 帐户提供 [Copilot 免费版](https://github.com/features/copilot/plans)。\n\n[免费使用 Copilot](command:workbench.action.chat.triggerSetupForceSignIn)","github.copilot.walkthrough.setup.signUp.title":"免费开始使用 Copilot","github.copilot.walkthrough.signIn.description":"若要开始使用 Copilot，请使用 GitHub 帐户登录。\n请确保使用的是正确的 GitHub 帐户。也可以稍后使用帐户菜单登录。\n\n[登录](command:github.copilot.signIn)","github.copilot.walkthrough.signIn.media.altText":"通过本演练或 VS Code 的帐户菜单登录到 GitHub","github.copilot.walkthrough.signIn.title":"使用 GitHub 登录","github.copilot.walkthrough.sparkle.description":"Copilot 通过 AI 支持的智能操作在整个 VS Code 界面上增强编码体验。\n查找 $（sparkle） 图标，如 [源代码管理视图](command:workbench.view.scm)，其中 Copilot 会根据代码更改生成提交消息和 PR 说明。\n\n[发现提示和技巧](https://code.visualstudio.com/docs/copilot/copilot-vscode-features)","github.copilot.walkthrough.sparkle.media.altText":"视频展示了在源代码管理输入框中单击火花图标，触发 GitHub Copilot 自动生成提交消息","github.copilot.walkthrough.sparkle.title":"注意智能操作","github.copilot.walkthrough.title":"GitHub Copilot"}
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2:	"name": "copilot-chat",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3:	"displayName": "GitHub Copilot Chat",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:18:		"url": "https://github.com/microsoft/vscode-copilot-chat"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:172:				"when": "config.github.copilot.chat.executePrompt.enabled",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:276:				"when": "config.github.copilot.chat.agent.thinkingTool",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:526:				"when": "config.github.copilot.chat.enableUserPreferences"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:534:				"when": "config.github.copilot.chat.newWorkspaceCreation.enabled",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:556:				"when": "config.github.copilot.chat.newWorkspaceCreation.enabled",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:576:				"when": "config.github.copilot.chat.newWorkspaceCreation.enabled",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:601:				"when": "config.github.copilot.chat.newWorkspaceCreation.enabled",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:751:				"when": "!config.github.copilot.chat.disableReplaceTool",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:780:				"when": "!config.github.copilot.chat.disableReplaceTool",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1215:				"when": "config.inlineChat.enableV2 || config.github.copilot.chat.advanced.inlineChat2",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1224:						"when": "config.inlineChat.enableV2 || config.github.copilot.chat.advanced.inlineChat2",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1238:						"when": "config.inlineChat.enableV2 || config.github.copilot.chat.advanced.inlineChat2",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1252:						"when": "config.inlineChat.enableV2 || config.github.copilot.chat.advanced.inlineChat2",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1301:						"when": "github.copilot.chat.debug"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1314:				"when": "!config.inlineChat.enableV2 && !config.github.copilot.chat.advanced.inlineChat2",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1419:				"when": "!config.inlineChat.enableV2 && !config.github.copilot.chat.advanced.inlineChat2",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1554:						"when": "config.github.copilot.chat.setupTests.enabled",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1606:						"when": "config.github.copilot.chat.startDebugging.enabled"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1657:				"id": "github.copilot.chatReplay",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1674:				"managementCommand": "github.copilot.chat.manageBYOK"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1679:				"managementCommand": "github.copilot.chat.manageBYOK"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1684:				"managementCommand": "github.copilot.chat.manageBYOK"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1693:				"managementCommand": "github.copilot.chat.manageBYOK"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1698:				"managementCommand": "github.copilot.chat.manageBYOK"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1703:				"managementCommand": "github.copilot.chat.manageBYOK"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1708:				"managementCommand": "github.copilot.chat.manageBYOK"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1722:				"when": "github.copilot-chat.activated",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1731:				"when": "!github.copilot-chat.activated && !github.copilot.offline && !github.copilot.interactiveSession.individual.expired && !github.copilot.interactiveSession.enterprise.disabled && !github.copilot.interactiveSession.contactSupport && !github.copilot.interactiveSession.chatDisabled && !github.copilot.interactiveSession.switchToReleaseChannel"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1778:				"command": "github.copilot.chat.replay",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1784:				"command": "github.copilot.chat.replay.enableWorkspaceEditTracing",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1787:				"enablement": "!github.copilot.chat.replay.workspaceEditTracing"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1790:				"command": "github.copilot.chat.replay.disableWorkspaceEditTracing",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1793:				"enablement": "github.copilot.chat.replay.workspaceEditTracing"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1796:				"command": "github.copilot.chat.explain",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1802:				"command": "github.copilot.chat.explain.palette",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1808:				"command": "github.copilot.chat.review",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1810:				"enablement": "config.github.copilot.chat.reviewSelection.enabled && !github.copilot.interactiveSession.disabled",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1814:				"command": "github.copilot.chat.review.apply",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1821:				"command": "github.copilot.chat.review.applyAndNext",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1828:				"command": "github.copilot.chat.review.discard",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1834:				"command": "github.copilot.chat.review.discardAndNext",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1840:				"command": "github.copilot.chat.review.discardAll",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1846:				"command": "github.copilot.chat.review.stagedChanges",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1849:				"enablement": "github.copilot.chat.reviewDiff.enabled && !github.copilot.interactiveSession.disabled",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1853:				"command": "github.copilot.chat.review.unstagedChanges",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1856:				"enablement": "github.copilot.chat.reviewDiff.enabled && !github.copilot.interactiveSession.disabled",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1860:				"command": "github.copilot.chat.review.changes",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1863:				"enablement": "github.copilot.chat.reviewDiff.enabled && !github.copilot.interactiveSession.disabled",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1867:				"command": "github.copilot.chat.review.stagedFileChange",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1870:				"enablement": "github.copilot.chat.reviewDiff.enabled && !github.copilot.interactiveSession.disabled",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1874:				"command": "github.copilot.chat.review.unstagedFileChange",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1877:				"enablement": "github.copilot.chat.reviewDiff.enabled && !github.copilot.interactiveSession.disabled",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1881:				"command": "github.copilot.chat.review.previous",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1887:				"command": "github.copilot.chat.review.next",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1893:				"command": "github.copilot.chat.review.continueInInlineChat",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1899:				"command": "github.copilot.chat.review.continueInChat",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1905:				"command": "github.copilot.chat.review.markHelpful",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1912:				"command": "github.copilot.chat.openUserPreferences",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1915:				"enablement": "config.github.copilot.chat.enableUserPreferences"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1918:				"command": "github.copilot.chat.review.markUnhelpful",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1925:				"command": "github.copilot.chat.generate",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1932:				"command": "github.copilot.chat.generateDocs",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1938:				"command": "github.copilot.chat.generateTests",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1944:				"command": "github.copilot.chat.fix",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:1952:				"enablement": "github.copilot-chat.activated && !github.copilot.interactiveSession.disabled",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2019:				"command": "github.copilot.chat.attachFile",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2020:				"title": "%github.copilot.chat.attachFile%",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2024:				"command": "github.copilot.chat.attachSelection",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2025:				"title": "%github.copilot.chat.attachSelection%",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2042:				"enablement": "config.github.copilot.chat.advanced.notebook.alternativeNESFormat.enabled || github.copilot.chat.enableEnhancedNotebookNES",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2055:				"enablement": "config.github.copilot.chat.startDebugging.enabled",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2075:				"enablement": "github.copilot-chat.activated"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2081:				"enablement": "github.copilot-chat.activated"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2089:				"command": "github.copilot.chat.rerunWithCopilotDebug",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2094:				"command": "github.copilot.chat.startCopilotDebugCommand",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2098:				"command": "github.copilot.chat.clearTemporalContext",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2121:				"command": "github.copilot.chat.debug.showElements",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2125:				"command": "github.copilot.chat.debug.hideElements",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2129:				"command": "github.copilot.chat.debug.showTools",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2133:				"command": "github.copilot.chat.debug.hideTools",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2137:				"command": "github.copilot.chat.debug.showNesRequests",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2141:				"command": "github.copilot.chat.debug.hideNesRequests",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2145:				"command": "github.copilot.chat.debug.showRawRequestBody",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2149:				"command": "github.copilot.chat.debug.exportLogItem",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2154:				"command": "github.copilot.chat.debug.exportPromptArchive",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2159:				"command": "github.copilot.chat.debug.exportPromptLogsAsJson",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2164:				"command": "github.copilot.chat.debug.exportAllPromptLogsAsJson",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2174:				"command": "github.copilot.chat.mcp.setup.check",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2178:				"command": "github.copilot.chat.mcp.setup.validatePackage",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2182:				"command": "github.copilot.chat.mcp.setup.flow",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2186:				"command": "github.copilot.chat.generateAltText",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2190:				"command": "github.copilot.chat.notebook.enableFollowCellExecution",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2196:				"command": "github.copilot.chat.notebook.disableFollowCellExecution",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2202:				"command": "github.copilot.chat.manageBYOK",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2209:				"title": "GitHub Copilot Chat",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2212:					"github.copilot.chat.codeGeneration.useInstructionFiles": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2227:					"github.copilot.chat.localeOverride": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2266:					"github.copilot.chat.terminalChatLocation": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2281:					"github.copilot.chat.scopeSelection": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2286:					"github.copilot.chat.useProjectTemplates": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2321:					"github.copilot.chat.agent.autoFix": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2326:					"github.copilot.chat.customInstructionsInSystemMessage": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2331:					"github.copilot.chat.agent.currentEditorContext.enabled": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2342:					"github.copilot.chat.startDebugging.enabled": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2350:					"github.copilot.chat.reviewAgent.enabled": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2358:					"github.copilot.chat.reviewSelection.enabled": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2366:					"github.copilot.chat.reviewSelection.instructions": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2437:					"github.copilot.chat.copilotDebugCommand.enabled": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2443:						"description": "%github.copilot.chat.copilotDebugCommand.enabled%"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2445:					"github.copilot.chat.codesearch.enabled": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2453:					"github.copilot.chat.byok.ollamaEndpoint": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2467:					"github.copilot.chat.agent.thinkingTool": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2475:					"github.copilot.chat.imageUpload.enabled": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2484:					"github.copilot.chat.edits.suggestRelatedFilesFromGitHistory": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2492:					"github.copilot.chat.edits.suggestRelatedFilesForTests": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2498:						"markdownDescription": "%github.copilot.chat.edits.suggestRelatedFilesForTests%"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2500:					"github.copilot.chat.codeGeneration.instructions": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2572:					"github.copilot.chat.testGeneration.instructions": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2641:					"github.copilot.chat.commitMessageGeneration.instructions": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2703:					"github.copilot.chat.pullRequestDescriptionGeneration.instructions": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2765:					"github.copilot.chat.generateTests.codeLens": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2773:					"github.copilot.chat.edits.temporalContext.enabled": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2776:						"description": "%github.copilot.chat.edits.temporalContext.enabled%",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2782:					"github.copilot.chat.editor.temporalContext.enabled": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2785:						"description": "%github.copilot.chat.editor.temporalContext.enabled%",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2791:					"github.copilot.chat.setupTests.enabled": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2799:					"github.copilot.chat.languageContext.typescript.enabled": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2807:						"markdownDescription": "%github.copilot.chat.languageContext.typescript.enabled%"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2809:					"github.copilot.chat.languageContext.typescript.items": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2823:						"markdownDescription": "%github.copilot.chat.languageContext.typescript.items%"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2825:					"github.copilot.chat.languageContext.typescript.includeDocumentation": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2833:						"markdownDescription": "%github.copilot.chat.languageContext.typescript.includeDocumentation%"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2835:					"github.copilot.chat.languageContext.typescript.cacheTimeout": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2843:						"markdownDescription": "%github.copilot.chat.languageContext.typescript.cacheTimeout%"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2845:					"github.copilot.chat.languageContext.fix.typescript.enabled": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2853:						"markdownDescription": "%github.copilot.chat.languageContext.fix.typescript.enabled%"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2855:					"github.copilot.chat.languageContext.inline.typescript.enabled": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2863:						"markdownDescription": "%github.copilot.chat.languageContext.inline.typescript.enabled%"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2865:					"github.copilot.chat.newWorkspaceCreation.enabled": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2873:					"github.copilot.chat.newWorkspace.useContext7": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2881:					"github.copilot.chat.notebook.followCellExecution.enabled": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2889:					"github.copilot.chat.notebook.enhancedNextEditSuggestions.enabled": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2898:					"github.copilot.chat.summarizeAgentConversationHistory.enabled": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2906:					"github.copilot.chat.virtualTools.threshold": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2916:					"github.copilot.chat.azureModels": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:2967:					"github.copilot.chat.customOAIModels": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3037:					"github.copilot.chat.alternateGptPrompt.enabled": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3045:					"github.copilot.chat.gpt5AlternatePrompt": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3053:					"github.copilot.chat.gpt5CodexAlternatePrompt": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3066:					"github.copilot.chat.grokCodeAlternatePrompt": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3074:					"github.copilot.chat.claudeSonnet45AlternatePrompt": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3082:					"github.copilot.chat.useResponsesApi": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3091:					"github.copilot.chat.responsesApiReasoningEffort": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3106:					"github.copilot.chat.responsesApiReasoningSummary": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3119:					"github.copilot.chat.executePrompt.enabled": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3127:					"github.copilot.chat.completionsFetcher": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3142:					"github.copilot.chat.nesFetcher": {
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3174:				"id": "github.copilot.chat.debug.filter",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3179:				"id": "github.copilot.chat.debug.exportAllPromptLogsAsJson",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3191:					"command": "github.copilot.chat.notebook.enableFollowCellExecution",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3192:					"when": "config.github.copilot.chat.notebook.followCellExecution.enabled && !github.copilot.notebookFollowInSessionEnabled && github.copilot.notebookAgentModeUsage && !config.notebook.globalToolbar",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3196:					"command": "github.copilot.chat.notebook.disableFollowCellExecution",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3197:					"when": "config.github.copilot.chat.notebook.followCellExecution.enabled && github.copilot.notebookFollowInSessionEnabled && github.copilot.notebookAgentModeUsage && !config.notebook.globalToolbar",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3201:					"command": "github.copilot.chat.replay",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3208:					"command": "github.copilot.chat.explain",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3215:					"command": "github.copilot.chat.fix",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3220:					"command": "github.copilot.chat.review",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3221:					"when": "config.github.copilot.chat.reviewSelection.enabled && !github.copilot.interactiveSession.disabled && resourceScheme != 'vscode-chat-code-block'",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3225:					"command": "github.copilot.chat.generateDocs",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3230:					"command": "github.copilot.chat.generateTests",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3252:					"when": "github.copilot-chat.activated && !github.copilot.interactiveSession.disabled"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3259:					"command": "github.copilot.chat.rerunWithCopilotDebug",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3263:					"command": "github.copilot.chat.startCopilotDebugCommand",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3275:					"command": "github.copilot.chat.explain",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3279:					"command": "github.copilot.chat.review",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3283:					"command": "github.copilot.chat.review.apply",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3287:					"command": "github.copilot.chat.review.applyAndNext",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3291:					"command": "github.copilot.chat.review.discard",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3295:					"command": "github.copilot.chat.review.discardAndNext",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3299:					"command": "github.copilot.chat.review.discardAll",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3303:					"command": "github.copilot.chat.review.stagedChanges",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3307:					"command": "github.copilot.chat.review.unstagedChanges",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3311:					"command": "github.copilot.chat.review.changes",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3315:					"command": "github.copilot.chat.review.stagedFileChange",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3319:					"command": "github.copilot.chat.review.unstagedFileChange",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3323:					"command": "github.copilot.chat.review.previous",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3327:					"command": "github.copilot.chat.review.next",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3331:					"command": "github.copilot.chat.review.continueInInlineChat",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3335:					"command": "github.copilot.chat.review.continueInChat",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3339:					"command": "github.copilot.chat.review.markHelpful",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3343:					"command": "github.copilot.chat.review.markUnhelpful",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3371:					"command": "github.copilot.chat.debug.showElements",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3375:					"command": "github.copilot.chat.debug.hideElements",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3379:					"command": "github.copilot.chat.debug.showTools",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3383:					"command": "github.copilot.chat.debug.hideTools",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3387:					"command": "github.copilot.chat.debug.showNesRequests",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3391:					"command": "github.copilot.chat.debug.hideNesRequests",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3395:					"command": "github.copilot.chat.debug.exportLogItem",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3399:					"command": "github.copilot.chat.debug.exportPromptArchive",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3403:					"command": "github.copilot.chat.debug.exportPromptLogsAsJson",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3407:					"command": "github.copilot.chat.debug.exportAllPromptLogsAsJson",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3411:					"command": "github.copilot.chat.mcp.setup.check",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3415:					"command": "github.copilot.chat.mcp.setup.validatePackage",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3419:					"command": "github.copilot.chat.mcp.setup.flow",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3423:					"command": "github.copilot.chat.debug.showRawRequestBody",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3438:					"submenu": "github.copilot.chat.debug.filter",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3439:					"when": "view == copilot-chat",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3443:					"command": "github.copilot.chat.debug.exportAllPromptLogsAsJson",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3444:					"when": "view == copilot-chat",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3449:					"when": "view == copilot-chat",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3460:					"command": "github.copilot.chat.debug.showRawRequestBody",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3461:					"when": "view == copilot-chat && viewItem == request",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3465:					"command": "github.copilot.chat.debug.exportLogItem",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3466:					"when": "view == copilot-chat && (viewItem == toolcall || viewItem == request)",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3470:					"command": "github.copilot.chat.debug.exportPromptArchive",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3471:					"when": "view == copilot-chat && viewItem == chatprompt",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3475:					"command": "github.copilot.chat.debug.exportPromptLogsAsJson",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3476:					"when": "view == copilot-chat && viewItem == chatprompt",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3499:					"command": "github.copilot.chat.review.markHelpful",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3504:					"command": "github.copilot.chat.review.markUnhelpful",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3511:					"command": "github.copilot.chat.review.apply",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3516:					"command": "github.copilot.chat.review.discard",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3521:					"command": "github.copilot.chat.review.discardAll",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3530:					"when": "commentController == github-copilot-review && github.copilot.chat.review.numberOfComments > 1"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3533:					"command": "github.copilot.chat.review.apply",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3535:					"when": "commentController == github-copilot-review && github.copilot.chat.review.numberOfComments == 1"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3540:					"when": "commentController == github-copilot-review && github.copilot.chat.review.numberOfComments > 1"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3545:					"when": "commentController == github-copilot-review && github.copilot.chat.review.numberOfComments == 1"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3550:					"command": "github.copilot.chat.review.applyAndNext",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3555:					"command": "github.copilot.chat.review.apply",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3562:					"command": "github.copilot.chat.review.discardAndNext",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3567:					"command": "github.copilot.chat.review.discard",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3572:					"command": "github.copilot.chat.review.continueInInlineChat",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3579:					"command": "github.copilot.chat.review.discard",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3584:					"command": "github.copilot.chat.review.continueInInlineChat",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3591:					"command": "github.copilot.chat.review.previous",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3596:					"command": "github.copilot.chat.review.next",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3601:					"command": "github.copilot.chat.review.continueInChat",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3606:					"command": "github.copilot.chat.review.discardAll",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3613:					"command": "github.copilot.chat.review.changes",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3615:					"when": "config.github.copilot.chat.reviewAgent.enabled && github.copilot.chat.reviewDiff.enabled && scmProvider == git && scmProviderRootUri in github.copilot.chat.reviewDiff.enabledRootUris"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3620:					"command": "github.copilot.chat.review.stagedChanges",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3621:					"when": "config.github.copilot.chat.reviewAgent.enabled && github.copilot.chat.reviewDiff.enabled && scmProvider == git && scmResourceGroup == index",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3625:					"command": "github.copilot.chat.review.unstagedChanges",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3626:					"when": "config.github.copilot.chat.reviewAgent.enabled && github.copilot.chat.reviewDiff.enabled && scmProvider == git && scmResourceGroup == workingTree",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3637:					"command": "github.copilot.chat.review.stagedFileChange",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3639:					"when": "config.github.copilot.chat.reviewAgent.enabled && github.copilot.chat.reviewDiff.enabled && scmProvider == git && scmResourceGroup == index"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3642:					"command": "github.copilot.chat.review.unstagedFileChange",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3644:					"when": "config.github.copilot.chat.reviewAgent.enabled && github.copilot.chat.reviewDiff.enabled && scmProvider == git && scmResourceGroup == workingTree"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3664:					"when": "config.github.copilot.chat.startDebugging.enabled"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3672:			"github.copilot.chat.debug.filter": [
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3674:					"command": "github.copilot.chat.debug.showElements",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3675:					"when": "github.copilot.chat.debug.elementsHidden",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3679:					"command": "github.copilot.chat.debug.hideElements",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3680:					"when": "!github.copilot.chat.debug.elementsHidden",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3684:					"command": "github.copilot.chat.debug.showTools",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3685:					"when": "github.copilot.chat.debug.toolsHidden",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3689:					"command": "github.copilot.chat.debug.hideTools",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3690:					"when": "!github.copilot.chat.debug.toolsHidden",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3694:					"command": "github.copilot.chat.debug.showNesRequests",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3695:					"when": "github.copilot.chat.debug.nesRequestsHidden",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3699:					"command": "github.copilot.chat.debug.hideNesRequests",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3700:					"when": "!github.copilot.chat.debug.nesRequestsHidden",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3706:					"command": "github.copilot.chat.notebook.enableFollowCellExecution",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3707:					"when": "config.github.copilot.chat.notebook.followCellExecution.enabled && !github.copilot.notebookFollowInSessionEnabled && github.copilot.notebookAgentModeUsage && config.notebook.globalToolbar",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3711:					"command": "github.copilot.chat.notebook.disableFollowCellExecution",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3712:					"when": "config.github.copilot.chat.notebook.followCellExecution.enabled && github.copilot.notebookFollowInSessionEnabled && github.copilot.notebookAgentModeUsage && config.notebook.globalToolbar",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3760:				"id": "copilot-chat.fixWithCopilot",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3772:				"id": "copilot-chat.generateCommitMessage",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3784:				"id": "copilot-chat.terminalToDebugging",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3796:				"id": "copilot-chat.terminalToDebuggingSuccess",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3835:			"copilot-chat": [
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3837:					"id": "copilot-chat",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3840:					"when": "github.copilot.chat.showLogView"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3848:					"when": "github.copilot.chat.showContextInspectorView"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3855:					"id": "copilot-chat",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3873:				"command": "github.copilot.chat.rerunWithCopilotDebug",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3876:				"when": "github.copilot-chat.activated && terminalShellIntegrationEnabled && terminalFocus && !terminalAltBufferActive"
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3890:						"when": "chatEntitlementSignedOut && !view.workbench.panel.chat.view.copilot.visible && !github.copilot-chat.activated && !github.copilot.offline && !github.copilot.interactiveSession.individual.disabled && !github.copilot.interactiveSession.individual.expired && !github.copilot.interactiveSession.enterprise.disabled && !github.copilot.interactiveSession.contactSupport",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3905:						"when": "chatEntitlementSignedOut && view.workbench.panel.chat.view.copilot.visible && !github.copilot-chat.activated && !github.copilot.offline && !github.copilot.interactiveSession.individual.disabled && !github.copilot.interactiveSession.individual.expired && !github.copilot.interactiveSession.enterprise.disabled && !github.copilot.interactiveSession.contactSupport",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3920:						"when": "chatPlanCanSignUp && !view.workbench.panel.chat.view.copilot.visible && !github.copilot-chat.activated && !github.copilot.offline && (github.copilot.interactiveSession.individual.disabled || github.copilot.interactiveSession.individual.expired) && !github.copilot.interactiveSession.enterprise.disabled && !github.copilot.interactiveSession.contactSupport",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:3935:						"when": "chatPlanCanSignUp && view.workbench.panel.chat.view.copilot.visible && !github.copilot-chat.activated && !github.copilot.offline && (github.copilot.interactiveSession.individual.disabled || github.copilot.interactiveSession.individual.expired) && !github.copilot.interactiveSession.enterprise.disabled && !github.copilot.interactiveSession.contactSupport",
/root/.vscode-server/extensions/github.copilot-chat-0.32.1/package.json:4057:				"when": "config.github.copilot.chat.advanced.claudeCode.enabled",
