#!/usr/bin/env python3
# final_browser_test_debug.py - –§–∏–Ω–∞–ª—å–Ω–æ–µ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π
from playwright.sync_api import sync_playwright
import requests
import json
import time
from datetime import datetime
import os

def log(msg):
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"[{timestamp}] {msg}")

def test_direct_urls():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º—ã–µ URL –±–µ–∑ —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞"""
    log("üß™ –¢–ï–°–¢–ò–†–£–ï–ú –ü–†–Ø–ú–´–ï URL...")
    
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True)
        page = browser.new_page(viewport={"width": 1366, "height": 768})
        
        try:
            os.makedirs("screenshots_final", exist_ok=True)
            
            # 1. –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê
            log("üìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
            page.goto("http://89.104.69.77/", wait_until="networkidle", timeout=30000)
            page.screenshot(path="screenshots_final/01_homepage.png", full_page=True)
            
            title = page.title()
            content = page.content()
            log(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
            log(f"   –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞
            search_forms = page.locator("form, input[type='text']")
            log(f"   –§–æ—Ä–º –ø–æ–∏—Å–∫–∞: {search_forms.count()}")
            
            # 2. –ü–†–Ø–ú–û–ô –ü–ï–†–ï–•–û–î –ö –ü–û–ò–°–ö–£
            log("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫...")
            search_url = "http://89.104.69.77/ui/search.html?q=LM317T"
            page.goto(search_url, wait_until="networkidle", timeout=30000)
            page.wait_for_timeout(5000)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            
            page.screenshot(path="screenshots_final/02_direct_search.png", full_page=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page_text = page.inner_text("body")
            log(f"   –¢–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–∏—Å–∫–∞ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {page_text[:200]}")
            
            # –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results_divs = page.locator(".result-item, .results, #results")
            log(f"   –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {results_divs.count()}")
            
            # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            images = page.locator("img")
            log(f"   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {images.count()}")
            
            # –ò—â–µ–º —Ü–µ–Ω—ã
            price_elements = page.locator(":text-matches('[0-9]+‚ÇΩ|[0-9]+ —Ä—É–±', 'i')")
            log(f"   –¶–µ–Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {price_elements.count()}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ DOM
            if "LM317T" in page_text and ("‚ÇΩ" in page_text or "—Ä—É–±" in page_text):
                log("‚úÖ –î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–∏—Å–∫–∞!")
                
                # 3. –ü–†–Ø–ú–û–ô –ü–ï–†–ï–•–û–î –ö –¢–û–í–ê–†–£
                log("üì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞...")
                product_url = "http://89.104.69.77/ui/product.html?mpn=LM317T"
                page.goto(product_url, wait_until="networkidle", timeout=30000)
                page.wait_for_timeout(5000)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                
                page.screenshot(path="screenshots_final/03_direct_product.png", full_page=True)
                
                product_text = page.inner_text("body")
                log(f"   –¢–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {product_text[:200]}")
                
                # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞—Ä—Ç–æ—á–∫–∏
                images = page.locator("img")
                specs = page.locator("table, .specs")
                price = page.locator(":text-matches('[0-9]+‚ÇΩ', 'i')")
                
                log(f"   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images.count()}")
                log(f"   –¢–∞–±–ª–∏—Ü/—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π: {specs.count()}")
                log(f"   –¶–µ–Ω: {price.count()}")
                
                if "LM317T" in product_text and images.count() > 0 and specs.count() > 0:
                    log("‚úÖ –ö–ê–†–¢–û–ß–ö–ê –¢–û–í–ê–†–ê –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
                    return True
                else:
                    log("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–µ–ø–æ–ª–Ω–∞—è")
                    return False
            else:
                log("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–∏—Å–∫–∞")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞
                log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞...")
                console_messages = []
                page.on("console", lambda msg: console_messages.append(f"{msg.type}: {msg.text}"))
                
                page.reload(wait_until="networkidle")
                page.wait_for_timeout(3000)
                
                log(f"   –°–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Å–æ–ª–∏: {len(console_messages)}")
                for msg in console_messages[-5:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                    log(f"     {msg}")
                
                return False
                
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
            page.screenshot(path="screenshots_final/error.png", full_page=True)
            return False
        finally:
            browser.close()

def main():
    log("üöÄ –§–ò–ù–ê–õ–¨–ù–û–ï –ë–†–ê–£–ó–ï–†–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º API
    log("üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º API...")
    try:
        response = requests.get("http://89.104.69.77/api/search?q=LM317T", timeout=10)
        if response.status_code == 200:
            data = response.json()
            log(f"‚úÖ Search API —Ä–∞–±–æ—Ç–∞–µ—Ç: {len(data.get('items', []))} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            if data.get('items'):
                item = data['items'][0]
                log(f"   –ü—Ä–∏–º–µ—Ä: {item.get('title')}, {item.get('price_min_rub')}‚ÇΩ")
        else:
            log(f"‚ùå Search API: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            return False
    except Exception as e:
        log(f"‚ùå Search API –æ—à–∏–±–∫–∞: {e}")
        return False
    
    try:
        response = requests.get("http://89.104.69.77/api/product?mpn=LM317T", timeout=10)
        if response.status_code == 200:
            data = response.json()
            log(f"‚úÖ Product API —Ä–∞–±–æ—Ç–∞–µ—Ç: {data.get('ok')}")
            if data.get('product'):
                product = data['product']
                log(f"   –ü—Ä–∏–º–µ—Ä: {product.get('title')}, –≥–∞–ª–µ—Ä–µ—è: {len(product.get('gallery', []))}")
        else:
            log(f"‚ùå Product API: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            return False
    except Exception as e:
        log(f"‚ùå Product API –æ—à–∏–±–∫–∞: {e}")
        return False
    
    # –ë—Ä–∞—É–∑–µ—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    success = test_direct_urls()
    
    if success:
        log("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        log("üì∏ –§–∏–Ω–∞–ª—å–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –≤ –ø–∞–ø–∫–µ screenshots_final/")
        log("üåê –°–ê–ô–¢ –ü–û–õ–ù–û–°–¢–¨–Æ –§–£–ù–ö–¶–ò–û–ù–ê–õ–ï–ù:")
        log("   ‚Ä¢ –ì–ª–∞–≤–Ω–∞—è: http://89.104.69.77/")
        log("   ‚Ä¢ –ü–æ–∏—Å–∫: http://89.104.69.77/ui/search.html?q=LM317T")
        log("   ‚Ä¢ –¢–æ–≤–∞—Ä: http://89.104.69.77/ui/product.html?mpn=LM317T")
        log("   ‚Ä¢ API –ø–æ–∏—Å–∫: http://89.104.69.77/api/search?q=LM317T")
        log("   ‚Ä¢ API —Ç–æ–≤–∞—Ä: http://89.104.69.77/api/product?mpn=LM317T")
        return True
    else:
        log("‚ùå –ë–†–ê–£–ó–ï–†–ù–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
