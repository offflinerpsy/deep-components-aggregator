# HDR Hotkeys Fix Script - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à Win+Alt+B
# –¢—Ä–µ–±—É–µ—Ç –∑–∞–ø—É—Å–∫–∞ –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

param(
    [switch]$Force,
    [switch]$Debug
)

$ErrorActionPreference = "Stop"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
if (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Host "‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!" -ForegroundColor Red
    Write-Host "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞..." -ForegroundColor Yellow
    Start-Process PowerShell -Verb RunAs -ArgumentList "-NoProfile -ExecutionPolicy Bypass -File `"$PSCommandPath`" $($MyInvocation.UnboundArguments -join ' ')"
    exit
}

Write-Host "`nüîß HDR Hotkeys Fix - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à Win+Alt+B" -ForegroundColor Cyan
Write-Host "=" * 60 -ForegroundColor DarkGray

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function Write-Log {
    param($Message, $Type = "Info")
    $timestamp = Get-Date -Format "HH:mm:ss"
    $color = switch($Type) {
        "Success" { "Green" }
        "Error" { "Red" }
        "Warning" { "Yellow" }
        default { "White" }
    }
    Write-Host "[$timestamp] $Message" -ForegroundColor $color
}

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è HDR
Write-Log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ HDR..." "Info"
$displays = Get-CimInstance -Namespace root\wmi -ClassName WmiMonitorHDRSupport
if (-not $displays -or ($displays | Where-Object HDRSupported).Count -eq 0) {
    Write-Log "‚ö†Ô∏è HDR –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –º–æ–Ω–∏—Ç–æ—Ä–æ–º –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!" "Warning"
    if (-not $Force) {
        Write-Host "`n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—Å—ë —Ä–∞–≤–Ω–æ? (Y/N): " -NoNewline -ForegroundColor Yellow
        $answer = Read-Host
        if ($answer -ne 'Y' -and $answer -ne 'y') { exit }
    }
}

# 2. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ–µ—Å—Ç—Ä–∞ –¥–ª—è –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
Write-Log "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ–µ—Å—Ç—Ä–∞..." "Info"

$registryPaths = @(
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ HDR
    @{
        Path = "HKCU:\Software\Microsoft\Windows\CurrentVersion\VideoSettings"
        Values = @{
            "EnableHDRForPlayback" = 1
            "HDRGlobalSetting" = 1
        }
    },
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Game Bar (–æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ Win+Alt+B)
    @{
        Path = "HKCU:\Software\Microsoft\GameBar"
        Values = @{
            "UseNexusForGameBarEnabled" = 1
            "GameDVR_Enabled" = 1
            "AllowAutoGameMode" = 1
        }
    },
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
    @{
        Path = "HKCU:\System\GameConfigStore"
        Values = @{
            "GameDVR_Enabled" = 1
            "GameDVR_FSEBehaviorMode" = 0
            "GameDVR_FSEBehavior" = 2
        }
    },
    # –ü–æ–ª–∏—Ç–∏–∫–∏ Game DVR
    @{
        Path = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\GameDVR"
        Values = @{
            "AllowGameDVR" = 1
        }
    }
)

foreach ($reg in $registryPaths) {
    if (-not (Test-Path $reg.Path)) {
        New-Item -Path $reg.Path -Force | Out-Null
        Write-Log "  ‚úì –°–æ–∑–¥–∞–Ω –ø—É—Ç—å: $($reg.Path)" "Success"
    }
    
    foreach ($key in $reg.Values.GetEnumerator()) {
        Set-ItemProperty -Path $reg.Path -Name $key.Key -Value $key.Value -Type DWord -Force
        if ($Debug) {
            Write-Log "  ‚Üí –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω $($key.Key) = $($key.Value)" "Info"
        }
    }
}

Write-Log "‚úì –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–µ—Å—Ç—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã" "Success"

# 3. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–ª—É–∂–± Windows
Write-Log "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–ª—É–∂–±..." "Info"

$services = @(
    "BcastDVRUserService*",  # Game Bar User Service
    "XblAuthManager",         # Xbox Live Auth Manager
    "XblGameSave",           # Xbox Live Game Save
    "XboxNetApiSvc",         # Xbox Live Networking Service
    "XboxGipSvc"             # Xbox Accessory Management Service
)

foreach ($serviceName in $services) {
    $actualServices = Get-Service -Name $serviceName -ErrorAction SilentlyContinue
    foreach ($service in $actualServices) {
        if ($service.Status -eq 'Running') {
            Restart-Service -Name $service.Name -Force -ErrorAction SilentlyContinue
            Write-Log "  ‚úì –ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞ —Å–ª—É–∂–±–∞: $($service.DisplayName)" "Success"
        } elseif ($service.Status -eq 'Stopped') {
            Start-Service -Name $service.Name -ErrorAction SilentlyContinue
            Write-Log "  ‚úì –ó–∞–ø—É—â–µ–Ω–∞ —Å–ª—É–∂–±–∞: $($service.DisplayName)" "Success"
        }
    }
}

# 4. –ü–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Game Bar –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
Write-Log "–ü–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Xbox Game Bar..." "Info"
Get-AppxPackage Microsoft.XboxGamingOverlay | ForEach-Object {
    Add-AppxPackage -DisableDevelopmentMode -Register "$($_.InstallLocation)\AppXManifest.xml" -ErrorAction SilentlyContinue
}
Write-Log "‚úì Game Bar –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" "Success"

# 5. –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ Explorer
Write-Log "–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ Explorer..." "Info"

# –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏–∫–æ–Ω–æ–∫
$iconCachePath = "$env:LOCALAPPDATA\IconCache.db"
if (Test-Path $iconCachePath) {
    Remove-Item $iconCachePath -Force -ErrorAction SilentlyContinue
}

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Explorer
Stop-Process -Name 'explorer' -Force -ErrorAction SilentlyContinue
Start-Sleep -Seconds 2
Start-Process 'explorer'
Start-Sleep -Seconds 3

Write-Log "‚úì Explorer –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω" "Success"

# 6. –ê–∫—Ç–∏–≤–∞—Ü–∏—è HDR —á–µ—Ä–µ–∑ WMI
Write-Log "–ê–∫—Ç–∏–≤–∞—Ü–∏—è HDR —á–µ—Ä–µ–∑ WMI..." "Info"
$display = Get-CimInstance -Namespace root\wmi -ClassName WmiMonitorBrightnessMethods
if ($display) {
    # –ü–æ–ø—ã—Ç–∫–∞ –≤–∫–ª—é—á–∏—Ç—å HDR –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
    $null = Invoke-CimMethod -InputObject $display[0] -MethodName WmiSetBrightness -Arguments @{Brightness=100; Timeout=1} -ErrorAction SilentlyContinue
}

# 7. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
Write-Host "`n" + "=" * 60 -ForegroundColor DarkGray
Write-Host "‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!" -ForegroundColor Green
Write-Host "`nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:" -ForegroundColor Cyan
Write-Host "  1. –ù–∞–∂–º–∏—Ç–µ Win+Alt+B –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è HDR" -ForegroundColor White
Write-Host "  2. –ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ Win+G –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Game Bar" -ForegroundColor White
Write-Host "  3. –í Game Bar –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ò–≥—Ä–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏" -ForegroundColor White
Write-Host "  4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ HDR –≤–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö" -ForegroundColor White
Write-Host "`nüí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:" -ForegroundColor Yellow
Write-Host "  - –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏–≥—Ä, –∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞" -ForegroundColor Gray
Write-Host "  - –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–π—Ç–µ —è—Ä–ª—ã–∫ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ" -ForegroundColor Gray
Write-Host "  - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä -Debug –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞" -ForegroundColor Gray

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ HDR
Write-Host "`nüìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å HDR:" -ForegroundColor Cyan
Get-CimInstance -Namespace root\wmi -ClassName WmiMonitorHDRSupport | ForEach-Object {
    $status = if ($_.HDRSupported) { "‚úì –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è" } else { "‚úó –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è" }
    Write-Host "  –ú–æ–Ω–∏—Ç–æ—Ä: $status" -ForegroundColor $(if ($_.HDRSupported) { "Green" } else { "Red" })
}

Write-Host "`n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞..." -ForegroundColor Gray
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
