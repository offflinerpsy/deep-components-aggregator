#!/usr/bin/env node
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.join(__dirname, '..');
const dataDir = path.join(rootDir, 'data');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç Orama
function normalizeToOramaFormat(data) {
  return {
    id: data.mpn || data.id || `component_${Date.now()}_${Math.random()}`,
    url: data.url || `#${data.mpn}`,
    title: data.title || data.mpn || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
    brand: data.manufacturer || data.brand || '',
    sku: data.sku || data.mpn || '',
    mpn: data.mpn || '',
    text: [
      data.title,
      data.description,
      data.manufacturer,
      data.package,
      data.packaging,
      Object.values(data.technical_specs || {}).join(' ')
    ].filter(Boolean).join(' ')
  };
}

// –ß–∏—Ç–∞–µ–º –≤—Å–µ seed —Ñ–∞–π–ª—ã
const corpus = [];
const seedFiles = fs.readdirSync(dataDir).filter(f => f.startsWith('seed-') && f.endsWith('.json'));

console.log(`üîç Found ${seedFiles.length} seed files:`);

for (const seedFile of seedFiles) {
  const filePath = path.join(dataDir, seedFile);
  console.log(`  üìÑ Processing ${seedFile}...`);
  
  const rawData = fs.readFileSync(filePath, 'utf8');
  const data = JSON.parse(rawData);
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –º–∞—Å—Å–∏–≤ –∏–ª–∏ –µ–¥–∏–Ω–∏—á–Ω—ã–π –æ–±—ä–µ–∫—Ç
  const items = Array.isArray(data) ? data : [data];
  
  for (const item of items) {
    const normalized = normalizeToOramaFormat(item);
    corpus.push(normalized);
    console.log(`    ‚úÖ Added: ${normalized.mpn} - ${normalized.title}`);
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
const additionalComponents = [
  {
    mpn: "1N4148",
    title: "–î–∏–æ–¥ –±—ã—Å—Ç—Ä–æ–¥–µ–π—Å—Ç–≤—É—é—â–∏–π 75V 150mA",
    manufacturer: "Various",
    description: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫—Ä–µ–º–Ω–∏–µ–≤—ã–π –¥–∏–æ–¥ –æ–±—â–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è",
    package: "DO-35",
    technical_specs: {
      "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –í": "75",
      "–ü—Ä—è–º–æ–π —Ç–æ–∫, –º–ê": "150",
      "–ö–æ—Ä–ø—É—Å": "DO-35"
    }
  },
  {
    mpn: "BC547",
    title: "–¢—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä NPN 45V 100mA",
    manufacturer: "Various", 
    description: "–ë–∏–ø–æ–ª—è—Ä–Ω—ã–π —Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä –æ–±—â–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è",
    package: "TO-92",
    technical_specs: {
      "–¢–∏–ø": "NPN",
      "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –í": "45",
      "–ö–æ–ª–ª–µ–∫—Ç–æ—Ä–Ω—ã–π —Ç–æ–∫, –º–ê": "100"
    }
  },
  {
    mpn: "2N7002",
    title: "MOSFET N-–∫–∞–Ω–∞–ª—å–Ω—ã–π 60V 300mA",
    manufacturer: "Various",
    description: "–ú–∞–ª–æ—Å–∏–≥–Ω–∞–ª—å–Ω—ã–π MOSFET —Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä",
    package: "SOT-23",
    technical_specs: {
      "–¢–∏–ø": "N-Channel MOSFET",
      "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –í": "60", 
      "–¢–æ–∫ —Å—Ç–æ–∫–∞, –º–ê": "300"
    }
  },
  {
    mpn: "NE555",
    title: "–¢–∞–π–º–µ—Ä —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π",
    manufacturer: "Various",
    description: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –º–∏–∫—Ä–æ—Å—Ö–µ–º–∞ —Ç–∞–π–º–µ—Ä–∞",
    package: "DIP-8",
    technical_specs: {
      "–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è, –í": "4.5-16",
      "–ö–æ—Ä–ø—É—Å": "DIP-8"
    }
  },
  {
    mpn: "ATmega328P",
    title: "–ú–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä 8-–±–∏—Ç AVR",
    manufacturer: "Microchip",
    description: "8-–±–∏—Ç–Ω—ã–π –º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å–µ–º–µ–π—Å—Ç–≤–∞ AVR",
    package: "DIP-28",
    technical_specs: {
      "–†–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å": "8-bit",
      "–§–ª–µ—à –ø–∞–º—è—Ç—å, –ö–ë": "32",
      "SRAM, –ö–ë": "2"
    }
  }
];

for (const comp of additionalComponents) {
  const normalized = normalizeToOramaFormat(comp);
  corpus.push(normalized);
  console.log(`    ‚úÖ Added popular: ${normalized.mpn} - ${normalized.title}`);
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–ø—É—Å
const corpusPath = path.join(dataDir, 'corpus.json');
fs.writeFileSync(corpusPath, JSON.stringify(corpus, null, 2));

console.log(`\nüéâ Corpus built successfully!`);
console.log(`üìä Total components: ${corpus.length}`);
console.log(`üíæ Saved to: ${corpusPath}`);
console.log(`üì¶ File size: ${(fs.statSync(corpusPath).size / 1024).toFixed(1)} KB`);
