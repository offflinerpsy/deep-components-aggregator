#!/usr/bin/env node
// scripts/generate-project-memory.mjs - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PROJECT_MEMORY.md

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const PROJECT_ROOT = path.join(__dirname, '..');
const OUTPUT_FILE = path.join(PROJECT_ROOT, 'docs/PROJECT_MEMORY.md');

// –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é docs –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const docsDir = path.dirname(OUTPUT_FILE);
if (!fs.existsSync(docsDir)) {
  fs.mkdirSync(docsDir, { recursive: true });
}

// –ß–∏—Ç–∞–µ–º package.json
const packageJson = JSON.parse(fs.readFileSync(path.join(PROJECT_ROOT, 'package.json'), 'utf8'));

// –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é RU-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
const sourcesConfig = JSON.parse(fs.readFileSync(path.join(PROJECT_ROOT, 'src/config/sources.ru.json'), 'utf8'));

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PROJECT_MEMORY.md
const content = `# üß† PROJECT_MEMORY.md

## üìã Project Overview
- **Name**: ${packageJson.name}
- **Version**: ${packageJson.version}
- **Description**: ${packageJson.description}
- **Last Updated**: ${new Date().toISOString()}

## üèóÔ∏è Architecture

### Core Components
- **Server**: Express.js –Ω–∞ –ø–æ—Ä—Ç—É 9201
- **UI**: HTML/CSS/JS —Å CSS Grid layout
- **Testing**: Playwright e2e + smoke tests
- **CI/CD**: GitHub Actions —Å –∞–≤—Ç–æ-merge

### RU Content Sources
${Object.entries(sourcesConfig).map(([name, config]) => `
- **${name}**: ${config.baseUrl}
  - Search: ${config.searchUrl}
  - Selectors: ${Object.keys(config.selectors).length} configured
`).join('')}

### Data Flow
1. **RU Adapters** ‚Üí –∏–∑–≤–ª–µ–∫–∞—é—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å —Ä—É—Å—Å–∫–∏—Ö —Å–∞–π—Ç–æ–≤
2. **Orchestrator** ‚Üí –≤—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ª–Ω—ã–π RU-–∫–æ–Ω—Ç–µ–Ω—Ç
3. **OEMsTrade** ‚Üí –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
4. **CBR Rates** ‚Üí –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∞–ª—é—Ç—ã –≤ —Ä—É–±–ª–∏
5. **AJV Validation** ‚Üí –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–æ —Å—Ö–µ–º–µ
6. **UI Rendering** ‚Üí –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º layout

## üß™ Testing Strategy

### E2E Tests
- **search.spec.ts**: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–æ–∫, RU-–∫–æ–Ω—Ç–µ–Ω—Ç –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö
- **product.spec.ts**: –ü—Ä–æ–≤–µ—Ä–∫–∞ layout, RU-–∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∫–∞—Ä—Ç–æ—á–∫–µ
- **smoke-50.spec.ts**: 50 MPN —Å 80% success threshold

### CI Gates
- Code quality (npm audit)
- E2E tests (Playwright)
- Smoke-50 (‚â•80% success)
- API health checks

## üìÅ Key Files

### Configuration
- \`src/config/sources.ru.json\` - RU sources selectors
- \`src/services/rates-cbr.js\` - CBR currency rates
- \`src/services/orchestrator.js\` - Content orchestration

### Adapters
- \`src/adapters/ru/chipdip.js\` - ChipDip parser
- \`src/adapters/ru/promelec.js\` - Promelec parser
- \`src/adapters/ru/platan.js\` - Platan parser
- \`src/adapters/ru/electronshik.js\` - Electronshik parser
- \`src/adapters/ru/elitan.js\` - Elitan parser

### UI
- \`public/ui/index.html\` - Search page
- \`public/ui/product.html\` - Product card
- \`public/ui/product.css\` - CSS Grid layout
- \`public/ui/product.js\` - RU-canon mapping

### Tests
- \`tests/e2e/search.spec.ts\` - Search tests
- \`tests/e2e/product.spec.ts\` - Product tests
- \`tests/e2e/smoke-50.spec.ts\` - Smoke tests

## üéØ Success Metrics

### Quality Gates
- ‚úÖ Zero console errors
- ‚úÖ Zero HTTP 4xx/5xx errors
- ‚úÖ RU content presence validation
- ‚úÖ Smoke-50 ‚â•80% success rate

### Performance
- ‚úÖ Server startup <5s
- ‚úÖ API response <2s
- ‚úÖ E2E tests <30min
- ‚úÖ CI pipeline <45min

## üîß Development Commands

\`\`\`bash
# Development
npm start                    # Start server
npm run qa:headless         # Run QA tests
npm run test:e2e            # Run E2E tests
npm run verify:prod         # Full verification

# CI/CD
npm ci                      # Install dependencies
npx playwright install      # Install browsers
npx playwright test         # Run all tests
\`\`\`

## üìä Monitoring

### Logs
- Structured JSON logging
- Adapter performance metrics
- Error tracking and reporting

### Artifacts
- HTML sources from RU sites
- Raw JSON responses
- Canonical JSON data
- Playwright traces/videos

## üöÄ Deployment

### Production Ready
- ‚úÖ Graceful shutdown
- ‚úÖ Error handling (no try/catch)
- ‚úÖ Input validation (AJV)
- ‚úÖ Security audit clean
- ‚úÖ CI/CD pipeline green

### Environment
- Node.js 20.x
- Express.js server
- Playwright browsers
- GitHub Actions CI

---
*Generated automatically by scripts/generate-project-memory.mjs*
`;

fs.writeFileSync(OUTPUT_FILE, content);
console.log(`‚úÖ PROJECT_MEMORY.md generated: ${OUTPUT_FILE}`);
