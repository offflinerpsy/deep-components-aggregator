#!/usr/bin/env python3
"""
–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫–∏–µ –ö–û–ù–ö–†–ï–¢–ù–û –ø–æ–ª—è –æ—Ç–¥–∞—ë—Ç Mouser API –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
–ë–ï–ó –°–ö–†–ê–ü–ò–ù–ì–ê - —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π API response
"""

import os
import requests
import json

# Mouser API
MOUSER_API_KEY = os.getenv('MOUSER_API_KEY')
MOUSER_API_BASE = 'https://api.mouser.com/api/v1'

def show_mouser_response(mpn):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç Mouser API"""
    
    url = f"{MOUSER_API_BASE}/search/keyword"
    
    params = {
        'apiKey': MOUSER_API_KEY
    }
    
    body = {
        'SearchByKeywordRequest': {
            'keyword': mpn,
            'records': 1,
            'startingRecord': 0,
            'searchOptions': None,
            'searchWithYourSignUpLanguage': None
        }
    }
    
    print(f"\n{'='*80}")
    print(f"üîç Mouser API Response for: {mpn}")
    print(f"{'='*80}\n")
    
    response = requests.post(url, params=params, json=body)
    
    print(f"Status: {response.status_code}\n")
    
    if response.status_code == 200:
        data = response.json()
        
        if 'SearchResults' in data and 'Parts' in data['SearchResults']:
            parts = data['SearchResults']['Parts']
            
            if len(parts) > 0:
                product = parts[0]
                
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–¥—É–∫—Ç: {product.get('ManufacturerPartNumber')}\n")
                
                # 1. ProductAttributes
                print(f"{'‚îÄ'*80}")
                print(f"1Ô∏è‚É£  ProductAttributes (–æ—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏):")
                print(f"{'‚îÄ'*80}")
                
                attrs = product.get('ProductAttributes', [])
                if attrs:
                    for i, attr in enumerate(attrs, 1):
                        name = attr.get('AttributeName', 'N/A')
                        value = attr.get('AttributeValue', 'N/A')
                        print(f"   {i}. {name}: {value}")
                    print(f"\n   –ò—Ç–æ–≥–æ: {len(attrs)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n")
                else:
                    print("   ‚ö†Ô∏è  –ü—É—Å—Ç–æ\n")
                
                # 2. Main Fields
                print(f"{'‚îÄ'*80}")
                print(f"2Ô∏è‚É£  Main Product Fields (–æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è):")
                print(f"{'‚îÄ'*80}")
                
                main_fields = {
                    'Manufacturer': product.get('Manufacturer'),
                    'ManufacturerPartNumber': product.get('ManufacturerPartNumber'),
                    'MouserPartNumber': product.get('MouserPartNumber'),
                    'Category': product.get('Category'),
                    'Description': product.get('Description'),
                    'ROHSStatus': product.get('ROHSStatus'),
                    'LifecycleStatus': product.get('LifecycleStatus'),
                    'Availability': product.get('Availability'),
                    'AvailabilityInStock': product.get('AvailabilityInStock'),
                    'FactoryStock': product.get('FactoryStock'),
                    'LeadTime': product.get('LeadTime'),
                    'Min': product.get('Min'),
                    'Mult': product.get('Mult'),
                    'Package': product.get('Package'),
                    'Packaging': product.get('Packaging'),
                    'Series': product.get('Series'),
                    'Weight': product.get('Weight'),
                    'UnitWeightKg': product.get('UnitWeightKg'),
                    'Reeling': product.get('Reeling'),
                    'ImagePath': product.get('ImagePath'),
                    'DataSheetUrl': product.get('DataSheetUrl'),
                    'ProductDetailUrl': product.get('ProductDetailUrl')
                }
                
                count = 0
                for key, value in main_fields.items():
                    if value:
                        print(f"   {key}: {value}")
                        count += 1
                
                print(f"\n   –ò—Ç–æ–≥–æ: {count} –Ω–µ–ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π\n")
                
                # 3. ProductCompliance
                print(f"{'‚îÄ'*80}")
                print(f"3Ô∏è‚É£  ProductCompliance (—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è):")
                print(f"{'‚îÄ'*80}")
                
                compliance = product.get('ProductCompliance', [])
                if compliance:
                    for i, comp in enumerate(compliance, 1):
                        name = comp.get('ComplianceName', 'N/A')
                        value = comp.get('ComplianceValue', 'N/A')
                        print(f"   {i}. {name}: {value}")
                    print(f"\n   –ò—Ç–æ–≥–æ: {len(compliance)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n")
                else:
                    print("   ‚ö†Ô∏è  –ü—É—Å—Ç–æ\n")
                
                # 4. PriceBreaks
                print(f"{'‚îÄ'*80}")
                print(f"4Ô∏è‚É£  PriceBreaks (—Ü–µ–Ω—ã):")
                print(f"{'‚îÄ'*80}")
                
                prices = product.get('PriceBreaks', [])
                if prices:
                    for i, price in enumerate(prices, 1):
                        qty = price.get('Quantity', 'N/A')
                        p = price.get('Price', 'N/A')
                        curr = price.get('Currency', 'USD')
                        print(f"   {i}. Qty {qty}: {p} {curr}")
                    print(f"\n   –ò—Ç–æ–≥–æ: {len(prices)} —Ü–µ–Ω–æ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π\n")
                else:
                    print("   ‚ö†Ô∏è  –ü—É—Å—Ç–æ\n")
                
                # 5. AlternatePackagings
                print(f"{'‚îÄ'*80}")
                print(f"5Ô∏è‚É£  AlternatePackagings:")
                print(f"{'‚îÄ'*80}")
                
                alt_pack = product.get('AlternatePackagings', [])
                if alt_pack:
                    print(f"   ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ {len(alt_pack)} –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —É–ø–∞–∫–æ–≤–æ–∫\n")
                else:
                    print("   ‚ö†Ô∏è  –ù–µ—Ç\n")
                
                # 6. ProductDocuments
                print(f"{'‚îÄ'*80}")
                print(f"6Ô∏è‚É£  ProductDocuments (–¥–æ–∫—É–º–µ–Ω—Ç—ã):")
                print(f"{'‚îÄ'*80}")
                
                docs = product.get('ProductDocuments', [])
                if docs:
                    for i, doc in enumerate(docs, 1):
                        url = doc.get('DocumentUrl', 'N/A')
                        doc_type = doc.get('DocumentType', 'N/A')
                        print(f"   {i}. {doc_type}: {url}")
                    print(f"\n   –ò—Ç–æ–≥–æ: {len(docs)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n")
                else:
                    print("   ‚ö†Ô∏è  –ü—É—Å—Ç–æ\n")
                
                # –ò–¢–û–ì–û–í–´–ô –ü–û–î–°–ß–Å–¢
                print(f"\n{'='*80}")
                print(f"üìä –ò–¢–û–ì–û –¢–ï–•–ù–ò–ß–ï–°–ö–ò–• –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö:")
                print(f"{'='*80}")
                
                total_specs = len(attrs)  # ProductAttributes
                
                # Count non-empty main fields (excluding images/urls)
                spec_main_fields = ['Manufacturer', 'Category', 'ROHSStatus', 'LifecycleStatus', 
                                   'Package', 'Packaging', 'Series', 'Weight', 'LeadTime']
                for field in spec_main_fields:
                    if main_fields.get(field):
                        total_specs += 1
                
                total_specs += len(compliance)  # ProductCompliance
                
                print(f"\n   ProductAttributes: {len(attrs)}")
                print(f"   Main Fields (specs only): ~{len([f for f in spec_main_fields if main_fields.get(f)])}")
                print(f"   ProductCompliance: {len(compliance)}")
                print(f"   {'‚îÄ'*40}")
                print(f"   –í–°–ï–ì–û: ~{total_specs} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")
                print(f"\n   ‚úÖ Mouser API –æ—Ç–¥–∞—ë—Ç –ü–û–õ–ù–´–ï –¥–∞–Ω–Ω—ã–µ!\n")
                
            else:
                print("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω\n")
        else:
            print("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞\n")
            print(json.dumps(data, indent=2)[:500])
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.text}\n")


if __name__ == '__main__':
    if not MOUSER_API_KEY:
        print("‚ùå Error: MOUSER_API_KEY not set")
        print("   Set it: export MOUSER_API_KEY='your_key'")
    else:
        # –¢–µ—Å—Ç–æ–≤—ã–µ MPN
        test_mpns = ['LM317MBSTT3G', 'ATMEGA328P-PU']
        
        for mpn in test_mpns:
            show_mouser_response(mpn)
            print("\n\n")
