/**
 * Database initialization and seeding
 * Run: node src/db/init.js
 */

import {
  sequelize,
  AdminUser,
  Order,
  ApiHealth,
  ApiKey,
  StaticPage,
  ManualProduct,
  ProjectStat
} from './models.js'

async function initDatabase() {
  try {
    console.log('üîÑ Connecting to database...')
    await sequelize.authenticate()
    console.log('‚úÖ Database connection established')

    console.log('üîÑ Syncing models...')
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º { alter: false } —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    // –ù–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    await sequelize.sync({ force: false, alter: false })
    console.log('‚úÖ All models synced')

    // Seed admin user
    const adminExists = await AdminUser.findOne({ where: { email: 'admin@deepagg.local' } })
    if (!adminExists) {
      console.log('üîÑ Creating default admin user...')
      await AdminUser.create({
        email: 'admin@deepagg.local',
        password_hash: 'admin123', // Will be hashed by beforeCreate hook
        name: 'Admin',
        role: 'admin',
        is_active: true
      })
      console.log('‚úÖ Admin user created: admin@deepagg.local / admin123')
    }

    // Seed API health records
    const services = ['digikey', 'mouser', 'farnell', 'tme']
    for (const service of services) {
      const exists = await ApiHealth.findOne({ where: { service } })
      if (!exists) {
        await ApiHealth.create({
          service,
          status: 'offline',
          last_check: new Date(),
          response_time_ms: null,
          success_rate_24h: 0
        })
        console.log(`‚úÖ API health record created: ${service}`)
      }
    }

    // Seed static pages
    const pages = [
      {
        slug: 'about',
        title: '–û –∫–æ–º–ø–∞–Ω–∏–∏',
        content: '<p>Deep Components Aggregator ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.</p>',
        meta_description: '–û –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Å–µ—Ä–≤–∏—Å–µ –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
        is_published: true,
        position: 'footer',
        sort_order: 1
      },
      {
        slug: 'contacts',
        title: '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
        content: '<p>Email: info@deepagg.local<br>–¢–µ–ª–µ—Ñ–æ–Ω: +7 (xxx) xxx-xx-xx</p>',
        meta_description: '–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏',
        is_published: true,
        position: 'footer',
        sort_order: 2
      },
      {
        slug: 'delivery',
        title: '–î–æ—Å—Ç–∞–≤–∫–∞',
        content: '<p>–î–æ—Å—Ç–∞–≤–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ —Å–∫–ª–∞–¥—ã.</p>',
        meta_description: '–£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
        is_published: true,
        position: 'footer',
        sort_order: 3
      },
      {
        slug: 'privacy',
        title: '–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏',
        content: '<p>–ú—ã –∑–∞–±–æ—Ç–∏–º—Å—è –æ –∑–∞—â–∏—Ç–µ –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.</p>',
        meta_description: '–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏',
        is_published: true,
        position: 'footer',
        sort_order: 4
      }
    ]

    for (const page of pages) {
      const exists = await StaticPage.findOne({ where: { slug: page.slug } })
      if (!exists) {
        await StaticPage.create(page)
        console.log(`‚úÖ Static page created: ${page.slug}`)
      }
    }

    // Initialize today's stats
    const today = new Date().toISOString().split('T')[0]
    const todayStats = await ProjectStat.findOne({ where: { date: today } })
    if (!todayStats) {
      await ProjectStat.create({
        date: today,
        total_searches: 0,
        cache_hits: 0,
        live_searches: 0,
        total_orders: 0
      })
      console.log(`‚úÖ Project stats initialized for ${today}`)
    }

    console.log('\n‚úÖ Database initialization complete!')
    console.log('\nüìä Summary:')
    console.log(`   Admin users: ${await AdminUser.count()}`)
    console.log(`   API health records: ${await ApiHealth.count()}`)
    console.log(`   Static pages: ${await StaticPage.count()}`)
    console.log(`   Orders: ${await Order.count()}`)
    console.log(`   Manual products: ${await ManualProduct.count()}`)
    
    process.exit(0)
  } catch (error) {
    console.error('‚ùå Database initialization failed:', error)
    process.exit(1)
  }
}

initDatabase()
