// src/live/http.mjs - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ SSE live search —Å –ø—Ä–æ–∫—Å–∏
import { proxyManager } from '../proxy/proxy-manager.js';

export async function handleLiveSearch(req, res, q) {
  console.log(`üîç Live search started for: "${q}"`);
  
  // –§–∞–∑–∞ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  res.write(`event: note\ndata: ${JSON.stringify({phase:"init", query: q})}\n\n`);
  
  let totalResults = 0;
  const searchSources = ['oemstrade', 'chipdip', 'elitan']; // —Ä–∞—Å—à–∏—Ä–∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
  
  // –§–∞–∑–∞ 2: –ü–æ–∏—Å–∫ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º —Å –ø—Ä–æ–∫—Å–∏
  for (const source of searchSources) {
    res.write(`event: note\ndata: ${JSON.stringify({phase:"searching", source})}\n\n`);
    
    const results = await searchWithSource(source, q);
    
    if (results.length > 0) {
      console.log(`üîç Found ${results.length} results from ${source}`);
      
      // –°—Ç—Ä–∏–º–∏–º –∫–∞–∂–¥—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      for (const item of results) {
        res.write(`event: item\ndata: ${JSON.stringify(item)}\n\n`);
        totalResults++;
      }
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 200));
  }
  
  // –§–∞–∑–∞ 3: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
  if (totalResults > 0) {
    res.write(`event: note\ndata: ${JSON.stringify({phase:"complete", total: totalResults})}\n\n`);
  } else {
    // –§–æ–ª–±—ç–∫ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
    res.write(`event: note\ndata: ${JSON.stringify({phase:"fallback_local"})}\n\n`);
    
    const fallbackResults = await searchLocal(q);
    if (fallbackResults.length > 0) {
      res.write(`event: results\ndata: ${JSON.stringify({
        ok: true,
        query: q,
        count: fallbackResults.length,
        items: fallbackResults
      })}\n\n`);
    }
  }
  
  res.write(`event: done\ndata: ${JSON.stringify({query: q, total: totalResults})}\n\n`);
  res.end();
}

// –ü–æ–∏—Å–∫ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
async function searchWithSource(source, query) {
  const startTime = Date.now();
  
  if (source === 'oemstrade') {
    const { searchOEMsTrade } = await import('../../adapters/oemstrade.js');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    const proxyUrl = await proxyManager.getBestProxy();
    if (proxyUrl) {
      process.env.HTTPS_PROXY = proxyUrl;
      console.log(`üîÑ Using proxy for OEMsTrade: ${proxyUrl}`);
    }
    
    const results = await searchOEMsTrade(query);
    const elapsed = Date.now() - startTime;
    
    console.log(`‚è±Ô∏è OEMsTrade search completed in ${elapsed}ms, found ${results.length} items`);
    return results || [];
  }
  
  if (source === 'chipdip') {
    const { searchChipDip } = await import('../adapters/chipdip.js');
    
    const proxyUrl = await proxyManager.getBestProxy();
    if (proxyUrl) {
      process.env.HTTPS_PROXY = proxyUrl;
      console.log(`üîÑ Using proxy for ChipDip: ${proxyUrl}`);
    }
    
    const results = await searchChipDip(query);
    const elapsed = Date.now() - startTime;
    
    console.log(`‚è±Ô∏è ChipDip search completed in ${elapsed}ms, found ${results.length} items`);
    return results || [];
  }
  
  if (source === 'elitan') {
    const { searchElitan } = await import('../adapters/elitan.js');
    
    const proxyUrl = await proxyManager.getBestProxy();
    if (proxyUrl) {
      process.env.HTTPS_PROXY = proxyUrl;
      console.log(`üîÑ Using proxy for Elitan: ${proxyUrl}`);
    }
    
    const results = await searchElitan(query);
    const elapsed = Date.now() - startTime;
    
    console.log(`‚è±Ô∏è Elitan search completed in ${elapsed}ms, found ${results.length} items`);
    return results || [];
  }
  
  return [];
}

// –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∫–∞–∫ —Ñ–æ–ª–±—ç–∫
async function searchLocal(query) {
  const response = await fetch(`http://127.0.0.1:9201/api/search?q=${encodeURIComponent(query)}`);
  
  if (!response.ok) {
    console.log(`‚ùå Local search failed: ${response.status}`);
    return [];
  }
  
  const data = await response.json();
  return data.items || data.hits || [];
}
