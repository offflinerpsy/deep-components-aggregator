// src/proxy/proxy-manager.js - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ (–ª–æ–∫–∞–ª—å–Ω—ã–π + –ø—É–±–ª–∏—á–Ω—ã–µ)
// –ë–µ–∑ try/catch - —Ç–æ–ª—å–∫–æ —è–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏

import { ProxyAgent } from 'undici';
import { selectBestProxy, testProxy, logProxyHealth } from './public-proxies.js';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏
const LOCAL_PROXY_HOST = process.env.LOCAL_PROXY_HOST || '127.0.0.1';
const LOCAL_PROXY_PORT = process.env.LOCAL_PROXY_PORT || '8080';
const USE_LOCAL_PROXY = process.env.USE_LOCAL_PROXY !== 'false';

export class ProxyManager {
  constructor() {
    this.localProxyUrl = `http://${LOCAL_PROXY_HOST}:${LOCAL_PROXY_PORT}`;
    this.currentProxy = null;
    this.lastHealthCheck = 0;
    this.healthCheckInterval = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
  }

  // –ü–æ–ª—É—á–∏—Ç—å URL –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏
  getLocalProxyUrl() {
    return USE_LOCAL_PROXY ? this.localProxyUrl : null;
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏
  async checkLocalProxy() {
    if (!USE_LOCAL_PROXY) return false;
    
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 3000);
    
    const response = await fetch(`${this.localProxyUrl}/proxy/http://httpbin.org/ip`, {
      signal: controller.signal,
      headers: { 'User-Agent': 'DeepAgg/1.0' }
    });
    
    clearTimeout(timeoutId);
    return response.ok;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–∫—Å–∏
  async getBestProxy() {
    const now = Date.now();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –ø—Ä–æ–∫—Å–∏ —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç
    if (now - this.lastHealthCheck > this.healthCheckInterval) {
      await this.performHealthCheck();
      this.lastHealthCheck = now;
    }
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏
    if (USE_LOCAL_PROXY) {
      const isLocalOk = await this.checkLocalProxy();
      if (isLocalOk) {
        console.log('üîÑ Using local proxy:', this.localProxyUrl);
        return this.localProxyUrl;
      }
      console.log('‚ö†Ô∏è Local proxy unavailable, falling back to public proxies');
    }
    
    // –§–æ–ª–±—ç–∫ –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
    const bestPublicProxy = selectBestProxy();
    if (bestPublicProxy) {
      console.log('üîÑ Using public proxy:', bestPublicProxy);
      return bestPublicProxy;
    }
    
    console.log('‚ö†Ô∏è No working proxies available');
    return null;
  }

  // –°–æ–∑–¥–∞—Ç—å ProxyAgent –¥–ª—è fetch
  async createProxyAgent() {
    const proxyUrl = await this.getBestProxy();
    if (!proxyUrl) return null;
    
    return new ProxyAgent(proxyUrl);
  }

  // –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–∫—Å–∏
  async performHealthCheck() {
    console.log('üîç Performing proxy health check...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏
    if (USE_LOCAL_PROXY) {
      const isLocalOk = await this.checkLocalProxy();
      console.log(`üè† Local proxy (${this.localProxyUrl}):`, isLocalOk ? '‚úÖ OK' : '‚ùå FAIL');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ (–ø–µ—Ä–≤—ã–µ 3 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏)
    const publicProxies = [selectBestProxy()].filter(Boolean).slice(0, 3);
    
    for (const proxyUrl of publicProxies) {
      const result = await testProxy(proxyUrl);
      console.log(`üåê Public proxy (${proxyUrl}):`, 
        result.ok ? `‚úÖ OK (${result.responseTime}ms)` : `‚ùå FAIL (${result.status})`);
    }
    
    logProxyHealth();
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏)
  async getProxyForDomain(domain) {
    // –î–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Å–∞–π—Ç–æ–≤ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    const russianDomains = ['chipdip.ru', 'platan.ru', 'elitan.ru', 'compitech.ru'];
    
    if (russianDomains.some(d => domain.includes(d))) {
      console.log(`üá∑üá∫ Direct connection for Russian domain: ${domain}`);
      return null; // –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    }
    
    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
    return await this.getBestProxy();
  }

  // –°–æ–∑–¥–∞—Ç—å fetch options —Å –ø—Ä–æ–∫—Å–∏
  async createFetchOptions(url, baseOptions = {}) {
    const urlObj = new URL(url);
    const proxyUrl = await this.getProxyForDomain(urlObj.hostname);
    
    const options = {
      ...baseOptions,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Connection': 'keep-alive',
        ...baseOptions.headers
      }
    };
    
    if (proxyUrl) {
      options.dispatcher = new ProxyAgent(proxyUrl);
    }
    
    return options;
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–∫—Å–∏
export const proxyManager = new ProxyManager();
