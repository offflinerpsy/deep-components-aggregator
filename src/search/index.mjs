import fs from 'node:fs';
import { create, insertMultiple, search, save, load } from '@orama/orama';
import snowballFactory from 'snowball-stemmers';
import path from 'node:path';

const DB_PATH = path.resolve('data/orama.db');
const CORPUS_PATH = path.resolve('data/corpus.json');

const ru = snowballFactory.newStemmer('russian');
const en = snowballFactory.newStemmer('english');

function stem(token) {
  const isCyrillic = /[\u0400-\u04FF]/.test(token);
  return isCyrillic ? ru.stem(token) : en.stem(token);
}

const dbSchema = {
  id: 'string',
  title: 'string',
  mpn: 'string',
  manufacturer: 'string',
  description: 'string',
  specs_flat: 'string',
  url: 'string',
  image: 'string',
  price: 'string'
};

// –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –º—ã –±—É–¥–µ–º –∑–∞–ø—É—Å–∫–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞
export async function buildAndSaveIndex() {
  if (!fs.existsSync(CORPUS_PATH)) {
    console.error('‚ùå corpus.json –Ω–µ –Ω–∞–π–¥–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ npm run build:corpus');
    return;
  }

  console.log('üîç –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–ø—É—Å–∞ –¥–∞–Ω–Ω—ã—Ö...');
  const docs = JSON.parse(fs.readFileSync(CORPUS_PATH, 'utf8'));
  console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${docs.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`);

  console.log('üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ Orama...');
  const db = await create({
    schema: dbSchema,
    language: 'english' // Orama v2 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç language –≤–º–µ—Å—Ç–æ components
  });

  console.log('üìù –í—Å—Ç–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å...');
  await insertMultiple(db, docs);

  console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞...');
  await save(db, DB_PATH);
  console.log(`‚úÖ –ò–Ω–¥–µ–∫—Å Orama —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${DB_PATH}`);
}

// –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
export async function loadIndex() {
  if (!fs.existsSync(DB_PATH)) {
    console.error('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Orama –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ó–∞–ø—É—Å—Ç–∏—Ç–µ npm run build:index');
    return null;
  }

  console.log('üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ Orama...');
  const db = await load(DB_PATH);
  console.log('‚úÖ –ò–Ω–¥–µ–∫—Å Orama –∑–∞–≥—Ä—É–∂–µ–Ω');
  return db;
}

export async function query(db, q) {
  if (!db) return { count: 0, hits: [] };

  console.log(`üîç –ü–æ–∏—Å–∫: "${q}"`);
  const result = await search(db, {
    term: q,
    properties: ['title', 'mpn', 'manufacturer', 'description', 'specs_flat'],
    boost: { mpn: 3, title: 2, manufacturer: 1.5 },
    limit: 50,
    tolerance: 1,
    threshold: 0
  });

  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${result.hits.length}`);
  return result;
}

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, —Å–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å
if (import.meta.url === `file://${process.argv[1]}`) {
  buildAndSaveIndex().catch(console.error);
}
