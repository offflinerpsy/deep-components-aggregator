// content-orchestrator.js - –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
import { parseChipDipFast } from '../adapters/ru/chipdip-fast.js';
import { parsePromelec } from '../adapters/ru/promelec.js';
import { parseElectronshik } from '../adapters/ru/electronshik.js';
import { parseElitan } from '../adapters/ru/elitan.js';
import { parseCompel } from '../adapters/ru/compel.js';
import { parsePlatan } from '../adapters/ru/platan.js';
import { searchOEMsTrade } from '../../adapters/oemstrade.js';
import { convertToRub } from '../currency.js';
import { searchTokenizer } from './search-tokenizer.js';
import { createDb, queryDb } from '../search/db.js';

// –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∞–¥–∞–ø—Ç–µ—Ä—ã
const adapters = {
  chipdip: parseChipDipFast,
  promelec: parsePromelec,
  compel: parseCompel,
  electronshik: parseElectronshik,
  elitan: parseElitan,
  platan: parsePlatan
};

// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
const SOURCE_PRIORITY = ['chipdip', 'promelec', 'compel', 'electronshik', 'elitan', 'platan'];

// –õ–∏–º–∏—Ç—ã –¥–ª—è —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥–∞
const NETWORK_LIMITS = {
  timeout: 12000,
  minDelay: 600,
  maxDelay: 1200,
  maxConcurrent: 3
};

export class ContentOrchestrator {
  constructor() {
    this.oramaDb = null;
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Orama DB —Å –¥–∞–Ω–Ω—ã–º–∏
  async initOramaDb(docs = []) {
    if (!this.oramaDb) {
      this.oramaDb = await createDb(docs);
      console.log(`üîç Orama DB initialized with ${docs.length} documents`);
    }
    return this.oramaDb;
  }

  // –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º Orama
  async searchAll(query) {
    const results = [];

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Orama (–±—ã—Å—Ç—Ä—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Å MPN-–±—É—Å—Ç–∏–Ω–≥–æ–º)
    if (this.oramaDb) {
      const oramaResults = await queryDb(this.oramaDb, query);
      if (oramaResults.hits && oramaResults.hits.length > 0) {
        results.push(...oramaResults.hits.map(hit => hit.document));
        console.log(`üîç Orama found ${oramaResults.hits.length} results for "${query}"`);
      }
    }

    // –ï—Å–ª–∏ Orama –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∏–¥—ë–º –∫ OEMsTrade
    if (results.length === 0) {
      const oemsResults = await this.searchOEMsTrade(query);
      results.push(...oemsResults);
      console.log(`üîç OEMsTrade found ${oemsResults.length} results for "${query}"`);
    }

    return this.deduplicateAndSort(results, query);
  }

  // –ü–æ–∏—Å–∫ –≤ OEMsTrade
  async searchOEMsTrade(query) {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä—É—Å—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –¥–ª—è OEMsTrade
    const transformedQuery = this.transformQueryForOEMsTrade(query);
    console.log(`üîÑ Transformed query "${query}" ‚Üí "${transformedQuery}"`);

    const oemsResults = await searchOEMsTrade(transformedQuery);
    const results = [];

    if (Array.isArray(oemsResults)) {
      for (const item of oemsResults) {
        let priceRub = 0;
        if (item.price_min > 0 && item.price_min_currency) {
          if (item.price_min_currency === 'RUB') {
            priceRub = item.price_min;
          } else {
            const rate = await convertToRub(item.price_min_currency);
            if (rate) {
              priceRub = Math.round(item.price_min * rate);
            }
          }
        }

        results.push({
          mpn: item.mpn || query,
          title: item.title || item.mpn || query,
          manufacturer: item.manufacturer || '',
          description: this.truncateText(item.description || '', 200),
          package: item.package || '',
          packaging: item.packaging || '',
          regions: item.regions || [],
          stock_total: item.stock_total || 0,
          price_min_rub: priceRub || 0,
          image: item.image || "/ui/placeholder.svg",
          product_url: item.product_url || '',
          source: 'oemstrade'
        });
      }
    }

    return results;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
  async fetchProduct(mpn) {
    console.log(`üìÑ Fetching product for MPN: ${mpn}`);

    // –ù–∞—á–∏–Ω–∞–µ–º —Å OEMsTrade –¥–∞–Ω–Ω—ã—Ö
    const baseProduct = await this.fetchFromOEMsTrade(mpn);

    // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ RU-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    const enrichedProduct = await this.enrichProductFromRU(baseProduct, mpn);

    return enrichedProduct;
  }

  // –û–±–æ–≥–∞—â–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ RU-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
  async enrichProductFromRU(baseProduct, mpn) {
    if (!baseProduct) return null;

    const ruData = {
      images: [],
      docs: [],
      specs: {},
      description: '',
      sources: []
    };

    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–∂–¥–æ–≥–æ RU-–∏—Å—Ç–æ—á–Ω–∏–∫–∞
    for (const source of SOURCE_PRIORITY.slice(0, 3)) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 3 –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
      const adapter = adapters[source];
      if (!adapter) continue;

      console.log(`üîç Trying RU source: ${source} for ${mpn}`);

      const result = await adapter(mpn).catch(err => {
        console.log(`‚ùå ${source} failed:`, err.message);
        return { ok: false };
      });

      if (result.ok && result.data) {
        const data = result.data;
        ruData.sources.push(source);

        // –°–æ–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (data.images && data.images.length > 0) {
          ruData.images.push(...data.images.slice(0, 3));
        }

        // –°–æ–±–∏—Ä–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        if (data.datasheets && data.datasheets.length > 0) {
          ruData.docs.push(...data.datasheets.slice(0, 2));
        }

        // –°–æ–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if (data.technical_specs && Object.keys(data.technical_specs).length > 0) {
          Object.assign(ruData.specs, data.technical_specs);
        }

        // –ë–µ—Ä–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        if (!ruData.description && data.description) {
          ruData.description = data.description;
        }

        console.log(`‚úÖ ${source} provided: ${data.images?.length || 0} images, ${data.datasheets?.length || 0} docs, ${Object.keys(data.technical_specs || {}).length} specs`);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, NETWORK_LIMITS.minDelay));
    }

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å RU-–∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
    const enrichedProduct = {
      ...baseProduct,
      gallery: ruData.images.slice(0, 5).map(url => ({ image_url: url })),
      docs: ruData.docs.slice(0, 3).map(url => ({ doc_url: url, title: 'Datasheet' })),
      specs: Object.entries(ruData.specs).slice(0, 10).map(([key, value]) => ({ key, value })),
      description_html: ruData.description || baseProduct.description || '',
      sources: [...(baseProduct.sources || ['oemstrade']), ...ruData.sources]
    };

    console.log(`üéØ Product enriched with ${ruData.sources.length} RU sources: ${enrichedProduct.gallery.length} images, ${enrichedProduct.docs.length} docs, ${enrichedProduct.specs.length} specs`);

    return enrichedProduct;
  }

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è OEMsTrade (RU -> EN)
  transformQueryForOEMsTrade(query) {
    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü—É –∏ —Ü–∏—Ñ—Ä—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (!/[–∞-—è—ë]/i.test(query)) {
      return query;
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
    const normalized = searchTokenizer.normalize(query);
    const tokens = searchTokenizer.tokenize(normalized);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–æ–∫–µ–Ω—ã –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—ã
    const transformedTokens = tokens.map(token => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤
      const synonyms = searchTokenizer.getSynonyms(token);
      if (synonyms.length > 0) {
        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Å–∏–Ω–æ–Ω–∏–º
        const englishSynonym = synonyms.find(syn => /^[a-z]+$/i.test(syn));
        if (englishSynonym) {
          return englishSynonym;
        }
      }

      // –ï—Å–ª–∏ –Ω–µ—Ç —Å–∏–Ω–æ–Ω–∏–º–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—é
      return searchTokenizer.transliterate(token);
    });

    return transformedTokens.join(' ');
  }

  // –û–±–æ–≥–∞—â–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
  async enrichProduct(product, mpn) {
    const enrichPromises = [];

    // –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Å–ø–µ–∫–æ–≤
    const needImages = product.gallery.length === 0 || !product.gallery[0].image_url;
    const needDocs = product.docs.length === 0;
    const needSpecs = product.specs.length < 5;
    const needDescription = !product.description_html;

    if (needImages || needDocs || needSpecs || needDescription) {
      for (const source of SOURCE_PRIORITY) {
        if (product.sources.some(s => s.source === source)) continue;

        const adapter = adapters[source];
        if (!adapter) continue;

        const promise = adapter.fetchProduct(mpn).then(result => {
          if (result.status !== 'OK' || !result.data) return;

          const data = result.data;

          // –î–æ–ø–æ–ª–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          if (needImages && data.gallery.length > 0) {
            for (const img of data.gallery) {
              if (img.image_url && !product.gallery.some(g => g.image_url === img.image_url)) {
                product.gallery.push(img);
              }
            }
          }

          // –î–æ–ø–æ–ª–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
          if (needDocs && data.docs.length > 0) {
            for (const doc of data.docs) {
              if (!product.docs.some(d => d.url === doc.url)) {
                product.docs.push(doc);
              }
            }
          }

          // –î–æ–ø–æ–ª–Ω—è–µ–º —Å–ø–µ–∫–∏
          if (needSpecs && data.specs.length > 0) {
            for (const spec of data.specs) {
              if (!product.specs.some(s => s.name === spec.name)) {
                product.specs.push(spec);
              }
            }
          }

          // –î–æ–ø–æ–ª–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
          if (needDescription && data.description_html) {
            product.description_html = data.description_html;
          }

          // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
          product.sources.push({
            source: source,
            product_url: data.sources[0]?.product_url || ''
          });
        }).catch(err => {
          console.log(`[${source}] Enrich error:`, err.message);
        });

        enrichPromises.push(promise);

        if (enrichPromises.length >= NETWORK_LIMITS.maxConcurrent) {
          await Promise.race(enrichPromises);
        }
      }

      await Promise.allSettled(enrichPromises);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ OEMsTrade
  async fetchFromOEMsTrade(mpn) {
    const results = await searchOEMsTrade(mpn);
    if (!Array.isArray(results) || results.length === 0) return null;

    const item = results.find(r => r.mpn === mpn) || results[0];

    let priceRub = 0;
    if (item.price_min > 0 && item.price_min_currency) {
      if (item.price_min_currency === 'RUB') {
        priceRub = item.price_min;
      } else {
        const rate = await convertToRub(item.price_min_currency);
        if (rate) {
          priceRub = Math.round(item.price_min * rate);
        }
      }
    }

    return {
      mpn: item.mpn || mpn,
      title: item.title || item.mpn || mpn,
      manufacturer: item.manufacturer || '',
      gallery: item.images?.length > 0
        ? item.images.map(url => ({ image_url: url }))
        : (item.image && item.image !== '/ui/placeholder.svg' ? [{ image_url: item.image }] : []),
      meta: {
        package: item.package || '',
        packaging: item.packaging || ''
      },
      order: {
        regions: item.regions || ['RU'],
        stock: item.stock_total || null,
        min_price_rub: priceRub || null,
        min_currency: item.price_min_currency || null
      },
      description_html: item.description || '',
      docs: item.datasheets?.map(url => ({
        label: 'Datasheet',
        url
      })) || [],
      specs: [],
      sources: [{
        source: 'oemstrade',
        product_url: item.url || ''
      }]
    };
  }

  // –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
  deduplicateAndSort(results, query) {
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ MPN + manufacturer + package
    const grouped = new Map();

    for (const item of results) {
      const key = `${item.mpn}|${item.manufacturer}|${item.package}`;
      const existing = grouped.get(key);

      if (!existing || this.isBetterResult(item, existing)) {
        grouped.set(key, item);
      }
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–∞—Å—Å–∏–≤
    const deduplicated = Array.from(grouped.values());

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    deduplicated.sort((a, b) => {
      // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ MPN
      const aExact = a.mpn.toUpperCase() === query.toUpperCase();
      const bExact = b.mpn.toUpperCase() === query.toUpperCase();
      if (aExact && !bExact) return -1;
      if (!aExact && bExact) return 1;

      // –ù–∞–ª–∏—á–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–µ
      const aHasStock = (a.stock || 0) > 0;
      const bHasStock = (b.stock || 0) > 0;
      if (aHasStock && !bHasStock) return -1;
      if (!aHasStock && bHasStock) return 1;

      // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
      const aPrice = a.min_price_rub || Number.MAX_VALUE;
      const bPrice = b.min_price_rub || Number.MAX_VALUE;
      return aPrice - bPrice;
    });

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 40 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    return deduplicated.slice(0, 40);
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  isBetterResult(a, b) {
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç RU-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    const aIsRu = a.source !== 'oemstrade';
    const bIsRu = b.source !== 'oemstrade';
    if (aIsRu && !bIsRu) return true;
    if (!aIsRu && bIsRu) return false;

    // –ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    const aInfo = (a.description_short ? 1 : 0) +
                  (a.image_url ? 1 : 0) +
                  (a.manufacturer ? 1 : 0);
    const bInfo = (b.description_short ? 1 : 0) +
                  (b.image_url ? 1 : 0) +
                  (b.manufacturer ? 1 : 0);
    if (aInfo > bInfo) return true;
    if (aInfo < bInfo) return false;

    // –ù–∞–ª–∏—á–∏–µ –∏ —Ü–µ–Ω–∞
    const aHasStock = (a.stock || 0) > 0;
    const bHasStock = (b.stock || 0) > 0;
    if (aHasStock && !bHasStock) return true;
    if (!aHasStock && bHasStock) return false;

    const aPrice = a.min_price_rub || Number.MAX_VALUE;
    const bPrice = b.min_price_rub || Number.MAX_VALUE;
    return aPrice < bPrice;
  }

  truncateText(text, maxLength) {
    if (!text) return '';
    const clean = text.replace(/<[^>]*>/g, '').replace(/\s+/g, ' ').trim();
    return clean.length > maxLength ? clean.substring(0, maxLength) + '...' : clean;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
export const contentOrchestrator = new ContentOrchestrator();
