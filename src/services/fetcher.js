import { chromium } from 'playwright';

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞ —Å ChipDip.ru —Å –ø–æ–º–æ—â—å—é Playwright
 * @param {string} mpn - –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
 * @returns {Promise<{ok: true, html: string, url: string}|{ok: false, error: string}>}
 */
export async function fetchChipDipPageHtml(mpn) {
  if (!mpn || typeof mpn !== 'string' || mpn.trim().length === 0) {
    return { ok: false, error: 'Invalid MPN provided' };
  }

  let browser;
  let page;

  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
    browser = await chromium.launch({
      headless: true, // –ó–∞–ø—É—Å–∫–∞–µ–º –≤ headless —Ä–µ–∂–∏–º–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      timeout: 30000
    });

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    page = await browser.newPage();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º User-Agent –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    await page.setExtraHTTPHeaders({
      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
    });

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞ ChipDip
    const searchUrl = `https://www.chipdip.ru/search?searchtext=${encodeURIComponent(mpn)}`;
    console.log(`üîç Fetching ChipDip search page: ${searchUrl}`);
    
    await page.goto(searchUrl, { 
      waitUntil: 'networkidle',
      timeout: 30000 
    });

    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    await page.waitForTimeout(2000);

    // –ò—â–µ–º –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞
    const firstProductLink = await page.locator('a[href*="/product/"]').first();
    
    if (!(await firstProductLink.count())) {
      return { ok: false, error: 'No products found in search results' };
    }

    // –ü–æ–ª—É—á–∞–µ–º URL –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    const productUrl = await firstProductLink.getAttribute('href');
    let fullProductUrl;
    
    if (productUrl.startsWith('http')) {
      fullProductUrl = productUrl;
    } else {
      fullProductUrl = `https://www.chipdip.ru${productUrl}`;
    }

    console.log(`üìÑ Navigating to product page: ${fullProductUrl}`);

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞
    await page.goto(fullProductUrl, { 
      waitUntil: 'networkidle',
      timeout: 30000 
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await page.waitForTimeout(3000);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π HTML –∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const html = await page.content();

    console.log(`‚úÖ Successfully fetched HTML for ${mpn} (${html.length} characters)`);

    return {
      ok: true,
      html,
      url: fullProductUrl
    };

  } catch (error) {
    console.error(`‚ùå Error fetching ChipDip page for ${mpn}:`, error.message);
    return { 
      ok: false, 
      error: `Failed to fetch page: ${error.message}` 
    };

  } finally {
    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
    if (page) {
      try {
        await page.close();
      } catch (e) {
        console.warn('Warning: Failed to close page:', e.message);
      }
    }
    
    if (browser) {
      try {
        await browser.close();
      } catch (e) {
        console.warn('Warning: Failed to close browser:', e.message);
      }
    }
  }
}
