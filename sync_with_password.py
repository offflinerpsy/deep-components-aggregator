#!/usr/bin/env python3
# sync_with_password.py - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–∞—Ä–æ–ª—å
import paramiko
import subprocess
from datetime import datetime
import os

SERVER = "89.104.69.77"
USERNAME = "root"
PASSWORD = "DCIIcWfISxT3R4hT"

def log(msg):
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"[{timestamp}] {msg}")

def run_local_command(command):
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True, cwd=".")
        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        return False, "", str(e)

def create_ssh_client():
    try:
        ssh_client = paramiko.SSHClient()
        ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh_client.connect(SERVER, username=USERNAME, password=PASSWORD, timeout=30)
        return ssh_client
    except Exception as e:
        log(f"‚ùå SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}")
        return None

def run_remote_command(ssh_client, command, timeout=120):
    try:
        stdin, stdout, stderr = ssh_client.exec_command(command, timeout=timeout)
        output = stdout.read().decode('utf-8', errors='ignore')
        error = stderr.read().decode('utf-8', errors='ignore')
        exit_code = stdout.channel.recv_exit_status()
        return exit_code == 0, output, error
    except Exception as e:
        log(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {e}")
        return False, "", str(e)

def main():
    log("üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ß–ï–†–ï–ó –ü–ê–†–û–õ–¨")
    
    # 1. –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    log("üìù –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è...")
    success, output, error = run_local_command("git add .")
    if success:
        log("‚úÖ –§–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    else:
        log(f"‚ùå –û—à–∏–±–∫–∞ git add: {error}")
        return
    
    # 2. –ö–æ–º–º–∏—Ç
    commit_msg = f"fix: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–∞—Ä–æ–ª—å ({datetime.now().strftime('%Y-%m-%d %H:%M')})"
    success, output, error = run_local_command(f'git commit -m "{commit_msg}"')
    if success:
        log("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã")
    else:
        log(f"‚ö†Ô∏è –ö–æ–º–º–∏—Ç: {error}")
    
    # 3. Push –≤ GitHub
    log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GitHub...")
    success, output, error = run_local_command("git push origin main")
    if success:
        log("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ GitHub")
    else:
        log(f"‚ùå –û—à–∏–±–∫–∞ push –≤ GitHub: {error}")
        return
    
    # 4. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
    log("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É...")
    ssh_client = create_ssh_client()
    if not ssh_client:
        return
    
    try:
        # 5. –°–æ–∑–¥–∞–µ–º Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        log("üìÅ –°–æ–∑–¥–∞–µ–º Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...")
        run_remote_command(ssh_client, """
mkdir -p /srv/deep-agg.git /srv/deep-agg-diag.git
cd /srv/deep-agg.git
git init --bare
cd /srv/deep-agg-diag.git
git init --bare
""")
        
        # 6. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º post-receive —Ö—É–∫–∏
        log("üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º post-receive —Ö—É–∫–∏...")
        
        # –î–ª—è prod
        run_remote_command(ssh_client, """
cat > /srv/deep-agg.git/hooks/post-receive << 'EOF'
#!/bin/bash
TARGET="/opt/deep-agg"
GIT_DIR="/srv/deep-agg.git"
BRANCH="main"

while read oldrev newrev ref
do
    # only checking out the main (or master) branch
    if [[ $ref = refs/heads/$BRANCH ]];
    then
        echo "Ref $ref received. Deploying ${BRANCH} branch to production..."
        git --work-tree=$TARGET --git-dir=$GIT_DIR checkout -f $BRANCH
        cd $TARGET
        echo "Running post-deploy tasks..."
        npm install --production
        systemctl restart deep-agg
        echo "Deployment complete."
    fi
done
EOF

chmod +x /srv/deep-agg.git/hooks/post-receive
""")
        
        # –î–ª—è diag
        run_remote_command(ssh_client, """
cat > /srv/deep-agg-diag.git/hooks/post-receive << 'EOF'
#!/bin/bash
TARGET="/opt/deep-agg-diag"
GIT_DIR="/srv/deep-agg-diag.git"
BRANCH="main"

while read oldrev newrev ref
do
    if [[ $ref = refs/heads/$BRANCH ]];
    then
        echo "Ref $ref received. Deploying ${BRANCH} branch to diagnostics..."
        git --work-tree=$TARGET --git-dir=$GIT_DIR checkout -f $BRANCH
        cd $TARGET
        echo "Saving diagnostic data..."
        mkdir -p /opt/deep-agg-diag/reports
        date > /opt/deep-agg-diag/reports/last-deploy.txt
        echo "Diagnostic deployment complete."
    fi
done
EOF

chmod +x /srv/deep-agg-diag.git/hooks/post-receive
""")
        
        # 7. –ü—É—à–∏–º –≤ prod
        log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ prod —Å–µ—Ä–≤–µ—Ä...")
        success, output, error = run_local_command(f'git push prod main')
        if success:
            log("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ prod")
        else:
            log(f"‚ùå –û—à–∏–±–∫–∞ push –Ω–∞ prod: {error}")
        
        # 8. –ü—É—à–∏–º –≤ diag
        log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ diag —Å–µ—Ä–≤–µ—Ä...")
        success, output, error = run_local_command(f'git push diag main')
        if success:
            log("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ diag")
        else:
            log(f"‚ùå –û—à–∏–±–∫–∞ push –Ω–∞ diag: {error}")
        
        # 9. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
        log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞...")
        success, output, error = run_remote_command(ssh_client, "systemctl status deep-agg --no-pager -l")
        if success and "active (running)" in output:
            log("‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            log("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # 10. –ü—Ä–æ–≤–µ—Ä—è–µ–º API
        log("üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º API...")
        success, output, error = run_remote_command(ssh_client, "curl -s 'http://127.0.0.1:9201/api/search?q=LM317T' | head -50")
        if success and "LM317T" in output:
            log("‚úÖ API –æ—Ç–≤–µ—á–∞–µ—Ç")
        else:
            log("‚ùå API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
        
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
    finally:
        ssh_client.close()
    
    log("‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
    log("")
    log("üåê –ü–†–û–í–ï–†–¨–¢–ï:")
    log("   ‚Ä¢ GitHub: https://github.com/offflinerpsy/deep-components-aggregator")
    log("   ‚Ä¢ Prod: http://89.104.69.77/")
    log("   ‚Ä¢ Diag: –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")

if __name__ == "__main__":
    main()
