// test-live-search.mjs
import { buildTargets } from './src/targets/chipdip.mjs';
import { makeRotator } from './lib/rotator.mjs';
import { fetchViaScraperAPI } from './adapters/providers/scraperapi.mjs';
import { fetchViaScrapingBee } from './adapters/providers/scrapingbee.mjs';
import { fetchDirect } from './adapters/providers/direct.mjs';
import { parseListing } from './src/parsers/chipdip/parse-listing.mjs';
import { parseProduct } from './src/parsers/chipdip/parse-product.mjs';
import { isOk } from './lib/result.mjs';
import { PROVIDER_CONFIG } from './config/providers.mjs';

console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã live-search...');

function pickBeeKey() {
  const keys = PROVIDER_CONFIG.SCRAPINGBEE_KEYS;
  if (keys.length === 0) return "";
  const i = Math.floor(Math.random() * keys.length);
  return keys[i];
}

async function testLiveSearch(query) {
  console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å: "${query}"`);

  // 1. –°—Ç—Ä–æ–∏–º —Ü–µ–ª–∏
  const targets = buildTargets(query);
  console.log('üéØ –¶–µ–ª–∏:', targets);

  // 2. –°–æ–∑–¥–∞–µ–º —Ä–æ—Ç–∞—Ç–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
  const providers = makeRotator([
    { name: "scraperapi", fn: (t) => fetchViaScraperAPI({ key: PROVIDER_CONFIG.SCRAPERAPI_KEY, url: t, timeout: 10000 }) },
    { name: "scrapingbee", fn: (t) => fetchViaScrapingBee({ key: pickBeeKey(), url: t, timeout: 10000 }) },
    { name: "direct", fn: (t) => fetchDirect({ url: t, timeout: 10000 }) },
  ]);

  let foundItems = [];

  // 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Ü–µ–ª—å
  for (const target of targets) {
    console.log(`\nüì° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: ${target}`);

    const availableProviders = providers.nextUsable();
    if (availableProviders.length === 0) {
      console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤');
      continue;
    }

    // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    for (const provider of availableProviders) {
      console.log(`  üîÑ –ü—Ä–æ–±—É—é –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${provider.name}`);

      const result = await provider.fn(target);
      if (isOk(result)) {
        console.log(`  ‚úÖ ${provider.name} —É—Å–ø–µ—à–Ω–æ, –±–∞–π—Ç: ${result.data.bytes}`);
        providers.markOk(provider.name);

        // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const parsed = target.includes("/product/")
          ? parseProduct({ html: result.data.html, sourceUrl: target })
          : parseListing({ html: result.data.html, sourceUrl: target });

        if (isOk(parsed)) {
          console.log(`  üìä –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ: ${Array.isArray(parsed.data) ? parsed.data.length : 1} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
          foundItems.push(...(Array.isArray(parsed.data) ? parsed.data : [parsed.data]));
          break; // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–π —Ü–µ–ª–∏
        } else {
          console.log(`  ‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è: ${parsed.reason}`);
        }
      } else {
        console.log(`  ‚ùå ${provider.name} –Ω–µ —É–¥–∞–ª—Å—è: ${result.reason}`);
        providers.markFail(provider.name);
      }
    }
  }

  console.log(`\nüìà –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: ${foundItems.length} —Ç–æ–≤–∞—Ä–æ–≤`);
  if (foundItems.length > 0) {
    console.log('üèÜ –ü–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä:', {
      title: foundItems[0].title,
      mpn: foundItems[0].mpn,
      brand: foundItems[0].brand,
      source: foundItems[0].source
    });
  }

  return foundItems;
}

async function runTests() {
  const queries = ['LM317', '1N4148', '—Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä'];

  for (const query of queries) {
    await testLiveSearch(query);
  }

  console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
}

runTests().catch(console.error);
