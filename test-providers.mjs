// test-providers.mjs
import { fetchViaScraperAPI } from './adapters/providers/scraperapi.mjs';
import { fetchViaScrapingBee } from './adapters/providers/scrapingbee.mjs';
import { fetchDirect } from './adapters/providers/direct.mjs';
import { PROVIDER_CONFIG } from './config/providers.mjs';

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...');

async function testScraperAPI() {
  console.log('\nüì° –¢–µ—Å—Ç–∏—Ä—É—é ScraperAPI...');
  const result = await fetchViaScraperAPI({
    key: PROVIDER_CONFIG.SCRAPERAPI_KEY,
    url: 'https://www.chipdip.ru/search?searchtext=LM317',
    timeout: 10000
  });
  
  console.log('ScraperAPI result:', result.ok ? 'SUCCESS' : 'FAILED');
  if (!result.ok) {
    console.log('Error:', result.reason, result.code);
  } else {
    console.log('HTML bytes:', result.data.bytes);
    console.log('Status:', result.data.status);
  }
}

async function testScrapingBee() {
  console.log('\nüêù –¢–µ—Å—Ç–∏—Ä—É—é ScrapingBee...');
  const result = await fetchViaScrapingBee({
    key: PROVIDER_CONFIG.SCRAPINGBEE_KEYS[0],
    url: 'https://www.chipdip.ru/search?searchtext=LM317',
    timeout: 10000
  });
  
  console.log('ScrapingBee result:', result.ok ? 'SUCCESS' : 'FAILED');
  if (!result.ok) {
    console.log('Error:', result.reason, result.code);
  } else {
    console.log('HTML bytes:', result.data.bytes);
    console.log('Status:', result.data.status);
  }
}

async function testDirect() {
  console.log('\nüåê –¢–µ—Å—Ç–∏—Ä—É—é Direct...');
  const result = await fetchDirect({
    url: 'https://www.chipdip.ru/search?searchtext=LM317',
    timeout: 10000
  });
  
  console.log('Direct result:', result.ok ? 'SUCCESS' : 'FAILED');
  if (!result.ok) {
    console.log('Error:', result.reason, result.code);
  } else {
    console.log('HTML bytes:', result.data.bytes);
    console.log('Status:', result.data.status);
  }
}

async function runTests() {
  await testDirect(); // –°–Ω–∞—á–∞–ª–∞ direct, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á–µ–π
  await testScraperAPI();
  await testScrapingBee();
  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

runTests().catch(console.error);
