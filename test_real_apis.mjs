/**
 * –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö API —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
 * –ü—Ä–æ–≤–µ—Ä–∏–º TME –∏ Farnell –Ω–∞ —Ç–æ–≤–∞—Ä–∞—Ö –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –µ—Å—Ç—å –≤ –±–∞–∑–∞—Ö
 */

import { tmeSearchProducts, tmeGetProduct } from './src/integrations/tme/client.mjs';
import { farnellByMPN, farnellByKeyword } from './src/integrations/farnell/client.mjs';
import dotenv from 'dotenv';

dotenv.config();

const TME_TOKEN = process.env.TME_TOKEN || process.env.TME_API_TOKEN;
const TME_SECRET = process.env.TME_SECRET || process.env.TME_API_SECRET;
const FARNELL_KEY = process.env.FARNELL_API_KEY;
const FARNELL_REGION = process.env.FARNELL_REGION || 'uk.farnell.com';

// –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –µ—Å—Ç—å –≤ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö –¥–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä–∞—Ö
const TEST_PRODUCTS = [
  { name: '–†–µ–∑–∏—Å—Ç–æ—Ä 10K', mpn: 'CRCW080510K0FKEA', supplier: 'Vishay' },
  { name: '–ö–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä 100nF', mpn: 'C0805C104K5RACTU', supplier: 'KEMET' },
  { name: 'STM32 MCU', mpn: 'STM32F407VGT6', supplier: 'STMicroelectronics' },
  { name: 'LM358 OpAmp', mpn: 'LM358P', supplier: 'Texas Instruments' },
];

async function testTME(product) {
  console.log(`\nüîµ TME: –¢–µ—Å—Ç "${product.name}" (${product.mpn})`);
  
  if (!TME_TOKEN || !TME_SECRET) {
    console.log('   ‚ö†Ô∏è  TME_API_TOKEN –∏–ª–∏ TME_API_SECRET –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    return { ok: false, reason: 'no_credentials' };
  }
  
  try {
    // 1. –ü–æ–∏—Å–∫
    console.log(`   üîç –ü–æ–∏—Å–∫: ${product.mpn}`);
    const searchResult = await tmeSearchProducts({
      token: TME_TOKEN,
      secret: TME_SECRET,
      query: product.mpn,
      country: 'PL',
      language: 'EN'
    });
    
    console.log(`   üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞: ${searchResult.data?.Data?.ProductList?.length || 0}`);
    
    if (!searchResult.data?.Data?.ProductList?.length) {
      console.log('   ‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ Search');
      return { ok: false, reason: 'not_found_search' };
    }
    
    const firstProduct = searchResult.data.Data.ProductList[0];
    console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω: ${firstProduct.Symbol} - ${firstProduct.Description}`);
    
    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π
    console.log(`   üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π: ${firstProduct.Symbol}`);
    const detailsResult = await tmeGetProduct({
      token: TME_TOKEN,
      secret: TME_SECRET,
      symbol: firstProduct.Symbol,
      country: 'PL',
      language: 'EN'
    });
    
    if (!detailsResult.data?.Data?.ProductList?.length) {
      console.log('   ‚ö†Ô∏è  GetProduct –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫');
      return { ok: true, hasDetails: false, searchWorks: true };
    }
    
    const details = detailsResult.data.Data.ProductList[0];
    console.log(`   ‚úÖ –î–µ—Ç–∞–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã:`);
    console.log(`      - Symbol: ${details.Symbol}`);
    console.log(`      - Producer: ${details.Producer}`);
    console.log(`      - Description: ${details.Description}`);
    console.log(`      - Photos: ${details.Photo?.length || 0}`);
    console.log(`      - Parameters: ${Object.keys(details.Parameters || {}).length}`);
    
    return { 
      ok: true, 
      hasDetails: true, 
      searchWorks: true,
      specsCount: Object.keys(details.Parameters || {}).length,
      imagesCount: details.Photo?.length || 0
    };
    
  } catch (err) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${err.message}`);
    if (err.cause?.status === 403) {
      console.log('   üîê 403 - –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π (HMAC signature)');
    }
    return { ok: false, reason: 'error', error: err.message };
  }
}

async function testFarnell(product) {
  console.log(`\nüü† Farnell: –¢–µ—Å—Ç "${product.name}" (${product.mpn})`);
  
  if (!FARNELL_KEY) {
    console.log('   ‚ö†Ô∏è  FARNELL_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    return { ok: false, reason: 'no_credentials' };
  }
  
  try {
    // 1. –ü–æ–∏—Å–∫ –ø–æ MPN
    console.log(`   üîç –ü–æ–∏—Å–∫ –ø–æ MPN: ${product.mpn}`);
    const result = await farnellByMPN({
      apiKey: FARNELL_KEY,
      region: FARNELL_REGION,
      q: product.mpn,
      limit: 10
    });
    
    if (!result.ok) {
      console.log(`   ‚ùå API error: ${result.status}`);
      return { ok: false, reason: 'api_error', status: result.status };
    }
    
    const productCount = result.data?.premierFarnellPartNumberReturn?.numberOfResults || 0;
    console.log(`   üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${productCount}`);
    
    if (productCount === 0) {
      console.log('   ‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return { ok: false, reason: 'not_found' };
    }
    
    const products = result.data.premierFarnellPartNumberReturn?.products || [];
    if (products.length === 0) {
      console.log('   ‚ö†Ô∏è  numberOfResults > 0, –Ω–æ products –ø—É—Å—Ç–æ–π');
      return { ok: false, reason: 'empty_products' };
    }
    
    const prod = products[0];
    console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω:`);
    console.log(`      - SKU: ${prod.sku}`);
    console.log(`      - Manufacturer: ${prod.brandName}`);
    console.log(`      - Description: ${prod.displayName}`);
    console.log(`      - Images: ${prod.images?.length || 0}`);
    console.log(`      - Attributes: ${prod.attributes?.length || 0}`);
    console.log(`      - Stock: ${prod.stock?.level || 'N/A'}`);
    
    return {
      ok: true,
      specsCount: prod.attributes?.length || 0,
      imagesCount: prod.images?.length || 0,
      hasStock: !!prod.stock?.level
    };
    
  } catch (err) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${err.message}`);
    return { ok: false, reason: 'error', error: err.message };
  }
}

async function main() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö API\n');
  console.log('=' .repeat(60));
  
  const results = {
    tme: [],
    farnell: []
  };
  
  for (const product of TEST_PRODUCTS) {
    const tmeResult = await testTME(product);
    results.tme.push({ product, result: tmeResult });
    
    const farnellResult = await testFarnell(product);
    results.farnell.push({ product, result: farnellResult });
  }
  
  // –ò—Ç–æ–≥–∏
  console.log('\n' + '='.repeat(60));
  console.log('üìä –ò–¢–û–ì–ò\n');
  
  const tmeSuccess = results.tme.filter(r => r.result.ok).length;
  const farnellSuccess = results.farnell.filter(r => r.result.ok).length;
  
  console.log(`üîµ TME: ${tmeSuccess}/${TEST_PRODUCTS.length} —É—Å–ø–µ—à–Ω–æ`);
  results.tme.forEach(({ product, result }) => {
    if (result.ok) {
      console.log(`   ‚úÖ ${product.name}: ${result.specsCount} specs, ${result.imagesCount} images`);
    } else {
      console.log(`   ‚ùå ${product.name}: ${result.reason}`);
    }
  });
  
  console.log(`\nüü† Farnell: ${farnellSuccess}/${TEST_PRODUCTS.length} —É—Å–ø–µ—à–Ω–æ`);
  results.farnell.forEach(({ product, result }) => {
    if (result.ok) {
      console.log(`   ‚úÖ ${product.name}: ${result.specsCount} specs, ${result.imagesCount} images`);
    } else {
      console.log(`   ‚ùå ${product.name}: ${result.reason}`);
    }
  });
  
  console.log('\n' + '='.repeat(60));
  console.log('üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:\n');
  
  if (tmeSuccess > farnellSuccess) {
    console.log('   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å TME –∫–∞–∫ primary, Farnell –∫–∞–∫ fallback');
  } else if (farnellSuccess > tmeSuccess) {
    console.log('   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Farnell –∫–∞–∫ primary, TME –∫–∞–∫ fallback');
  } else if (tmeSuccess === 0 && farnellSuccess === 0) {
    console.log('   ‚ùå –û–±–∞ API –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç - –Ω—É–∂–Ω–æ —á–∏–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é');
  } else {
    console.log('   –û–±–∞ API —Ä–∞–≤–Ω–æ–∑–Ω–∞—á–Ω—ã - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ');
  }
}

main().catch(console.error);
