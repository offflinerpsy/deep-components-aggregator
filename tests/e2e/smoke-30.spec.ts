import { test, expect } from '@playwright/test';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ MPN –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const smokeList = JSON.parse(
  fs.readFileSync(path.join(__dirname, '../smoke/smoke-30.json'), 'utf-8')
) as string[];

const PASS_THRESHOLD = 0.8; // 80% –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏
const REQUIRED_PASSES = Math.ceil(smokeList.length * PASS_THRESHOLD);

test.describe('Smoke-30 Test Suite', () => {
  let passCount = 0;
  let results: Array<{ mpn: string, passed: boolean, reason?: string }> = [];

  test.afterAll(async () => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const report = {
      timestamp: new Date().toISOString(),
      total: smokeList.length,
      passed: passCount,
      failed: smokeList.length - passCount,
      passRate: (passCount / smokeList.length * 100).toFixed(1) + '%',
      threshold: (PASS_THRESHOLD * 100) + '%',
      success: passCount >= REQUIRED_PASSES,
      results: results
    };

    const reportPath = path.join(__dirname, '../../reports/smoke-30-results.json');
    fs.mkdirSync(path.dirname(reportPath), { recursive: true });
    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));

    console.log(`\nüéØ SMOKE-30 RESULTS:`);
    console.log(`   Passed: ${passCount}/${smokeList.length} (${report.passRate})`);
    console.log(`   Threshold: ${report.threshold}`);
    console.log(`   Status: ${report.success ? '‚úÖ PASS' : '‚ùå FAIL'}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥
    expect(passCount).toBeGreaterThanOrEqual(REQUIRED_PASSES);
  });

  for (const mpn of smokeList) {
    test(`Smoke test for ${mpn}`, async ({ page }) => {
      let testPassed = false;
      let failureReason = '';

      try {
        // 1. –ü–æ–∏—Å–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await page.goto('/');
        await page.getByPlaceholder('–í–≤–µ–¥–∏—Ç–µ MPN').fill(mpn);
        await page.getByRole('button', { name: '–ü–æ–∏—Å–∫' }).click();

        // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        await page.waitForFunction(
          () => {
            const rows = document.querySelectorAll('[data-testid="result-row"]');
            const summary = document.querySelector('#sum')?.textContent || '';
            return rows.length > 0 || summary.includes('–ù–∞–π–¥–µ–Ω–æ: 0');
          },
          { timeout: 15000 }
        );

        const resultRows = await page.getByTestId('result-row').count();
        
        if (resultRows === 0) {
          failureReason = 'No search results found';
        } else {
          // 2. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
          const firstRow = page.getByTestId('result-row').first();
          const openLink = firstRow.getByTestId('cell-open').locator('a');
          await openLink.click();

          // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞
          await page.waitForSelector('[data-testid="product-root"]', { timeout: 10000 });

          const title = page.getByTestId('title');
          await expect(title).toBeVisible();

          const titleText = await title.textContent();
          if (!titleText?.trim()) {
            failureReason = 'Product title is empty';
          } else {
            // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
            await expect(page.getByTestId('gallery')).toBeVisible();
            await expect(page.getByTestId('meta')).toBeVisible();
            await expect(page.getByTestId('order')).toBeVisible();

            // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ü–µ–Ω–∞
            const priceElement = page.locator('#minPrice');
            await expect(priceElement).toBeVisible();
            
            testPassed = true;
          }
        }
      } catch (error) {
        failureReason = error instanceof Error ? error.message : 'Unknown error';
      }

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      results.push({
        mpn,
        passed: testPassed,
        reason: testPassed ? undefined : failureReason
      });

      if (testPassed) {
        passCount++;
      }

      // –ú—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –Ω–µ –ø–∞–¥–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
      if (!testPassed) {
        console.log(`‚ö†Ô∏è  ${mpn}: ${failureReason}`);
      } else {
        console.log(`‚úÖ ${mpn}: OK`);
      }
    });
  }
});