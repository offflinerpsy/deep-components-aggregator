import { test, expect } from '@playwright/test';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const MPNs = JSON.parse(fs.readFileSync(path.join(__dirname, '../smoke/smoke-30.json'), 'utf8'));

let passedCount = 0;
let totalCount = 0;

for (const mpn of MPNs) {
  test(`Smoke-30 ${mpn}: –ø–æ–∏—Å–∫ ‚Üí –∫–∞—Ä—Ç–æ—á–∫–∞ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º`, async ({ page }) => {
    totalCount++;
    
    // –ü–æ–∏—Å–∫
    await page.goto(`/?q=${encodeURIComponent(mpn)}`);
    
    // –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    await page.waitForFunction(() => {
      const sumEl = document.getElementById('sum');
      return sumEl && sumEl.textContent && sumEl.textContent.includes('–ù–∞–π–¥–µ–Ω–æ:');
    }, { timeout: 10000 });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const table = page.locator('[data-testid="search-table"]');
    const rows = table.locator('[data-testid="result-row"]');
    const rowCount = await rows.count();
    
    if (rowCount === 0) {
      console.log(`‚ùå ${mpn}: –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞`);
      return;
    }
    
    // –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const firstRow = rows.first();
    const mpnLink = firstRow.locator('[data-testid="cell-mpn"] a');
    await mpnLink.click();
    
    // –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
    await page.waitForFunction(() => {
      const titleEl = document.querySelector('[data-testid="title"]');
      return titleEl && titleEl.textContent && titleEl.textContent.trim().length > 0;
    }, { timeout: 10000 });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const title = page.locator('[data-testid="title"]');
    const gallery = page.locator('[data-testid="gallery"]');
    const docs = page.locator('[data-testid="docs"]');
    const specs = page.locator('[data-testid="specs"]');
    const order = page.locator('[data-testid="order"]');
    
    let hasContent = true;
    let contentInfo = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const titleText = await title.textContent();
    if (!titleText || titleText.trim().length === 0) {
      console.log(`‚ùå ${mpn}: –ü—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫`);
      hasContent = false;
    } else {
      contentInfo.push(`title: ${titleText.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–∞–ª–µ—Ä–µ—é
    const galleryImg = gallery.locator('img');
    const hasImage = await galleryImg.count() > 0;
    if (hasImage) {
      contentInfo.push('image: –µ—Å—Ç—å');
    } else {
      console.log(`‚ö†Ô∏è ${mpn}: –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
    const docsList = docs.locator('li');
    const docsCount = await docsList.count();
    if (docsCount > 0) {
      contentInfo.push(`docs: ${docsCount} —à—Ç`);
    } else {
      console.log(`‚ö†Ô∏è ${mpn}: –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const specRows = specs.locator('tr');
    const specCount = await specRows.count();
    if (specCount >= 5) {
      contentInfo.push(`specs: ${specCount} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤`);
    } else {
      console.log(`‚ö†Ô∏è ${mpn}: –ú–∞–ª–æ –¢–¢–• (${specCount} < 5)`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫ –∑–∞–∫–∞–∑–∞
    const stock = order.locator('#stock');
    const price = order.locator('#minPrice');
    const hasStock = await stock.textContent();
    const hasPrice = await price.textContent();
    
    if (hasStock && hasStock.trim() !== '') {
      contentInfo.push('stock: –µ—Å—Ç—å');
    }
    if (hasPrice && hasPrice.trim() !== '') {
      contentInfo.push('price: –µ—Å—Ç—å');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–æ–ª—å –Ω–∞ –æ—à–∏–±–∫–∏
    const errors = [];
    page.on('console', msg => {
      if (msg.type() === 'error') {
        errors.push(msg.text());
      }
    });
    
    await page.waitForTimeout(1000);
    
    if (errors.length > 0) {
      console.log(`‚ö†Ô∏è ${mpn}: –û—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏: ${errors.join(', ')}`);
    }
    
    if (hasContent) {
      console.log(`‚úÖ ${mpn}: ${contentInfo.join(', ')}`);
      passedCount++;
    } else {
      console.log(`‚ùå ${mpn}: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞`);
    }
  });
}

test('Smoke-30 results: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–∞', async () => {
  const successRate = totalCount > 0 ? (passedCount / totalCount) * 100 : 0;
  const THRESHOLD = 24; // –ú–∏–Ω–∏–º—É–º 24 –∏–∑ 30 –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏ (80%)
  
  console.log(`\\nüìä Smoke-30 Results:`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${passedCount}/${totalCount} (${successRate.toFixed(1)}%)`);
  console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω–æ: ${totalCount - passedCount}/${totalCount}`);
  console.log(`üéØ –ü–æ—Ä–æ–≥: ${THRESHOLD}/${totalCount} (${(THRESHOLD/totalCount*100).toFixed(1)}%)`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É—Å–ø–µ—à–Ω–æ—Å—Ç—å >= –ø–æ—Ä–æ–≥–∞
  expect(passedCount).toBeGreaterThanOrEqual(THRESHOLD);
  
  console.log(`\\nüéØ Smoke-30: ${passedCount >= THRESHOLD ? 'PASS' : 'FAIL'} (—Ç—Ä–µ–±—É–µ—Ç—Å—è ‚â•${THRESHOLD})`);
});
