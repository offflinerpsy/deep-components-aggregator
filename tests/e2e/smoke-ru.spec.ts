import { test, expect } from '@playwright/test';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const MPNs = JSON.parse(fs.readFileSync(path.join(__dirname, '../smoke/smoke-ru.json'), 'utf8'));

let passedCount = 0;
let totalCount = 0;

for (const mpn of MPNs) {
  test(`Smoke RU ${mpn}: –ø–æ–∏—Å–∫ ‚Üí –∫–∞—Ä—Ç–æ—á–∫–∞ —Å RU-–∫–æ–Ω—Ç–µ–Ω—Ç–æ–º`, async ({ page }) => {
    totalCount++;
    
    // –ü–æ–∏—Å–∫
    await page.goto(`/?q=${encodeURIComponent(mpn)}`);
    
    // –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    await page.waitForFunction(() => {
      const sumEl = document.getElementById('sum');
      return sumEl && sumEl.textContent && sumEl.textContent.includes('–ù–∞–π–¥–µ–Ω–æ:');
    }, { timeout: 30000 });
    
    // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    const table = page.locator('table tbody tr');
    const rowCount = await table.count();
    
    if (rowCount === 0) {
      console.log(`‚ùå ${mpn}: –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞`);
      return;
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞
    const firstLink = page.locator('a', { hasText: /open/i }).first();
    if (await firstLink.count() > 0) {
      await firstLink.click();
    } else {
      await page.goto(`/product?mpn=${encodeURIComponent(mpn)}`);
    }
    
    // –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
    await page.waitForSelector('[data-testid="product-root"]', { timeout: 15000 });
    
    // –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    await page.waitForFunction(() => {
      const titleEl = document.querySelector('[data-testid="title"]');
      return titleEl && titleEl.textContent && titleEl.textContent.trim() !== '';
    }, { timeout: 15000 });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º RU-–∫–æ–Ω—Ç–µ–Ω—Ç
    let ruContentFound = false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    const desc = page.getByTestId('desc');
    if (await desc.isVisible()) {
      const descText = await desc.textContent();
      if (descText && descText.length > 20) {
        ruContentFound = true;
        console.log(`‚úÖ ${mpn}: RU –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ (${descText.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const specs = page.getByTestId('specs');
    if (await specs.isVisible()) {
      const specsText = await specs.textContent();
      if (specsText && specsText.length > 20) {
        ruContentFound = true;
        console.log(`‚úÖ ${mpn}: RU —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–∞–π–¥–µ–Ω—ã (${Object.keys(JSON.parse(specsText || '{}')).length} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã
    const docs = page.getByTestId('docs');
    if (await docs.isVisible()) {
      const pdfLinks = docs.locator('a[href$=".pdf"]');
      const pdfCount = await pdfLinks.count();
      if (pdfCount > 0) {
        ruContentFound = true;
        console.log(`‚úÖ ${mpn}: PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã (${pdfCount} —à—Ç.)`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const gallery = page.getByTestId('gallery');
    if (await gallery.isVisible()) {
      const images = gallery.locator('img');
      const imgCount = await images.count();
      if (imgCount > 0) {
        ruContentFound = true;
        console.log(`‚úÖ ${mpn}: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã (${imgCount} —à—Ç.)`);
      }
    }
    
    if (ruContentFound) {
      passedCount++;
      console.log(`‚úÖ ${mpn}: RU-–∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω`);
    } else {
      console.log(`‚ùå ${mpn}: RU-–∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—à–∏–±–æ–∫ –∫–æ–Ω—Å–æ–ª–∏
    const errors: string[] = [];
    page.on('console', (msg) => {
      if (msg.type() === 'error') errors.push(msg.text());
    });
    
    await page.waitForTimeout(1000);
    expect(errors, `Console errors for ${mpn}: ${errors.join('\\n')}`).toHaveLength(0);
  });
}

test('Smoke RU results: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–∞', async () => {
  const successRate = totalCount > 0 ? (passedCount / totalCount) * 100 : 0;
  const THRESHOLD = 8; // –ú–∏–Ω–∏–º—É–º 8 –∏–∑ 12 –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏
  
  console.log(`\\nüìä Smoke RU Results:`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${passedCount}/${totalCount} (${successRate.toFixed(1)}%)`);
  console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω–æ: ${totalCount - passedCount}/${totalCount}`);
  console.log(`üéØ –ü–æ—Ä–æ–≥: ${THRESHOLD}/${totalCount} (${(THRESHOLD/totalCount*100).toFixed(1)}%)`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É—Å–ø–µ—à–Ω–æ—Å—Ç—å >= –ø–æ—Ä–æ–≥–∞
  expect(passedCount).toBeGreaterThanOrEqual(THRESHOLD);
  
  console.log(`\\nüéØ Smoke RU: ${passedCount >= THRESHOLD ? 'PASS' : 'FAIL'} (—Ç—Ä–µ–±—É–µ—Ç—Å—è ‚â•${THRESHOLD})`);
});
